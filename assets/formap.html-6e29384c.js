import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as d,c as s,d as e,b as o,w as i,e as a,f as r}from"./app-27c1e3fb.js";const c={},u=r(`<h1 id="formap" tabindex="-1"><a class="header-anchor" href="#formap" aria-hidden="true">#</a> <code>formap</code></h1><blockquote><p>Iterate through a map or other collection of data</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>formap</code> is a generic tool for iterating through a map, table or other sequences of data similarly like a <code>foreach</code>. In fact <code>formap</code> can even be used on array too.</p><p>Unlike <code>foreach</code>, <code>formap</code>&#39;s default output is <code>str</code>, so each new line will be treated as a list item. This behaviour will differ if any additional flags are used with <code>foreach</code>, such as <code>--jmap</code>.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>formap</code> writes a list:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    &lt;stdin&gt; -&gt; foreach variable { code-block } -&gt; &lt;stdout&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>formap</code> writes to a buffered JSON map:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    &lt;stdin&gt; -&gt; formap --jmap key value { code-block (map key) } { code-block (map value) } -&gt; &lt;stdout&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>First of all lets assume the following dataset:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set json people={
    &quot;Tom&quot;: {
        &quot;Age&quot;: 32,
        &quot;Gender&quot;: &quot;Male&quot;
    },
    &quot;Dick&quot;: {
        &quot;Age&quot;: 43,
        &quot;Gender&quot;: &quot;Male&quot;
    },
    &quot;Sally&quot;: {
        &quot;Age&quot;: 54,
        &quot;Gender&quot;: &quot;Female&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can create human output from this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» $people -&gt; formap key value { out &quot;$key is $value[Age] years old&quot; }
Sally is 54 years old
Tom is 32 years old
Dick is 43 years old
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Please note that maps are intentionally unsorted so you cannot guarantee the order of the output produced even if the input has been superficially set in a specific order.</p></blockquote><p>With <code>--jmap</code> we can turn that structure into a new structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» $people -&gt; formap --jmap key value { $key } { $value[Age] }
{
    &quot;Dick&quot;: &quot;43&quot;,
    &quot;Sally&quot;: &quot;54&quot;,
    &quot;Tom&quot;: &quot;32&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flags" tabindex="-1"><a class="header-anchor" href="#flags" aria-hidden="true">#</a> Flags</h2><ul><li><code>--jmap</code> Write a <code>json</code> map to STDOUT instead of an array</li></ul><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>formap</code> can also work against arrays and tables as well. However <code>foreach</code> is a much better tool for ordered lists and tables can look a little funky when when there are more than 2 columns. In those instances you&#39;re better off using <code>[</code> (index) to specify columns and then <code>tabulate</code> for any data transformation.</p><h3 id="meta-values" tabindex="-1"><a class="header-anchor" href="#meta-values" aria-hidden="true">#</a> Meta values</h3><p>Meta values are a JSON object stored as the variable <code>$.</code>. The meta variable will get overwritten by any other block which invokes meta values. So if you wish to persist meta values across blocks you will need to reassign <code>$.</code>, eg</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%[1..3] -&gt; foreach {
    meta_parent = $.
    %[7..9] -&gt; foreach {
        out &quot;$(meta_parent.i): $.i&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following meta values are defined:</p><ul><li><code>i</code>: iteration number</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,28),m=e("code",null,"[",-1),h=e("code",null,"break",-1),v=e("code",null,"for",-1),p=e("code",null,"foreach",-1),b=e("code",null,"json",-1),f=e("code",null,"set",-1),g=e("code",null,"tabulate",-1),q=e("code",null,"while",-1);function x(_,y){const t=n("RouterLink");return d(),s("div",null,[u,e("ul",null,[e("li",null,[o(t,{to:"/commands/index2.html"},{default:i(()=>[m,a(" (index)")]),_:1}),a(": Outputs an element from an array, map or table")]),e("li",null,[o(t,{to:"/commands/break.html"},{default:i(()=>[h]),_:1}),a(": Terminate execution of a block within your processes scope")]),e("li",null,[o(t,{to:"/commands/for.html"},{default:i(()=>[v]),_:1}),a(": A more familiar iteration loop to existing developers")]),e("li",null,[o(t,{to:"/commands/foreach.html"},{default:i(()=>[p]),_:1}),a(": Iterate through an array")]),e("li",null,[o(t,{to:"/types/json.html"},{default:i(()=>[b]),_:1}),a(": JavaScript Object Notation (JSON)")]),e("li",null,[o(t,{to:"/commands/set.html"},{default:i(()=>[f]),_:1}),a(": Define a local variable and set it's value")]),e("li",null,[o(t,{to:"/commands/tabulate.html"},{default:i(()=>[g]),_:1}),a(": Table transformation tools")]),e("li",null,[o(t,{to:"/commands/while.html"},{default:i(()=>[q]),_:1}),a(": Loop until condition false")])])])}const j=l(c,[["render",x],["__file","formap.html.vue"]]);export{j as default};

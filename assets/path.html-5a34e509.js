import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c as s,d as e,b as i,w as c,e as a,f as l}from"./app-b92fd348.js";const n={},h=l('<h1 id="murex-shell-docs" tabindex="-1"><a class="header-anchor" href="#murex-shell-docs" aria-hidden="true">#</a> Murex Shell Docs</h1><h2 id="data-type-reference-path-string" tabindex="-1"><a class="header-anchor" href="#data-type-reference-path-string" aria-hidden="true">#</a> Data-Type Reference: <code>path</code> (string)</h2><blockquote><p>path data type</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This type is modelled closely on generic but is more tailored for textual (non-tabulated) data.</p><h2 id="supported-hooks" tabindex="-1"><a class="header-anchor" href="#supported-hooks" aria-hidden="true">#</a> Supported Hooks</h2><ul><li><code>Marshal()</code> Supported</li><li><code>ReadArray()</code> Treats each new directory as a new array element</li><li><code>ReadArrayWithType()</code> Treats each directory as a new array element, each array element is <code>str</code></li><li><code>ReadIndex()</code> Indexes treated as a path separated list</li><li><code>ReadMap()</code> Treats each new directory as a numbered map element</li><li><code>Unmarshal()</code> Supported</li><li><code>WriteArray()</code> Writes a new path, each array element as a directory</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',8),p=e("code",null,"str",-1);function u(m,f){const r=o("RouterLink");return d(),s("div",null,[h,e("ul",null,[e("li",null,[i(r,{to:"/types/str.html"},{default:c(()=>[p,a(" (string) ")]),_:1}),a(": string (primitive)")])])])}const x=t(n,[["render",u],["__file","path.html.vue"]]);export{x as default};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as l,d as e,b as r,w as n,e as o,f as s}from"./app-dd440c47.js";const c={},h=s(`<h1 id="and-logical-operator-parser-reference" tabindex="-1"><a class="header-anchor" href="#and-logical-operator-parser-reference" aria-hidden="true">#</a> And (<code>&amp;&amp;</code>) Logical Operator - Parser Reference</h1><blockquote><p>Continues next operation if previous operation passes</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>When in the <strong>normal</strong> run mode (see &quot;schedulers&quot; link below) this will only run the command on the right hand side if the command on the left hand side does not error. Neither STDOUT nor STDERR are piped.</p><p>This has no effect in <code>try</code> nor <code>trypipe</code> run modes because they automatically apply stricter error handling.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Second command runs because the first command doesn&#39;t error:</p><pre><code>» out: one &amp;&amp; out: two
one
two
</code></pre><p>Second command does not run because the first command produces an error:</p><pre><code>» err: one &amp;&amp; out: two
one
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>This is equivelent to a <code>try</code> block:</p><pre><code>try {
    err: one
    out: two
}
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,14),p=e("code",null,"?",-1),u=e("code",null,"err",-1),m=e("code",null,"out",-1),f=e("code",null,"try",-1),_=e("code",null,"trypipe",-1);function x(b,g){const t=i("RouterLink");return d(),l("div",null,[h,e("ul",null,[e("li",null,[r(t,{to:"/user-guide/pipeline.html"},{default:n(()=>[o("Pipeline")]),_:1}),o(': Overview of what a "pipeline" is')]),e("li",null,[r(t,{to:"/parser/pipe-err.html"},{default:n(()=>[o("STDERR Pipe ("),p,o(") Token")]),_:1}),o(": Pipes STDERR from the left hand command to STDIN of the right hand command")]),e("li",null,[r(t,{to:"/user-guide/schedulers.html"},{default:n(()=>[o("Schedulers")]),_:1}),o(": Overview of the different schedulers (or 'run modes') in Murex")]),e("li",null,[r(t,{to:"/commands/err.html"},{default:n(()=>[u]),_:1}),o(": Print a line to the STDERR")]),e("li",null,[r(t,{to:"/commands/out.html"},{default:n(()=>[m]),_:1}),o(": Print a string to the STDOUT with a trailing new line character")]),e("li",null,[r(t,{to:"/commands/try.html"},{default:n(()=>[f]),_:1}),o(": Handles errors inside a block of code")]),e("li",null,[r(t,{to:"/commands/trypipe.html"},{default:n(()=>[_]),_:1}),o(": Checks state of each function in a pipeline and exits block on error")])])])}const k=a(c,[["render",x],["__file","logical-and.html.vue"]]);export{k as default};

import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as l,d as e,b as t,w as n,e as o,f as c}from"./app-cd07b44a.js";const s={},h=c(`<h1 id="or-logical-operator-parser-reference" tabindex="-1"><a class="header-anchor" href="#or-logical-operator-parser-reference" aria-hidden="true">#</a> Or (<code>||</code>) Logical Operator - Parser Reference</h1><blockquote><p>Continues next operation only if previous operation fails</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>When in the <strong>normal</strong> run mode (see &quot;schedulers&quot; link below) this will only run the command on the right hand side if the command on the left hand side does not error. Neither STDOUT nor STDERR are piped.</p><p>This has no effect in <code>try</code> nor <code>trypipe</code> run modes because they automatically apply stricter error handling. See detail below.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Second command does not run because the first command doesn&#39;t error:</p><pre><code>» out: one || out: two
one
</code></pre><p>Second command does run because the first command produces an error:</p><pre><code>» err: one || out: two
one
two
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>This has no effect in <code>try</code> nor <code>trypipe</code> run modes because they automatically apply stricter error handling. You can achive a similiar behavior in <code>try</code> with the following code:</p><pre><code>try {
    err: one -&gt; !if { out: two }
}
</code></pre><p>There is no workaround for <code>trypipe</code>.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,15),u=e("code",null,"?",-1),p=e("code",null,"err",-1),m=e("code",null,"out",-1),f=e("code",null,"try",-1),_=e("code",null,"trypipe",-1);function y(b,g){const r=i("RouterLink");return d(),l("div",null,[h,e("ul",null,[e("li",null,[t(r,{to:"/user-guide/pipeline.html"},{default:n(()=>[o("Pipeline")]),_:1}),o(': Overview of what a "pipeline" is')]),e("li",null,[t(r,{to:"/parser/pipe-err.html"},{default:n(()=>[o("STDERR Pipe ("),u,o(") Token")]),_:1}),o(": Pipes STDERR from the left hand command to STDIN of the right hand command")]),e("li",null,[t(r,{to:"/user-guide/schedulers.html"},{default:n(()=>[o("Schedulers")]),_:1}),o(": Overview of the different schedulers (or 'run modes') in Murex")]),e("li",null,[t(r,{to:"/commands/err.html"},{default:n(()=>[p]),_:1}),o(": Print a line to the STDERR")]),e("li",null,[t(r,{to:"/commands/out.html"},{default:n(()=>[m]),_:1}),o(": Print a string to the STDOUT with a trailing new line character")]),e("li",null,[t(r,{to:"/commands/try.html"},{default:n(()=>[f]),_:1}),o(": Handles errors inside a block of code")]),e("li",null,[t(r,{to:"/commands/trypipe.html"},{default:n(()=>[_]),_:1}),o(": Checks state of each function in a pipeline and exits block on error")])])])}const T=a(s,[["render",y],["__file","logical-or.html.vue"]]);export{T as default};

import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as i,d as t,b as o,w as n,e,f as d}from"./app-97fd9f14.js";const c={},u=d(`<h1 id="single-quote-token-parser-reference" tabindex="-1"><a class="header-anchor" href="#single-quote-token-parser-reference" aria-hidden="true">#</a> Single Quote (<code>&#39;</code>) Token - Parser Reference</h1><blockquote><p>Initiates or terminates a string (variables not expanded)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Single quote is used to initiate and terminate strict strings where variables cannot be expanded.</p><p>Commands can also be quoted using single quotes (eg where a command might contain a space character in it&#39;s name)</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» set: example=&#39;World!&#39;

» out: &#39;Hello $example&#39;
Hello $example
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>Quotes can also work over multiple lines</p><pre><code>» out: &#39;foo
» bar&#39;
foo
bar
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,11),h=t("code",null,"@",-1),_=t("code",null,"%(",-1),p=t("code",null,")",-1),m=t("code",null,"{",-1),f=t("code",null,"}",-1),b=t("code",null,'"',-1),x=t("code",null,"$",-1),g=t("code",null,"~",-1),k=t("code",null,"(",-1),v=t("code",null,"out",-1),T=t("code",null,"set",-1);function q(w,S){const a=r("RouterLink");return s(),i("div",null,[u,t("ul",null,[t("li",null,[o(a,{to:"/parser/array.html"},{default:n(()=>[e("Array ("),h,e(") Token")]),_:1}),e(": Expand values as an array")]),t("li",null,[o(a,{to:"/parser/brace-quote.html"},{default:n(()=>[e("Brace Quote ("),_,e(", "),p,e(") Tokens")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[o(a,{to:"/parser/curly-brace.html"},{default:n(()=>[e("Curly Brace ("),m,e(", "),f,e(") Tokens")]),_:1}),e(": Initiates or terminates a code block")]),t("li",null,[o(a,{to:"/parser/double-quote.html"},{default:n(()=>[e("Double Quote ("),b,e(") Token")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[o(a,{to:"/parser/string.html"},{default:n(()=>[e("String ("),x,e(") Token")]),_:1}),e(": Expand values as a string")]),t("li",null,[o(a,{to:"/parser/tilde.html"},{default:n(()=>[e("Tilde ("),g,e(") Token")]),_:1}),e(": Home directory path variable")]),t("li",null,[o(a,{to:"/commands/brace-quote.html"},{default:n(()=>[k,e(" (brace quote)")]),_:1}),e(": Write a string to the STDOUT without new line")]),t("li",null,[o(a,{to:"/commands/out.html"},{default:n(()=>[v]),_:1}),e(": Print a string to the STDOUT with a trailing new line character")]),t("li",null,[o(a,{to:"/commands/set.html"},{default:n(()=>[T]),_:1}),e(": Define a local variable and set it's value")])])])}const B=l(c,[["render",q],["__file","single-quote.html.vue"]]);export{B as default};

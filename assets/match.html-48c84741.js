import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as i,a as e,d as o,w as d,b as t,e as l}from"./app-66ffa3c3.js";const c={},h=l(`<h1 id="match-command-reference" tabindex="-1"><a class="header-anchor" href="#match-command-reference" aria-hidden="true">#</a> <code>match</code> - Command Reference</h1><blockquote><p>Match an exact value in an array</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>match</code> takes input from STDIN and returns any array items / lines which contain an exact match of the parameters supplied.</p><p>When multiple parameters are supplied they are concatenated into the search string and white space delimited. eg all three of the below are the same:</p><pre><code>match &quot;a b c&quot;
match a\\sb\\sc
match a b c
match a    b    c
</code></pre><p>If you want to return everything except the search string then use \`!match</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Match every occurrence of search string</p><pre><code>\`&lt;stdin&gt;\` -&gt; match search string -&gt; \`&lt;stdout&gt;\`
</code></pre><p>Match everything except search string</p><pre><code>\`&lt;stdin&gt;\` -&gt; !match search string -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Match <strong>Wed</strong></p><pre><code>» ja: [Monday..Friday] -&gt; match Wed
[
    &quot;Wednesday&quot;
]
</code></pre><p>Match everything except <strong>Wed</strong></p><pre><code>» ja: [Monday..Friday] -&gt; !match Wed
[
    &quot;Monday&quot;,
    &quot;Tuesday&quot;,
    &quot;Thursday&quot;,
    &quot;Friday&quot;
]
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>match</code> is data-type aware so will work against lists or arrays of whichever Murex data-type is passed to it via STDIN and return the output in the same data-type.</p><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>match</code></li><li><code>!match</code></li><li><code>list.string</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,22),u=e("code",null,"2darray",-1),m=e("code",null,"a",-1),p=e("code",null,"append",-1),_=e("code",null,"count",-1),y=e("code",null,"ja",-1),f=e("code",null,"jsplit",-1),g=e("code",null,"map",-1),x=e("code",null,"msort",-1),b=e("code",null,"prefix",-1),q=e("code",null,"prepend",-1),w=e("code",null,"pretty",-1),k=e("code",null,"regexp",-1),v=e("code",null,"suffix",-1),S=e("code",null,"ta",-1);function N(M,j){const a=r("RouterLink");return s(),i("div",null,[h,e("ul",null,[e("li",null,[o(a,{to:"/guide/commands/2darray.html"},{default:d(()=>[u]),_:1}),t(": Create a 2D JSON array from multiple input sources")]),e("li",null,[o(a,{to:"/guide/commands/a.html"},{default:d(()=>[m,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array or list")]),e("li",null,[o(a,{to:"/guide/commands/append.html"},{default:d(()=>[p]),_:1}),t(": Add data to the end of an array")]),e("li",null,[o(a,{to:"/guide/commands/count.html"},{default:d(()=>[_]),_:1}),t(": Count items in a map, list or array")]),e("li",null,[o(a,{to:"/guide/commands/ja.html"},{default:d(()=>[y,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[o(a,{to:"/guide/commands/jsplit.html"},{default:d(()=>[f]),_:1}),t(": Splits STDIN into a JSON array based on a regex parameter")]),e("li",null,[o(a,{to:"/guide/commands/map.html"},{default:d(()=>[g]),_:1}),t(": Creates a map from two data sources")]),e("li",null,[o(a,{to:"/guide/commands/msort.html"},{default:d(()=>[x]),_:1}),t(": Sorts an array - data type agnostic")]),e("li",null,[o(a,{to:"/guide/commands/prefix.html"},{default:d(()=>[b]),_:1}),t(": Prefix a string to every item in a list")]),e("li",null,[o(a,{to:"/guide/commands/prepend.html"},{default:d(()=>[q]),_:1}),t(": Add data to the start of an array")]),e("li",null,[o(a,{to:"/guide/commands/pretty.html"},{default:d(()=>[w]),_:1}),t(": Prettifies JSON to make it human readable")]),e("li",null,[o(a,{to:"/guide/commands/regexp.html"},{default:d(()=>[k]),_:1}),t(": Regexp tools for arrays / lists of strings")]),e("li",null,[o(a,{to:"/guide/commands/suffix.html"},{default:d(()=>[v]),_:1}),t(": Prefix a string to every item in a list")]),e("li",null,[o(a,{to:"/guide/commands/ta.html"},{default:d(()=>[S,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array of a user defined data-type")])])])}const D=n(c,[["render",N],["__file","match.html.vue"]]);export{D as default};

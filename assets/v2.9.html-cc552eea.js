import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as a,a as e,d as l,w as n,b as o,e as d}from"./app-2457b42e.js";const c={},u=d('<h1 id="what-s-new-in-murex-v2-9-change-log" tabindex="-1"><a class="header-anchor" href="#what-s-new-in-murex-v2-9-change-log" aria-hidden="true">#</a> What&#39;s new in murex v2.9 - Change Log</h1><p>This release focuses on testing and REPL usability improvements but also includes updates several new run modes to make error handling easier in larger scripts.</p><p>Breaking Changes:</p><ul><li>None</li></ul><p>Features:</p><ul><li><p><code>&gt;&gt;</code> redirect (append to file) operator added. This is just syntactic sugar for <code>-&gt; &gt;&gt;</code>. To redirect and overwrite/truncate a file use <code>|&gt;</code> rather than <code>&gt;</code></p></li><li><p>Support for automatic globbing in the commandline. This has to be enabled via <code>config: set shell auto-glob true</code> and you will get prompted for each glob. Any globs inside blocks will be ignored and this only works on the interactive prompt (ie not in scripts or background processes) -- these limitations are not a bug but by design</p></li><li><p>Dynamic autocomplete suggestions are now cached for 5 seconds by default. This cache can be changed via the <strong>CacheTTL</strong> directive in <code>autocomplete</code></p></li><li><p>Additional scoping for <code>try</code> and <code>trypipe</code>. You can define the scope as being an entire function or a module. If set for an entire module then any functions, autocompletions, etc inside that module will inherit that <code>try</code> or <code>trypipe</code> mode automatically. These are set via the new builtin <code>runmode</code></p></li><li><p>New reserved variable <code>$PWD</code> (this was just a global variable previously)</p></li><li><p>Additional flags added to range, <code>@[</code></p></li><li><p>New builtin, <code>man-get-flags</code>. This exposes Murex&#39;s internal man page parser to the command line scripts</p></li><li><p>Binaries now produced for ARM64 Windows</p></li></ul><p>Minor Changes:</p><ul><li><p>The order in which namespaces are looked up has been altered since <code>private</code>s should be resolved before <code>function</code>s</p></li><li><p>Updated autocomplete for homebrew, <code>brew</code></p></li><li><p>New autocomplete for AWS CLI, <code>aws</code></p></li><li><p>New autocomplete for yarn, <code>yarn</code></p></li><li><p>Murex unit tests should report progressively rather than everything upon completion</p></li><li><p>Minimum recommended version of Go has been raised to 1.15. This is due to some bugs in dependencies when running tests against v1.13 and v1.14. Murex will technically compile and work on them but it not worth my time debugging why the CircleCI tests fail for those versions given their age</p></li><li><p>Vendor directory removed. This isn&#39;t really needed now support is focused on newer versions of Go</p></li><li><p>Website: New 404 error</p></li><li><p>Website: search bar added</p></li><li><p>The start of a massive push towards upping the test coverage</p></li><li><p>Lots of improvements to the docs</p></li></ul><p>Bug Fixes:</p><ul><li>FileRef module string for functions forked from the REPL changed to <code>murex/shell</code> to bring it inline with the naming convention of other modules</li></ul><hr><p>Published: 15.07.2022 at 20:35</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',13),h=e("code",null,">>",-1),p=e("br",null,null,-1),m=e("br",null,null,-1),f=e("br",null,null,-1),_=e("code",null,">>",-1),g=e("br",null,null,-1),b=e("code",null,">",-1),v=e("br",null,null,-1),w=e("code",null,"[",-1),y=e("br",null,null,-1),x=e("code",null,"autocomplete",-1),k=e("br",null,null,-1),T=e("code",null,"config",-1),N=e("br",null,null,-1),S=e("code",null,"function",-1),C=e("br",null,null,-1),M=e("code",null,"murex-docs",-1),D=e("br",null,null,-1),A=e("code",null,"private",-1),L=e("br",null,null,-1),R=e("code",null,"runmode",-1),W=e("br",null,null,-1),B=e("code",null,"try",-1),I=e("br",null,null,-1),V=e("code",null,"trypipe",-1),P=e("br",null,null,-1);function E(F,O){const t=s("RouterLink");return r(),a("div",null,[u,e("ul",null,[e("li",null,[l(t,{to:"/parser/pipe-append.html"},{default:n(()=>[o("Append Pipe ("),h,o(") Token")]),_:1}),o(":"),p,o(" Redirects STDOUT to a file and append its contents")]),e("li",null,[l(t,{to:"/user-guide/reserved-vars.html"},{default:n(()=>[o("Reserved Variables")]),_:1}),o(":"),m,o(" Special variables reserved by Murex")]),e("li",null,[l(t,{to:"/user-guide/schedulers.html"},{default:n(()=>[o("Schedulers")]),_:1}),o(":"),f,o(" Overview of the different schedulers (or 'run modes') in Murex")]),e("li",null,[l(t,{to:"/commands/greater-than-greater-than.html"},{default:n(()=>[_,o(" (append file)")]),_:1}),o(":"),g,o(" Writes STDIN to disk - appending contents if file already exists")]),e("li",null,[l(t,{to:"/commands/greater-than.html"},{default:n(()=>[b,o(" (truncate file)")]),_:1}),o(":"),v,o(" Writes STDIN to disk - overwriting contents if file already exists")]),e("li",null,[l(t,{to:"/commands/range.html"},{default:n(()=>[w,o(" (range) ")]),_:1}),o(":"),y,o(" Outputs a ranged subset of data from STDIN")]),e("li",null,[l(t,{to:"/commands/autocomplete.html"},{default:n(()=>[x]),_:1}),o(":"),k,o(" Set definitions for tab-completion in the command line")]),e("li",null,[l(t,{to:"/commands/config.html"},{default:n(()=>[T]),_:1}),o(":"),N,o(" Query or define Murex runtime settings")]),e("li",null,[l(t,{to:"/commands/function.html"},{default:n(()=>[S]),_:1}),o(":"),C,o(" Define a function block")]),e("li",null,[l(t,{to:"/commands/murex-docs.html"},{default:n(()=>[M]),_:1}),o(":"),D,o(" Displays the man pages for Murex builtins")]),e("li",null,[l(t,{to:"/commands/private.html"},{default:n(()=>[A]),_:1}),o(":"),L,o(" Define a private function block")]),e("li",null,[l(t,{to:"/commands/runmode.html"},{default:n(()=>[R]),_:1}),o(":"),W,o(" Alter the scheduler's behaviour at higher scoping level")]),e("li",null,[l(t,{to:"/commands/try.html"},{default:n(()=>[B]),_:1}),o(":"),I,o(" Handles errors inside a block of code")]),e("li",null,[l(t,{to:"/commands/trypipe.html"},{default:n(()=>[V]),_:1}),o(":"),P,o(" Checks state of each function in a pipeline and exits block on error")])])])}const U=i(c,[["render",E],["__file","v2.9.html.vue"]]);export{U as default};

import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,d as a,e,b as t,w as i,f as s}from"./app-dd440c47.js";const u={},h=s('<h1 id="language-tour" tabindex="-1"><a class="header-anchor" href="#language-tour" aria-hidden="true">#</a> Language Tour</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Murex is a typed shell. By this we mean it still passes byte streams along POSIX pipes (and thus will work with all your existing command line tools) but in addition will add annotations to describe the type of data that is being written and read. This allows Murex to expand upon your command line tools with some really interesting and advanced features not available in traditional shells.</p><blockquote><p>POSIX is a set of underlying standards that Linux, macOS and various other operating systems support. Most typed shells do not work well with existing commands whereas Murex does.</p></blockquote><h3 id="read–eval–print-loop" tabindex="-1"><a class="header-anchor" href="#read–eval–print-loop" aria-hidden="true">#</a> Read–Eval–Print Loop</h3>',5),m=a("h3",{id:"barewords",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#barewords","aria-hidden":"true"},"#"),e(" Barewords")],-1),p=s(`<p>Murex also makes heavy use of barewords and so that places requirements on the choice of syntax we can use.</p><h3 id="expressions-and-statements" tabindex="-1"><a class="header-anchor" href="#expressions-and-statements" aria-hidden="true">#</a> Expressions and Statements</h3><p>An <strong>expression</strong> is an evaluation, operation or assignment, for example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» 6 &gt; 5
» fruit = %[ apples oranges bananas ]
» 5 + 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Expressions are type sensitive</p></blockquote><p>Whereas a <strong>statement</strong> is a shell command to execute:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» echo &quot;Hello Murex&quot;
» kill 1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>All values in a statement are treated as strings</p></blockquote><p>Due to the expectation of shell commands supporting bareword parameters, expressions have to be parsed differently to statements. Thus Murex first parses a command line to see if it is a valid expression, and if it is not, it then assumes it is an statement and parses it as such.</p><p>This allow expressions and statements to be used interchangeably in a pipeline:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» 5 + 5 | grep 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="functions-and-methods" tabindex="-1"><a class="header-anchor" href="#functions-and-methods" aria-hidden="true">#</a> Functions and Methods</h3><p>A <strong>function</strong> is command that doesn&#39;t take data from STDIN whereas a <strong>method</strong> is any command that does.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;Hello Murex&quot; | grep &quot;Murex&quot;
^ a function         ^ a method
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In practical terms, functions and methods are executed in exactly the same way however some builtins might behave differently depending on whether values are passed via STDIN or as parameters. Thus you will often find references to functions and methods, and sometimes for the same command, within these documents.</p><h3 id="the-bang-prefix" tabindex="-1"><a class="header-anchor" href="#the-bang-prefix" aria-hidden="true">#</a> The Bang Prefix</h3><p>Some Murex builtins support a bang prefix. This prefix alters the behavior of those builtins to perform the conceptual opposite of their primary role.</p><p>For example, you could grep a file with <code>regexp &#39;m/(dogs|cats)/&#39;</code> but then you might want to exclude any matches by using <code>!regexp &#39;m/(dogs|cats)/&#39;</code> instead.</p><p>The details for each supported bang prefix will be in the documents for their respective builtin.</p><h2 id="rosetta-stone" tabindex="-1"><a class="header-anchor" href="#rosetta-stone" aria-hidden="true">#</a> Rosetta Stone</h2>`,20),v={href:"/rosetta",target:"_blank",rel:"noopener noreferrer"},b=a("h2",{id:"basic-syntax",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#basic-syntax","aria-hidden":"true"},"#"),e(" Basic Syntax")],-1),g=a("h3",{id:"quoting-strings",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#quoting-strings","aria-hidden":"true"},"#"),e(" Quoting Strings")],-1),x=a("blockquote",null,[a("p",null,"It is important to note that all strings in expressions are quoted whereas strings in statements can be barewords.")],-1),f=a("p",null,"There are three ways to quote a string in Murex:",-1),_=a("code",null,"'single quote'",-1),y=a("code",null,'"double quote"',-1),w=a("code",null,"%(brace quote)",-1),k=s(`<h3 id="code-comments" tabindex="-1"><a class="header-anchor" href="#code-comments" aria-hidden="true">#</a> Code Comments</h3><p>You can comment out a single like, or end of a line with <code>#</code>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># this is a comment

echo Hello Murex # this is also a comment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multiple lines or mid-line comments can be achieved with <code>/#</code> and <code>#/</code> tokens:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/#
This is
a multi-line
command
#/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...which can also be inlined...</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» echo Hello /# comment #/ Murex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(<code>/#</code> was chosen because it is similar to C-style comments however <code>/*</code> is a valid glob so Murex has substituted the asterisks with a hash symbol instead)</p><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>All variables can be defined as expressions and their data types are inferred:</p><ul><li><code>name = &quot;bob&quot;</code></li><li><code>age = 20 * 2</code></li><li><code>fruit = %[ apples oranges bananas ]</code></li></ul><p>If any variables are unset then reading from them will produce an error (under Murex&#39;s default behavior):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» echo $foobar
Error in \`echo\` (1,1): variable &#39;foobar&#39; does not exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-variables" tabindex="-1"><a class="header-anchor" href="#global-variables" aria-hidden="true">#</a> Global variables</h3><p>Global variables can be defined using the <code>$GLOBAL</code> namespace:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» $GLOBAL.foo = &quot;bar&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also force Murex to read the global assignment of <code>$foo</code> (ignoring any local assignments, should they exist) using the same syntax. eg:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» $GLOBAL.name = &quot;Tom&quot;
» out $name
Tom

» $name = &quot;Sally&quot;
» out $GLOBAL.name
Tom
» out $name
Sally
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="environmental-variables" tabindex="-1"><a class="header-anchor" href="#environmental-variables" aria-hidden="true">#</a> Environmental Variables</h3><p>Environmental Variables are like global variables except they are copied to any other programs that are launched from your shell session.</p><p>Environmental variables can be assigned using the <code>$ENV</code> namespace:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» $ENV.foo = &quot;bar&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),q=a("code",null,"export",-1),T=a("p",null,[e("Like with global variables, you can force Murex to read the environmental variable, bypassing and local or global variables of the same name, by also using the "),a("code",null,"$ENV"),e(" namespace prefix.")],-1),S=a("h3",{id:"type-inference",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#type-inference","aria-hidden":"true"},"#"),e(" Type Inference")],-1),M=a("code",null,"Content-Type",-1),I=s(`<h3 id="scalars" tabindex="-1"><a class="header-anchor" href="#scalars" aria-hidden="true">#</a> Scalars</h3><p>In traditional shells, variables are expanded in a way that results in spaces be parsed as different command parameters. This results in numerous problems where developers need to remember to enclose variables inside quotes.</p><p>Murex parses variables as tokens and expands them into the command line arguments intuitively. So, there are no more accidental bugs due to spaces in file names, or other such problems due to developers forgetting to quote variables. For example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» file = &quot;file name.txt&quot;
» touch $file # this would normally need to be quoted
» ls
&#39;file name.txt&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h3><p>Due to variables not being expanded into arrays by default, Murex supports an additional variable construct for arrays. These are <code>@</code> prefixed:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» files = %[file1.txt, file2.txt, file3.txt]
» touch @files
» ls
file1.txt  file2.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="piping-and-redirection" tabindex="-1"><a class="header-anchor" href="#piping-and-redirection" aria-hidden="true">#</a> Piping and Redirection</h2><h3 id="pipes" tabindex="-1"><a class="header-anchor" href="#pipes" aria-hidden="true">#</a> Pipes</h3><p>Murex supports multiple different pipe tokens. The main two being <code>|</code> and <code>-&gt;</code>.</p>`,10),$=a("code",null,"|",-1),E=a("code",null,"->",-1),B=s(`<p>In Murex scripts you can use <code>|</code> and <code>-&gt;</code> interchangeably, so there&#39;s no need to remember which commands are methods and which are not. The difference only applies in the interactive shell where <code>-&gt;</code> can be used with tab-autocompletion to display a shortlist of supported functions that can manipulate the data from the previous command. It&#39;s purely a clue to the parser to generate different autocompletion suggestions to help with your discovery of different commandline tools.</p><h3 id="redirection" tabindex="-1"><a class="header-anchor" href="#redirection" aria-hidden="true">#</a> Redirection</h3><p>Redirection of stdout and stderr is very different in Murex. There is no support for the <code>2&gt;</code> or <code>&amp;1</code> tokens, instead you name the pipe inside angle brackets, in the first parameter(s).</p><p><code>out</code> is that processes stdout (fd1), <code>err</code> is that processes stderr (fd2), and <code>null</code> is the equivalent of piping to <code>/dev/null</code>.</p><p>Any pipes prefixed by a bang means reading from that processes stderr.</p><p>So to redirect stderr to stdout you would use <code>&lt;!out&gt;</code>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>err &lt;!out&gt; &quot;error message redirected to stdout&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>And to redirect stdout to stderr you would use <code>&lt;err&gt;</code>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>out &lt;err&gt; &quot;output redirected to stderr&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Likewise you can redirect either stdout, or stderr to <code>/dev/null</code> via <code>&lt;null&gt;</code> or <code>&lt;!null&gt;</code> respectively.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>command &lt;!null&gt; # ignore stderr
command &lt;null&gt;  # ignore stdout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),L=s(`<h3 id="redirecting-to-files" tabindex="-1"><a class="header-anchor" href="#redirecting-to-files" aria-hidden="true">#</a> Redirecting to files</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>out &quot;message&quot; |&gt; truncate-file.txt
out &quot;message&quot; &gt;&gt; append-file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-conversion" tabindex="-1"><a class="header-anchor" href="#type-conversion" aria-hidden="true">#</a> Type Conversion</h3><p>Aside from annotating variables upon definition, you can also transform data along the pipeline.</p><h4 id="cast" tabindex="-1"><a class="header-anchor" href="#cast" aria-hidden="true">#</a> Cast</h4><p>Casting doesn&#39;t alter the data, it simply changes the meta-information about how that data should be read.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>out [1,2,3] | cast json | foreach { ... }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>There is also a little syntactic sugar to do the same:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>out [1,2,3] | :json: foreach { ... }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h4><p><code>format</code> takes the source data and reformats it into another data format:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» out [1,2,3] | :json: format yaml
- 1
- 2
- 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sub-shells" tabindex="-1"><a class="header-anchor" href="#sub-shells" aria-hidden="true">#</a> Sub-Shells</h2><p>There are two types of emendable sub-shells: strings and arrays.</p><ul><li><p>string sub-shells, <code>\${ command }</code>, take the results from the sub-shell and return it as a single parameter. This saves the need to encapsulate the shell inside quotation marks.</p></li><li><p>array sub-shells, <code>@{ command }</code>, take the results from the sub-shell and expand it as parameters.</p></li></ul><p><strong>Examples:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>touch \${ %[1,2,3] } # creates a file named &#39;[1,2,3]&#39;
touch @{ %[1,2,3] } # creates three files, named &#39;1&#39;, &#39;2&#39; and &#39;3&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The reason Murex breaks from the POSIX tradition of using backticks and parentheses is because Murex works on the principle that everything inside a curly bracket is considered a new block of code.</p><h2 id="filesystem-wildcards-globbing" tabindex="-1"><a class="header-anchor" href="#filesystem-wildcards-globbing" aria-hidden="true">#</a> Filesystem Wildcards (Globbing)</h2><p>While glob expansion is supported in the interactive shell, there isn&#39;t auto-expansion of globbing in shell scripts. This is to protect against accidental damage. Instead globbing is achieved via sub-shells using either:</p>`,20),A=a("code",null,"g",-1),R=a("code",null,"rx",-1),C=a("code",null,"f",-1),P=s(`<p><strong>Examples:</strong></p><p>All text files via globbing:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>g *.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>All text and markdown files via regexp:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rx &#39;\\.(txt|md)$&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>All directories via type matching:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>f +d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also chain them together, eg all directories named <code>*.txt</code>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>g *.txt | f +d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To use them in a shell script it could look something a like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm @{g *.txt | f +s}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(this deletes any symlinks called <code>*.txt</code>)</p><h2 id="brace-expansion" tabindex="-1"><a class="header-anchor" href="#brace-expansion" aria-hidden="true">#</a> Brace expansion</h2>`,13),G={href:"https://en.wikipedia.org/wiki/Bash_(Unix_shell)#Brace_expansion",target:"_blank",rel:"noopener noreferrer"},N=a("code",null,"a{1..5}b",-1),j=a("code",null,"a: a[1..5]b",-1),V=s(`<h2 id="executables" tabindex="-1"><a class="header-anchor" href="#executables" aria-hidden="true">#</a> Executables</h2><h3 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases" aria-hidden="true">#</a> Aliases</h3><p>You can create &quot;aliases&quot; to common commands to save you a few keystrokes. For example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alias gc=git commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),F=a("code",null,"alias",-1),H=a("h3",{id:"public-functions",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#public-functions","aria-hidden":"true"},"#"),e(" Public Functions")],-1),O=a("code",null,"function",-1),U=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function gc (message: str) {
    # shorthand for \`git commit\`

    git commit -m $message
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="private-functions" tabindex="-1"><a class="header-anchor" href="#private-functions" aria-hidden="true">#</a> Private Functions</h3>`,2),D=a("code",null,"private",-1),Y=a("a",{href:"#public-functions"},"public functions",-1),W=a("h3",{id:"external-executables",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#external-executables","aria-hidden":"true"},"#"),e(" External Executables")],-1),Q=a("code",null,"$PATH",-1),X=a("code",null,"exec",-1),z=a("code",null,"exec",-1),J=s(`<p>For example the two following statements are the same:</p><ol><li><code>exec uname</code></li><li><code>uname</code></li></ol><p>Thus for normal day to day usage, you shouldn&#39;t need to include <code>exec</code>.</p><h2 id="control-structures" tabindex="-1"><a class="header-anchor" href="#control-structures" aria-hidden="true">#</a> Control Structures</h2><h3 id="using-if-statements" tabindex="-1"><a class="header-anchor" href="#using-if-statements" aria-hidden="true">#</a> Using <code>if</code> Statements</h3><p><code>if</code> can be used in a number of different ways, the most common being:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if { true } then {
    # do something
} else {
    # do something else
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),K=a("code",null,"if",-1),Z=s(`<h3 id="using-switch-statements" tabindex="-1"><a class="header-anchor" href="#using-switch-statements" aria-hidden="true">#</a> Using <code>switch</code> Statements</h3><p>Because <code>if ... else if</code> chains are ugly, Murex supports <code>switch</code> statements:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>switch $USER {
    case &quot;Tom&quot;   { out: &quot;Hello Tom&quot; }
    case &quot;Dick&quot;  { out: &quot;Howdie Richard&quot; }
    case &quot;Sally&quot; { out: &quot;Nice to meet you&quot; }

    default {
        out: &quot;I don&#39;t know who you are&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ee=a("code",null,"switch",-1),ae=a("h3",{id:"using-foreach-loops",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#using-foreach-loops","aria-hidden":"true"},"#"),e(" Using "),a("code",null,"foreach"),e(" Loops")],-1),te=a("code",null,"foreach",-1),ne=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%[ apples bananas oranges ] | foreach fruit { out &quot;I like $fruit&quot; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="using-formap-loops" tabindex="-1"><a class="header-anchor" href="#using-formap-loops" aria-hidden="true">#</a> Using <code>formap</code> Loops</h3>`,2),ie=a("code",null,"formap",-1),se=a("code",null,"foreach",-1),de=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%{
    Bob:     {age: 10},
    Richard: {age: 20},
    Sally:   {age: 30}
} | formap name person {
    out &quot;$name is $person[age] years old&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stopping-execution" tabindex="-1"><a class="header-anchor" href="#stopping-execution" aria-hidden="true">#</a> Stopping Execution</h2><h3 id="the-continue-statement" tabindex="-1"><a class="header-anchor" href="#the-continue-statement" aria-hidden="true">#</a> The <code>continue</code> Statement</h3><p><code>continue</code> will terminate execution of an inner block in iteration loops like <code>foreach</code> and <code>formap</code>. Thus <em>continuing</em> the loop from the next iteration:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%[1..10] | foreach i {
    if { $i == 5 } then {
        continue foreach
        # ^ jump back to the next iteration
    }

    out $i
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),oe=a("code",null,"continue",-1),re=a("code",null,"continue",-1),le=s(`<h3 id="the-break-statement" tabindex="-1"><a class="header-anchor" href="#the-break-statement" aria-hidden="true">#</a> The <code>break</code> Statement</h3><p><code>break</code> will terminate execution of a block (eg <code>function</code>, <code>private</code>, <code>if</code>, <code>foreach</code>, etc):</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%[1..10] | foreach i {
    if { $i == 5 } then {
        break foreach
        # ^ exit foreach
    }

    out $i
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>break</code> requires a parameter to define while block to end. Thus <code>break</code> can be considered to exhibit the behavior of <em>return</em> as well as <em>break</em> in other languages:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function example {
    if { $USER == &quot;root&quot; } then {
        err &quot;Don&#39;t run this as root&quot;
        break example
    }

    # ... do something ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),ce=a("code",null,"break",-1),ue=a("h3",{id:"the-exit-statement",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#the-exit-statement","aria-hidden":"true"},"#"),e(" The "),a("code",null,"exit"),e(" Statement")],-1),he=a("code",null,"exit",-1),me=s('<h3 id="signal-sigint" tabindex="-1"><a class="header-anchor" href="#signal-sigint" aria-hidden="true">#</a> Signal: SIGINT</h3><p>This can be invoked by pressing <code>Ctrl</code> + <code>c</code>.</p><h3 id="signal-sigquit" tabindex="-1"><a class="header-anchor" href="#signal-sigquit" aria-hidden="true">#</a> Signal: SIGQUIT</h3><p>This can be invoked by pressing <code>Ctrl</code> + <code>\\</code></p><p>Sending SIGQUIT will terminate all running functions in the current Murex session. Which is a handy escape hatch if your shell code starts misbehaving.</p><h3 id="signal-sigtstp" tabindex="-1"><a class="header-anchor" href="#signal-sigtstp" aria-hidden="true">#</a> Signal: SIGTSTP</h3><p>This can be invoked by pressing <code>Ctrl</code> + <code>z</code></p>',7);function pe(ve,be){const n=o("RouterLink"),d=o("ExternalLinkIcon");return l(),c("div",null,[h,a("p",null,[e("If you want to learn more about the interactive shell then there is a dedicated document detailing "),t(n,{to:"/user-guide/interactive-shell.html"},{default:i(()=>[e("Murex's REPL features")]),_:1}),e(".")]),m,a("p",null,[e("Shells need to "),t(n,{to:"/blog/split_personalities.html"},{default:i(()=>[e("balance scripting with an efficient interactive terminal")]),_:1}),e(" interface. One of the most common approaches to solving that conflict between readability and terseness is to make heavy use of barewords. Barewords are ostensibly just instructions that are not quoted. In our case, command names and command parameters.")]),p,a("p",null,[e("If you already know Bash and looking for the equivalent syntax in Murex, then our "),a("a",v,[e("Rosetta Stone"),t(d)]),e(" reference will help you to translate your Bash code into Murex code.")]),b,g,x,f,a("ul",null,[a("li",null,[_,e(": use this for string literals ("),t(n,{to:"/parser/single-quote.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),a("li",null,[y,e(": use this for infixing variables ("),t(n,{to:"/parser/double-quote.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),a("li",null,[w,e(": use this for nesting quotes ("),t(n,{to:"/parser/brace-quote.html"},{default:i(()=>[e("read more")]),_:1}),e(")")])]),k,a("p",null,[e("as well as using the "),q,e(" statement like with traditional shells. ("),t(n,{to:"/commands/export.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),T,S,a("p",null,[e("In general, Murex will try to infer the data type of a variable or pipe. It can do this by checking the "),M,e(" HTTP header, the file name extension or just looking at how that data was constructed (when defined via expressions). However sometimes you may need to annotate your types. "),t(n,{to:"/commands/set.html#type-annotations"},{default:i(()=>[e("Read more")]),_:1})]),I,a("ul",null,[a("li",null,[a("p",null,[$,e(" works exactly the same as in any normal shell ("),t(n,{to:"/parser/pipe-posix.html"},{default:i(()=>[e("read more")]),_:1}),e(")")])]),a("li",null,[a("p",null,[E,e(" displays all of the supported methods (commands that support the output of the previous command). Think of it a little like object orientated programming where an object will have functions (methods) attached. ("),t(n,{to:"/parser/pipe-arrow.html"},{default:i(()=>[e("read more")]),_:1}),e(")")])])]),B,a("p",null,[e("You can also create your own pipes that are files, network connections, or any other custom data input or output endpoint. "),t(n,{to:"/user-guide/namedpipes.html"},{default:i(()=>[e("read more")]),_:1})]),L,a("ul",null,[a("li",null,[A,e(" - traditional globbing ("),t(n,{to:"/commands/g.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),a("li",null,[R,e(" - regexp matching in current directory only ("),t(n,{to:"/commands/rx.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),a("li",null,[C,e(" - file type matching ("),t(n,{to:"/commands/f.html"},{default:i(()=>[e("read more")]),_:1}),e(")")])]),P,a("p",null,[e("In "),a("a",G,[e("bash you can expand lists"),t(d)]),e(" using the following syntax: "),N,e(". In Murex, like with globbing, brace expansion is a function: "),j,e(" and supports a much wider range of lists that can be expanded. ("),t(n,{to:"/commands/a.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),V,a("p",null,[F,e(" behaves slightly differently to Bash. ("),t(n,{to:"/commands/alias.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),H,a("p",null,[e("You can create custom functions in Murex using "),O,e(". ("),t(n,{to:"/commands/function.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),U,a("p",null,[D,e(" functions are like "),Y,e(" except they are only available within their own modules namespace. ("),t(n,{to:"/commands/private.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),W,a("p",null,[e("External executables (including any programs located in "),Q,e(") are invoked via the "),X,e(" builtin ("),t(n,{to:"/commands/exec.html"},{default:i(()=>[e("read more")]),_:1}),e(") however if a command isn't an expression, alias, function nor builtin, then Murex assumes it is an external executable and automatically invokes "),z,e(".")]),J,a("p",null,[K,e(" supports a flexible variety of incarnation to solve different problems. ("),t(n,{to:"/commands/if.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),Z,a("p",null,[ee,e(" supports a flexible variety of different usages to solve different problems. ("),t(n,{to:"/commands/switch.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),ae,a("p",null,[te,e(" allows you to easily iterate through an array or list of any type: ("),t(n,{to:"/commands/foreach.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),ne,a("p",null,[ie,e(" loops are the equivalent of "),se,e(" but against map objects: ("),t(n,{to:"/commands/formap.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),de,a("p",null,[oe,e(" requires a parameter to define while block to iterate on. This means you can use "),re,e(" within nested loops and still have readable code. ("),t(n,{to:"/commands/continue.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),le,a("p",null,[ce,e(" cannot exit anything above it's callers scope. ("),t(n,{to:"/commands/break.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),ue,a("p",null,[e("Terminates Murex. "),he,e(" is not scope aware; if it is included in a function then the whole shell will still exist and not just that function. ("),t(n,{to:"/commands/exit.html"},{default:i(()=>[e("read more")]),_:1}),e(")")]),me])}const fe=r(u,[["render",pe],["__file","index.html.vue"]]);export{fe as default};

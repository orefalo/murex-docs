import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c as d,d as e,b as a,w as i,e as o,f as c}from"./app-d5c3dbe7.js";const r={},u=c('<h1 id="what-s-new-in-murex-v2-5-change-log" tabindex="-1"><a class="header-anchor" href="#what-s-new-in-murex-v2-5-change-log" aria-hidden="true">#</a> What&#39;s new in murex v2.5 - Change Log</h1><p>This release introduces a number of new builtins, fixes some regression bugs and supercharges the <code>select</code> optional builtin (which I plan to include into the core builtins for non-Windows users in the next release).</p><p>Features:</p><ul><li><p><code>alter</code> now supports <code>--sum</code> where structures are merged and numeric values are added together</p></li><li><p>New builtin <code>count</code>. This has deprecated <code>len</code> however <code>len</code> will stick around as an alias for backwards compatibility</p></li><li><p>New operators added to <code>let</code>: <code>+=</code>, <code>-=</code>, <code>/=</code>, <code>*=</code></p></li><li><p>New builtin <code>addheading</code> for adding headings to lists</p></li><li><p>Compiled profile will now always execute even if Murex flags set to ignore the modules/user profile. This is so that aliases like <code>len</code> get set and thus Murex can still move forward with changes to builtins but without breaking backwards compatibility</p></li><li><p><code>autocomplete</code> now passes <code>ISMETHOD</code> variable to dynamic completions so those dynamic completions are aware if a command requesting auto-completion suggestions is being invoked as a method (mid-pipeline) or function (start of a pipeline)</p></li><li><p>Index, <code>[</code>, now supports inlining element, <code>[[</code>, lookups. eg <code>[ a b [/map/c] ]</code></p></li><li><p>Dynamic auto-completions that include <code>@IncFiles</code> or <code>@IncDirs</code> will now automatically append files and/or directories to their auto-completion suggestions</p></li><li><p>New <code>autocomplete</code> directives: <code>IncExeAll</code> (like <code>IncExePath</code> but includes builtins, functions, aliases), <code>IncManPage</code> (include results from the <code>man</code> page parser -- usually suppressed when <code>autocomplete</code> config is set)</p></li><li><p>Disabled &#39;Loading default profile&#39; message -- this was always pretty redundant but now that the compiled profile is being loaded all the time (eg <code>murex -c &#39;command&#39;</code> or when called in a shebang), it&#39;s also now ugly too</p></li><li><p><code>select</code> now supports passing a file in the <strong>FROM</strong> syntax. eg <code>select * FROM ./example.csv</code>. The caveat here is this breaks currently auto-complete on column names</p></li><li><p><code>select</code> now supports multiple tables using either named pipes (eg <code>select * FROM &lt;table1&gt;, &lt;table2&gt;</code>) or variables (eg <code>select * FROM \\$table1, \\$table2</code>) passed in the <strong>FROM</strong> syntax. Variables should be escaped and you cannot mix and match between named pipes, file names nor variables. You can use any number of tables from 1 to 2^63-1 (64bit systems) or 1 to 2^31-1 (32bit systems). Which should be more than enough ðŸ˜‰</p></li><li><p><code>config</code> option for <code>select</code> to define default output data type where multiple tables are imported</p></li><li><p>Lots of new and updated documentation!</p></li></ul><p>Non-user facing changes (internal changes to the Murex code base):</p><ul><li><p><code>open</code> functions can now be called by other functions to take advantage of auto-typing and auto gunzip etc.</p></li><li><p><code>tmp.Close()</code> should return <code>err</code>. This isn&#39;t a bug but it might catch future bugs</p></li><li><p><code>LazyLogging</code> created to speed up writing tests against data structures</p></li><li><p><code>utils/List</code> package created to handle list / array / map functions. Also makes testing more complex routines easier</p></li></ul><p>Bug fixes:</p><ul><li><p>Regression bug fixed where <code>prepend</code> was invoking <code>append</code></p></li><li><p><code>streams.ReadCloser</code> not setting context</p></li><li><p><code>parameters.StringArray()</code> should copy values instead of a pointer to ensure the underlying parameters are immutable</p></li></ul><hr><p>Published: 12.02.2022 at 16:16</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',11),p=e("code",null,"<>",-1),m=e("code",null,"read-named-pipe",-1),h=e("code",null,"alter",-1),g=e("code",null,"autocomplete",-1),f=e("code",null,"config",-1),b=e("code",null,"count",-1),w=e("code",null,"let",-1),_=e("code",null,"pipe",-1),x=e("code",null,"select",-1),v=e("code",null,"set",-1);function y(k,M){const t=n("RouterLink");return s(),d("div",null,[u,e("ul",null,[e("li",null,[a(t,{to:"/user-guide/pipeline.html"},{default:i(()=>[o("Pipeline")]),_:1}),o(': Overview of what a "pipeline" is')]),e("li",null,[a(t,{to:"/commands/namedpipe.html"},{default:i(()=>[p,o(" / "),m]),_:1}),o(": Reads from a Murex named pipe")]),e("li",null,[a(t,{to:"/commands/alter.html"},{default:i(()=>[h]),_:1}),o(": Change a value within a structured data-type and pass that change along the pipeline without altering the original source input")]),e("li",null,[a(t,{to:"/commands/autocomplete.html"},{default:i(()=>[g]),_:1}),o(": Set definitions for tab-completion in the command line")]),e("li",null,[a(t,{to:"/commands/config.html"},{default:i(()=>[f]),_:1}),o(": Query or define Murex runtime settings")]),e("li",null,[a(t,{to:"/commands/count.html"},{default:i(()=>[b]),_:1}),o(": Count items in a map, list or array")]),e("li",null,[a(t,{to:"/commands/let.html"},{default:i(()=>[w]),_:1}),o(": Evaluate a mathematical function and assign to variable (deprecated)")]),e("li",null,[a(t,{to:"/commands/pipe.html"},{default:i(()=>[_]),_:1}),o(": Manage Murex named pipes")]),e("li",null,[a(t,{to:"/optional/select.html"},{default:i(()=>[x]),_:1}),o(": Inlining SQL into shell pipelines")]),e("li",null,[a(t,{to:"/commands/set.html"},{default:i(()=>[v]),_:1}),o(": Define a local variable and set it's value")])])])}const L=l(r,[["render",y],["__file","v2.5.html.vue"]]);export{L as default};

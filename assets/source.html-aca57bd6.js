import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as a,c as d,d as e,b as t,w as c,e as l,f as s}from"./app-97fd9f14.js";const u={},i=s(`<h1 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> <code>source</code></h1><blockquote><p>Import Murex code from another file of code block</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>source</code> imports code from another file or code block. It can be used as either an &quot;import&quot; / &quot;include&quot; directive (eg Python, Go, C, etc) or an &quot;eval&quot; (eg Python, Perl, etc).</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Execute source from STDIN</p><pre><code>\`&lt;stdin&gt;\` -&gt; source
</code></pre><p>Execute source from a file</p><pre><code>source: filename.mx
</code></pre><p>Execute a code block from parameter</p><pre><code>source: { code-block }
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Execute source from stdin:</p><pre><code>» tout: block { out: &quot;Hello, world!&quot; } -&gt; source
Hello, world!
</code></pre><p>Execute source from file:</p><pre><code>» tout: block { out: &quot;Hello, world!&quot; } |&gt; example.mx
» source: example.mx
Hello, world!
</code></pre><p>Execute a code block from parameter</p><pre><code>» source { out: &quot;Hello, world!&quot; }
Hello, world!
</code></pre><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>source</code></li><li><code>.</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,21),m=e("code",null,"args",-1),h=e("code",null,"autocomplete",-1),p=e("code",null,"config",-1),f=e("code",null,"exec",-1),_=e("code",null,"fexec",-1),x=e("code",null,"function",-1),b=e("code",null,"murex-parser",-1),g=e("code",null,"private",-1),k=e("code",null,"runtime",-1),q=e("code",null,"version",-1);function v(y,E){const o=r("RouterLink");return a(),d("div",null,[i,e("ul",null,[e("li",null,[t(o,{to:"/commands/args.html"},{default:c(()=>[m]),_:1}),l(": Command line flag parser for Murex shell scripting")]),e("li",null,[t(o,{to:"/commands/autocomplete.html"},{default:c(()=>[h]),_:1}),l(": Set definitions for tab-completion in the command line")]),e("li",null,[t(o,{to:"/commands/config.html"},{default:c(()=>[p]),_:1}),l(": Query or define Murex runtime settings")]),e("li",null,[t(o,{to:"/commands/exec.html"},{default:c(()=>[f]),_:1}),l(": Runs an executable")]),e("li",null,[t(o,{to:"/commands/fexec.html"},{default:c(()=>[_]),_:1}),l(": Execute a command or function, bypassing the usual order of precedence.")]),e("li",null,[t(o,{to:"/commands/function.html"},{default:c(()=>[x]),_:1}),l(": Define a function block")]),e("li",null,[t(o,{to:"/commands/murex-parser.html"},{default:c(()=>[b]),_:1}),l(": Runs the Murex parser against a block of code")]),e("li",null,[t(o,{to:"/commands/private.html"},{default:c(()=>[g]),_:1}),l(": Define a private function block")]),e("li",null,[t(o,{to:"/commands/runtime.html"},{default:c(()=>[k]),_:1}),l(": Returns runtime information on the internal state of Murex")]),e("li",null,[t(o,{to:"/commands/version.html"},{default:c(()=>[q]),_:1}),l(": Get Murex version")])])])}const M=n(u,[["render",v],["__file","source.html.vue"]]);export{M as default};

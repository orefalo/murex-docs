import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as d,c as r,a as e,d as t,w as n,b as o,e as c}from"./app-5c3d1e58.js";const s={},u=c(`<h1 id="function-command-reference" tabindex="-1"><a class="header-anchor" href="#function-command-reference" aria-hidden="true">#</a> <code>function</code> - Command Reference</h1><blockquote><p>Define a function block</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>function</code> defines a block of code as a function</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Define a function:</p><pre><code>function: name { code-block }
</code></pre><p>Define a function with variable names defined (<strong>default value</strong> and <strong>description</strong> are optional parameters):</p><pre><code>function: name (
    variable1: data-type [default-value] &quot;description&quot;,
    variable2: data-type [default-value] &quot;description&quot;
) {
    code-block
}
</code></pre><p>Undefine a function:</p><pre><code>!function: command
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» function hw { out &quot;Hello, World!&quot; }
» hw
Hello, World!

» !function hw
» hw
exec: &quot;hw&quot;: executable file not found in $PATH
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><h3 id="allowed-characters" tabindex="-1"><a class="header-anchor" href="#allowed-characters" aria-hidden="true">#</a> Allowed characters</h3><p>Function names can only include any characters apart from dollar (<code>$</code>). This is to prevent functions from overwriting variables (see the order of preference below).</p><h3 id="undefining-a-function" tabindex="-1"><a class="header-anchor" href="#undefining-a-function" aria-hidden="true">#</a> Undefining a function</h3><p>Like all other definable states in Murex, you can delete a function with the bang prefix (see the example above).</p><h3 id="using-parameterized-variable-names" tabindex="-1"><a class="header-anchor" href="#using-parameterized-variable-names" aria-hidden="true">#</a> Using parameterized variable names</h3><p>By default, if you wanted to query the parameters passed to a Murex function you would have to use either:</p><ul><li><p>the Bash syntax where of <code>$2</code> style numbered reserved variables,</p></li><li><p>and/or the Murex convention of <code>$PARAM</code> / <code>$ARGS</code> arrays (see <strong>reserved-vars</strong> document below),</p></li><li><p>and/or the older Murex convention of the <code>args</code> builtin for any flags.</p></li></ul><p>Starting from Murex <code>2.7.x</code> it&#39;s been possible to declare parameters from within the function declaration:</p><pre><code>function: name (
    variable1: data-type [default-value] &quot;description&quot;,
    variable2: data-type [default-value] &quot;description&quot;
) {
    code-block
}
</code></pre><h4 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h4><p>First off, the syntax doesn&#39;t have to follow exactly as above:</p><ul><li><p><strong>Variables</strong> shouldn&#39;t be prefixed with a dollar (<code>$</code>). This is a little like declaring variables via <code>set</code>, etc. However it should be followed by a colon (<code>:</code>) or comma (<code>,</code>). Normal rules apply with regards to allowed characters in variable names: limited to ASCII letters (upper and lower case), numbers, underscore (<code>_</code>), and hyphen (<code>-</code>). Unicode characters as variable names are not currently supported.</p></li><li><p><strong>data-type</strong> is the Murex data type. This is an optional field in version <code>2.8.x</code> (defaults to <code>str</code>) but is required in <code>2.7.x</code>.</p></li><li><p>The <strong>default value</strong> must be inside square brackets (<code>[...]</code>). Any value is allowed (including Unicode) <em>except</em> for carriage returns / new lines (<code>\\r</code>, <code>\\n</code>) and a closing square bracket (<code>]</code>) as the latter would indicate the end of this field. You cannot escape these characters either.</p><p>This field is optional.</p></li><li><p>The <strong>description</strong> must sit inside double quotes (<code>&quot;...&quot;</code>). Any value is allowed (including Unicode) <em>except</em> for carriage returns / new lines (<code>\\r</code>, <code>\\n</code>) and double quotes (<code>&quot;</code>) as the latter would indicate the end of this field. You cannot escape these characters either.</p><p>This field is optional.</p></li><li><p>You do not need a new line between each parameter, however you do need to separate them with a comma (like with JSON, there should not be a trailing comma at the end of the parameters). Thus the following is valid: <code>variable1: data-type, variable2: data-type</code>.</p></li></ul><h4 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h4><p>Any variable name you declare in your function declaration will be exposed in your function body as a local variable. For example:</p><pre><code>function: hello (name: str) {
    out: &quot;Hello $name, pleased to meet you.&quot;
}
</code></pre><p>If the function isn&#39;t called with the complete list of parameters and it is running in the foreground (ie not part of <code>autocomplete</code>, <code>event</code>, <code>bg</code>, etc) then you will be prompted for it&#39;s value. That could look something like this:</p><pre><code>» function: hello (name: str) {
»     out: &quot;Hello $name, pleased to meet you.&quot;
» }

» hello
Please enter a value for &#39;name&#39;: Bob
Hello Bob, pleased to meet you.
</code></pre><p>(in this example you typed <code>Bob</code> when prompted)</p><h4 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data-Types</h4><p>This is the Murex data type of the variable. From version <code>2.8.x</code> this field is optional and will default to <code>str</code> when omitted.</p><p>The advantage of setting this field is that values are type checked and the function will fail early if an incorrect value is presented. For example:</p><pre><code>» function: age (age: int) { out: &quot;$age is a great age.&quot; }

» age
Please enter a value for &#39;age&#39;: ten
Error in \`age\` ( 2,1): cannot convert parameter 1 &#39;ten&#39; to data type &#39;int&#39;

» age ten
Error in \`age\` ( 2,1): cannot convert parameter 1 &#39;ten&#39; to data type &#39;int&#39;
</code></pre><p>However it will try to automatically convert values if it can:</p><pre><code>» age 1.2
1 is a great age.
</code></pre><h4 id="default-values" tabindex="-1"><a class="header-anchor" href="#default-values" aria-hidden="true">#</a> Default values</h4><p>Default values are only relevant when functions are run interactively. It allows the user to press enter without inputting a value:</p><pre><code>» function: hello (name: str [John]) { out: &quot;Hello $name, pleased to meet you.&quot; }

» hello
Please enter a value for &#39;name&#39; [John]: 
Hello John, pleased to meet you.
</code></pre><p>Here no value was entered so <code>$name</code> defaulted to <code>John</code>.</p><p>Default values will not auto-populate when the function is run in the background. For example:</p><pre><code>» bg {hello}
Error in \`hello\` ( 2,2): cannot prompt for parameters when a function is run in the background: too few parameters
</code></pre><h4 id="description-1" tabindex="-1"><a class="header-anchor" href="#description-1" aria-hidden="true">#</a> Description</h4><p>Descriptions are only relevant when functions are run interactively. It allows you to define a more useful prompt should that function be called without sufficient parameters. For example:</p><pre><code>» function hello (name: str &quot;What is your name?&quot;) { out &quot;Hello $name&quot; }

» hello
What is your name?: Sally
Hello Sally
</code></pre><h3 id="order-of-precedence" tabindex="-1"><a class="header-anchor" href="#order-of-precedence" aria-hidden="true">#</a> Order of precedence</h3><p>There is an order of precedence for which commands are looked up:</p><ol><li><p><code>runmode</code>: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.</p></li><li><p><code>test</code> and <code>pipe</code> functions also alter the behavior of the compiler and thus are executed ahead of any scripts.</p></li><li><p>private functions - defined via <code>private</code>. Private&#39;s cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via <code>fexec</code>).</p></li><li><p>Aliases - defined via <code>alias</code>. All aliases are global.</p></li><li><p>Murex functions - defined via <code>function</code>. All functions are global.</p></li><li><p>Variables (dollar prefixed) which are declared via <code>global</code>, <code>set</code> or <code>let</code>. Also environmental variables too, declared via <code>export</code>.</p></li><li><p>globbing: however this only applies for commands executed in the interactive shell.</p></li><li><p>Murex builtins.</p></li><li><p>External executable files</p></li></ol><p>You can override this order of precedence via the <code>fexec</code> and <code>exec</code> builtins.</p><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>function</code></li><li><code>!function</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,54),h=e("code",null,"alias",-1),p=e("code",null,"args",-1),f=e("code",null,"break",-1),m=e("code",null,"exec",-1),b=e("code",null,"export",-1),v=e("code",null,"fexec",-1),g=e("code",null,"g",-1),x=e("code",null,"*.txt",-1),y=e("code",null,"global",-1),w=e("code",null,"let",-1),_=e("code",null,"method",-1),q=e("code",null,"private",-1),k=e("code",null,"set",-1),D=e("code",null,"source",-1),T=e("code",null,"version",-1);function A(M,H){const a=l("RouterLink");return d(),r("div",null,[u,e("ul",null,[e("li",null,[t(a,{to:"/guide/user-guide/reserved-vars.html"},{default:n(()=>[o("Reserved Variables")]),_:1}),o(": Special variables reserved by Murex")]),e("li",null,[t(a,{to:"/guide/commands/alias.html"},{default:n(()=>[h]),_:1}),o(": Create an alias for a command")]),e("li",null,[t(a,{to:"/guide/commands/args.html"},{default:n(()=>[p]),_:1}),o(": Command line flag parser for Murex shell scripting")]),e("li",null,[t(a,{to:"/guide/commands/break.html"},{default:n(()=>[f]),_:1}),o(": Terminate execution of a block within your processes scope")]),e("li",null,[t(a,{to:"/guide/commands/exec.html"},{default:n(()=>[m]),_:1}),o(": Runs an executable")]),e("li",null,[t(a,{to:"/guide/commands/export.html"},{default:n(()=>[b]),_:1}),o(": Define an environmental variable and set it's value")]),e("li",null,[t(a,{to:"/guide/commands/fexec.html"},{default:n(()=>[v]),_:1}),o(": Execute a command or function, bypassing the usual order of precedence.")]),e("li",null,[t(a,{to:"/guide/commands/g.html"},{default:n(()=>[g]),_:1}),o(": Glob pattern matching for file system objects (eg "),x,o(")")]),e("li",null,[t(a,{to:"/guide/commands/global.html"},{default:n(()=>[y]),_:1}),o(": Define a global variable and set it's value")]),e("li",null,[t(a,{to:"/guide/commands/let.html"},{default:n(()=>[w]),_:1}),o(": Evaluate a mathematical function and assign to variable (deprecated)")]),e("li",null,[t(a,{to:"/guide/commands/method.html"},{default:n(()=>[_]),_:1}),o(": Define a methods supported data-types")]),e("li",null,[t(a,{to:"/guide/commands/private.html"},{default:n(()=>[q]),_:1}),o(": Define a private function block")]),e("li",null,[t(a,{to:"/guide/commands/set.html"},{default:n(()=>[k]),_:1}),o(": Define a local variable and set it's value")]),e("li",null,[t(a,{to:"/guide/commands/source.html"},{default:n(()=>[D]),_:1}),o(": Import Murex code from another file of code block")]),e("li",null,[t(a,{to:"/guide/commands/version.html"},{default:n(()=>[T]),_:1}),o(": Get Murex version")])])])}const B=i(s,[["render",A],["__file","function.html.vue"]]);export{B as default};

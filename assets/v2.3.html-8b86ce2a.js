import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as d,a as e,b as t,d as o,w as i,e as a}from"./app-faa1692b.js";const h={},u=e("h1",{id:"what-s-new-in-murex-v2-3-change-log",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-s-new-in-murex-v2-3-change-log","aria-hidden":"true"},"#"),t(" What's new in murex v2.3 - Change Log")],-1),p=e("p",null,"This release includes significant changes to the interactive terminal",-1),m=e("p",null,[t("This release brings some major improvements to the discoverability of commands"),e("br"),t(" and their parameters in the interactive terminal.")],-1),f=e("h3",{id:"user-facing-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-facing-changes","aria-hidden":"true"},"#"),t(" User Facing Changes:")],-1),g=a("<li><p>New builtin: <code>method</code>. This is used to help turn some commands into a<br> &quot;method&quot;, similar in concept to object orientated development where the tab-<br> completer will return a list of other commands that are compatible with the<br> formers output data types. It&#39;s purely an autocompletion tool and has no<br> effect in shell scripts.</p></li><li><p>Autocompletion suggestions will differ based on what pipes are used. The idea<br> behind this is to improve the discoverability of commands. All tokens can<br> still be used to pipeline to any command type (like before). This rule only<br> affects autocomplete suggestions in the interactive prompt.</p><pre><code>- `|` will show all available aliases, functions, builtins and external\n  commands, as usual\n\n- `-&gt;` will default to showing only compatible commands defined in `method`\n  (see above), however if no methods are found then `-&gt;` will fall back to\n  suggesting all available aliases, functions, builtins and external commands,\n  like `|`.\n\nThe idea here is for `-&gt;` to surface commands that are commonly\nexpected to be pipelined together but without forcing the user to pause and\nremember which token exposes what commands. While `|` is still available for\nfamiliarity\n</code></pre></li><li><p>Autocompletion de-duplication now places hyphen-prefixed flags at the end of<br> the results when sorting. This helps bring more relevant flags forward, with<br> hyphen-prefixed flags still visible when users press <code>-</code></p></li>",3),_=e("br",null,null,-1),b={href:"https://github.com/lmorg/murex/issues/299",target:"_blank",rel:"noopener noreferrer"},w=e("pre",null,[e("code",null,"<pre><code>Â» exec: false\nError in `exec` (1,1): exit status 1</code></pre>\n")],-1),x=e("code",null,"Index()",-1),v=e("code",null,"[",-1),k=e("br",null,null,-1),y={href:"https://github.com/lmorg/murex/issues/316",target:"_blank",rel:"noopener noreferrer"},T=a("<li><p><code>runtime</code> was missing a few flags for reporting supported data types against<br> the newer APIs</p></li><li><p>Generic types (<code>*</code> / <code>generic</code>) to include two spaces between columns when<br> marshalled</p></li><li><p>Syntax highlighter colour tweaks -- no longer using background highlighting<br> because that looks weird and unreadable on some terminal colour schemes</p></li><li><p>Bug fixes to the fast parser</p></li>",4),N=e("code",null,"v2.2.1200",-1),I={href:"https://github.com/lmorg/murex/issues/362",target:"_blank",rel:"noopener noreferrer"},S=a('<h3 id="non-user-facing-maintenance-changes" tabindex="-1"><a class="header-anchor" href="#non-user-facing-maintenance-changes" aria-hidden="true">#</a> Non-User Facing / Maintenance Changes</h3><ul><li><p><code>hcl</code> and <code>bson</code> types now use <code>ReadArray</code> templates so their behavior should<br> mimic JSON and YAML</p></li><li><p>Fast parser is now aware of which pipe token (eg <code>|</code>, <code>-&gt;</code>, <code>=&gt;</code>, <code>?</code>) is used</p></li><li><p>Unit test concurrency fix</p></li><li><p>New tests written for the fast parser</p></li><li><p>Refactored code around hint text and completions to allow for a potential new<br> UI feature to be built in the future</p></li><li><p>Updated documentation</p></li></ul><hr><p>Published: 26.09.2021 at 11:33</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',5),A=e("code",null,"->",-1),P=e("br",null,null,-1),U=e("code",null,"|",-1),L=e("br",null,null,-1),B=e("code",null,"method",-1),C=e("br",null,null,-1),D=e("code",null,"runtime",-1),E=e("br",null,null,-1);function R(O,V){const s=l("ExternalLinkIcon"),n=l("RouterLink");return c(),d("div",null,[u,p,m,f,e("ul",null,[g,e("li",null,[e("p",null,[t("External commands return a error message if the exit status is non-zero"),_,t(" ("),e("a",b,[t("issue #299"),o(s)]),t(")")]),w]),e("li",null,[e("p",null,[x,t(" ("),v,t(") now returns a different data type from the root object if the"),k,t(" element is a string, integer, float64, boolean or nil ("),e("a",y,[t("issue #316"),o(s)]),t(")")])]),T,e("li",null,[e("p",null,[t("Bug fixes to readline merged from "),N,t(" ("),e("a",I,[t("issue #362"),o(s)]),t(")")])])]),S,e("ul",null,[e("li",null,[o(n,{to:"/parser/pipe-arrow.html"},{default:i(()=>[t("Arrow Pipe ("),A,t(") Token")]),_:1}),t(":"),P,t(" Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[o(n,{to:"/parser/pipe-posix.html"},{default:i(()=>[t("POSIX Pipe ("),U,t(") Token")]),_:1}),t(":"),L,t(" Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[o(n,{to:"/commands/method.html"},{default:i(()=>[B]),_:1}),t(":"),C,t(" Define a methods supported data-types")]),e("li",null,[o(n,{to:"/commands/runtime.html"},{default:i(()=>[D]),_:1}),t(":"),E,t(" Returns runtime information on the internal state of Murex")])])])}const M=r(h,[["render",R],["__file","v2.3.html.vue"]]);export{M as default};

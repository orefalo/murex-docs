import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as l,c as i,d as e,b as o,w as r,e as t,f as s}from"./app-dd440c47.js";const h={},c=s(`<h1 id="tread" tabindex="-1"><a class="header-anchor" href="#tread" aria-hidden="true">#</a> <code>tread</code></h1><blockquote><p><code>read</code> a line of input from the user and store as a user defined <em>typed</em> variable (deprecated)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>A readline function to allow a line of data inputted from the terminal and then store that as a typed variable.</p><p><strong>This builtin is now deprecated. Please use <code>read --datatype ...</code> instead</strong></p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>tread: data-type &quot;prompt&quot; var_name

&lt;stdin&gt; -&gt; tread: data-type var_name
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>tread: qs &quot;Please paste a URL: &quot; url
out: &quot;The query string values included were:&quot;
$url -&gt; format json

out: Please paste a URL: -&gt; tread: qs url
out: &quot;The query string values included were:&quot;
$url -&gt; format json
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>If <code>tread</code> is called as a method then the prompt string is taken from STDIN. Otherwise the prompt string will be the first parameter. However if no prompt string is given then <code>tread</code> will not write a prompt.</p><p>The last parameter will be the variable name to store the string read by <code>tread</code>. This variable cannot be prefixed by dollar, <code>$</code>, otherwise the shell will write the output of that variable as the last parameter rather than the name of the variable.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,13),u=e("code",null,"(",-1),m=e("code",null,"cast",-1),p=e("code",null,"err",-1),f=e("code",null,"format",-1),_=e("code",null,"out",-1),b=e("code",null,"pretty",-1),g=e("code",null,"read",-1),w=e("code",null,"read",-1),v=e("code",null,"tout",-1);function q(x,y){const a=d("RouterLink");return l(),i("div",null,[c,e("ul",null,[e("li",null,[o(a,{to:"/commands/brace-quote.html"},{default:r(()=>[u,t(" (brace quote)")]),_:1}),t(": Write a string to the STDOUT without new line")]),e("li",null,[o(a,{to:"/commands/cast.html"},{default:r(()=>[m]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[o(a,{to:"/commands/err.html"},{default:r(()=>[p]),_:1}),t(": Print a line to the STDERR")]),e("li",null,[o(a,{to:"/commands/format.html"},{default:r(()=>[f]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[o(a,{to:"/commands/out.html"},{default:r(()=>[_]),_:1}),t(": Print a string to the STDOUT with a trailing new line character")]),e("li",null,[o(a,{to:"/commands/pretty.html"},{default:r(()=>[b]),_:1}),t(": Prettifies JSON to make it human readable")]),e("li",null,[o(a,{to:"/commands/read.html"},{default:r(()=>[g]),_:1}),t(": "),w,t(" a line of input from the user and store as a variable")]),e("li",null,[o(a,{to:"/commands/tout.html"},{default:r(()=>[v]),_:1}),t(": Print a string to the STDOUT and set it's data-type")])])])}const S=n(h,[["render",q],["__file","tread.html.vue"]]);export{S as default};

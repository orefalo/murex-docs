import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as s,c as u,d as e,b as o,w as l,e as t,f as r}from"./app-4653c0b0.js";const c={},i=r(`<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> <code>map</code></h1><blockquote><p>Creates a map from two data sources</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This takes two parameters - which are code blocks - and combines them to output a key/value map in JSON.</p><p>The first block is the key and the second is the value.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>map { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>Â» map { tout: json ([&quot;key 1&quot;, &quot;key 2&quot;, &quot;key 3&quot;]) } { tout: json ([&quot;value 1&quot;, &quot;value 2&quot;, &quot;value 3&quot;]) }
{
    &quot;key 1&quot;: &quot;value 1&quot;,
    &quot;key 2&quot;: &quot;value 2&quot;,
    &quot;key 3&quot;: &quot;value 3&quot;
}
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,10),h=e("code",null,"[[",-1),m=e("code",null,"[",-1),p=e("code",null,"[",-1),_=e("code",null,"a",-1),f=e("code",null,"alter",-1),q=e("code",null,"append",-1),y=e("code",null,"count",-1),k=e("code",null,"ja",-1),b=e("code",null,"jsplit",-1),x=e("code",null,"prepend",-1);function g(v,w){const a=d("RouterLink");return s(),u("div",null,[i,e("ul",null,[e("li",null,[o(a,{to:"/commands/element.html"},{default:l(()=>[h,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[o(a,{to:"/commands/index2.html"},{default:l(()=>[m,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[o(a,{to:"/commands/range.html"},{default:l(()=>[p,t(" (range) ")]),_:1}),t(": Outputs a ranged subset of data from STDIN")]),e("li",null,[o(a,{to:"/commands/a.html"},{default:l(()=>[_,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array or list")]),e("li",null,[o(a,{to:"/commands/alter.html"},{default:l(()=>[f]),_:1}),t(": Change a value within a structured data-type and pass that change along the pipeline without altering the original source input")]),e("li",null,[o(a,{to:"/commands/append.html"},{default:l(()=>[q]),_:1}),t(": Add data to the end of an array")]),e("li",null,[o(a,{to:"/commands/count.html"},{default:l(()=>[y]),_:1}),t(": Count items in a map, list or array")]),e("li",null,[o(a,{to:"/commands/ja.html"},{default:l(()=>[k,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[o(a,{to:"/commands/jsplit.html"},{default:l(()=>[b]),_:1}),t(": Splits STDIN into a JSON array based on a regex parameter")]),e("li",null,[o(a,{to:"/commands/prepend.html"},{default:l(()=>[x]),_:1}),t(": Add data to the start of an array")])])])}const j=n(c,[["render",g],["__file","map.html.vue"]]);export{j as default};

import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as l,d as n,b as e,w as t,e as a,f as c}from"./app-0b7bba6d.js";const u={},r=c(`<h1 id="readmap-type" tabindex="-1"><a class="header-anchor" href="#readmap-type" aria-hidden="true">#</a> <code>ReadMap()</code> (type)</h1><blockquote><p>Treat data type as a key/value structure and read its contents</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This is a function you would write when programming a Murex data-type.</p><p>It&#39;s called by builtins to allow them to read data structures one key/value pair at a time.</p><p>The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Registering your <code>ReadMap()</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// To avoid confusion, this should only happen inside func init()</span>
stdio<span class="token punctuation">.</span><span class="token function">RegisterReadMap</span><span class="token punctuation">(</span><span class="token comment">/* your type name */</span><span class="token punctuation">,</span> <span class="token comment">/* your readMap func */</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Example <code>ReadMap()</code> function:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> json

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/lmorg/murex/config&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang/stdio&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang/types&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/utils/json&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">readMap</span><span class="token punctuation">(</span>read stdio<span class="token punctuation">.</span>Io<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">*</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>stdio<span class="token punctuation">.</span>Map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Create a marshaller function to pass to ArrayWithTypeTemplate</span>
	marshaller <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> read<span class="token punctuation">.</span><span class="token function">IsTTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> lang<span class="token punctuation">.</span><span class="token function">MapTemplate</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Json<span class="token punctuation">,</span> marshaller<span class="token punctuation">,</span> json<span class="token punctuation">.</span>Unmarshal<span class="token punctuation">,</span> read<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>There isn&#39;t (yet) a template read function for types to call. However that might follow in a future release of Murex.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ol><li><code>stdio.Io</code>: stream to read from (eg STDIN)</li><li><code>*config.Config</code>: scoped config (eg your data type might have configurable parsing rules)</li><li><code>func(key, value string, last bool)</code>: callback function: key and value of map plus boolean which is true if last element in row (eg reading from tables rather than key/values)</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,17),d=n("code",null,"ReadArray()",-1),m=n("code",null,"ReadArrayWithType()",-1),h=n("code",null,"ReadIndex()",-1),k=n("code",null,"[",-1),f=n("code",null,"ReadNotIndex()",-1),v=n("code",null,"![",-1),b=n("code",null,"WriteArray()",-1);function g(y,_){const s=i("RouterLink");return p(),l("div",null,[r,n("ul",null,[n("li",null,[e(s,{to:"/apis/ReadArray.html"},{default:t(()=>[a("apis/"),d,a(" (type)")]),_:1}),a(": Read from a data type one array element at a time")]),n("li",null,[e(s,{to:"/apis/ReadArrayWithType.html"},{default:t(()=>[a("apis/"),m,a(" (type)")]),_:1}),a(": Read from a data type one array element at a time and return the elements contents and data type")]),n("li",null,[e(s,{to:"/apis/ReadIndex.html"},{default:t(()=>[a("apis/"),h,a(" (type)")]),_:1}),a(": Data type handler for the index, "),k,a(", builtin")]),n("li",null,[e(s,{to:"/apis/ReadNotIndex.html"},{default:t(()=>[a("apis/"),f,a(" (type)")]),_:1}),a(": Data type handler for the bang-prefixed index, "),v,a(", builtin")]),n("li",null,[e(s,{to:"/apis/WriteArray.html"},{default:t(()=>[a("apis/"),b,a(" (type)")]),_:1}),a(": Write a data type, one array element at a time")])])])}const R=o(u,[["render",g],["__file","ReadMap.html.vue"]]);export{R as default};

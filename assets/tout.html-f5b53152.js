import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as i,c as s,a as e,d as o,w as n,b as t,e as u}from"./app-5c3d1e58.js";const l={},c=u(`<h1 id="tout-command-reference" tabindex="-1"><a class="header-anchor" href="#tout-command-reference" aria-hidden="true">#</a> <code>tout</code> - Command Reference</h1><blockquote><p>Print a string to the STDOUT and set it&#39;s data-type</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Write parameters to STDOUT without a trailing new line character. Cast the output&#39;s data-type to the value of the first parameter.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>tout: data-type &quot;string to write&quot; -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>Â» tout: json { &quot;Code&quot;: 404, &quot;Message&quot;: &quot;Page not found&quot; } -&gt; pretty
{
    &quot;Code&quot;: 404,
    &quot;Message&quot;: &quot;Page not found&quot;
}
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>tout</code> supports ANSI constants.</p><p>Unlike <code>out</code>, <code>tout</code> does not append a carriage return / line feed.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,12),h=e("code",null,"(",-1),m=e("code",null,"cast",-1),p=e("code",null,"err",-1),f=e("code",null,"format",-1),_=e("code",null,"out",-1),g=e("code",null,"pretty",-1);function q(x,b){const a=d("RouterLink");return i(),s("div",null,[c,e("ul",null,[e("li",null,[o(a,{to:"/guide/user-guide/ansi.html"},{default:n(()=>[t("ANSI Constants")]),_:1}),t(": Infixed constants that return ANSI escape sequences")]),e("li",null,[o(a,{to:"/guide/commands/brace-quote.html"},{default:n(()=>[h,t(" (brace quote)")]),_:1}),t(": Write a string to the STDOUT without new line")]),e("li",null,[o(a,{to:"/guide/commands/cast.html"},{default:n(()=>[m]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[o(a,{to:"/guide/commands/err.html"},{default:n(()=>[p]),_:1}),t(": Print a line to the STDERR")]),e("li",null,[o(a,{to:"/guide/commands/format.html"},{default:n(()=>[f]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[o(a,{to:"/guide/commands/out.html"},{default:n(()=>[_]),_:1}),t(": Print a string to the STDOUT with a trailing new line character")]),e("li",null,[o(a,{to:"/guide/commands/pretty.html"},{default:n(()=>[g]),_:1}),t(": Prettifies JSON to make it human readable")])])])}const T=r(l,[["render",q],["__file","tout.html.vue"]]);export{T as default};

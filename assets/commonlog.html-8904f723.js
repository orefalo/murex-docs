import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c,d as e,e as t,b as o,w as l,f as d}from"./app-4653c0b0.js";const h={},u=d('<h1 id="commonlog" tabindex="-1"><a class="header-anchor" href="#commonlog" aria-hidden="true">#</a> <code>commonlog</code></h1><blockquote><p>Apache httpd &quot;common&quot; log format</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Apache httpd supports a few different log formats. This Murex type is for parsing the &quot;common&quot; log format.</p><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>The code here is very rudimentary. If you have large log files or need more complex data querying then this data-type is probably not the right tool. Maybe try one of the following:</p>',6),m={href:"https://github.com/lmorg/firesword",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/lmorg/plasmasword",target:"_blank",rel:"noopener noreferrer"},_=d('<h2 id="supported-hooks" tabindex="-1"><a class="header-anchor" href="#supported-hooks" aria-hidden="true">#</a> Supported Hooks</h2><ul><li><code>Marshal()</code> Supported though no unmarshalling is currently supported</li><li><code>ReadArray()</code> Supported. Each line is considered an index (like with <code>str</code> data type)</li><li><code>ReadArrayWithType()</code> Supported. Each line is considered an index with <code>commonlog</code> data type</li><li><code>ReadIndex()</code> Entire log file is read and then the indexes are derived from there</li><li><code>ReadMap()</code> Not supported, currently a work in progress</li><li><code>ReadNotIndex()</code> Entire log file is read and then the indexes are derived from there</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',3),f=e("code",null,"*",-1),y=e("code",null,"Marshal()",-1),g=e("code",null,"ReadArray()",-1),x=e("code",null,"ReadIndex()",-1),b=e("code",null,"[",-1),R=e("code",null,"ReadMap()",-1),k=e("code",null,"ReadNotIndex()",-1),v=e("code",null,"![",-1),w=e("code",null,"Unmarshal()",-1),q=e("code",null,"[[",-1),I=e("code",null,"[",-1),A=e("code",null,"cast",-1),M=e("code",null,"format",-1),N=e("code",null,"str",-1);function E(S,T){const n=r("ExternalLinkIcon"),a=r("RouterLink");return s(),c("div",null,[u,e("ul",null,[e("li",null,[e("a",m,[t("Firesword"),o(n)]),t(" - for command line analysis")]),e("li",null,[e("a",p,[t("Plasmasword"),o(n)]),t(" - exports fields to an sqlite3 or mysql database")])]),_,e("ul",null,[e("li",null,[o(a,{to:"/types/generic.html"},{default:l(()=>[f,t(" (generic) ")]),_:1}),t(": generic (primitive)")]),e("li",null,[o(a,{to:"/apis/Marshal.html"},{default:l(()=>[y,t(" (type)")]),_:1}),t(": Converts structured memory into a structured file format (eg for stdio)")]),e("li",null,[o(a,{to:"/apis/ReadArray.html"},{default:l(()=>[g,t(" (type)")]),_:1}),t(": Read from a data type one array element at a time")]),e("li",null,[o(a,{to:"/apis/ReadIndex.html"},{default:l(()=>[x,t(" (type)")]),_:1}),t(": Data type handler for the index, "),b,t(", builtin")]),e("li",null,[o(a,{to:"/apis/ReadMap.html"},{default:l(()=>[R,t(" (type)")]),_:1}),t(": Treat data type as a key/value structure and read its contents")]),e("li",null,[o(a,{to:"/apis/ReadNotIndex.html"},{default:l(()=>[k,t(" (type)")]),_:1}),t(": Data type handler for the bang-prefixed index, "),v,t(", builtin")]),e("li",null,[o(a,{to:"/apis/Unmarshal.html"},{default:l(()=>[w,t(" (type)")]),_:1}),t(": Converts a structured file format into structured memory")]),e("li",null,[o(a,{to:"/commands/element.html"},{default:l(()=>[q,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[o(a,{to:"/commands/index2.html"},{default:l(()=>[I,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[o(a,{to:"/commands/cast.html"},{default:l(()=>[A]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[o(a,{to:"/commands/format.html"},{default:l(()=>[M]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[o(a,{to:"/types/str.html"},{default:l(()=>[N,t(" (string) ")]),_:1}),t(": string (primitive)")])])])}const L=i(h,[["render",E],["__file","commonlog.html.vue"]]);export{L as default};

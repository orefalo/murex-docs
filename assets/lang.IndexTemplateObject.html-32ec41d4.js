import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as u,d as s,b as t,w as p,e as n,f as i}from"./app-73035245.js";const l={},k=i(`<h1 id="lang-indextemplateobject-template-api" tabindex="-1"><a class="header-anchor" href="#lang-indextemplateobject-template-api" aria-hidden="true">#</a> <code>lang.IndexTemplateObject()</code> (template API)</h1><blockquote><p>Returns element(s) from a data structure</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This is a template API you can use for your custom data types.</p><p>It should only be called from <code>ReadIndex()</code> and <code>ReadNotIndex()</code> functions.</p><p>This function ensures consistency with the index, <code>[</code>, builtin when used with different Murex data types. Thus making indexing a data type agnostic capability.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Example calling <code>lang.IndexTemplateObject()</code> function:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> json

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/utils/json&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">index</span><span class="token punctuation">(</span>p <span class="token operator">*</span>lang<span class="token punctuation">.</span>Process<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> jInterface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	b<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>jInterface<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	marshaller <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>iface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>iface<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">IsTTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> lang<span class="token punctuation">.</span><span class="token function">IndexTemplateObject</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token operator">&amp;</span>jInterface<span class="token punctuation">,</span> marshaller<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><h3 id="api-source" tabindex="-1"><a class="header-anchor" href="#api-source" aria-hidden="true">#</a> API Source:</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> lang

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;errors&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
	<span class="token string">&quot;strings&quot;</span>

	<span class="token string">&quot;github.com/lmorg/murex/lang/types&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// IndexTemplateObject is a handy standard indexer you can use in your custom data types for structured object types.</span>
<span class="token comment">// The point of this is to minimize code rewriting and standardising the behavior of the indexer.</span>
<span class="token keyword">func</span> <span class="token function">IndexTemplateObject</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Process<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> object <span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> marshaller <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>IsNot <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">itoNot</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> params<span class="token punctuation">,</span> object<span class="token punctuation">,</span> marshaller<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">itoIndex</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> params<span class="token punctuation">,</span> object<span class="token punctuation">,</span> marshaller<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// itoIndex allow</span>
<span class="token keyword">func</span> <span class="token function">itoIndex</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Process<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> object <span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> marshaller <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> objArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">switch</span> v <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token comment">//i = len(v) + i</span>
				i <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key &#39;&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;&#39; greater than number of items in array&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
				objArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>objArray<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">switch</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Null<span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Boolean<span class="token punctuation">)</span>
					<span class="token keyword">if</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>TrueByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>FalseByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span>
				<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Number<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">FloatToString</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>String<span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">default</span><span class="token punctuation">:</span>
					b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> err
					<span class="token punctuation">}</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>

	<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		<span class="token keyword">var</span> <span class="token punctuation">(</span>
			obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			err <span class="token builtin">error</span>
		<span class="token punctuation">)</span>

		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;]&#39;</span> <span class="token punctuation">{</span>
				obj<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">ElementLookup</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> err
				<span class="token punctuation">}</span>

			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

				<span class="token keyword">switch</span> <span class="token punctuation">{</span>
				<span class="token keyword">case</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					obj <span class="token operator">=</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
				<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					obj <span class="token operator">=</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
				<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					obj <span class="token operator">=</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
				<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					obj <span class="token operator">=</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
				<span class="token keyword">default</span><span class="token punctuation">:</span>
					<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key &#39;&quot;</span> <span class="token operator">+</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&#39; not found&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
				objArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>objArray<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>

			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">switch</span> obj <span class="token operator">:=</span> obj<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Null<span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Boolean<span class="token punctuation">)</span>
					<span class="token keyword">if</span> obj <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>TrueByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>FalseByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span>
				<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Number<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">FloatToString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>String<span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">default</span><span class="token punctuation">:</span>
					b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> err
					<span class="token punctuation">}</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>

	<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			<span class="token comment">//if v[key] == nil {</span>
			<span class="token comment">//	return errors.New(&quot;key &#39;&quot; + key + &quot;&#39; not found.&quot;)</span>
			<span class="token comment">//}</span>
			<span class="token keyword">switch</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
			<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
				params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
				params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token keyword">case</span> v<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
				params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token comment">//case v[strings.ToTitle(params[i])] != nil:</span>
			<span class="token comment">//	params[i] = strings.ToTitle(params[i])</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;key &#39;&quot;</span> <span class="token operator">+</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&#39; not found&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
				objArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>objArray<span class="token punctuation">,</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">switch</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Null<span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Boolean<span class="token punctuation">)</span>
					<span class="token keyword">if</span> v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>TrueByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
						p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>FalseByte<span class="token punctuation">)</span>
					<span class="token punctuation">}</span>
				<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Integer<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>Number<span class="token punctuation">)</span>
					s <span class="token operator">:=</span> types<span class="token punctuation">.</span><span class="token function">FloatToString</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">SetDataType</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>String<span class="token punctuation">)</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token keyword">default</span><span class="token punctuation">:</span>
					b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> err
					<span class="token punctuation">}</span>
					p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;object cannot be indexed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// itoNot requires the indexes to be explicit</span>
<span class="token keyword">func</span> <span class="token function">itoNot</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Process<span class="token punctuation">,</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> object <span class="token operator">*</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> marshaller <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> v <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		<span class="token keyword">var</span> objArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
		not <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;cannot have negative keys in array&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;Key &#39;&quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot;&#39; greater than number of items in array&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>

			not<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>not<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				objArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>objArray<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//if len(objArray) &gt; 0 {</span>
		b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token comment">//}</span>
		<span class="token keyword">return</span> err

	<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		objMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		not <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			not<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token comment">//not[strings.ToTitle(key)] = true</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>not<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				objMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>s<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//if len(objMap) &gt; 0 {</span>
		b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objMap<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token comment">//}</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>

	<span class="token keyword">case</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>
		objMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
		not <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> params <span class="token punctuation">{</span>
			not<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			not<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
			<span class="token comment">//not[strings.ToTitle(key)] = true</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">for</span> iface <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
			s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>iface<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token operator">!</span>not<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token punctuation">{</span>
				objMap<span class="token punctuation">[</span>iface<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>iface<span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//if len(objMap) &gt; 0 {</span>
		b<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">marshaller</span><span class="token punctuation">(</span>objMap<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">Writeln</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token comment">//}</span>
		<span class="token keyword">return</span> err

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;object cannot be !indexed&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ol><li><code>*lang.Process</code>: Process&#39;s runtime state. Typically expressed as the variable <code>p</code></li><li><code>[]string</code>: slice of parameters used in <code>[</code> / <code>![</code></li><li><code>*interface{}</code>: a pointer to the data structure being indexed</li><li><code>func(interface{}) ([]byte, error)</code>: data type marshaller function</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,15),r=s("code",null,"ReadArray()",-1),d=s("code",null,"ReadArrayWithType()",-1),v=s("code",null,"ReadIndex()",-1),b=s("code",null,"[",-1),m=s("code",null,"ReadMap()",-1),y=s("code",null,"ReadNotIndex()",-1),f=s("code",null,"![",-1),w=s("code",null,"WriteArray()",-1),g=s("code",null,"[",-1),h=s("code",null,"lang.IndexTemplateTable()",-1);function T(j,S){const a=e("RouterLink");return c(),u("div",null,[k,s("ul",null,[s("li",null,[t(a,{to:"/apis/ReadArray.html"},{default:p(()=>[n("apis/"),r,n(" (type)")]),_:1}),n(": Read from a data type one array element at a time")]),s("li",null,[t(a,{to:"/apis/ReadArrayWithType.html"},{default:p(()=>[n("apis/"),d,n(" (type)")]),_:1}),n(": Read from a data type one array element at a time and return the elements contents and data type")]),s("li",null,[t(a,{to:"/apis/ReadIndex.html"},{default:p(()=>[n("apis/"),v,n(" (type)")]),_:1}),n(": Data type handler for the index, "),b,n(", builtin")]),s("li",null,[t(a,{to:"/apis/ReadMap.html"},{default:p(()=>[n("apis/"),m,n(" (type)")]),_:1}),n(": Treat data type as a key/value structure and read its contents")]),s("li",null,[t(a,{to:"/apis/ReadNotIndex.html"},{default:p(()=>[n("apis/"),y,n(" (type)")]),_:1}),n(": Data type handler for the bang-prefixed index, "),f,n(", builtin")]),s("li",null,[t(a,{to:"/apis/WriteArray.html"},{default:p(()=>[n("apis/"),w,n(" (type)")]),_:1}),n(": Write a data type, one array element at a time")]),s("li",null,[t(a,{to:"/commands/index2.html"},{default:p(()=>[n("commands/"),g,n(" (index)")]),_:1}),n(": Outputs an element from an array, map or table")]),s("li",null,[t(a,{to:"/apis/lang.IndexTemplateTable.html"},{default:p(()=>[n("apis/"),h,n(" (template API)")]),_:1}),n(": Returns element(s) from a table")])])])}const q=o(l,[["render",T],["__file","lang.IndexTemplateObject.html.vue"]]);export{q as default};

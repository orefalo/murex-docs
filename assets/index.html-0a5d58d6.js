import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as a,c as s,d as l,e,b as t,w as n,f as c}from"./app-4653c0b0.js";const i={},h=l("h1",{id:"rosetta-stone",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#rosetta-stone","aria-hidden":"true"},"#"),e(" Rosetta Stone")],-1),_=l("blockquote",null,[l("p",null,"A tabulated list of Bashism's and their equivalent Murex syntax")],-1),m=l("p",null,"Below is a reference table of common Bash code and how it could be written in Murex.",-1),b={href:"/tour",target:"_blank",rel:"noopener noreferrer"},f=l("thead",null,[l("tr",null,[l("th",null,"Description"),l("th",null,"Bash"),l("th",null,"Murex")])],-1),p=l("td",null,[l("code",null,'echo "Hello Bash"')],-1),g=l("td",null,[l("code",null,'out "Hello Murex"'),e(),l("br"),l("br"),l("code",null,'echo "Hello Murex"'),e(),l("a",{href:"#footnotes"},"[1]")],-1),y=l("td",null,[l("code",null,'echo "Hello Bash" >2')],-1),x=l("td",null,[l("code",null,'err "Hello Murex"')],-1),$=l("tr",null,[l("td",null,"Write to file (truncate)"),l("td",null,[l("code",null,'echo "Hello Bash" > hello.txt')]),l("td",null,[l("code",null,'echo "Hello Murex" |> hello.txt')])],-1),k=l("tr",null,[l("td",null,"Write to file (append)"),l("td",null,[l("code",null,'echo "Hello Bash" >> hello.txt')]),l("td",null,[l("code",null,'echo "Hello Murex" >> hello.txt')])],-1),v=l("td",null,[l("code",null,'echo "Hello Bash | grep Bash')],-1),S=l("td",null,[l("code",null,'echo "Hello Murex | grep Murex'),e(),l("br"),l("br"),e(),l("code",null,'out "Hello Murex" -> regexp m/Murex/')],-1),H=l("td",null,[l("code",null,"curl murex.rocks 2>&1 | less")],-1),w=l("td",null,[l("code",null,"curl murex.rocks ? less"),e(),l("br"),l("br"),e(),l("code",null,"curl <!out> murex.rocks | less")],-1),B=l("tr",null,[l("td",null,"Redirect output to STDERR"),l("td",null,[l("code",null,"uname -a >&2")]),l("td",null,[l("code",null,"uname <err> -a")])],-1),T=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),A=l("tr",null,[l("td",null,[l("strong",null,"Quoting strings")]),l("td"),l("td")],-1),M=l("td",null,[l("code",null,'echo "Hello $SHELL"')],-1),j=l("td",null,[l("code",null,'out "Hello $SHELL"')],-1),E=l("td",null,[l("code",null,"echo 'Hello' $SHELL")],-1),L=l("td",null,[l("code",null,"out 'Hello' $SHELL")],-1),O=l("td",null,[l("code",null,"echo 'Hello \\'Bob\\''")],-1),C=l("td",null,[l("code",null,"out %(Hello 'Bob')")],-1),R=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),N=l("tr",null,[l("td",null,[l("strong",null,"Process management")]),l("td"),l("td")],-1),I=l("td",null,[l("code",null,"$?")],-1),P=l("td",null,[l("code",null,"exitnum")],-1),q=l("td",null,[l("code",null,"command &")],-1),D=l("td",null,[l("code",null,"bg { command }")],-1),W=l("td",null,[l("code",null,"ps"),e(","),l("br"),l("code",null,"jobs"),e(","),l("br"),l("code",null,"bg pid"),e(","),l("br"),l("code",null,"fg pid")],-1),V=l("td",null,[l("code",null,"fid-list"),e(","),l("br"),l("code",null,"jobs"),e(","),l("br"),l("code",null,"bg fid"),e(","),l("br"),l("code",null,"fg fid")],-1),U=l("tr",null,[l("td",null,"Happy paths"),l("td",null,[l("code",null,"command && command")]),l("td",null,[l("code",null,"command && command"),e(),l("br"),l("br"),e(),l("code",null,"try {command; command}")])],-1),F=l("tr",null,[l("td",null,"Unhappy paths"),l("td",null,[l("code",null,"command || command")]),l("td",null,[l("code",null,"command || command"),e(),l("br"),l("br"),e(),l("code",null,"try {command}; catch {command}")])],-1),G=l("tr",null,[l("td",null,"Pipe fail"),l("td",null,[l("code",null,"set -o pipefail")]),l("td",null,[l("code",null,"runmode trypipe module"),e(),l("br"),l("br"),e(),l("code",null,"runmode trypipe function"),e(),l("br"),l("br"),e(),l("code",null,"trypipe { commands }")])],-1),J=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Q=l("tr",null,[l("td",null,[l("strong",null,"Comments")]),l("td"),l("td")],-1),z=l("tr",null,[l("td",null,"Single line"),l("td",null,[l("code",null,"# comment")]),l("td",null,[l("code",null,"# comment")])],-1),K=l("tr",null,[l("td",null,"Multiple lines"),l("td",null,[l("code",null,":<<EOC"),l("br"),l("code",null,"line 1"),l("br"),l("code",null,"line 2"),l("br"),l("code",null,"EOC")]),l("td",null,[l("code",null,"/#"),l("br"),l("code",null,"line 1"),l("br"),l("code",null,"line 2"),l("br"),l("code",null,"#/")])],-1),X=l("tr",null,[l("td",null,"Mid-line"),l("td",null,"n/a"),l("td",null,[e("eg "),l("code",null,"out foo/#comment#/bar")])],-1),Y=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Z=l("tr",null,[l("td",null,[l("strong",null,"File pattern matching"),l("br"),e('(also known as "wildcards")')]),l("td"),l("td")],-1),ll=l("td",null,[e("eg "),l("code",null,"ls *.txt")],-1),el=l("td",null,[e("eg "),l("code",null,"ls *.txt"),e(" (in the interactive terminal) "),l("br"),l("br"),e(),l("code",null,"g pattern"),e(),l("br"),l("br"),e(" eg "),l("code",null,"ls @{g *.txt}")],-1),tl=l("td",null,"n/a",-1),ol=l("td",null,[l("code",null,"rx pattern"),e(),l("br"),l("br"),e(" eg "),l("code",null,"ls @{rx '*\\\\.txt'}")],-1),nl=l("td",null,"n/a",-1),dl=l("td",null,[l("code",null,"f flags"),e(),l("br"),l("br"),e(" eg "),l("code",null,"f +s"),e(" (only return symlinks)")],-1),rl=l("tr",null,[l("td",null,"Chaining"),l("td",null,"n/a"),l("td",null,[e("eg "),l("code",null,"f +f | g *.txt | !g murex.*"),e(),l("br"),e(` (returns only files with the extension "txt" that aren't called "murex")`)])],-1),ul=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),al=l("tr",null,[l("td",null,[l("strong",null,"Expressions")]),l("td"),l("td")],-1),sl=l("tr",null,[l("td",null,"Assignment"),l("td",null,[l("code",null,"foobar = $((1 + 2 * 3))")]),l("td",null,[l("code",null,"foobar = 1 + 2 * 3"),e(),l("a",{href:"#footnotes"},"[2]")])],-1),cl=l("tr",null,[l("td",null,"Comparison, string"),l("td",null,[l("code",null,'[ "$(command)" == "value" ]')]),l("td",null,[l("code",null,'${command} == "value"'),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("a",{href:"#footnotes"},"[5]")])],-1),il=l("tr",null,[l("td",null,"Comparison, numeric"),l("td",null,[l("code",null,"[ $integer -eq 5 ]")]),l("td",null,[l("code",null,"$number == 5"),e(),l("a",{href:"#footnotes"},"[2]")])],-1),hl=l("tr",null,[l("td",null,"Arithmetic"),l("td",null,[l("code",null,"echo $(( 1+2*3 ))")]),l("td",null,[l("code",null,"1 + 2 * 3"),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("br"),l("br"),e(),l("code",null,"out ${1+2*3}"),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("a",{href:"#footnotes"},"[5]")])],-1),_l=l("tr",null,[l("td",null,"Supported data types"),l("td",null,[e("1. String,"),l("br"),e("2. Integer"),l("br"),e("(all variables are strings)")]),l("td",null,[e("1. String,"),l("br"),e("2. Integer,"),l("br"),e("3. Float (default number type),"),l("br"),e("4. Boolean"),l("br"),e("5. Array,"),l("br"),e("6. Object,"),l("br"),e("7. Null"),l("br"),e("(all variables can be treated as strings and/or their primitive)")])],-1),ml=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),bl=l("tr",null,[l("td",null,[l("strong",null,"Variables"),l("br")]),l("td"),l("td")],-1),fl=l("td",null,[l("code",null,'local foo="bar"')],-1),pl=l("td",null,[l("code",null,'$foo = "bar"'),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | set foo')],-1),gl=l("td",null,[l("code",null,'foo="bar"')],-1),yl=l("td",null,[l("code",null,'$GLOBAL.foo = "bar"'),e(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | global foo')],-1),xl=l("td",null,[l("code",null,'export foo="bar"')],-1),$l=l("td",null,[l("code",null,'export foo = "bar"'),e(),l("a",{href:"#footnotes"},"[1]"),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("a",{href:"#footnotes"},"[3]"),l("br"),l("br"),l("code",null,'$ENV.foo = "bar"'),e(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | export foo'),e(),l("a",{href:"#footnotes"},"[3]")],-1),kl=l("td",null,[l("code",null,'echo "$foobar"')],-1),vl=l("td",null,[l("code",null,"out $foobar"),e(),l("a",{href:"#footnotes"},"[5]"),l("br"),l("br"),l("code",null,"$foobar"),e(),l("br"),l("br"),e(" (variables don't need to be quoted in Murex)")],-1),Sl=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Hl=l("tr",null,[l("td",null,[l("strong",null,"Arrays"),l("br"),e("(eg arrays, lists)")]),l("td"),l("td")],-1),wl=l("tr",null,[l("td",null,"Creating an array"),l("td",null,[l("code",null,"array_name=(value1 value2 value3)")]),l("td",null,[l("code",null,"%[value1 value2 value3]"),e(),l("br"),l("br"),l("code",null,"%[value1, value2, value3]"),e(),l("br"),l("br"),e(" eg "),l("code",null,"array_name = %[1, 2, 3]"),e(", "),l("br"),e(" eg "),l("code",null,"%[hello world] | foreach { ... }")])],-1),Bl=l("tr",null,[l("td",null,"Accessing an array element"),l("td",null,[l("code",null,"${array_name[0]}")]),l("td",null,[l("code",null,"$array_name[0]"),e(" (immutable) "),l("br"),l("br"),l("code",null,"$array_name.0"),e(" (mutable) "),l("a",{href:"#footnotes"},"[5]"),e(),l("br"),l("br"),e(),l("code",null,"array | [0]")])],-1),Tl=l("tr",null,[l("td",null,"Printing multiple elements"),l("td",null,[l("code",null,"echo ${array_name[1]} ${array_name[0]}")]),l("td",null,[l("code",null,"@array_name[1 0]"),e(),l("br"),l("br"),e(),l("code",null,"array | [1 0]")])],-1),Al=l("tr",null,[l("td",null,"Printing a range of elements"),l("td",null,"n/a"),l("td",null,[l("code",null,"@array_name[1..3]"),e(),l("br"),l("br"),l("code",null,"array | [1..3]")])],-1),Ml=l("td",null,[l("code",null,"echo ${array_name[*]}")],-1),jl=l("td",null,[l("code",null,"@array_name")],-1),El=l("td",null,[l("code",null,"for item in array; do;"),l("br"),e("    "),l("code",null,"$item"),l("br"),l("code",null,"done;")],-1),Ll=l("td",null,[l("code",null,"array | foreach item { $item }"),e(),l("br"),l("br"),e(" eg "),l("code",null,'%[Tom Richard Sally] | foreach name { out "Hello $name" }')],-1),Ol=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Cl=l("tr",null,[l("td",null,[l("strong",null,"Objects"),l("br"),e("(eg JSON objects, maps, hashes, dictionaries)")]),l("td"),l("td")],-1),Rl=l("tr",null,[l("td",null,"Creating an object"),l("td",null,"n/a"),l("td",null,[l("code",null,"%{ key: value, array: [1, 2, 3] }"),e(),l("a",{href:"#footnotes"},"[2]"),e(),l("br"),l("br"),e(" eg "),l("code",null,"object_name = %{ key: val, arr: [1,3,3] }"),e(),l("br"),e(" eg "),l("code",null,"%{ a:1, b:2, c:3 } | formap { ... }")])],-1),Nl=l("tr",null,[l("td",null,"Accessing an element"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[key]"),e(" (immutable) "),l("br"),l("br"),e(),l("code",null,"$object_name.key"),e(),l("a",{href:"#footnotes"},"[5]"),e(" (mutable) "),l("br"),l("br"),e(),l("code",null,"object | [key]")])],-1),Il=l("tr",null,[l("td",null,"Printing multiple elements"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[key1 key2]"),e(),l("br"),l("br"),e(),l("code",null,"object | [key1 key2]")])],-1),Pl=l("tr",null,[l("td",null,"Accessing a nested element"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[[.path.to.element]]"),e(" (immutable) "),l("a",{href:"#footnotes"},"[4]"),l("br"),l("br"),e(),l("code",null,"$object_name.path.to.element"),e(" (mutable)"),l("br"),l("br"),e(),l("code",null,"object | [[.path.to.element]]"),e(),l("a",{href:"#footnotes"},"[4]"),l("br"),l("br")])],-1),ql=l("td",null,"n/a",-1),Dl=l("td",null,[l("code",null,"object | formap key value { $key; $value }"),e(),l("br"),l("br"),e(" eg "),l("code",null,'%{Bob: {age: 10}, Richard: {age: 20}, Sally: {age: 30} } | formap name person { out "$name is $person[age] years old" }')],-1),Wl=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Vl=l("tr",null,[l("td",null,[l("strong",null,"Sub-shells"),l("br")]),l("td"),l("td")],-1),Ul=l("tr",null,[l("td",null,"Sub-shell, string"),l("td",null,[l("code",null,'"$(commands)"'),e(),l("br"),l("br"),e(" eg "),l("code",null,'"echo $(echo "Hello world")"')]),l("td",null,[l("code",null,"${commands}"),e(),l("a",{href:"#footnotes"},"[5]"),e(),l("br"),l("br"),e(" eg "),l("code",null,"out ${out Hello world}")])],-1),Fl=l("tr",null,[l("td",null,"Sub-shell, arrays"),l("td",null,[l("code",null,"$(commands)"),e(),l("br"),l("br"),e(" eg "),l("code",null,"$(echo 1 2 3)")]),l("td",null,[l("code",null,"@{commands}"),e(),l("a",{href:"#footnotes"},"[5]"),e(),l("br"),l("br"),e(" eg "),l("code",null,"out @{ %[1,2,3] }")])],-1),Gl=c('<h3 id="footnotes" tabindex="-1"><a class="header-anchor" href="#footnotes" aria-hidden="true">#</a> Footnotes</h3><ol><li>Supported for compatibility with traditional shells like Bash.</li><li>Unlike Bash, whitespace (or the absence of) is optional.</li><li>Environmental variables can only be stored as a string. This is a limitation of current operating systems.</li><li>Path separator can be any 1 byte wide character, eg <code>/</code>. The path separator is defined by the first character in a path.</li><li>Murex uses <code>${}</code> for subshells and <code>$()</code> for variables, the reverse of what Bash and others use. The reason for this difference is because <code>{}</code> always denotes a code block and <code>()</code> denotes strings. So <code>${foobar}</code> makes more sense as a subshell executing the command <code>foobar</code>, while <code>$(foobar)</code> makes more sense as the variable <code>$foobar</code>.</li><li>When assigning a variable where the right hand side is an expression, eg <code>$foo = &quot;bar&quot;</code>, the dollar prefix is optional. The <code>set</code>, <code>global</code> and <code>export</code> keywords are considered deprecated.</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',3),Jl=l("code",null,"&&",-1),Ql=l("code",null,">>",-1),zl=l("code",null,"@",-1),Kl=l("code",null,"||",-1),Xl=l("code",null,"$",-1),Yl=l("code",null,">>",-1),Zl=l("code",null,">",-1),le=l("code",null,"[[",-1),ee=l("code",null,"[",-1),te=l("code",null,"[",-1),oe=l("code",null,"runmode",-1),ne=l("code",null,"try",-1),de=l("code",null,"trypipe",-1);function re(ue,ae){const r=d("ExternalLinkIcon"),o=d("RouterLink");return a(),s("div",null,[h,_,m,l("p",null,[e("It is also recommended that you read the language "),l("a",b,[e("tour"),t(r)]),e(" if you want to learn more about shell scripting in Murex.")]),l("table",null,[f,l("tbody",null,[l("tr",null,[l("td",null,[t(o,{to:"/commands/out.html"},{default:n(()=>[e("Write to STDOUT")]),_:1})]),p,g]),l("tr",null,[l("td",null,[t(o,{to:"/commands/err.html"},{default:n(()=>[e("Write to STDERR")]),_:1})]),y,x]),$,k,l("tr",null,[l("td",null,[t(o,{to:"/parser/pipe-arrow.html"},{default:n(()=>[e("Pipe commands")]),_:1})]),v,S]),l("tr",null,[l("td",null,[t(o,{to:"/parser/pipe-err.html"},{default:n(()=>[e("Redirect errors to STDOUT")]),_:1})]),H,w]),B,T,A,l("tr",null,[l("td",null,[t(o,{to:"/parser/double-quote.html"},{default:n(()=>[e("Infixing")]),_:1})]),M,j]),l("tr",null,[l("td",null,[t(o,{to:"/parser/single-quote.html"},{default:n(()=>[e("String literals")]),_:1})]),E,L]),l("tr",null,[l("td",null,[t(o,{to:"/parser/brace-quote.html"},{default:n(()=>[e("Nesting quotes")]),_:1})]),O,C]),R,N,l("tr",null,[l("td",null,[t(o,{to:"/commands/exitnum.html"},{default:n(()=>[e("Exit number")]),_:1})]),I,P]),l("tr",null,[l("td",null,[t(o,{to:"/commands/bg.html"},{default:n(()=>[e("Background jobs")]),_:1})]),q,D]),l("tr",null,[l("td",null,[t(o,{to:"/commands/fid-list.html"},{default:n(()=>[e("Job control")]),_:1})]),W,V]),U,F,G,J,Q,z,K,X,Y,Z,l("tr",null,[l("td",null,[t(o,{to:"/commands/g.html"},{default:n(()=>[e("Globbing")]),_:1})]),ll,el]),l("tr",null,[l("td",null,[t(o,{to:"/commands/rx.html"},{default:n(()=>[e("Regexp")]),_:1})]),tl,ol]),l("tr",null,[l("td",null,[t(o,{to:"/commands/f.html"},{default:n(()=>[e("File type matching")]),_:1})]),nl,dl]),rl,ul,al,sl,cl,il,hl,_l,ml,bl,l("tr",null,[l("td",null,[t(o,{to:"/commands/set.html"},{default:n(()=>[e("Assign a local variable")]),_:1})]),fl,pl]),l("tr",null,[l("td",null,[t(o,{to:"/commands/global.html"},{default:n(()=>[e("Assign a global variable")]),_:1})]),gl,yl]),l("tr",null,[l("td",null,[t(o,{to:"/commands/export.html"},{default:n(()=>[e("Assign an environmental variable")]),_:1})]),xl,$l]),l("tr",null,[l("td",null,[t(o,{to:"/parser/string.html"},{default:n(()=>[e("Printing a variable")]),_:1})]),kl,vl]),Sl,Hl,wl,Bl,Tl,Al,l("tr",null,[l("td",null,[t(o,{to:"/parser/array.html"},{default:n(()=>[e("Printing all elements")]),_:1})]),Ml,jl]),l("tr",null,[l("td",null,[t(o,{to:"/commands/foreach.html"},{default:n(()=>[e("Iterating through an array")]),_:1})]),El,Ll]),Ol,Cl,Rl,Nl,Il,Pl,l("tr",null,[l("td",null,[t(o,{to:"/commands/formap.html"},{default:n(()=>[e("Iterating through an map")]),_:1})]),ql,Dl]),Wl,Vl,Ul,Fl])]),Gl,l("ul",null,[l("li",null,[t(o,{to:"/parser/logical-and.html"},{default:n(()=>[e("And ("),Jl,e(") Logical Operator")]),_:1}),e(": Continues next operation if previous operation passes")]),l("li",null,[t(o,{to:"/parser/pipe-append.html"},{default:n(()=>[e("Append Pipe ("),Ql,e(") Token")]),_:1}),e(": Redirects STDOUT to a file and append its contents")]),l("li",null,[t(o,{to:"/parser/array.html"},{default:n(()=>[e("Array ("),zl,e(") Token")]),_:1}),e(": Expand values as an array")]),l("li",null,[t(o,{to:"/user-guide/namedpipes.html"},{default:n(()=>[e("Murex Named Pipes")]),_:1}),e(": A detailed breakdown of named pipes in Murex")]),l("li",null,[t(o,{to:"/parser/logical-or.html"},{default:n(()=>[e("Or ("),Kl,e(") Logical Operator")]),_:1}),e(": Continues next operation only if previous operation fails")]),l("li",null,[t(o,{to:"/parser/string.html"},{default:n(()=>[e("String ("),Xl,e(") Token")]),_:1}),e(": Expand values as a string")]),l("li",null,[t(o,{to:"/user-guide/terminal-keys.html"},{default:n(()=>[e("Terminal Hotkeys")]),_:1}),e(": A list of all the terminal hotkeys and their uses")]),l("li",null,[t(o,{to:"/commands/greater-than-greater-than.html"},{default:n(()=>[Yl,e(" (append file)")]),_:1}),e(": Writes STDIN to disk - appending contents if file already exists")]),l("li",null,[t(o,{to:"/commands/greater-than.html"},{default:n(()=>[Zl,e(" (truncate file)")]),_:1}),e(": Writes STDIN to disk - overwriting contents if file already exists")]),l("li",null,[t(o,{to:"/commands/element.html"},{default:n(()=>[le,e(" (element)")]),_:1}),e(": Outputs an element from a nested structure")]),l("li",null,[t(o,{to:"/commands/index2.html"},{default:n(()=>[ee,e(" (index)")]),_:1}),e(": Outputs an element from an array, map or table")]),l("li",null,[t(o,{to:"/commands/range.html"},{default:n(()=>[te,e(" (range) ")]),_:1}),e(": Outputs a ranged subset of data from STDIN")]),l("li",null,[t(o,{to:"/commands/runmode.html"},{default:n(()=>[oe]),_:1}),e(": Alter the scheduler's behaviour at higher scoping level")]),l("li",null,[t(o,{to:"/commands/try.html"},{default:n(()=>[ne]),_:1}),e(": Handles errors inside a block of code")]),l("li",null,[t(o,{to:"/commands/trypipe.html"},{default:n(()=>[de]),_:1}),e(": Checks state of each function in a pipeline and exits block on error")])])])}const ie=u(i,[["render",re],["__file","index.html.vue"]]);export{ie as default};

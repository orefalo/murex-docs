import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as t,c as s,d as e,b as l,w as i,e as a,f as c}from"./app-73035245.js";const r={},u=c(`<h1 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> <code>alias</code></h1><blockquote><p>Create an alias for a command</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>alias</code> defines an alias for global usage</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>alias: alias=command parameter parameter

!alias: command
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Because aliases are parsed into an array of parameters, you cannot put the entire alias within quotes. For example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># bad :(
» alias hw=&quot;out Hello, World!&quot;
» hw
exec: &quot;out\\\\ Hello,\\\\ World!&quot;: executable file not found in $PATH

# good :)
» alias hw=out &quot;Hello, World!&quot;
» hw
Hello, World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how only the command <code>out &quot;Hello, World!&quot;</code> is quoted in <code>alias</code> the same way you would have done if you&#39;d run that command &quot;naked&quot; in the command line? This is how <code>alias</code> expects it&#39;s parameters and where <code>alias</code> on Murex differs from <code>alias</code> in POSIX shells.</p><p>In some ways this makes <code>alias</code> a little less flexible than it might otherwise be. However the design of this is to keep <code>alias</code> focused on it&#39;s core objective. For any more advanced requirements you can use a <code>function</code> instead.</p><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><h3 id="allowed-characters" tabindex="-1"><a class="header-anchor" href="#allowed-characters" aria-hidden="true">#</a> Allowed characters</h3><p>Alias names can only include alpha-numeric characters, hyphen and underscore. The following regex is used to validate the <code>alias</code>&#39;s parameters: <code>^([-_a-zA-Z0-9]+)=(.*?)$</code></p><h3 id="undefining-an-alias" tabindex="-1"><a class="header-anchor" href="#undefining-an-alias" aria-hidden="true">#</a> Undefining an alias</h3><p>Like all other definable states in Murex, you can delete an alias with the bang prefix:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» alias hw=out &quot;Hello, World!&quot;
» hw
Hello, World!

» !alias hw
» hw
exec: &quot;hw&quot;: executable file not found in $PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order-of-preference" tabindex="-1"><a class="header-anchor" href="#order-of-preference" aria-hidden="true">#</a> Order of preference</h3><p>There is an order of precedence for which commands are looked up:</p><ol><li><p><code>runmode</code>: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.</p></li><li><p><code>test</code> and <code>pipe</code> functions also alter the behavior of the compiler and thus are executed ahead of any scripts.</p></li><li><p>private functions - defined via <code>private</code>. Private&#39;s cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via <code>fexec</code>).</p></li><li><p>Aliases - defined via <code>alias</code>. All aliases are global.</p></li><li><p>Murex functions - defined via <code>function</code>. All functions are global.</p></li><li><p>Variables (dollar prefixed) which are declared via <code>global</code>, <code>set</code> or <code>let</code>. Also environmental variables too, declared via <code>export</code>.</p></li><li><p>globbing: however this only applies for commands executed in the interactive shell.</p></li><li><p>Murex builtins.</p></li><li><p>External executable files</p></li></ol><p>You can override this order of precedence via the <code>fexec</code> and <code>exec</code> builtins.</p><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>alias</code></li><li><code>!alias</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,24),h=e("code",null,"exec",-1),m=e("code",null,"export",-1),p=e("code",null,"fexec",-1),f=e("code",null,"function",-1),v=e("code",null,"g",-1),b=e("code",null,"*.txt",-1),x=e("code",null,"global",-1),_=e("code",null,"let",-1),g=e("code",null,"method",-1),w=e("code",null,"private",-1),y=e("code",null,"set",-1),q=e("code",null,"source",-1);function k(A,H){const o=d("RouterLink");return t(),s("div",null,[u,e("ul",null,[e("li",null,[l(o,{to:"/commands/exec.html"},{default:i(()=>[h]),_:1}),a(": Runs an executable")]),e("li",null,[l(o,{to:"/commands/export.html"},{default:i(()=>[m]),_:1}),a(": Define an environmental variable and set it's value")]),e("li",null,[l(o,{to:"/commands/fexec.html"},{default:i(()=>[p]),_:1}),a(": Execute a command or function, bypassing the usual order of precedence.")]),e("li",null,[l(o,{to:"/commands/function.html"},{default:i(()=>[f]),_:1}),a(": Define a function block")]),e("li",null,[l(o,{to:"/commands/g.html"},{default:i(()=>[v]),_:1}),a(": Glob pattern matching for file system objects (eg "),b,a(")")]),e("li",null,[l(o,{to:"/commands/global.html"},{default:i(()=>[x]),_:1}),a(": Define a global variable and set it's value")]),e("li",null,[l(o,{to:"/commands/let.html"},{default:i(()=>[_]),_:1}),a(": Evaluate a mathematical function and assign to variable (deprecated)")]),e("li",null,[l(o,{to:"/commands/method.html"},{default:i(()=>[g]),_:1}),a(": Define a methods supported data-types")]),e("li",null,[l(o,{to:"/commands/private.html"},{default:i(()=>[w]),_:1}),a(": Define a private function block")]),e("li",null,[l(o,{to:"/commands/set.html"},{default:i(()=>[y]),_:1}),a(": Define a local variable and set it's value")]),e("li",null,[l(o,{to:"/commands/source.html"},{default:i(()=>[q]),_:1}),a(": Import Murex code from another file of code block")])])])}const T=n(r,[["render",k],["__file","alias.html.vue"]]);export{T as default};

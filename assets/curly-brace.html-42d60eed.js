import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as s,d as t,b as o,w as n,e,f as d}from"./app-93e10f13.js";const c={},u=d(`<h1 id="curly-brace-tokens" tabindex="-1"><a class="header-anchor" href="#curly-brace-tokens" aria-hidden="true">#</a> Curly Brace (<code>{</code>, <code>}</code>) Tokens</h1><blockquote><p>Initiates or terminates a code block</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Curly braces are used to denote the start and end of a code block. Like with the single quotation marks (<code>&#39;</code>), any code inside a curly brace is not parsed. Also unlike any other quotation tokens, the curly brace is included as part of the parsed string.</p><pre><code>» out: {example}
{example}
</code></pre><p>Also like the brace quote (<code>(</code>, <code>)</code>), the curly brace character is only recognized as a curly brace token if it is the start of a parameter.</p><p>Curly braces are also used for other fields besides code blocks. For example inlining JSON.</p><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><h3 id="multiline-blocks" tabindex="-1"><a class="header-anchor" href="#multiline-blocks" aria-hidden="true">#</a> Multiline Blocks</h3><p>Curly braces can work over multiple lines</p><pre><code>» out: {foo
» bar}
{foo
bar}
</code></pre><h3 id="code-golfing" tabindex="-1"><a class="header-anchor" href="#code-golfing" aria-hidden="true">#</a> Code Golfing</h3><p>Curly braces can be used to terminate the parsing of the command name / start the parsing of the first parameter however each new parameter would still need to be separated by whitespace:</p><pre><code># Valid
if{true} {out: &quot;Yipee&quot;}

# Invalid
if{true}{out: &quot;Yipee&quot;}
</code></pre><h3 id="ansi-constants" tabindex="-1"><a class="header-anchor" href="#ansi-constants" aria-hidden="true">#</a> ANSI Constants</h3><p>Some builtins (like <code>out</code>) also support infixing using the curly brace. eg</p><pre><code>out: &quot;{GREEN}PASSED{RESET}&quot;
</code></pre><p>This is a separate layer of parsing and happens at the parameter level for specific builtins which opt to support ANSI constants. See the ANSI Constant user guide (link below) for more information on supporting builtins and which constants are available.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,19),h=t("code",null,"@",-1),p=t("code",null,"%(",-1),m=t("code",null,")",-1),f=t("code",null,'"',-1),_=t("code",null,"'",-1),b=t("code",null,"$",-1),k=t("code",null,"~",-1),g=t("code",null,"(",-1),y=t("code",null,"err",-1),x=t("code",null,"out",-1),S=t("code",null,"set",-1),v=t("code",null,"tout",-1);function T(q,w){const a=l("RouterLink");return i(),s("div",null,[u,t("ul",null,[t("li",null,[o(a,{to:"/user-guide/ansi.html"},{default:n(()=>[e("ANSI Constants")]),_:1}),e(": Infixed constants that return ANSI escape sequences")]),t("li",null,[o(a,{to:"/parser/array.html"},{default:n(()=>[e("Array ("),h,e(") Token")]),_:1}),e(": Expand values as an array")]),t("li",null,[o(a,{to:"/parser/brace-quote.html"},{default:n(()=>[e("Brace Quote ("),p,e(", "),m,e(") Tokens")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[o(a,{to:"/user-guide/code-block.html"},{default:n(()=>[e("Code Block Parsing")]),_:1}),e(": Overview of how code blocks are parsed")]),t("li",null,[o(a,{to:"/parser/double-quote.html"},{default:n(()=>[e("Double Quote ("),f,e(") Token")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[o(a,{to:"/parser/single-quote.html"},{default:n(()=>[e("Single Quote ("),_,e(") Token")]),_:1}),e(": Initiates or terminates a string (variables not expanded)")]),t("li",null,[o(a,{to:"/parser/string.html"},{default:n(()=>[e("String ("),b,e(") Token")]),_:1}),e(": Expand values as a string")]),t("li",null,[o(a,{to:"/parser/tilde.html"},{default:n(()=>[e("Tilde ("),k,e(") Token")]),_:1}),e(": Home directory path variable")]),t("li",null,[o(a,{to:"/commands/brace-quote.html"},{default:n(()=>[g,e(" (brace quote)")]),_:1}),e(": Write a string to the STDOUT without new line")]),t("li",null,[o(a,{to:"/commands/err.html"},{default:n(()=>[y]),_:1}),e(": Print a line to the STDERR")]),t("li",null,[o(a,{to:"/commands/out.html"},{default:n(()=>[x]),_:1}),e(": Print a string to the STDOUT with a trailing new line character")]),t("li",null,[o(a,{to:"/commands/set.html"},{default:n(()=>[S]),_:1}),e(": Define a local variable and set it's value")]),t("li",null,[o(a,{to:"/commands/tout.html"},{default:n(()=>[v]),_:1}),e(": Print a string to the STDOUT and set it's data-type")])])])}const N=r(c,[["render",T],["__file","curly-brace.html.vue"]]);export{N as default};

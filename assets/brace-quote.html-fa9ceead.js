import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as s,a as e,d as a,w as n,b as t,e as i}from"./app-66ffa3c3.js";const c={},h=i(`<h1 id="brace-quote-command-reference" tabindex="-1"><a class="header-anchor" href="#brace-quote-command-reference" aria-hidden="true">#</a> <code>(</code> (brace quote) - Command Reference</h1><blockquote><p>Write a string to the STDOUT without new line</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Write parameters to STDOUT (does not include a new line)</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>(string to write) -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» (Hello, World!)
Hello, World!

» (Hello,\\nWorld!)
Hello,
World!

» ((Hello,) (World!))
(Hello,) (World!)

# Print &quot;Hello, World!&quot; in red text
» {RED}Hello, World!{RESET}
Hello, World!
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>The <code>(</code> function performs exactly like the <code>(</code> token for quoting so you do not need to escape other tokens (eg single / double quotes, <code>&#39;</code>/<code>&quot;</code>, nor curly braces, <code>{}</code>). However the braces are nestable so you will need to escape those characters if you don&#39;t want them nested.</p><h3 id="ansi-constants" tabindex="-1"><a class="header-anchor" href="#ansi-constants" aria-hidden="true">#</a> ANSI Constants</h3><p><code>(</code> supports ANSI constants.</p><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>(</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,15),u=e("code",null,">>",-1),m=e("code",null,">",-1),p=e("code",null,"cast",-1),f=e("code",null,"err",-1),_=e("code",null,"out",-1),g=e("code",null,"pt",-1),b=e("code",null,"tout",-1);function x(y,S){const o=r("RouterLink");return l(),s("div",null,[h,e("ul",null,[e("li",null,[a(o,{to:"/guide/user-guide/ansi.html"},{default:n(()=>[t("ANSI Constants")]),_:1}),t(": Infixed constants that return ANSI escape sequences")]),e("li",null,[a(o,{to:"/guide/commands/greater-than-greater-than.html"},{default:n(()=>[u,t(" (append file)")]),_:1}),t(": Writes STDIN to disk - appending contents if file already exists")]),e("li",null,[a(o,{to:"/guide/commands/greater-than.html"},{default:n(()=>[m,t(" (truncate file)")]),_:1}),t(": Writes STDIN to disk - overwriting contents if file already exists")]),e("li",null,[a(o,{to:"/guide/commands/cast.html"},{default:n(()=>[p]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[a(o,{to:"/guide/commands/err.html"},{default:n(()=>[f]),_:1}),t(": Print a line to the STDERR")]),e("li",null,[a(o,{to:"/guide/commands/out.html"},{default:n(()=>[_]),_:1}),t(": Print a string to the STDOUT with a trailing new line character")]),e("li",null,[a(o,{to:"/guide/commands/pt.html"},{default:n(()=>[g]),_:1}),t(": Pipe telemetry. Writes data-types and bytes written")]),e("li",null,[a(o,{to:"/guide/commands/tout.html"},{default:n(()=>[b]),_:1}),t(": Print a string to the STDOUT and set it's data-type")])])])}const W=d(c,[["render",x],["__file","brace-quote.html.vue"]]);export{W as default};

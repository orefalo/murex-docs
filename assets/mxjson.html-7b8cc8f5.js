import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as i,d as e,b as n,w as l,e as t,f as u}from"./app-93e10f13.js";const d={},c=u(`<h1 id="mxjson" tabindex="-1"><a class="header-anchor" href="#mxjson" aria-hidden="true">#</a> mxjson</h1><blockquote><p>Murex-flavoured JSON (deprecated)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><blockquote><p>This format has been deprecated in favour of <code>%{}</code> constructors.</p></blockquote><p>mxjson is an extension to JSON designed to integrate more seamlessly when use as a configuration file. Thus mxjson supports comments and Murex code blocks embedded into the JSON schema.</p><blockquote><p>mxjson is a format that is pre-parsed into a valid JSON format.</p></blockquote><p>mxjson isn&#39;t a Murex data-type in that you cannot marshal and unmarshal mxjson files. Currently it is a format that is only supported by a small subset of Murex builtins (eg <code>config</code> and <code>autocomplete</code>) where config might embed Murex code blocks.</p><p><strong>mxjson features the following enhancements:</strong></p><h3 id="line-comments" tabindex="-1"><a class="header-anchor" href="#line-comments" aria-hidden="true">#</a> Line Comments</h3><p>Line comments are prefixed with a &#39;hash&#39;, <code>#</code>, just like with regular Murex code.</p><h3 id="block-quotation" tabindex="-1"><a class="header-anchor" href="#block-quotation" aria-hidden="true">#</a> Block Quotation</h3><p>Code blocks are quoted with <code>(</code>, <code>)</code>. For example, below &quot;ExampleFunction&quot; uses the <code>({ block quote })</code> method.</p><pre><code>{
    &quot;ExampleFunction&quot;: ({
        out: &quot;This is an example Murex function&quot;
        if { =1==2 } then {
            err: &quot;The laws of the universe are broken&quot;
        }
    })
}
</code></pre><p>Any block quoted by this method will be converted to the following valid JSON:</p><pre><code>{
    &quot;ExampleFunction&quot;: &quot;\\n    out: \\&quot;This is an example Murex function\\&quot;\\n    if { =1==2 } then {\\n        err: \\&quot;The laws of the universe are broken\\&quot;\\n    }&quot;
}
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,16),m=e("code",null,"%(",-1),h=e("code",null,")",-1),p=e("code",null,"%[]",-1),_=e("code",null,"{",-1),f=e("code",null,"}",-1),b=e("code",null,"Marshal()",-1),x=e("code",null,"Unmarshal()",-1),y=e("code",null,"[[",-1),k=e("code",null,"[",-1),g=e("code",null,"autocomplete",-1),q=e("code",null,"cast",-1),j=e("code",null,"config",-1),v=e("code",null,"format",-1),w=e("code",null,"hcl",-1),M=e("code",null,"json",-1),O=e("code",null,"jsonc",-1),C=e("code",null,"jsonl",-1),N=e("code",null,"open",-1),S=e("code",null,"pretty",-1),L=e("code",null,"runtime",-1),T=e("code",null,"toml",-1),J=e("code",null,"yaml",-1),B=e("code",null,"create-object",-1);function A(E,F){const o=s("RouterLink");return r(),i("div",null,[c,e("ul",null,[e("li",null,[n(o,{to:"/parser/brace-quote.html"},{default:l(()=>[t("Brace Quote ("),m,t(", "),h,t(") Tokens")]),_:1}),t(": Initiates or terminates a string (variables expanded)")]),e("li",null,[n(o,{to:"/user-guide/code-block.html"},{default:l(()=>[t("Code Block Parsing")]),_:1}),t(": Overview of how code blocks are parsed")]),e("li",null,[n(o,{to:"/parser/create-array.html"},{default:l(()=>[t("Create array ("),p,t(") constructor")]),_:1}),t(": Quickly generate arrays")]),e("li",null,[n(o,{to:"/parser/curly-brace.html"},{default:l(()=>[t("Curly Brace ("),_,t(", "),f,t(") Tokens")]),_:1}),t(": Initiates or terminates a code block")]),e("li",null,[n(o,{to:"/apis/Marshal.html"},{default:l(()=>[b,t(" (type)")]),_:1}),t(": Converts structured memory into a structured file format (eg for stdio)")]),e("li",null,[n(o,{to:"/apis/Unmarshal.html"},{default:l(()=>[x,t(" (type)")]),_:1}),t(": Converts a structured file format into structured memory")]),e("li",null,[n(o,{to:"/commands/element.html"},{default:l(()=>[y,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[n(o,{to:"/commands/index2.html"},{default:l(()=>[k,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[n(o,{to:"/commands/autocomplete.html"},{default:l(()=>[g]),_:1}),t(": Set definitions for tab-completion in the command line")]),e("li",null,[n(o,{to:"/commands/cast.html"},{default:l(()=>[q]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[n(o,{to:"/commands/config.html"},{default:l(()=>[j]),_:1}),t(": Query or define Murex runtime settings")]),e("li",null,[n(o,{to:"/commands/format.html"},{default:l(()=>[v]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[n(o,{to:"/types/hcl.html"},{default:l(()=>[w]),_:1}),t(": HashiCorp Configuration Language (HCL)")]),e("li",null,[n(o,{to:"/types/json.html"},{default:l(()=>[M]),_:1}),t(": JavaScript Object Notation (JSON)")]),e("li",null,[n(o,{to:"/types/jsonc.html"},{default:l(()=>[O]),_:1}),t(": Concatenated JSON")]),e("li",null,[n(o,{to:"/types/jsonl.html"},{default:l(()=>[C]),_:1}),t(": JSON Lines")]),e("li",null,[n(o,{to:"/commands/open.html"},{default:l(()=>[N]),_:1}),t(": Open a file with a preferred handler")]),e("li",null,[n(o,{to:"/commands/pretty.html"},{default:l(()=>[S]),_:1}),t(": Prettifies JSON to make it human readable")]),e("li",null,[n(o,{to:"/commands/runtime.html"},{default:l(()=>[L]),_:1}),t(": Returns runtime information on the internal state of Murex")]),e("li",null,[n(o,{to:"/types/toml.html"},{default:l(()=>[T]),_:1}),t(": Tom's Obvious, Minimal Language (TOML)")]),e("li",null,[n(o,{to:"/types/yaml.html"},{default:l(()=>[J]),_:1}),t(": YAML Ain't Markup Language (YAML)")]),e("li",null,[n(o,{to:"/parser/create-object.html"},{default:l(()=>[B]),_:1}),t(":")])])])}const V=a(d,[["render",A],["__file","mxjson.html.vue"]]);export{V as default};

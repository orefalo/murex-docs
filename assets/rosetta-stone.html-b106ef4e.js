import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as u,c as s,a as l,b as t,d as o,w as n,e as a}from"./app-faa1692b.js";const c={},i=l("h1",{id:"rosetta-stone-user-guide",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#rosetta-stone-user-guide","aria-hidden":"true"},"#"),t(" Rosetta Stone - User Guide")],-1),h=l("blockquote",null,[l("p",null,"A tabulated list of Bashism's and their equivalent Murex syntax")],-1),_=l("p",null,[t("Below is a reference table of common Bash code and how it could be written in"),l("br"),t(" Murex.")],-1),m=l("br",null,null,-1),b=l("thead",null,[l("tr",null,[l("th",null,"Description"),l("th",null,"Bash"),l("th",null,"Murex")])],-1),f=l("td",null,[l("code",null,'echo "Hello Bash"')],-1),p=l("td",null,[l("code",null,'out "Hello Murex"'),t(),l("br"),l("br"),l("code",null,'echo "Hello Murex"'),t(),l("a",{href:"#footnotes"},"[1]")],-1),g=l("td",null,[l("code",null,'echo "Hello Bash" >2')],-1),y=l("td",null,[l("code",null,'err "Hello Murex"')],-1),x=l("tr",null,[l("td",null,"Write to file (truncate)"),l("td",null,[l("code",null,'echo "Hello Bash" > hello.txt')]),l("td",null,[l("code",null,'echo "Hello Murex" |> hello.txt')])],-1),$=l("tr",null,[l("td",null,"Write to file (append)"),l("td",null,[l("code",null,'echo "Hello Bash" >> hello.txt')]),l("td",null,[l("code",null,'echo "Hello Murex" >> hello.txt')])],-1),v=l("td",null,[l("code",null,'echo "Hello Bash | grep Bash')],-1),k=l("td",null,[l("code",null,'echo "Hello Murex | grep Murex'),t(),l("br"),l("br"),t(),l("code",null,'out "Hello Murex" -> regexp m/Murex/')],-1),S=l("td",null,[l("code",null,"curl murex.rocks 2>&1 | less")],-1),H=l("td",null,[l("code",null,"curl murex.rocks ? less"),t(),l("br"),l("br"),t(),l("code",null,"curl <!out> murex.rocks | less")],-1),w=l("tr",null,[l("td",null,"Redirect output to STDERR"),l("td",null,[l("code",null,"uname -a >&2")]),l("td",null,[l("code",null,"uname <err> -a")])],-1),B=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),T=l("tr",null,[l("td",null,[l("strong",null,"Quoting strings")]),l("td"),l("td")],-1),A=l("td",null,[l("code",null,'echo "Hello $SHELL"')],-1),M=l("td",null,[l("code",null,'out "Hello $SHELL"')],-1),j=l("td",null,[l("code",null,"echo 'Hello' $SHELL")],-1),E=l("td",null,[l("code",null,"out 'Hello' $SHELL")],-1),O=l("td",null,[l("code",null,"echo 'Hello \\'Bob\\''")],-1),L=l("td",null,[l("code",null,"out %(Hello 'Bob')")],-1),C=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),R=l("tr",null,[l("td",null,[l("strong",null,"Process management")]),l("td"),l("td")],-1),N=l("td",null,[l("code",null,"$?")],-1),P=l("td",null,[l("code",null,"exitnum")],-1),q=l("td",null,[l("code",null,"command &")],-1),D=l("td",null,[l("code",null,"bg { command }")],-1),I=l("td",null,[l("code",null,"ps"),t(","),l("br"),l("code",null,"jobs"),t(","),l("br"),l("code",null,"bg pid"),t(","),l("br"),l("code",null,"fg pid")],-1),W=l("td",null,[l("code",null,"fid-list"),t(","),l("br"),l("code",null,"jobs"),t(","),l("br"),l("code",null,"bg fid"),t(","),l("br"),l("code",null,"fg fid")],-1),U=l("tr",null,[l("td",null,"Happy paths"),l("td",null,[l("code",null,"command && command")]),l("td",null,[l("code",null,"command && command"),t(),l("br"),l("br"),t(),l("code",null,"try {command; command}")])],-1),V=l("tr",null,[l("td",null,"Unhappy paths"),l("td",null,[l("code",null,"command || command")]),l("td",null,[l("code",null,"command || command"),t(),l("br"),l("br"),t(),l("code",null,"try {command}; catch {command}")])],-1),F=l("tr",null,[l("td",null,"Pipe fail"),l("td",null,[l("code",null,"set -o pipefail")]),l("td",null,[l("code",null,"runmode trypipe module"),t(),l("br"),l("br"),t(),l("code",null,"runmode trypipe function"),t(),l("br"),l("br"),t(),l("code",null,"trypipe { commands }")])],-1),G=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),J=l("tr",null,[l("td",null,[l("strong",null,"Comments")]),l("td"),l("td")],-1),Q=l("tr",null,[l("td",null,"Single line"),l("td",null,[l("code",null,"# comment")]),l("td",null,[l("code",null,"# comment")])],-1),z=l("tr",null,[l("td",null,"Multiple lines"),l("td",null,[l("code",null,":<<EOC"),l("br"),l("code",null,"line 1"),l("br"),l("code",null,"line 2"),l("br"),l("code",null,"EOC")]),l("td",null,[l("code",null,"/#"),l("br"),l("code",null,"line 1"),l("br"),l("code",null,"line 2"),l("br"),l("code",null,"#/")])],-1),K=l("tr",null,[l("td",null,"Mid-line"),l("td",null,"n/a"),l("td",null,[t("eg "),l("code",null,"out foo/#comment#/bar")])],-1),X=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Y=l("tr",null,[l("td",null,[l("strong",null,"File pattern matching"),l("br"),t('(also known as "wildcards")')]),l("td"),l("td")],-1),Z=l("td",null,[t("eg "),l("code",null,"ls *.txt")],-1),ll=l("td",null,[t("eg "),l("code",null,"ls *.txt"),t(" (in the interactive terminal) "),l("br"),l("br"),t(),l("code",null,"g pattern"),t(),l("br"),l("br"),t(" eg "),l("code",null,"ls @{g *.txt}")],-1),tl=l("td",null,"n/a",-1),el=l("td",null,[l("code",null,"rx pattern"),t(),l("br"),l("br"),t(" eg "),l("code",null,"ls @{rx '*\\\\.txt'}")],-1),ol=l("td",null,"n/a",-1),nl=l("td",null,[l("code",null,"f flags"),t(),l("br"),l("br"),t(" eg "),l("code",null,"f +s"),t(" (only return symlinks)")],-1),dl=l("tr",null,[l("td",null,"Chaining"),l("td",null,"n/a"),l("td",null,[t("eg "),l("code",null,"f +f | g *.txt | !g murex.*"),t(),l("br"),t(` (returns only files with the extension "txt" that aren't called "murex")`)])],-1),rl=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),ul=l("tr",null,[l("td",null,[l("strong",null,"Expressions")]),l("td"),l("td")],-1),sl=l("tr",null,[l("td",null,"Assignment"),l("td",null,[l("code",null,"foobar = $((1 + 2 * 3))")]),l("td",null,[l("code",null,"foobar = 1 + 2 * 3"),t(),l("a",{href:"#footnotes"},"[2]")])],-1),al=l("tr",null,[l("td",null,"Comparison, string"),l("td",null,[l("code",null,'[ "$(command)" == "value" ]')]),l("td",null,[l("code",null,'${command} == "value"'),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("a",{href:"#footnotes"},"[5]")])],-1),cl=l("tr",null,[l("td",null,"Comparison, numeric"),l("td",null,[l("code",null,"[ $integer -eq 5 ]")]),l("td",null,[l("code",null,"$number == 5"),t(),l("a",{href:"#footnotes"},"[2]")])],-1),il=l("tr",null,[l("td",null,"Arithmetic"),l("td",null,[l("code",null,"echo $(( 1+2*3 ))")]),l("td",null,[l("code",null,"1 + 2 * 3"),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("br"),l("br"),t(),l("code",null,"out ${1+2*3}"),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("a",{href:"#footnotes"},"[5]")])],-1),hl=l("tr",null,[l("td",null,"Supported data types"),l("td",null,[t("1. String,"),l("br"),t("2. Integer"),l("br"),t("(all variables are strings)")]),l("td",null,[t("1. String,"),l("br"),t("2. Integer,"),l("br"),t("3. Float (default number type),"),l("br"),t("4. Boolean"),l("br"),t("5. Array,"),l("br"),t("6. Object,"),l("br"),t("7. Null"),l("br"),t("(all variables can be treated as strings and/or their primitive)")])],-1),_l=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),ml=l("tr",null,[l("td",null,[l("strong",null,"Variables"),l("br")]),l("td"),l("td")],-1),bl=l("td",null,[l("code",null,'local foo="bar"')],-1),fl=l("td",null,[l("code",null,'$foo = "bar"'),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | set foo')],-1),pl=l("td",null,[l("code",null,'foo="bar"')],-1),gl=l("td",null,[l("code",null,'$GLOBAL.foo = "bar"'),t(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | global foo')],-1),yl=l("td",null,[l("code",null,'export foo="bar"')],-1),xl=l("td",null,[l("code",null,'export foo = "bar"'),t(),l("a",{href:"#footnotes"},"[1]"),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("a",{href:"#footnotes"},"[3]"),l("br"),l("br"),l("code",null,'$ENV.foo = "bar"'),t(),l("a",{href:"#footnotes"},"[6]"),l("br"),l("br"),l("code",null,'out "bar" | export foo'),t(),l("a",{href:"#footnotes"},"[3]")],-1),$l=l("td",null,[l("code",null,'echo "$foobar"')],-1),vl=l("td",null,[l("code",null,"out $foobar"),t(),l("a",{href:"#footnotes"},"[5]"),l("br"),l("br"),l("code",null,"$foobar"),t(),l("br"),l("br"),t(" (variables don't need to be quoted in Murex)")],-1),kl=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Sl=l("tr",null,[l("td",null,[l("strong",null,"Arrays"),l("br"),t("(eg arrays, lists)")]),l("td"),l("td")],-1),Hl=l("tr",null,[l("td",null,"Creating an array"),l("td",null,[l("code",null,"array_name=(value1 value2 value3)")]),l("td",null,[l("code",null,"%[value1 value2 value3]"),t(),l("br"),l("br"),l("code",null,"%[value1, value2, value3]"),t(),l("br"),l("br"),t(" eg "),l("code",null,"array_name = %[1, 2, 3]"),t(", "),l("br"),t(" eg "),l("code",null,"%[hello world] | foreach { ... }")])],-1),wl=l("tr",null,[l("td",null,"Accessing an array element"),l("td",null,[l("code",null,"${array_name[0]}")]),l("td",null,[l("code",null,"$array_name[0]"),t(" (immutable) "),l("br"),l("br"),l("code",null,"$array_name.0"),t(" (mutable) "),l("a",{href:"#footnotes"},"[5]"),t(),l("br"),l("br"),t(),l("code",null,"array | [0]")])],-1),Bl=l("tr",null,[l("td",null,"Printing multiple elements"),l("td",null,[l("code",null,"echo ${array_name[1]} ${array_name[0]}")]),l("td",null,[l("code",null,"@array_name[1 0]"),t(),l("br"),l("br"),t(),l("code",null,"array | [1 0]")])],-1),Tl=l("tr",null,[l("td",null,"Printing a range of elements"),l("td",null,"n/a"),l("td",null,[l("code",null,"@array_name[1..3]"),t(),l("br"),l("br"),l("code",null,"array | [1..3]")])],-1),Al=l("td",null,[l("code",null,"echo ${array_name[*]}")],-1),Ml=l("td",null,[l("code",null,"@array_name")],-1),jl=l("td",null,[l("code",null,"for item in array; do;"),l("br"),t("    "),l("code",null,"$item"),l("br"),l("code",null,"done;")],-1),El=l("td",null,[l("code",null,"array | foreach item { $item }"),t(),l("br"),l("br"),t(" eg "),l("code",null,'%[Tom Richard Sally] | foreach name { out "Hello $name" }')],-1),Ol=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Ll=l("tr",null,[l("td",null,[l("strong",null,"Objects"),l("br"),t("(eg JSON objects, maps, hashes, dictionaries)")]),l("td"),l("td")],-1),Cl=l("tr",null,[l("td",null,"Creating an object"),l("td",null,"n/a"),l("td",null,[l("code",null,"%{ key: value, array: [1, 2, 3] }"),t(),l("a",{href:"#footnotes"},"[2]"),t(),l("br"),l("br"),t(" eg "),l("code",null,"object_name = %{ key: val, arr: [1,3,3] }"),t(),l("br"),t(" eg "),l("code",null,"%{ a:1, b:2, c:3 } | formap { ... }")])],-1),Rl=l("tr",null,[l("td",null,"Accessing an element"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[key]"),t(" (immutable) "),l("br"),l("br"),t(),l("code",null,"$object_name.key"),t(),l("a",{href:"#footnotes"},"[5]"),t(" (mutable) "),l("br"),l("br"),t(),l("code",null,"object | [key]")])],-1),Nl=l("tr",null,[l("td",null,"Printing multiple elements"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[key1 key2]"),t(),l("br"),l("br"),t(),l("code",null,"object | [key1 key2]")])],-1),Pl=l("tr",null,[l("td",null,"Accessing a nested element"),l("td",null,"n/a"),l("td",null,[l("code",null,"$object_name[[.path.to.element]]"),t(" (immutable) "),l("a",{href:"#footnotes"},"[4]"),l("br"),l("br"),t(),l("code",null,"$object_name.path.to.element"),t(" (mutable)"),l("br"),l("br"),t(),l("code",null,"object | [[.path.to.element]]"),t(),l("a",{href:"#footnotes"},"[4]"),l("br"),l("br")])],-1),ql=l("td",null,"n/a",-1),Dl=l("td",null,[l("code",null,"object | formap key value { $key; $value }"),t(),l("br"),l("br"),t(" eg "),l("code",null,'%{Bob: {age: 10}, Richard: {age: 20}, Sally: {age: 30} } | formap name person { out "$name is $person[age] years old" }')],-1),Il=l("tr",null,[l("td",null,[l("br")]),l("td"),l("td")],-1),Wl=l("tr",null,[l("td",null,[l("strong",null,"Sub-shells"),l("br")]),l("td"),l("td")],-1),Ul=l("tr",null,[l("td",null,"Sub-shell, string"),l("td",null,[l("code",null,'"$(commands)"'),t(),l("br"),l("br"),t(" eg "),l("code",null,'"echo $(echo "Hello world")"')]),l("td",null,[l("code",null,"${commands}"),t(),l("a",{href:"#footnotes"},"[5]"),t(),l("br"),l("br"),t(" eg "),l("code",null,"out ${out Hello world}")])],-1),Vl=l("tr",null,[l("td",null,"Sub-shell, arrays"),l("td",null,[l("code",null,"$(commands)"),t(),l("br"),l("br"),t(" eg "),l("code",null,"$(echo 1 2 3)")]),l("td",null,[l("code",null,"@{commands}"),t(),l("a",{href:"#footnotes"},"[5]"),t(),l("br"),l("br"),t(" eg "),l("code",null,"out @{ %[1,2,3] }")])],-1),Fl=a('<h3 id="footnotes" tabindex="-1"><a class="header-anchor" href="#footnotes" aria-hidden="true">#</a> Footnotes</h3><ol><li>Supported for compatibility with traditional shells like Bash.</li><li>Unlike Bash, whitespace (or the absence of) is optional.</li><li>Environmental variables can only be stored as a string. This is a limitation of current operating systems.</li><li>Path separator can be any 1 byte wide character, eg <code>/</code>. The path separator is defined by the first character in a path.</li><li>Murex uses <code>${}</code> for subshells and <code>$()</code> for variables, the reverse of what Bash and others use. The reason for this difference is because <code>{}</code> always denotes a code block and <code>()</code> denotes strings. So <code>${foobar}</code> makes more sense as a subshell executing the command <code>foobar</code>, while <code>$(foobar)</code> makes more sense as the variable <code>$foobar</code>.</li><li>When assigning a variable where the right hand side is an expression, eg <code>$foo = &quot;bar&quot;</code>, the dollar prefix is optional. The <code>set</code>, <code>global</code> and <code>export</code> keywords are considered deprecated.</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',3),Gl=l("code",null,"&&",-1),Jl=l("br",null,null,-1),Ql=l("code",null,">>",-1),zl=l("br",null,null,-1),Kl=l("code",null,"@",-1),Xl=l("br",null,null,-1),Yl=l("br",null,null,-1),Zl=l("code",null,"||",-1),lt=l("br",null,null,-1),tt=l("code",null,"$",-1),et=l("br",null,null,-1),ot=l("br",null,null,-1),nt=l("code",null,">>",-1),dt=l("br",null,null,-1),rt=l("code",null,">",-1),ut=l("br",null,null,-1),st=l("code",null,"[[",-1),at=l("br",null,null,-1),ct=l("code",null,"[",-1),it=l("br",null,null,-1),ht=l("code",null,"[",-1),_t=l("br",null,null,-1),mt=l("code",null,"runmode",-1),bt=l("br",null,null,-1),ft=l("code",null,"try",-1),pt=l("br",null,null,-1),gt=l("code",null,"trypipe",-1),yt=l("br",null,null,-1);function xt($t,vt){const e=r("RouterLink");return u(),s("div",null,[i,h,_,l("p",null,[t("It is also recommended that you read the language "),o(e,{to:"/tour.html"},{default:n(()=>[t("tour")]),_:1}),m,t(" if you want to learn more about shell scripting in Murex.")]),l("table",null,[b,l("tbody",null,[l("tr",null,[l("td",null,[o(e,{to:"/commands/out.html"},{default:n(()=>[t("Write to STDOUT")]),_:1})]),f,p]),l("tr",null,[l("td",null,[o(e,{to:"/user-guide/commands/err.html"},{default:n(()=>[t("Write to STDERR")]),_:1})]),g,y]),x,$,l("tr",null,[l("td",null,[o(e,{to:"/parser/pipe-arrow.html"},{default:n(()=>[t("Pipe commands")]),_:1})]),v,k]),l("tr",null,[l("td",null,[o(e,{to:"/parser/pipe-err.html"},{default:n(()=>[t("Redirect errors to STDOUT")]),_:1})]),S,H]),w,B,T,l("tr",null,[l("td",null,[o(e,{to:"/parser/double-quote.html"},{default:n(()=>[t("Infixing")]),_:1})]),A,M]),l("tr",null,[l("td",null,[o(e,{to:"/parser/single-quote.html"},{default:n(()=>[t("String literals")]),_:1})]),j,E]),l("tr",null,[l("td",null,[o(e,{to:"/parser/brace-quote.html"},{default:n(()=>[t("Nesting quotes")]),_:1})]),O,L]),C,R,l("tr",null,[l("td",null,[o(e,{to:"/commands/exitnum.html"},{default:n(()=>[t("Exit number")]),_:1})]),N,P]),l("tr",null,[l("td",null,[o(e,{to:"/commands/bg.html"},{default:n(()=>[t("Background jobs")]),_:1})]),q,D]),l("tr",null,[l("td",null,[o(e,{to:"/commands/fid-list.html"},{default:n(()=>[t("Job control")]),_:1})]),I,W]),U,V,F,G,J,Q,z,K,X,Y,l("tr",null,[l("td",null,[o(e,{to:"/commands/g.html"},{default:n(()=>[t("Globbing")]),_:1})]),Z,ll]),l("tr",null,[l("td",null,[o(e,{to:"/commands/rx.html"},{default:n(()=>[t("Regexp")]),_:1})]),tl,el]),l("tr",null,[l("td",null,[o(e,{to:"/commands/f.html"},{default:n(()=>[t("File type matching")]),_:1})]),ol,nl]),dl,rl,ul,sl,al,cl,il,hl,_l,ml,l("tr",null,[l("td",null,[o(e,{to:"/commands/set.html"},{default:n(()=>[t("Assign a local variable")]),_:1})]),bl,fl]),l("tr",null,[l("td",null,[o(e,{to:"/commands/global.html"},{default:n(()=>[t("Assign a global variable")]),_:1})]),pl,gl]),l("tr",null,[l("td",null,[o(e,{to:"/commands/export.html"},{default:n(()=>[t("Assign an environmental variable")]),_:1})]),yl,xl]),l("tr",null,[l("td",null,[o(e,{to:"/parser/string.html"},{default:n(()=>[t("Printing a variable")]),_:1})]),$l,vl]),kl,Sl,Hl,wl,Bl,Tl,l("tr",null,[l("td",null,[o(e,{to:"/parser/array.html"},{default:n(()=>[t("Printing all elements")]),_:1})]),Al,Ml]),l("tr",null,[l("td",null,[o(e,{to:"/commands/foreach.html"},{default:n(()=>[t("Iterating through an array")]),_:1})]),jl,El]),Ol,Ll,Cl,Rl,Nl,Pl,l("tr",null,[l("td",null,[o(e,{to:"/commands/formap.html"},{default:n(()=>[t("Iterating through an map")]),_:1})]),ql,Dl]),Il,Wl,Ul,Vl])]),Fl,l("ul",null,[l("li",null,[o(e,{to:"/parser/logical-and.html"},{default:n(()=>[t("And ("),Gl,t(") Logical Operator")]),_:1}),t(":"),Jl,t(" Continues next operation if previous operation passes")]),l("li",null,[o(e,{to:"/parser/pipe-append.html"},{default:n(()=>[t("Append Pipe ("),Ql,t(") Token")]),_:1}),t(":"),zl,t(" Redirects STDOUT to a file and append its contents")]),l("li",null,[o(e,{to:"/parser/array.html"},{default:n(()=>[t("Array ("),Kl,t(") Token")]),_:1}),t(":"),Xl,t(" Expand values as an array")]),l("li",null,[o(e,{to:"/user-guide/namedpipes.html"},{default:n(()=>[t("Murex Named Pipes")]),_:1}),t(":"),Yl,t(" A detailed breakdown of named pipes in Murex")]),l("li",null,[o(e,{to:"/parser/logical-or.html"},{default:n(()=>[t("Or ("),Zl,t(") Logical Operator")]),_:1}),t(":"),lt,t(" Continues next operation only if previous operation fails")]),l("li",null,[o(e,{to:"/parser/string.html"},{default:n(()=>[t("String ("),tt,t(") Token")]),_:1}),t(":"),et,t(" Expand values as a string")]),l("li",null,[o(e,{to:"/user-guide/terminal-keys.html"},{default:n(()=>[t("Terminal Hotkeys")]),_:1}),t(":"),ot,t(" A list of all the terminal hotkeys and their uses")]),l("li",null,[o(e,{to:"/commands/greater-than-greater-than.html"},{default:n(()=>[nt,t(" (append file)")]),_:1}),t(":"),dt,t(" Writes STDIN to disk - appending contents if file already exists")]),l("li",null,[o(e,{to:"/commands/greater-than.html"},{default:n(()=>[rt,t(" (truncate file)")]),_:1}),t(":"),ut,t(" Writes STDIN to disk - overwriting contents if file already exists")]),l("li",null,[o(e,{to:"/commands/element.html"},{default:n(()=>[st,t(" (element)")]),_:1}),t(":"),at,t(" Outputs an element from a nested structure")]),l("li",null,[o(e,{to:"/commands/"},{default:n(()=>[ct,t(" (index)")]),_:1}),t(":"),it,t(" Outputs an element from an array, map or table")]),l("li",null,[o(e,{to:"/commands/range.html"},{default:n(()=>[ht,t(" (range) ")]),_:1}),t(":"),_t,t(" Outputs a ranged subset of data from STDIN")]),l("li",null,[o(e,{to:"/commands/runmode.html"},{default:n(()=>[mt]),_:1}),t(":"),bt,t(" Alter the scheduler's behaviour at higher scoping level")]),l("li",null,[o(e,{to:"/commands/try.html"},{default:n(()=>[ft]),_:1}),t(":"),pt,t(" Handles errors inside a block of code")]),l("li",null,[o(e,{to:"/commands/trypipe.html"},{default:n(()=>[gt]),_:1}),t(":"),yt,t(" Checks state of each function in a pipeline and exits block on error")])])])}const Ht=d(c,[["render",xt],["__file","rosetta-stone.html.vue"]]);export{Ht as default};

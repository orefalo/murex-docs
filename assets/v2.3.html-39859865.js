import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as c,c as d,d as e,e as t,b as n,w as i,f as l}from"./app-97fd9f14.js";const h={},u=e("h1",{id:"what-s-new-in-murex-v2-3-change-log",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-s-new-in-murex-v2-3-change-log","aria-hidden":"true"},"#"),t(" What's new in murex v2.3 - Change Log")],-1),m=e("p",null,"This release includes significant changes to the interactive terminal",-1),p=e("p",null,"This release brings some major improvements to the discoverability of commands and their parameters in the interactive terminal.",-1),f=e("h3",{id:"user-facing-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user-facing-changes","aria-hidden":"true"},"#"),t(" User Facing Changes:")],-1),g=e("li",null,[e("p",null,[t("New builtin: "),e("code",null,"method"),t(`. This is used to help turn some commands into a "method", similar in concept to object orientated development where the tab- completer will return a list of other commands that are compatible with the formers output data types. It's purely an autocompletion tool and has no effect in shell scripts.`)])],-1),_=e("li",null,[e("p",null,"Autocompletion suggestions will differ based on what pipes are used. The idea behind this is to improve the discoverability of commands. All tokens can still be used to pipeline to any command type (like before). This rule only affects autocomplete suggestions in the interactive prompt."),e("pre",null,[e("code",null,"- `|` will show all available aliases, functions, builtins and external\n  commands, as usual\n\n- `->` will default to showing only compatible commands defined in `method`\n  (see above), however if no methods are found then `->` will fall back to\n  suggesting all available aliases, functions, builtins and external commands,\n  like `|`.\n\nThe idea here is for `->` to surface commands that are commonly\nexpected to be pipelined together but without forcing the user to pause and\nremember which token exposes what commands. While `|` is still available for\nfamiliarity\n")])],-1),b=e("li",null,[e("p",null,[t("Autocompletion de-duplication now places hyphen-prefixed flags at the end of the results when sorting. This helps bring more relevant flags forward, with hyphen-prefixed flags still visible when users press "),e("code",null,"-")])],-1),w={href:"https://github.com/lmorg/murex/issues/299",target:"_blank",rel:"noopener noreferrer"},x=e("pre",null,[e("code",null,"<pre><code>Â» exec: false\nError in `exec` (1,1): exit status 1</code></pre>\n")],-1),v=e("code",null,"Index()",-1),k=e("code",null,"[",-1),y={href:"https://github.com/lmorg/murex/issues/316",target:"_blank",rel:"noopener noreferrer"},T=l("<li><p><code>runtime</code> was missing a few flags for reporting supported data types against the newer APIs</p></li><li><p>Generic types (<code>*</code> / <code>generic</code>) to include two spaces between columns when marshalled</p></li><li><p>Syntax highlighter colour tweaks -- no longer using background highlighting because that looks weird and unreadable on some terminal colour schemes</p></li><li><p>Bug fixes to the fast parser</p></li>",4),N=e("code",null,"v2.2.1200",-1),I={href:"https://github.com/lmorg/murex/issues/362",target:"_blank",rel:"noopener noreferrer"},S=l('<h3 id="non-user-facing-maintenance-changes" tabindex="-1"><a class="header-anchor" href="#non-user-facing-maintenance-changes" aria-hidden="true">#</a> Non-User Facing / Maintenance Changes</h3><ul><li><p><code>hcl</code> and <code>bson</code> types now use <code>ReadArray</code> templates so their behavior should mimic JSON and YAML</p></li><li><p>Fast parser is now aware of which pipe token (eg <code>|</code>, <code>-&gt;</code>, <code>=&gt;</code>, <code>?</code>) is used</p></li><li><p>Unit test concurrency fix</p></li><li><p>New tests written for the fast parser</p></li><li><p>Refactored code around hint text and completions to allow for a potential new UI feature to be built in the future</p></li><li><p>Updated documentation</p></li></ul><hr><p>Published: 26.09.2021 at 11:33</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',5),A=e("code",null,"->",-1),P=e("code",null,"|",-1),U=e("code",null,"method",-1),L=e("code",null,"runtime",-1);function B(C,D){const s=a("ExternalLinkIcon"),o=a("RouterLink");return c(),d("div",null,[u,m,p,f,e("ul",null,[g,_,b,e("li",null,[e("p",null,[t("External commands return a error message if the exit status is non-zero ("),e("a",w,[t("issue #299"),n(s)]),t(")")]),x]),e("li",null,[e("p",null,[v,t(" ("),k,t(") now returns a different data type from the root object if the element is a string, integer, float64, boolean or nil ("),e("a",y,[t("issue #316"),n(s)]),t(")")])]),T,e("li",null,[e("p",null,[t("Bug fixes to readline merged from "),N,t(" ("),e("a",I,[t("issue #362"),n(s)]),t(")")])])]),S,e("ul",null,[e("li",null,[n(o,{to:"/parser/pipe-arrow.html"},{default:i(()=>[t("Arrow Pipe ("),A,t(") Token")]),_:1}),t(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[n(o,{to:"/parser/pipe-posix.html"},{default:i(()=>[t("POSIX Pipe ("),P,t(") Token")]),_:1}),t(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[n(o,{to:"/commands/method.html"},{default:i(()=>[U]),_:1}),t(": Define a methods supported data-types")]),e("li",null,[n(o,{to:"/commands/runtime.html"},{default:i(()=>[L]),_:1}),t(": Returns runtime information on the internal state of Murex")])])])}const O=r(h,[["render",B],["__file","v2.3.html.vue"]]);export{O as default};

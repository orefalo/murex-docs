import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as s,a as e,d as n,w as o,b as a,e as i}from"./app-66ffa3c3.js";const c={},u=i(`<h1 id="prepend-command-reference" tabindex="-1"><a class="header-anchor" href="#prepend-command-reference" aria-hidden="true">#</a> <code>prepend</code> - Command Reference</h1><blockquote><p>Add data to the start of an array</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>prepend</code> a data to the start of an array.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>\`&lt;stdin&gt;\` -&gt; prepend: value -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» a: [January..December] -&gt; prepend: &#39;New Year&#39;
New Year
January
February
March
April
May
June
July
August
September
October
November
December
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>prepend</code> and <code>append</code> are data type aware:</p><pre><code>» tout json [1,2,3] -&gt; append 4 5 6 bob
Error in \`append\` (1,22): cannot convert &#39;bob&#39; to a floating point number: strconv.ParseFloat: parsing &quot;bob&quot;: invalid syntax
</code></pre><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>prepend</code></li><li><code>list.prepend</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,14),h=e("code",null,"[[",-1),m=e("code",null,"[",-1),p=e("code",null,"a",-1),_=e("code",null,"addheading",-1),f=e("code",null,"append",-1),g=e("code",null,"cast",-1),y=e("code",null,"count",-1),b=e("code",null,"ja",-1),x=e("code",null,"match",-1),v=e("code",null,"msort",-1),A=e("code",null,"mtac",-1),k=e("code",null,"regexp",-1);function w(N,S){const t=r("RouterLink");return l(),s("div",null,[u,e("ul",null,[e("li",null,[n(t,{to:"/guide/commands/element.html"},{default:o(()=>[h,a(" (element)")]),_:1}),a(": Outputs an element from a nested structure")]),e("li",null,[n(t,{to:"/guide/commands/"},{default:o(()=>[m,a(" (index)")]),_:1}),a(": Outputs an element from an array, map or table")]),e("li",null,[n(t,{to:"/guide/commands/a.html"},{default:o(()=>[p,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simple way to build an array or list")]),e("li",null,[n(t,{to:"/guide/commands/addheading.html"},{default:o(()=>[_]),_:1}),a(": Adds headings to a table")]),e("li",null,[n(t,{to:"/guide/commands/append.html"},{default:o(()=>[f]),_:1}),a(": Add data to the end of an array")]),e("li",null,[n(t,{to:"/guide/commands/cast.html"},{default:o(()=>[g]),_:1}),a(": Alters the data type of the previous function without altering it's output")]),e("li",null,[n(t,{to:"/guide/commands/count.html"},{default:o(()=>[y]),_:1}),a(": Count items in a map, list or array")]),e("li",null,[n(t,{to:"/guide/commands/ja.html"},{default:o(()=>[b,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[n(t,{to:"/guide/commands/match.html"},{default:o(()=>[x]),_:1}),a(": Match an exact value in an array")]),e("li",null,[n(t,{to:"/guide/commands/msort.html"},{default:o(()=>[v]),_:1}),a(": Sorts an array - data type agnostic")]),e("li",null,[n(t,{to:"/guide/commands/mtac.html"},{default:o(()=>[A]),_:1}),a(": Reverse the order of an array")]),e("li",null,[n(t,{to:"/guide/commands/regexp.html"},{default:o(()=>[k]),_:1}),a(": Regexp tools for arrays / lists of strings")])])])}const q=d(c,[["render",w],["__file","prepend.html.vue"]]);export{q as default};

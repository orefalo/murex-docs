import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as s,c as d,a as e,d as a,w as l,b as t,e as r}from"./app-5c3d1e58.js";const c={},u=r(`<h1 id="csv-data-type-reference" tabindex="-1"><a class="header-anchor" href="#csv-data-type-reference" aria-hidden="true">#</a> <code>csv</code> - Data-Type Reference</h1><blockquote><p>CSV files (and other character delimited tables)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This data type can be used for not only CSV files but also TSV (tab separated) or any other exotic characters used as a delimiter.</p><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>The CSV parser is configurable via <code>config</code> (see link below for docs on how to use <code>config</code>)</p><pre><code>Â» config: -&gt; [csv]      
{
    &quot;comment&quot;: {
        &quot;Data-Type&quot;: &quot;str&quot;,
        &quot;Default&quot;: &quot;#&quot;,
        &quot;Description&quot;: &quot;The prefix token for comments in a CSV table.&quot;,
        &quot;Dynamic&quot;: false,
        &quot;Global&quot;: false,
        &quot;Value&quot;: &quot;#&quot;
    },
    &quot;separator&quot;: {
        &quot;Data-Type&quot;: &quot;str&quot;,
        &quot;Default&quot;: &quot;,&quot;,
        &quot;Description&quot;: &quot;The delimiter for records in a CSV file.&quot;,
        &quot;Dynamic&quot;: false,
        &quot;Global&quot;: false,
        &quot;Value&quot;: &quot;,&quot;
    }
}
</code></pre><h2 id="default-associations" tabindex="-1"><a class="header-anchor" href="#default-associations" aria-hidden="true">#</a> Default Associations</h2><ul><li><strong>Extension</strong>: <code>csv</code></li><li><strong>MIME</strong>: <code>application/csv</code></li><li><strong>MIME</strong>: <code>application/x-csv</code></li><li><strong>MIME</strong>: <code>text/csv</code></li><li><strong>MIME</strong>: <code>text/x-csv</code></li></ul><h2 id="supported-hooks" tabindex="-1"><a class="header-anchor" href="#supported-hooks" aria-hidden="true">#</a> Supported Hooks</h2><ul><li><code>Marshal()</code> Supported</li><li><code>ReadArray()</code> Treats each new line as a new array element</li><li><code>ReadArrayWithType()</code> Treats each new line as a new array element, each element is mini <code>csv</code> file</li><li><code>ReadIndex()</code> Indexes treated as table coordinates</li><li><code>ReadMap()</code> Works against tables such as the output from <code>ps -fe</code></li><li><code>ReadNotIndex()</code> Indexes treated as table coordinates</li><li><code>Unmarshal()</code> Supported</li><li><code>WriteArray()</code> Writes a new line per array element</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,12),h=e("code",null,"*",-1),p=e("code",null,"Marshal()",-1),m=e("code",null,"Unmarshal()",-1),f=e("code",null,"[[",-1),_=e("code",null,"[",-1),q=e("code",null,"cast",-1),g=e("code",null,"config",-1),y=e("code",null,"format",-1),x=e("code",null,"int",-1),b=e("code",null,"jsonl",-1),v=e("code",null,"select",-1),M=e("code",null,"str",-1);function S(k,D){const o=i("RouterLink");return s(),d("div",null,[u,e("ul",null,[e("li",null,[a(o,{to:"/guide/types/generic.html"},{default:l(()=>[h,t(" (generic) ")]),_:1}),t(": generic (primitive)")]),e("li",null,[a(o,{to:"/guide/apis/Marshal.html"},{default:l(()=>[p,t(" (type)")]),_:1}),t(": Converts structured memory into a structured file format (eg for stdio)")]),e("li",null,[a(o,{to:"/guide/apis/Unmarshal.html"},{default:l(()=>[m,t(" (type)")]),_:1}),t(": Converts a structured file format into structured memory")]),e("li",null,[a(o,{to:"/guide/commands/element.html"},{default:l(()=>[f,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[a(o,{to:"/guide/commands/"},{default:l(()=>[_,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[a(o,{to:"/guide/commands/cast.html"},{default:l(()=>[q]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[a(o,{to:"/guide/commands/config.html"},{default:l(()=>[g]),_:1}),t(": Query or define Murex runtime settings")]),e("li",null,[a(o,{to:"/guide/commands/format.html"},{default:l(()=>[y]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[a(o,{to:"/guide/types/int.html"},{default:l(()=>[x]),_:1}),t(": Whole number (primitive)")]),e("li",null,[a(o,{to:"/guide/types/jsonl.html"},{default:l(()=>[b]),_:1}),t(": JSON Lines")]),e("li",null,[a(o,{to:"/guide/optional/select.html"},{default:l(()=>[v]),_:1}),t(": Inlining SQL into shell pipelines")]),e("li",null,[a(o,{to:"/guide/types/str.html"},{default:l(()=>[M,t(" (string) ")]),_:1}),t(": string (primitive)")])])])}const w=n(c,[["render",S],["__file","csv.html.vue"]]);export{w as default};

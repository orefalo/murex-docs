import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as s,c,d as e,e as t,b as a,w as n,f as l}from"./app-ed1b6a51.js";const u={},h=l(`<h1 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> <code>datetime</code></h1><blockquote><p>A date and/or time conversion tool (like <code>printf</code> but for date and time values)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>While <code>date</code> is a standard UNIX tool, it&#39;s syntax can vary from Linux to macOS. <code>datetype</code> aims to be a cross platform alternative while also offering a range of saner syntax options too.</p><p>The syntax for <code>datetime</code> is modelled from date and time libraries from various popular programming languages.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Pass date/time value as a parameter:</p><pre><code>datetime --in &quot;format&quot; --out &quot;format&quot; --value &quot;date/time&quot; -&gt; \`&lt;stdout&gt;\`
</code></pre><p>Read date/time value from STDIN:</p><pre><code>\`&lt;stdin&gt;\` -&gt; datetime --in &quot;format&quot; --out &quot;format&quot; -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Output current date and time:</p><pre><code>» datetime: --in &quot;{now}&quot; --out &quot;{go}01/02/06 15:04:05&quot;
12/08/21 22:32:30
</code></pre><p>Convert STDIN into epoch:</p><pre><code>» echo &quot;12/08/21 22:32:30&quot; -&gt; datetime: --in &quot;{go}01/02/06 15:04:05&quot; --out &quot;{unix}&quot;
1639002750
</code></pre><p>Convert value passed as a command line argument:</p><pre><code>» datetime: --value &quot;12/08/21 22:32:30&quot; --in &quot;{go}01/02/06 15:04:05&quot; --out &quot;{unix}&quot;
1639002750
</code></pre><h2 id="flags" tabindex="-1"><a class="header-anchor" href="#flags" aria-hidden="true">#</a> Flags</h2><ul><li><code>--in</code> Defines the date/time string is formatted in \`--value</li><li><code>--out</code> Defined how the date/time string should be formatted in STDOUT</li><li><code>--value</code> Date/time value to convert (if omitted and the input format is not set to <code>{now}</code> then date/time is read from STDIN)</li></ul><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><h3 id="date-time-format-code-parsers" tabindex="-1"><a class="header-anchor" href="#date-time-format-code-parsers" aria-hidden="true">#</a> Date Time Format Code Parsers</h3><p><code>datetime</code> supports a number of parsers, defined in curly braces.</p><h4 id="py-python-strftime-strptime-format-codes" tabindex="-1"><a class="header-anchor" href="#py-python-strftime-strptime-format-codes" aria-hidden="true">#</a> <code>{py}</code>: Python strftime / strptime format codes</h4><p>Murex doesn&#39;t support all the language and locale features of Python, instead defaulting to English. However enough support is there to cover most use cases.</p>`,24),m={href:"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior",target:"_blank",rel:"noopener noreferrer"},p=e("h4",{id:"go-go-lang-time-time-format-codes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#go-go-lang-time-time-format-codes","aria-hidden":"true"},"#"),t(),e("code",null,"{go}"),t(": Go (lang) time.Time format codes")],-1),f=e("p",null,"Murex has full support for Go's date/time parsing.",-1),g={href:"https://pkg.go.dev/time#pkg-constants",target:"_blank",rel:"noopener noreferrer"},_=e("h4",{id:"now-current-date-and-time",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#now-current-date-and-time","aria-hidden":"true"},"#"),t(),e("code",null,"{now}"),t(": Current date and time")],-1),q=e("p",null,[t("This is only supported as an input. When it is used "),e("code",null,"--value"),t(" flag is not required.")],-1),x=e("h2",{id:"see-also",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),t(" See Also")],-1),b=e("code",null,"[",-1),v=e("code",null,"a",-1);function y(k,D){const o=d("ExternalLinkIcon"),r=d("RouterLink");return s(),c("div",null,[h,e("p",null,[t("Documentation regarding these format codes can be found on "),e("a",m,[t("docs.python.org"),a(o)]),t(".")]),p,f,e("p",null,[t("Documentation regarding these format codes can be found on "),e("a",g,[t("pkg.go.dev"),a(o)]),t(".")]),_,q,x,e("ul",null,[e("li",null,[a(r,{to:"/commands/range.html"},{default:n(()=>[b,t(" (range) ")]),_:1}),t(": Outputs a ranged subset of data from STDIN")]),e("li",null,[a(r,{to:"/commands/a.html"},{default:n(()=>[v,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array or list")])])])}const N=i(u,[["render",y],["__file","datetime.html.vue"]]);export{N as default};

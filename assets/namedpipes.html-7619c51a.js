import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as l,a as e,b as a,d as t,w as o,e as c}from"./app-e7cfee99.js";const p={},u=e("h1",{id:"murex-named-pipes-user-guide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#murex-named-pipes-user-guide","aria-hidden":"true"},"#"),a(" Murex Named Pipes - User Guide")],-1),m=e("blockquote",null,[e("p",null,"A detailed breakdown of named pipes in Murex")],-1),h=e("h2",{id:"background",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#background","aria-hidden":"true"},"#"),a(" Background")],-1),f={href:"https://en.wikipedia.org/wiki/Named_pipe",target:"_blank",rel:"noopener noreferrer"},_=c(`<blockquote><p>In computing, a named pipe (also known as a FIFO for its behavior) is an<br> extension to the traditional pipe concept on Unix and Unix-like systems, and<br> is one of the methods of inter-process communication (IPC). The concept is<br> also found in OS/2 and Microsoft Windows, although the semantics differ<br> substantially. A traditional pipe is &quot;unnamed&quot; and lasts only as long as the<br> process. A named pipe, however, can last as long as the system is up, beyond<br> the life of the process. It can be deleted if no longer used. Usually a named<br> pipe appears as a file, and generally processes attach to it for IPC.</p></blockquote><p>Where Murex differs from standard Linux/UNIX is that named pipes are not<br> special files but rather an object or construct within the shell runtime. This<br> allows for more user friendly tooling and syntactic sugar to implemented around<br> it while largely still having the same functionality as a more traditional file<br> based named pipe.</p><h2 id="in-murex" tabindex="-1"><a class="header-anchor" href="#in-murex" aria-hidden="true">#</a> In Murex</h2><p>In Murex, named pipes are described in code as a value inside angle brackets.<br> There are four named pipes pre-configured: <code>&lt;in&gt;</code> (STDIN), <code>&lt;out&gt;</code> (STDOUT),<br><code>&lt;err&gt;</code> (STDERR), and <code>&lt;null&gt;</code> (/dev/null equivalent).</p><p>You can call a named pipe as either a method, function, or parameter.</p><p><strong>As a method:</strong></p><pre><code>&lt;in&gt; -&gt; command parameter1 parameter2 parameter3
</code></pre><p>**As a function:</p><pre><code>command parameter1 parameter2 parameter3 -&gt; &lt;out&gt;
</code></pre><p>**As a parameter:</p><pre><code>command &lt;out&gt; &lt;!err&gt; parameter1 parameter2 parameter3
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,12),b=e("code",null,"<>",-1),g=e("code",null,"read-named-pipe",-1),x=e("br",null,null,-1),k=e("code",null,"<stdin>",-1),w=e("br",null,null,-1),I=e("code",null,"test",-1),y=e("br",null,null,-1);function v(N,T){const s=r("ExternalLinkIcon"),n=r("RouterLink");return d(),l("div",null,[u,m,h,e("p",null,[e("a",f,[a("Wikipedia describes"),t(s)]),a(" a named pipe as the following:")]),_,e("ul",null,[e("li",null,[t(n,{to:"/commands/namedpipe.html"},{default:o(()=>[b,a(" / "),g]),_:1}),a(":"),x,a(" Reads from a Murex named pipe")]),e("li",null,[t(n,{to:"/commands/stdin.html"},{default:o(()=>[k]),_:1}),a(":"),w,a(" Read the STDIN belonging to the parent code block")]),e("li",null,[t(n,{to:"/commands/test.html"},{default:o(()=>[I]),_:1}),a(":"),y,a(" Murex's test framework - define tests, run tests and debug shell scripts")])])])}const S=i(p,[["render",v],["__file","namedpipes.html.vue"]]);export{S as default};

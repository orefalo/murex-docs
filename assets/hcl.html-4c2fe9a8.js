import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as d,d as e,e as t,b as o,w as n,f as c}from"./app-32a3d18c.js";const u={},h=e("h1",{id:"hcl",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hcl","aria-hidden":"true"},"#"),t(),e("code",null,"hcl")],-1),p=e("blockquote",null,[e("p",null,"HashiCorp Configuration Language (HCL)")],-1),m=e("h2",{id:"description",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),t(" Description")],-1),_={href:"https://github.com/hashicorp/hcl",target:"_blank",rel:"noopener noreferrer"},f=e("blockquote",null,[e("p",null,"HCL (HashiCorp Configuration Language) is a configuration language built by HashiCorp. The goal of HCL is to build a structured configuration language that is both human and machine friendly for use with command-line tools, but specifically targeted towards DevOps tools, servers, etc."),e("p",null,"HCL is also fully JSON compatible. That is, JSON can be used as completely valid input to a system expecting HCL. This helps makes systems interoperable with other systems.")],-1),y=e("p",null,"HCL support within Murex is pretty mature however it is not considered a primitive. Which means, while it is a recommended builtin which you should expect in most deployments of Murex, it's still an optional package and thus may not be present in some edge cases. This is because it relies on external source packages for the shell to compile.",-1),x=e("h2",{id:"examples",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#examples","aria-hidden":"true"},"#"),t(" Examples")],-1),g=e("pre",null,[e("code",null,`terraform {
  required_version = "~> 0.11.5"
}

data "aws_availability_zones" "available" {}

data "aws_vpc" "vpc" {
  id = "\${var.vpc_id}"
}

data "aws_route53_zone" "external" {
  zone_id = "\${var.external_hosted_zone_id}"
}

data "aws_iam_policy_document" "assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      identifiers = ["ec2.amazonaws.com"]
      type        = "Service"
    }
  }
}
`)],-1),b={href:"https://github.com/hashicorp/hcl",target:"_blank",rel:"noopener noreferrer"},v=c('<h2 id="default-associations" tabindex="-1"><a class="header-anchor" href="#default-associations" aria-hidden="true">#</a> Default Associations</h2><ul><li><strong>Extension</strong>: <code>hcl</code></li><li><strong>Extension</strong>: <code>tf</code></li><li><strong>Extension</strong>: <code>tfvars</code></li><li><strong>MIME</strong>: <code>application/hcl</code></li><li><strong>MIME</strong>: <code>application/x-hcl</code></li><li><strong>MIME</strong>: <code>text/hcl</code></li><li><strong>MIME</strong>: <code>text/x-hcl</code></li></ul><h2 id="supported-hooks" tabindex="-1"><a class="header-anchor" href="#supported-hooks" aria-hidden="true">#</a> Supported Hooks</h2><ul><li><code>Marshal()</code> Supported via a JSON marshaller because HCL is designed to be written by humans but &quot;compiled&quot; into JSON</li><li><code>ReadArray()</code> Works with HCL arrays. Maps are converted into arrays</li><li><code>ReadArrayWithType()</code> Works with HCL arrays. Maps are converted into arrays. Elements data-type in Murex mirrors the HCL type of the element</li><li><code>ReadIndex()</code> Works against all properties in HCL</li><li><code>ReadMap()</code> Works with HCL maps</li><li><code>ReadNotIndex()</code> Works against all properties in HCL</li><li><code>Unmarshal()</code> Supported</li><li><code>WriteArray()</code> Works with HCL arrays</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',5),k=e("code",null,"Marshal()",-1),C=e("code",null,"ReadArray()",-1),L=e("code",null,"ReadIndex()",-1),M=e("code",null,"[",-1),w=e("code",null,"ReadMap()",-1),H=e("code",null,"ReadNotIndex()",-1),R=e("code",null,"![",-1),A=e("code",null,"Unmarshal()",-1),N=e("code",null,"WriteArray()",-1),S=e("code",null,"[[",-1),E=e("code",null,"[",-1),O=e("code",null,"cast",-1),I=e("code",null,"format",-1),W=e("code",null,"json",-1),J=e("code",null,"jsonl",-1),T=e("code",null,"open",-1),j=e("code",null,"pretty",-1),D=e("code",null,"runtime",-1),q=e("code",null,"yaml",-1);function z(V,B){const l=s("ExternalLinkIcon"),a=s("RouterLink");return r(),d("div",null,[h,p,m,e("p",null,[t("The description below is taken from the HCL git repository's "),e("a",_,[t("README"),o(l)]),t(":")]),f,y,x,g,e("p",null,[t("See the HashiCorp's "),e("a",b,[t("documentation"),o(l)]),t(" for HCL syntax.")]),v,e("ul",null,[e("li",null,[o(a,{to:"/apis/Marshal.html"},{default:n(()=>[k,t(" (type)")]),_:1}),t(": Converts structured memory into a structured file format (eg for stdio)")]),e("li",null,[o(a,{to:"/apis/ReadArray.html"},{default:n(()=>[C,t(" (type)")]),_:1}),t(": Read from a data type one array element at a time")]),e("li",null,[o(a,{to:"/apis/ReadIndex.html"},{default:n(()=>[L,t(" (type)")]),_:1}),t(": Data type handler for the index, "),M,t(", builtin")]),e("li",null,[o(a,{to:"/apis/ReadMap.html"},{default:n(()=>[w,t(" (type)")]),_:1}),t(": Treat data type as a key/value structure and read its contents")]),e("li",null,[o(a,{to:"/apis/ReadNotIndex.html"},{default:n(()=>[H,t(" (type)")]),_:1}),t(": Data type handler for the bang-prefixed index, "),R,t(", builtin")]),e("li",null,[o(a,{to:"/apis/Unmarshal.html"},{default:n(()=>[A,t(" (type)")]),_:1}),t(": Converts a structured file format into structured memory")]),e("li",null,[o(a,{to:"/apis/WriteArray.html"},{default:n(()=>[N,t(" (type)")]),_:1}),t(": Write a data type, one array element at a time")]),e("li",null,[o(a,{to:"/commands/element.html"},{default:n(()=>[S,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[o(a,{to:"/commands/index2.html"},{default:n(()=>[E,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[o(a,{to:"/commands/cast.html"},{default:n(()=>[O]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[o(a,{to:"/commands/format.html"},{default:n(()=>[I]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[o(a,{to:"/types/json.html"},{default:n(()=>[W]),_:1}),t(": JavaScript Object Notation (JSON)")]),e("li",null,[o(a,{to:"/types/jsonl.html"},{default:n(()=>[J]),_:1}),t(": JSON Lines")]),e("li",null,[o(a,{to:"/commands/open.html"},{default:n(()=>[T]),_:1}),t(": Open a file with a preferred handler")]),e("li",null,[o(a,{to:"/commands/pretty.html"},{default:n(()=>[j]),_:1}),t(": Prettifies JSON to make it human readable")]),e("li",null,[o(a,{to:"/commands/runtime.html"},{default:n(()=>[D]),_:1}),t(": Returns runtime information on the internal state of Murex")]),e("li",null,[o(a,{to:"/types/yaml.html"},{default:n(()=>[q]),_:1}),t(": YAML Ain't Markup Language (YAML)")]),e("li",null,[o(a,{to:"/types/mxjson.html"},{default:n(()=>[t("mxjson")]),_:1}),t(": Murex-flavoured JSON (deprecated)")])])])}const $=i(u,[["render",z],["__file","hcl.html.vue"]]);export{$ as default};

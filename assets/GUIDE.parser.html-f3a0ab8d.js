import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as s,c as i,a as t,d as a,w as r,b as e,e as d}from"./app-524c2bb5.js";const c={},u=d('<h1 id="parser-reference" tabindex="-1"><a class="header-anchor" href="#parser-reference" aria-hidden="true">#</a> Parser Reference</h1><p>This section is a glossary of Murex tokens and parser behavior.</p><h2 id="other-reference-material" tabindex="-1"><a class="header-anchor" href="#other-reference-material" aria-hidden="true">#</a> Other Reference Material</h2><h3 id="language-guides" tabindex="-1"><a class="header-anchor" href="#language-guides" aria-hidden="true">#</a> Language Guides</h3>',4),h=t("h3",{id:"murex-s-source-code",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#murex-s-source-code","aria-hidden":"true"},"#"),e(" Murex's Source Code")],-1),p=t("p",null,[e("The parser is located Murex's source under the "),t("code",null,"lang/"),e(" path of the project files.")],-1),_=t("h2",{id:"pages",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pages","aria-hidden":"true"},"#"),e(" Pages")],-1),m=t("code",null,"&&",-1),f=t("code",null,">>",-1),g=t("code",null,"@",-1),T=t("code",null,"->",-1),x=t("code",null,"%(",-1),b=t("code",null,")",-1),k=t("code",null,"%[]",-1),S=t("code",null,"%{}",-1),y=t("code",null,"{",-1),D=t("code",null,"}",-1),v=t("code",null,'"',-1),I=t("code",null,"=>",-1),P=t("code",null,"||",-1),R=t("code",null,"|",-1),O=t("code",null,"?",-1),C=t("code",null,"'",-1),E=t("code",null,"$",-1),N=t("code",null,"~",-1);function B(U,w){const o=l("RouterLink");return s(),i("div",null,[u,t("ol",null,[t("li",null,[t("p",null,[a(o,{to:"/tour.html"},{default:r(()=>[e("Language Tour")]),_:1}),e(", which is an introduction into the Murex language.")])]),t("li",null,[t("p",null,[a(o,{to:"/user-guide/rosetta-stone.html"},{default:r(()=>[e("Rosetta Stone")]),_:1}),e(", which is a reference table comparing Bash syntax to Murex's.")])]),t("li",null,[t("p",null,[a(o,{to:"/GUIDE.builtin-functions.html"},{default:r(()=>[e("Builtins")]),_:1}),e(", for docs on the core builtins.")])])]),h,p,_,t("ul",null,[t("li",null,[a(o,{to:"/parser/logical-and.html"},{default:r(()=>[e("And ("),m,e(") Logical Operator")]),_:1}),e(": Continues next operation if previous operation passes")]),t("li",null,[a(o,{to:"/parser/pipe-append.html"},{default:r(()=>[e("Append Pipe ("),f,e(") Token")]),_:1}),e(": Redirects STDOUT to a file and append its contents")]),t("li",null,[a(o,{to:"/parser/array.html"},{default:r(()=>[e("Array ("),g,e(") Token")]),_:1}),e(": Expand values as an array")]),t("li",null,[a(o,{to:"/parser/pipe-arrow.html"},{default:r(()=>[e("Arrow Pipe ("),T,e(") Token")]),_:1}),e(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),t("li",null,[a(o,{to:"/parser/brace-quote.html"},{default:r(()=>[e("Brace Quote ("),x,e(", "),b,e(") Tokens")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[a(o,{to:"/parser/create-array.html"},{default:r(()=>[e("Create array ("),k,e(") constructor")]),_:1}),e(": Quickly generate arrays")]),t("li",null,[a(o,{to:"/parser/create-object.html"},{default:r(()=>[e("Create object ("),S,e(") constructor")]),_:1}),e(": Quickly generate objects and maps")]),t("li",null,[a(o,{to:"/parser/curly-brace.html"},{default:r(()=>[e("Curly Brace ("),y,e(", "),D,e(") Tokens")]),_:1}),e(": Initiates or terminates a code block")]),t("li",null,[a(o,{to:"/parser/double-quote.html"},{default:r(()=>[e("Double Quote ("),v,e(") Token")]),_:1}),e(": Initiates or terminates a string (variables expanded)")]),t("li",null,[a(o,{to:"/parser/pipe-generic.html"},{default:r(()=>[e("Generic Pipe ("),I,e(") Token")]),_:1}),e(": Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command")]),t("li",null,[a(o,{to:"/parser/logical-or.html"},{default:r(()=>[e("Or ("),P,e(") Logical Operator")]),_:1}),e(": Continues next operation only if previous operation fails")]),t("li",null,[a(o,{to:"/parser/pipe-posix.html"},{default:r(()=>[e("POSIX Pipe ("),R,e(") Token")]),_:1}),e(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),t("li",null,[a(o,{to:"/parser/pipe-err.html"},{default:r(()=>[e("STDERR Pipe ("),O,e(") Token")]),_:1}),e(": Pipes STDERR from the left hand command to STDIN of the right hand command")]),t("li",null,[a(o,{to:"/parser/single-quote.html"},{default:r(()=>[e("Single Quote ("),C,e(") Token")]),_:1}),e(": Initiates or terminates a string (variables not expanded)")]),t("li",null,[a(o,{to:"/parser/string.html"},{default:r(()=>[e("String ("),E,e(") Token")]),_:1}),e(": Expand values as a string")]),t("li",null,[a(o,{to:"/parser/tilde.html"},{default:r(()=>[e("Tilde ("),N,e(") Token")]),_:1}),e(": Home directory path variable")])])])}const G=n(c,[["render",B],["__file","GUIDE.parser.html.vue"]]);export{G as default};

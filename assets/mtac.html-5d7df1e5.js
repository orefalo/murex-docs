import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as l,d as e,b as o,w as n,e as t,f as i}from"./app-d5c3dbe7.js";const c={},u=i(`<h1 id="mtac" tabindex="-1"><a class="header-anchor" href="#mtac" aria-hidden="true">#</a> <code>mtac</code></h1><blockquote><p>Reverse the order of an array</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>mtac</code> takes input from STDIN and reverses the order of it.</p><p>It&#39;s name is derived from a program called <code>tac</code> - a tool that functions like <code>cat</code> but returns the contents in the reverse order. The difference with the <code>mtac</code> builtin is that it is data-type aware. So it doesn&#39;t just function as a replacement for <code>tac</code> but it also works on JSON arrays, s-expressions, and any other data-type supporting arrays compiled into Murex.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>\`&lt;stdin&gt;\` -&gt; mtac -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» ja: [Monday..Friday] -&gt; mtac
[
    &quot;Friday&quot;,
    &quot;Thursday&quot;,
    &quot;Wednesday&quot;,
    &quot;Tuesday&quot;,
    &quot;Monday&quot;
]

# Normal output (without mtac)
» ja: [Monday..Friday]
[
    &quot;Monday&quot;,
    &quot;Tuesday&quot;,
    &quot;Wednesday&quot;,
    &quot;Thursday&quot;,
    &quot;Friday&quot;
]
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>Please bare in mind that while Murex is optimised with concurrency and streaming in mind, it&#39;s impossible to reverse an incomplete array. Thus all all of STDIN must have been read and that file closed before <code>mtac</code> can output.</p><p>In practical terms you shouldn&#39;t notice any difference except for when STDIN is a long running process or non-standard stream (eg network pipe).</p><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>mtac</code></li><li><code>list.reverse</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,15),m=e("code",null,"2darray",-1),h=e("code",null,"a",-1),p=e("code",null,"append",-1),f=e("code",null,"count",-1),y=e("code",null,"ja",-1),_=e("code",null,"jsplit",-1),x=e("code",null,"map",-1),b=e("code",null,"msort",-1),q=e("code",null,"prefix",-1),g=e("code",null,"prepend",-1),S=e("code",null,"pretty",-1),k=e("code",null,"suffix",-1),w=e("code",null,"ta",-1);function N(v,T){const a=r("RouterLink");return s(),l("div",null,[u,e("ul",null,[e("li",null,[o(a,{to:"/commands/2darray.html"},{default:n(()=>[m]),_:1}),t(": Create a 2D JSON array from multiple input sources")]),e("li",null,[o(a,{to:"/commands/a.html"},{default:n(()=>[h,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array or list")]),e("li",null,[o(a,{to:"/commands/append.html"},{default:n(()=>[p]),_:1}),t(": Add data to the end of an array")]),e("li",null,[o(a,{to:"/commands/count.html"},{default:n(()=>[f]),_:1}),t(": Count items in a map, list or array")]),e("li",null,[o(a,{to:"/commands/ja.html"},{default:n(()=>[y,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[o(a,{to:"/commands/jsplit.html"},{default:n(()=>[_]),_:1}),t(": Splits STDIN into a JSON array based on a regex parameter")]),e("li",null,[o(a,{to:"/commands/map.html"},{default:n(()=>[x]),_:1}),t(": Creates a map from two data sources")]),e("li",null,[o(a,{to:"/commands/msort.html"},{default:n(()=>[b]),_:1}),t(": Sorts an array - data type agnostic")]),e("li",null,[o(a,{to:"/commands/prefix.html"},{default:n(()=>[q]),_:1}),t(": Prefix a string to every item in a list")]),e("li",null,[o(a,{to:"/commands/prepend.html"},{default:n(()=>[g]),_:1}),t(": Add data to the start of an array")]),e("li",null,[o(a,{to:"/commands/pretty.html"},{default:n(()=>[S]),_:1}),t(": Prettifies JSON to make it human readable")]),e("li",null,[o(a,{to:"/commands/suffix.html"},{default:n(()=>[k]),_:1}),t(": Prefix a string to every item in a list")]),e("li",null,[o(a,{to:"/commands/ta.html"},{default:n(()=>[w,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array of a user defined data-type")])])])}const A=d(c,[["render",N],["__file","mtac.html.vue"]]);export{A as default};

import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as p,d as a,b as e,w as t,e as n,f as c}from"./app-8b62c3ab.js";const r={},u=c(`<h1 id="marshal-type" tabindex="-1"><a class="header-anchor" href="#marshal-type" aria-hidden="true">#</a> <code>Marshal()</code> (type)</h1><blockquote><p>Converts structured memory into a structured file format (eg for stdio)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This is a function you would write when programming a Murex data-type. The marshal function takes in a Go (golang) <code>type</code> or <code>struct</code> and returns a byte slice of a &quot;string&quot; representation of that format (eg in JSON) or an error.</p><p>This marshaller is then registered to Murex inside an <code>init()</code> function and Murex builtins can use that marshaller via the <code>MarshalData()</code> API.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Registering <code>Marshal()</code> (for writing builtin data-types)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// To avoid data races, this should only happen inside func init()</span>
lang<span class="token punctuation">.</span>Marshallers<span class="token punctuation">[</span> <span class="token comment">/* your type name */</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token comment">/* your readIndex func */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Using an existing marshaller (eg inside a builtin command)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// See documentation on lang.MarshalData for more details</span>
b<span class="token punctuation">,</span> err <span class="token operator">:=</span> lang<span class="token punctuation">.</span><span class="token function">MarshalData</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> dataType<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Defining a marshaller for a murex data-type</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> example

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/json&quot;</span>

	<span class="token string">&quot;github.com/lmorg/murex/lang&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Register data-type</span>
	lang<span class="token punctuation">.</span>Marshallers<span class="token punctuation">[</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> marshal
<span class="token punctuation">}</span>

<span class="token comment">// Describe marshaller</span>
<span class="token keyword">func</span> <span class="token function">marshal</span><span class="token punctuation">(</span>p <span class="token operator">*</span>lang<span class="token punctuation">.</span>Process<span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>Stdout<span class="token punctuation">.</span><span class="token function">IsTTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// If STDOUT is a TTY (ie not pipe, text file or other destination other</span>
		<span class="token comment">// than a terminal) then output JSON in an indented, human readable,</span>
		<span class="token comment">// format....</span>
		<span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// ....otherwise we might as well output it in a minified format</span>
	<span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ol><li><code>*lang.Process</code>: Process&#39;s runtime state. Typically expressed as the variable <code>p</code></li><li><code>interface{}</code>: data you wish to marshal</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,16),d=a("code",null,"Unmarshal()",-1),m=a("code",null,"lang.MarshalData()",-1),h=a("code",null,"lang.UnmarshalData()",-1);function k(v,g){const s=i("RouterLink");return l(),p("div",null,[u,a("ul",null,[a("li",null,[e(s,{to:"/apis/Unmarshal.html"},{default:t(()=>[n("apis/"),d,n(" (type)")]),_:1}),n(": Converts a structured file format into structured memory")]),a("li",null,[e(s,{to:"/apis/lang.MarshalData.html"},{default:t(()=>[n("apis/"),m,n(" (system API)")]),_:1}),n(": Converts structured memory into a Murex data-type (eg for stdio)")]),a("li",null,[e(s,{to:"/apis/lang.UnmarshalData.html"},{default:t(()=>[n("apis/"),h,n(" (system API)")]),_:1}),n(": Converts a Murex data-type into structured memory")])])])}const y=o(r,[["render",k],["__file","Marshal.html.vue"]]);export{y as default};

import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as a,d as e,b as c,w as d,e as o,f as r}from"./app-dae038b0.js";const i={},u=r(`<h1 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> <code>or</code></h1><blockquote><p>Returns <code>true</code> or <code>false</code> depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Returns a boolean results (<code>true</code> or <code>false</code>) depending on whether any of the code-blocks included as parameters are successful or not.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>or: { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`

!or: { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`
</code></pre><p><code>or</code> supports as many or as few code-blocks as you wish.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>if { or { = 1+1==2 } { = 2+2==5 } { = 3+3==6 } } then {
    out: At least one of those equations are correct
}
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>or</code> does not set the exit number on failure so it is safe to use inside a <code>try</code> or <code>trypipe</code> block.</p><p>If <code>or</code> is prefixed by a bang (<code>!or</code>) then it returns <code>true</code> when one or more code-blocks are unsuccessful (ie the opposite of <code>or</code>).</p><h3 id="code-block-testing" tabindex="-1"><a class="header-anchor" href="#code-block-testing" aria-hidden="true">#</a> Code-Block Testing</h3><ul><li><p><code>or</code> only executes code-blocks up until one of the code-blocks is successful then it exits the function and returns <code>true</code>.</p></li><li><p><code>!or</code> only executes code-blocks while the code-blocks are successful. Once one is unsuccessful <code>!or</code> exits and returns <code>true</code> (ie it <code>not</code>s every code-block).</p></li></ul><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>or</code></li><li><code>!or</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,17),h=e("code",null,"!",-1),f=e("code",null,"and",-1),p=e("code",null,"true",-1),_=e("code",null,"false",-1),m=e("code",null,"catch",-1),b=e("code",null,"try",-1),k=e("code",null,"trypipe",-1),x=e("code",null,"false",-1),y=e("code",null,"false",-1),g=e("code",null,"if",-1),w=e("code",null,"true",-1),R=e("code",null,"true",-1),v=e("code",null,"try",-1),C=e("code",null,"trypipe",-1);function N(B,S){const t=n("RouterLink");return l(),a("div",null,[u,e("ul",null,[e("li",null,[c(t,{to:"/commands/not.html"},{default:d(()=>[h,o(" (not)")]),_:1}),o(": Reads the STDIN and exit number from previous process and not's it's condition")]),e("li",null,[c(t,{to:"/commands/and.html"},{default:d(()=>[f]),_:1}),o(": Returns "),p,o(" or "),_,o(" depending on whether multiple conditions are met")]),e("li",null,[c(t,{to:"/commands/catch.html"},{default:d(()=>[m]),_:1}),o(": Handles the exception code raised by "),b,o(" or "),k]),e("li",null,[c(t,{to:"/commands/false.html"},{default:d(()=>[x]),_:1}),o(": Returns a "),y,o(" value")]),e("li",null,[c(t,{to:"/commands/if.html"},{default:d(()=>[g]),_:1}),o(": Conditional statement to execute different blocks of code depending on the result of the condition")]),e("li",null,[c(t,{to:"/commands/true.html"},{default:d(()=>[w]),_:1}),o(": Returns a "),R,o(" value")]),e("li",null,[c(t,{to:"/commands/try.html"},{default:d(()=>[v]),_:1}),o(": Handles errors inside a block of code")]),e("li",null,[c(t,{to:"/commands/trypipe.html"},{default:d(()=>[C]),_:1}),o(": Checks state of each function in a pipeline and exits block on error")])])])}const D=s(i,[["render",N],["__file","or.html.vue"]]);export{D as default};

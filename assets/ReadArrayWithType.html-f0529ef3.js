import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,d as a,b as t,w as e,e as n,f as l}from"./app-28dd8e97.js";const u={},r=l(`<h1 id="readarraywithtype-type" tabindex="-1"><a class="header-anchor" href="#readarraywithtype-type" aria-hidden="true">#</a> <code>ReadArrayWithType()</code> (type)</h1><blockquote><p>Read from a data type one array element at a time and return the elements contents and data type</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This is a function you would write when programming a Murex data-type.</p><p>It&#39;s called by builtins to allow them to read data structures one array element at a time.</p><p>The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.</p><p>This differs from ReadArray() because it also returns the data type.</p><p>There is a good chance ReadArray() might get deprecated in the medium to long term.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Registering your <code>ReadArrayWithType()</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// To avoid confusion, this should only happen inside func init()</span>
stdio<span class="token punctuation">.</span><span class="token function">RegisterReadArrayWithType</span><span class="token punctuation">(</span><span class="token comment">/* your type name */</span><span class="token punctuation">,</span> <span class="token comment">/* your readArray func */</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>Example <code>ReadArrayWithType()</code> function:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> <span class="token builtin">string</span>

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;context&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>

	<span class="token string">&quot;github.com/lmorg/murex/lang/stdio&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang/types&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">readArrayWithType</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> read stdio<span class="token punctuation">.</span>Io<span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span>
	<span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token function">callback</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>String<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	err <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;error while reading a %s array: %s&quot;</span><span class="token punctuation">,</span> types<span class="token punctuation">.</span>String<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>If your data type is not a stream-able array, it is then recommended that you pass your array to <code>lang.ArrayWithTypeTemplate()</code> which is a handler to convert Go structures into Murex arrays. This also makes writing <code>ReadArray()</code> handlers easier since you can just pass <code>lang.ArrayTemplate()</code> your marshaller. For example:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> json

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;context&quot;</span>

	<span class="token string">&quot;github.com/lmorg/murex/lang&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang/stdio&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/lang/types&quot;</span>
	<span class="token string">&quot;github.com/lmorg/murex/utils/json&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">readArrayWithType</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> read stdio<span class="token punctuation">.</span>Io<span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Create a marshaller function to pass to ArrayWithTypeTemplate</span>
	marshaller <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> read<span class="token punctuation">.</span><span class="token function">IsTTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> lang<span class="token punctuation">.</span><span class="token function">ArrayWithTypeTemplate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> types<span class="token punctuation">.</span>Json<span class="token punctuation">,</span> marshaller<span class="token punctuation">,</span> json<span class="token punctuation">.</span>Unmarshal<span class="token punctuation">,</span> read<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The downside of this is that you&#39;re then unmarshalling the entire file, which could be slow on large files and also breaks the streaming nature of UNIX pipelines.</p><h2 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h2><ol><li><code>stdio.Io</code>: stream to read from (eg STDIN)</li><li><code>func(interface{}, string)</code>: callback function. Each callback will be the value in its native Go data type (eg string, int, float64, bool) for an array element</li></ol><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,21),d=a("code",null,"ReadIndex()",-1),k=a("code",null,"[",-1),m=a("code",null,"ReadMap()",-1),h=a("code",null,"ReadNotIndex()",-1),v=a("code",null,"![",-1),y=a("code",null,"WriteArray()",-1),b=a("code",null,"lang.ArrayTemplate()",-1),g=a("code",null,"lang.ArrayWithTypeTemplate()",-1);function f(x,w){const s=p("RouterLink");return i(),c("div",null,[r,a("ul",null,[a("li",null,[t(s,{to:"/apis/ReadIndex.html"},{default:e(()=>[n("apis/"),d,n(" (type)")]),_:1}),n(": Data type handler for the index, "),k,n(", builtin")]),a("li",null,[t(s,{to:"/apis/ReadMap.html"},{default:e(()=>[n("apis/"),m,n(" (type)")]),_:1}),n(": Treat data type as a key/value structure and read its contents")]),a("li",null,[t(s,{to:"/apis/ReadNotIndex.html"},{default:e(()=>[n("apis/"),h,n(" (type)")]),_:1}),n(": Data type handler for the bang-prefixed index, "),v,n(", builtin")]),a("li",null,[t(s,{to:"/apis/WriteArray.html"},{default:e(()=>[n("apis/"),y,n(" (type)")]),_:1}),n(": Write a data type, one array element at a time")]),a("li",null,[t(s,{to:"/apis/lang.ArrayTemplate.html"},{default:e(()=>[n("apis/"),b,n(" (template API)")]),_:1}),n(": Unmarshals a data type into a Go struct and returns the results as an array")]),a("li",null,[t(s,{to:"/apis/lang.ArrayWithTypeTemplate.html"},{default:e(()=>[n("apis/"),g,n(" (template API)")]),_:1}),n(": Unmarshals a data type into a Go struct and returns the results as an array with data type included")])])])}const q=o(u,[["render",f],["__file","ReadArrayWithType.html.vue"]]);export{q as default};

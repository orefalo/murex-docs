import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c,a as e,d as n,w as l,b as o,e as d}from"./app-b0a6fc94.js";const r={},u=d(`<h1 id="variable-and-config-scoping-user-guide" tabindex="-1"><a class="header-anchor" href="#variable-and-config-scoping-user-guide" aria-hidden="true">#</a> Variable and Config Scoping - User Guide</h1><blockquote><p>How scoping works within Murex</p></blockquote><p>A &#39;scope&#39; in Murex is a collection of code blocks to which variables and<br> config are persistent within. In Murex, a variable declared inside an <code>if</code> or<br><code>foreach</code> block will be persistent outside of their blocks as long as you&#39;re<br> still inside the same function.</p><p>For example lets start with the following function that sets a variable called<br><strong>foo</strong></p><pre><code>function example {
    if { true } then { set foo=bar }
    out $foo
}
</code></pre><p>In here the value is getting set inside an <code>if</code> block but its value is is<br> retrieved outside of that block. <code>out</code> and <code>set</code> have different parents but<br> the same scoping.</p><p>Then lets set <strong>foo</strong> outside of that function and see what happens:</p><pre><code>» set foo=oof
» $foo
oof

» example
bar

» $foo
oof
</code></pre><p>Despite setting a variable named <strong>foo</strong>, the value inside <strong>example</strong> does not<br> overwrite the value outside <strong>example</strong> because they occupy different scoping.</p><h2 id="what-instantiates-a-new-scope" tabindex="-1"><a class="header-anchor" href="#what-instantiates-a-new-scope" aria-hidden="true">#</a> What Instantiates A New Scope?</h2><p>A new scope is instantiated by anything which resembles a function. This would<br> be code inside events, dynamic autocompletes, open agents, any code blocks<br> defined in <code>config</code>, as well as public and private functions too.</p><p>Code inside an <code>if</code>, <code>switch</code>, <code>foreach</code> and <code>source</code> do not create a new<br> scope. Subshells also do not create a new scoping either.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,13),h=e("br",null,null,-1),f=e("code",null,"autocomplete",-1),_=e("br",null,null,-1),p=e("code",null,"config",-1),m=e("br",null,null,-1),b=e("code",null,"event",-1),g=e("br",null,null,-1),v=e("code",null,"foreach",-1),w=e("br",null,null,-1),x=e("code",null,"function",-1),k=e("br",null,null,-1),y=e("code",null,"if",-1),S=e("br",null,null,-1),C=e("code",null,"let",-1),M=e("br",null,null,-1),V=e("code",null,"openagent",-1),I=e("br",null,null,-1),N=e("code",null,"private",-1),A=e("br",null,null,-1),B=e("code",null,"set",-1),D=e("br",null,null,-1),E=e("code",null,"source",-1),R=e("br",null,null,-1),T=e("code",null,"switch",-1),$=e("br",null,null,-1);function q(L,F){const t=a("RouterLink");return i(),c("div",null,[u,e("ul",null,[e("li",null,[n(t,{to:"/user-guide/reserved-vars.html"},{default:l(()=>[o("Reserved Variables")]),_:1}),o(":"),h,o(" Special variables reserved by Murex")]),e("li",null,[n(t,{to:"/commands/autocomplete.html"},{default:l(()=>[f]),_:1}),o(":"),_,o(" Set definitions for tab-completion in the command line")]),e("li",null,[n(t,{to:"/commands/config.html"},{default:l(()=>[p]),_:1}),o(":"),m,o(" Query or define Murex runtime settings")]),e("li",null,[n(t,{to:"/commands/event.html"},{default:l(()=>[b]),_:1}),o(":"),g,o(" Event driven programming for shell scripts")]),e("li",null,[n(t,{to:"/commands/foreach.html"},{default:l(()=>[v]),_:1}),o(":"),w,o(" Iterate through an array")]),e("li",null,[n(t,{to:"/commands/function.html"},{default:l(()=>[x]),_:1}),o(":"),k,o(" Define a function block")]),e("li",null,[n(t,{to:"/commands/if.html"},{default:l(()=>[y]),_:1}),o(":"),S,o(" Conditional statement to execute different blocks of code depending on the result of the condition")]),e("li",null,[n(t,{to:"/commands/let.html"},{default:l(()=>[C]),_:1}),o(":"),M,o(" Evaluate a mathematical function and assign to variable (deprecated)")]),e("li",null,[n(t,{to:"/commands/openagent.html"},{default:l(()=>[V]),_:1}),o(":"),I,o(" Creates a handler function for `open")]),e("li",null,[n(t,{to:"/commands/private.html"},{default:l(()=>[N]),_:1}),o(":"),A,o(" Define a private function block")]),e("li",null,[n(t,{to:"/commands/set.html"},{default:l(()=>[B]),_:1}),o(":"),D,o(" Define a local variable and set it's value")]),e("li",null,[n(t,{to:"/commands/source.html"},{default:l(()=>[E]),_:1}),o(":"),R,o(" Import Murex code from another file of code block")]),e("li",null,[n(t,{to:"/commands/switch.html"},{default:l(()=>[T]),_:1}),o(":"),$,o(" Blocks of cascading conditionals")])])])}const Q=s(r,[["render",q],["__file","scoping.html.vue"]]);export{Q as default};

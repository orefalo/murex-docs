import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as d,d as e,e as o,b as t,w as s,f as i}from"./app-97fd9f14.js";const h={},u=i('<h1 id="what-s-new-in-murex-v2-1-change-log" tabindex="-1"><a class="header-anchor" href="#what-s-new-in-murex-v2-1-change-log" aria-hidden="true">#</a> What&#39;s new in murex v2.1 - Change Log</h1><p>This release comes with support for inlining SQL and some major bug fixes plus a breaking change for <code>config</code>. Please read for details.</p><p>This release sees new optional features plus major bug fixes to the existing code base:</p><h3 id="breaking-changes" tabindex="-1"><a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a> Breaking Changes:</h3><p>Two <code>config</code> <strong>shell</strong> keys have changed names:</p><ul><li>recursive-soft-timeout -&gt; <code>autocomplete-soft-timeout</code></li><li>recursive-hard-timeout -&gt; <code>autocomplete-hard-timeout</code></li></ul><p>This is to better describe their functionality now that those values are also used for <code>Dynamic</code> and <code>DynamicDesc</code> autocompletions as well as recursive directory lookups.</p><p><strong>This change might break some of your existing profile config!</strong></p><h3 id="user-facing-changes" tabindex="-1"><a class="header-anchor" href="#user-facing-changes" aria-hidden="true">#</a> User Facing Changes:</h3>',9),p=i("<li><p><code>config</code> <strong>shell</strong> <strong>max-suggestions</strong> now defaults at <code>12</code> rather than 6</p></li><li><p>New optional builtin, <code>select</code>, allows you to inline SQL queries against any tabulated output (eg <code>ps -fe</code>, jsonlines arrays, CSV files, etc). This works via importing output into an in memory sqlite3 database. However this also breaks cross compiling due to the C includes with sqlite3. Thus this builtin will remain optional for now.</p></li><li><p>Rethink of how optionals are imported. Rather than modifying <code>// +build</code> headers in <code>.go</code> files, optionals can be copied (or symlinked) from <code>builtins/imports_src</code> -&gt; <code>builtins/imports_build</code>. This enables us to write a user friendly pre-compiling build script to enable users to easily select which optional builtins to include.</p></li>",3),g=e("code",null,"^z",-1),m={href:"https://github.com/lmorg/murex/issues/318",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"^z",-1),_=e("code",null,"jobs",-1),b=e("code",null,"bg",-1),w=e("code",null,"fg",-1),y=i("<li><p>Added new API endpoints: <code>ReadArrayWithType()</code>. This solves some edge cases in <code>foreach</code> where elements might not match the same data type as the parent object (eg a <code>json</code> object might have <code>int</code> or <code>str</code> elements in an array)</p></li><li><p>Rewritten how <code>Dynamic</code> autocompletions are executed to fall in line with <code>DynamicDesc</code>. This should bring improvements to running autocompletions in the background and thus improve the user experience with regards to the shell&#39;s responsiveness. The next step would be to have a lower soft-timeout</p></li><li><p>Improvements to the context completions</p></li><li><p>Default lengths for autocompletions where all results are deferred to the background have been tweaked slightly to give some extra length</p></li><li><p>Minor website tweaks</p></li>",5),v=e("h3",{id:"non-user-facing-maintenance-changes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#non-user-facing-maintenance-changes","aria-hidden":"true"},"#"),o(" Non-User Facing / Maintenance Changes")],-1),k=e("li",null,[e("p",null,[o("All dependencies have been updated, pinned and the "),e("code",null,"vendors"),o(" directory rebuilt")])],-1),x={href:"https://goreportcard.com/report/github.com/lmorg/murex",target:"_blank",rel:"noopener noreferrer"},T=e("li",null,[e("p",null,"Some internal API changes that have no UI/UX ramifications but makes the code more maintainable")],-1),j=e("li",null,[e("p",null,"Lots more unit tests added")],-1),L=e("hr",null,null,-1),S=e("p",null,"Published: 30.04.2021 at 10:00",-1),I=e("h2",{id:"see-also",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#see-also","aria-hidden":"true"},"#"),o(" See Also")],-1),R=e("code",null,"*",-1),C=e("code",null,"ReadArrayWithType()",-1),A=e("code",null,"bg",-1),N=e("code",null,"csv",-1),D=e("code",null,"fg",-1),U=e("code",null,"foreach",-1),V=e("code",null,"jobs",-1),B=e("code",null,"jsonl",-1),P=e("code",null,"select",-1);function W(q,z){const a=l("ExternalLinkIcon"),n=l("RouterLink");return c(),d("div",null,[u,e("ul",null,[p,e("li",null,[e("p",null,[o("Stopping jobs via "),g,o(" has been fixed in UNIX. This was a regression bug introduced a while back however no tests were in place to catch it. Unfortunately this kind of testing would fall outside of unit testing each function so I'll need to add another layer of testing against the compiled executable to verify any future regressions like these: "),e("a",m,[o("discussion"),t(a)]),o(" To use this feature, run a command and then press "),f,o(" (ctrl+z) to pause the process. You can check which jobs have been paused via "),_,o(" and/or modify processes to run in the background/foreground via "),b,o(" and "),w,o(".")])]),y]),v,e("ul",null,[k,e("li",null,[e("p",null,[o("Fixed some issues flagged up in "),e("a",x,[o("goreportcard.com"),t(a)])])]),T,j]),L,S,I,e("ul",null,[e("li",null,[t(n,{to:"/types/generic.html"},{default:s(()=>[R,o(" (generic) ")]),_:1}),o(": generic (primitive)")]),e("li",null,[t(n,{to:"/apis/ReadArrayWithType.html"},{default:s(()=>[C,o(" (type)")]),_:1}),o(": Read from a data type one array element at a time and return the elements contents and data type")]),e("li",null,[t(n,{to:"/commands/bg.html"},{default:s(()=>[A]),_:1}),o(": Run processes in the background")]),e("li",null,[t(n,{to:"/types/csv.html"},{default:s(()=>[N]),_:1}),o(": CSV files (and other character delimited tables)")]),e("li",null,[t(n,{to:"/commands/fg.html"},{default:s(()=>[D]),_:1}),o(": Sends a background process into the foreground")]),e("li",null,[t(n,{to:"/commands/foreach.html"},{default:s(()=>[U]),_:1}),o(": Iterate through an array")]),e("li",null,[t(n,{to:"/commands/fid-list.html"},{default:s(()=>[V]),_:1}),o(": Lists all running functions within the current Murex session")]),e("li",null,[t(n,{to:"/types/jsonl.html"},{default:s(()=>[B]),_:1}),o(": JSON Lines")]),e("li",null,[t(n,{to:"/optional/select.html"},{default:s(()=>[P]),_:1}),o(": Inlining SQL into shell pipelines")])])])}const M=r(h,[["render",W],["__file","v2.1.html.vue"]]);export{M as default};

import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as i,d as e,b as o,w as l,e as t,f as d}from"./app-ed1b6a51.js";const c={},u=d('<h1 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> <code>yaml</code></h1><blockquote><p>YAML Ain&#39;t Markup Language (YAML)</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>YAML support within Murex is pretty mature however it is not considered a primitive. Which means, while it is a recommended builtin which you should expect in most deployments of Murex, it&#39;s still an optional package and thus may not be present in some edge cases. This is because it relies on external source packages for the shell to compile.</p><h2 id="default-associations" tabindex="-1"><a class="header-anchor" href="#default-associations" aria-hidden="true">#</a> Default Associations</h2><ul><li><strong>Extension</strong>: <code>yaml</code></li><li><strong>Extension</strong>: <code>yml</code></li><li><strong>MIME</strong>: <code>application/x-yaml</code></li><li><strong>MIME</strong>: <code>application/yaml</code></li><li><strong>MIME</strong>: <code>text/x-yaml</code></li><li><strong>MIME</strong>: <code>text/yaml</code></li></ul><h2 id="supported-hooks" tabindex="-1"><a class="header-anchor" href="#supported-hooks" aria-hidden="true">#</a> Supported Hooks</h2><ul><li><code>Marshal()</code> Supported</li><li><code>ReadArray()</code> Works with YAML arrays. Maps are converted into arrays</li><li><code>ReadArrayWithType()</code> Works with YAML arrays. Maps are converted into arrays. Element type returned in Murex should match element type in YAML</li><li><code>ReadIndex()</code> Works against all properties in YAML</li><li><code>ReadMap()</code> Works with YAML maps</li><li><code>ReadNotIndex()</code> Works against all properties in YAML</li><li><code>Unmarshal()</code> Supported</li><li><code>WriteArray()</code> Works with YAML arrays</li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',9),h=e("code",null,"Marshal()",-1),p=e("code",null,"ReadArray()",-1),m=e("code",null,"ReadIndex()",-1),_=e("code",null,"[",-1),y=e("code",null,"ReadMap()",-1),f=e("code",null,"ReadNotIndex()",-1),x=e("code",null,"![",-1),M=e("code",null,"Unmarshal()",-1),A=e("code",null,"WriteArray()",-1),g=e("code",null,"[[",-1),k=e("code",null,"[",-1),R=e("code",null,"cast",-1),b=e("code",null,"format",-1),L=e("code",null,"json",-1),W=e("code",null,"jsonl",-1),w=e("code",null,"lang.ArrayTemplate()",-1),v=e("code",null,"lang.ArrayWithTypeTemplate()",-1),I=e("code",null,"open",-1),N=e("code",null,"runtime",-1);function T(Y,E){const a=s("RouterLink");return r(),i("div",null,[u,e("ul",null,[e("li",null,[o(a,{to:"/apis/Marshal.html"},{default:l(()=>[h,t(" (type)")]),_:1}),t(": Converts structured memory into a structured file format (eg for stdio)")]),e("li",null,[o(a,{to:"/apis/ReadArray.html"},{default:l(()=>[p,t(" (type)")]),_:1}),t(": Read from a data type one array element at a time")]),e("li",null,[o(a,{to:"/apis/ReadIndex.html"},{default:l(()=>[m,t(" (type)")]),_:1}),t(": Data type handler for the index, "),_,t(", builtin")]),e("li",null,[o(a,{to:"/apis/ReadMap.html"},{default:l(()=>[y,t(" (type)")]),_:1}),t(": Treat data type as a key/value structure and read its contents")]),e("li",null,[o(a,{to:"/apis/ReadNotIndex.html"},{default:l(()=>[f,t(" (type)")]),_:1}),t(": Data type handler for the bang-prefixed index, "),x,t(", builtin")]),e("li",null,[o(a,{to:"/apis/Unmarshal.html"},{default:l(()=>[M,t(" (type)")]),_:1}),t(": Converts a structured file format into structured memory")]),e("li",null,[o(a,{to:"/apis/WriteArray.html"},{default:l(()=>[A,t(" (type)")]),_:1}),t(": Write a data type, one array element at a time")]),e("li",null,[o(a,{to:"/commands/element.html"},{default:l(()=>[g,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[o(a,{to:"/commands/index2.html"},{default:l(()=>[k,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[o(a,{to:"/commands/cast.html"},{default:l(()=>[R]),_:1}),t(": Alters the data type of the previous function without altering it's output")]),e("li",null,[o(a,{to:"/commands/format.html"},{default:l(()=>[b]),_:1}),t(": Reformat one data-type into another data-type")]),e("li",null,[o(a,{to:"/types/json.html"},{default:l(()=>[L]),_:1}),t(": JavaScript Object Notation (JSON)")]),e("li",null,[o(a,{to:"/types/jsonl.html"},{default:l(()=>[W]),_:1}),t(": JSON Lines")]),e("li",null,[o(a,{to:"/apis/lang.ArrayTemplate.html"},{default:l(()=>[w,t(" (template API)")]),_:1}),t(": Unmarshals a data type into a Go struct and returns the results as an array")]),e("li",null,[o(a,{to:"/apis/lang.ArrayWithTypeTemplate.html"},{default:l(()=>[v,t(" (template API)")]),_:1}),t(": Unmarshals a data type into a Go struct and returns the results as an array with data type included")]),e("li",null,[o(a,{to:"/commands/open.html"},{default:l(()=>[I]),_:1}),t(": Open a file with a preferred handler")]),e("li",null,[o(a,{to:"/commands/runtime.html"},{default:l(()=>[N]),_:1}),t(": Returns runtime information on the internal state of Murex")])])])}const j=n(c,[["render",T],["__file","yaml.html.vue"]]);export{j as default};

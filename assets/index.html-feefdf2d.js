import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as h,c as p,d as e,b as t,w as s,e as a,f as d}from"./app-8b62c3ab.js";const m={},g=d('<h1 id="install-murexs" tabindex="-1"><a class="header-anchor" href="#install-murexs" aria-hidden="true">#</a> Install Murexs</h1><h2 id="supported-platforms" tabindex="-1"><a class="header-anchor" href="#supported-platforms" aria-hidden="true">#</a> Supported Platforms</h2><p>Linux, BSD and macOS are fully supported, with other platforms considered experimental and/or having known limitations.</p><h2 id="pre-compiled-binaries-https-download" tabindex="-1"><a class="header-anchor" href="#pre-compiled-binaries-https-download" aria-hidden="true">#</a> Pre-Compiled Binaries (HTTPS download)</h2>',4),b=e("img",{src:"https://raw.githubusercontent.com/lmorg/murex/master/version.svg",alt:"Version",loading:"lazy"},null,-1),f=e("img",{src:"https://codebuild.eu-west-1.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoib3cxVnoyZUtBZU5wN1VUYUtKQTJUVmtmMHBJcUJXSUFWMXEyc2d3WWJldUdPTHh4QWQ1eFNRendpOUJHVnZ5UXBpMXpFVkVSb3k2UUhKL2xCY2JhVnhJPSIsIml2UGFyYW1ldGVyU3BlYyI6Im9QZ2dPS3ozdWFyWHIvbm8iLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master",alt:"CodeBuild",loading:"lazy"},null,-1),v=e("strong",null,"download a pre-compiled binary",-1),_=e("h2",{id:"installing-from-a-package-manager",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#installing-from-a-package-manager","aria-hidden":"true"},"#"),a(" Installing From A Package Manager")],-1),x={href:"https://repology.org/project/murex/versions",target:"_blank",rel:"noopener noreferrer"},y=e("img",{src:"https://repology.org/badge/vertical-allrepos/murex.svg",alt:"Packaging status",loading:"lazy"},null,-1),k=e("p",null,[a("Install "),e("code",null,"Murex"),a(" from your favorite package manager")],-1),w=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("brew "),e("span",{class:"token function"},"install"),a(` murex
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),P=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`https://aur.archlinux.org/packages/murex
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),A=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h"),e("span",{class:"token operator"},"="),a(`murex
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),T=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),a(" port "),e("span",{class:"token function"},"install"),a(` murex
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),I=e("h2",{id:"compiling-from-source",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#compiling-from-source","aria-hidden":"true"},"#"),a(" Compiling From Source")],-1),S={href:"https://circleci.com/gh/lmorg/murex/tree/master",target:"_blank",rel:"noopener noreferrer"},H=e("img",{src:"https://circleci.com/gh/lmorg/murex/tree/master.svg?style=svg",alt:"CircleCI",loading:"lazy"},null,-1),O=d("<p><strong>Prerequisites:</strong></p><p>You will need <code>go</code> (Golang) compiler, <code>gcc</code> (C compiler) and <code>git</code> installed as well as your <code>$GOPATH</code> environmental variable set.</p><blockquote><p>Go 1.18 or higher is required.</p></blockquote><p>These should be easy to install on most operating systems however Windows is a lot more tricky with regards to <code>gcc</code>. Please check with your operating systems package manager first but see further reading below if you get stuck.</p><p><strong>Further Reading:</strong></p>",5),B={href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/git-guides/install-git",target:"_blank",rel:"noopener noreferrer"},U={href:"https://gcc.gnu.org/install/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/golang/go/wiki/SettingGOPATH",target:"_blank",rel:"noopener noreferrer"},G=d(`<h3 id="installation-from-source-steps" tabindex="-1"><a class="header-anchor" href="#installation-from-source-steps" aria-hidden="true">#</a> Installation From Source Steps</h3><p>The following instructions are assuming you&#39;re compiling on a POSIX-compatible system like Linux, BSD or macOS. Compiling from source is untested on Plan 9 (if you run into issues there then please use the pre-compiled binary for that platform) and Windows. In the case of Windows you may run into issues with the <code>gcc</code> installation and some of the commands below will need to be adapted (eg <code>murex.exe</code> used instead of <code>./murex</code>).</p><blockquote><p>Compiling from source is not recommended unless you already have a strong understanding of compiling Go projects for your specific platform.</p></blockquote><p><strong>Importing the source code:</strong></p><p>At present, Murex depends on being in a specific directory hierarchy for the tests to work and packages to import correctly. These instructions will talk you through creating that initial structure ready to import the source into. Experienced users in Go may opt to ignore some of these steps and run <code>go get -u github.com/lmorg/murex</code> instead. While this <em>should</em> work in most cases, it is difficult to run automated tests to ensure any updates doesn&#39;t break the <code>go get</code> import tool. And thus that approach is not officially supported. If you are in any doubt, please follow the <code>git clone</code> process below.</p><p>First create the directory path and clone the source into the appropriate directory structure.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$GOPATH</span>/src/github.com/lmorg/murex
<span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/lmorg/murex
<span class="token function">git</span> clone https://github.com/lmorg/murex <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point you can add and remove any optional builtins by following the instructions on this located further down this document. This is entirely optional as Murex attempts to ship with sane defaults.</p><p><strong>Compile the code:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go build github.com/lmorg/murex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Test the executable (optional stage):</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./murex <span class="token parameter variable">-c</span> <span class="token string">&#39;g: behavioural/*.mx -&gt; foreach: f { source $f }; try {test: run *}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Start the shell:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./murex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="including-optional-builtins" tabindex="-1"><a class="header-anchor" href="#including-optional-builtins" aria-hidden="true">#</a> Including Optional Builtins</h2><p>Some optional builtins will be included by default, however there may be others you wish to include which are not part of the default build (such as <code>qr</code>). To add them, copy (or symlink) the applicable include file from <code>builtins/import_src</code> to <code>builtins/import_build</code>.</p><p>A tool will be introduced in a later version to automate this.</p><h2 id="external-dependencies-optional" tabindex="-1"><a class="header-anchor" href="#external-dependencies-optional" aria-hidden="true">#</a> External Dependencies (Optional)</h2><p>Some of Murex&#39;s extended features will have additional external dependencies.</p>`,19),M=e("code",null,"aspell",-1),D=e("code",null,"aspell",-1),L=e("code",null,"$PATH",-1),N={href:"http://aspell.net",target:"_blank",rel:"noopener noreferrer"},V=e("h2",{id:"recommended-terminal-typeface",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#recommended-terminal-typeface","aria-hidden":"true"},"#"),a(" Recommended Terminal Typeface")],-1),F={href:"https://github.com/i-tu/Hasklig",target:"_blank",rel:"noopener noreferrer"};function R(J,X){const r=l("RouterLink"),o=l("ExternalLinkIcon"),c=l("CodeTabs");return h(),p("div",null,[g,e("p",null,[t(r,{to:"/install/DOWNLOAD.html"},{default:s(()=>[b]),_:1}),t(r,{to:"/install/DOWNLOAD.html"},{default:s(()=>[f]),_:1})]),e("p",null,[a("If you wish to "),v,a(" then head to the "),t(r,{to:"/install/DOWNLOAD.html"},{default:s(()=>[a("DOWNLOAD")]),_:1}),a(" page to select your platform.")]),_,e("p",null,[e("a",x,[y,t(o)])]),k,t(c,{id:"27",data:[{id:"Brew"},{id:"AUR Package"},{id:"PKGBuild file"},{id:"MacPorts"}],"tab-id":"shell"},{title0:s(({value:n,isActive:i})=>[a("Brew")]),title1:s(({value:n,isActive:i})=>[a("AUR Package")]),title2:s(({value:n,isActive:i})=>[a("PKGBuild file")]),title3:s(({value:n,isActive:i})=>[a("MacPorts")]),tab0:s(({value:n,isActive:i})=>[w]),tab1:s(({value:n,isActive:i})=>[P]),tab2:s(({value:n,isActive:i})=>[A]),tab3:s(({value:n,isActive:i})=>[T]),_:1}),I,e("p",null,[e("a",S,[H,t(o)])]),O,e("ul",null,[e("li",null,[e("a",B,[a("How to install Go"),t(o)])]),e("li",null,[e("a",C,[a("How to install git"),t(o)])]),e("li",null,[e("a",U,[a("How to install gcc"),t(o)])]),e("li",null,[e("a",W,[a("How to set GOPATH"),t(o)])])]),G,e("ul",null,[e("li",null,[M,a(": This is used for spellchecking. Murex will automatically enable or disable spellchecking based on whether "),D,a(" can be found in your "),L,a(". "),e("a",N,[a("http://aspell.net"),t(o)])])]),V,e("p",null,[a("This is obviously just a subjective matter and everyone will have their own personal preference. However if I was asked what my preference was then that would be "),e("a",F,[a("Hasklig"),t(o)]),a(". It's a clean typeface based off Source Code Pro but with a few added ligatures - albeit subtle ones designed to make Haskell more readable. Those ligatures also suite Murex pretty well. So the overall experience is a clean and readable terminal.")])])}const Y=u(m,[["render",R],["__file","index.html.vue"]]);export{Y as default};

import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as i,d as e,b as n,w as d,e as a,f as l}from"./app-0b7bba6d.js";const u={},c=l(`<h1 id="ta-mkarray" tabindex="-1"><a class="header-anchor" href="#ta-mkarray" aria-hidden="true">#</a> <code>ta</code> (mkarray)</h1><blockquote><p>A sophisticated yet simple way to build an array of a user defined data-type</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Murex has a pretty sophisticated builtin for generating arrays. It works a little bit like Bash&#39;s <code>{1..9}</code> syntax but includes a few additional nifty features and the output format is user defined.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>ta: data-type [start..end] -&gt; \`&lt;stdout&gt;\`
ta: data-type [start..end.base] -&gt; \`&lt;stdout&gt;\`
ta: data-type [start..end,start..end] -&gt; \`&lt;stdout&gt;\`
ta: data-type [start..end][start..end] -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>» ta: json [1..5]
[
    &quot;1&quot;,
    &quot;2&quot;,
    &quot;3&quot;,
    &quot;4&quot;,
    &quot;5&quot;
]

» ta: json [Monday..Sunday]
[
    &quot;Monday&quot;,
    &quot;Tuesday&quot;,
    &quot;Wednesday&quot;,
    &quot;Thursday&quot;,
    &quot;Friday&quot;,
    &quot;Saturday&quot;,
    &quot;Sunday&quot;
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please note that as per the first example, all arrays generated by <code>ta</code> are arrays of strings - even if you&#39;re command is ranging over integers. Also if you are only creating arrays in JSON then you could use <code>ja</code> instead.</p><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>Please read the documentation on <code>a</code> for a more detailed breakdown on of <code>ta</code>&#39;s supported features.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,12),m=e("code",null,"%[]",-1),h=e("code",null,"[[",-1),p=e("code",null,"[",-1),v=e("code",null,"[",-1),y=e("code",null,"a",-1),f=e("code",null,"count",-1),b=e("code",null,"ja",-1),_=e("code",null,"mtac",-1);function g(q,x){const t=o("RouterLink");return r(),i("div",null,[c,e("ul",null,[e("li",null,[n(t,{to:"/parser/create-array.html"},{default:d(()=>[a("Create array ("),m,a(") constructor")]),_:1}),a(": Quickly generate arrays")]),e("li",null,[n(t,{to:"/commands/element.html"},{default:d(()=>[h,a(" (element)")]),_:1}),a(": Outputs an element from a nested structure")]),e("li",null,[n(t,{to:"/commands/index2.html"},{default:d(()=>[p,a(" (index)")]),_:1}),a(": Outputs an element from an array, map or table")]),e("li",null,[n(t,{to:"/commands/range.html"},{default:d(()=>[v,a(" (range) ")]),_:1}),a(": Outputs a ranged subset of data from STDIN")]),e("li",null,[n(t,{to:"/commands/a.html"},{default:d(()=>[y,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simple way to build an array or list")]),e("li",null,[n(t,{to:"/commands/count.html"},{default:d(()=>[f]),_:1}),a(": Count items in a map, list or array")]),e("li",null,[n(t,{to:"/commands/ja.html"},{default:d(()=>[b,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[n(t,{to:"/commands/mtac.html"},{default:d(()=>[_]),_:1}),a(": Reverse the order of an array")])])])}const S=s(u,[["render",g],["__file","ta.html.vue"]]);export{S as default};

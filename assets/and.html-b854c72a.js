import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as a,c as l,d as e,b as t,w as n,e as o,f as i}from"./app-0b7bba6d.js";const r={},u=i(`<h1 id="and" tabindex="-1"><a class="header-anchor" href="#and" aria-hidden="true">#</a> <code>and</code></h1><blockquote><p>Returns <code>true</code> or <code>false</code> depending on whether multiple conditions are met</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Returns a boolean results (<code>true</code> or <code>false</code>) depending on whether all of the code-blocks included as parameters are successful or not.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>and: { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`

!and: { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`
</code></pre><p><code>and</code> supports as many or as few code-blocks as you wish.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>if { and { = 1+1==2 } { = 2+2==4 } { = 3+3==6 } } then {
    out: The laws of mathematics still exist in this universe.
}
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>and</code> does not set the exit number on failure so it is safe to use inside a <code>try</code> or <code>trypipe</code> block.</p><p>If <code>and</code> is prefixed by a bang then it returns <code>true</code> only when all code-blocks are unsuccessful.</p><h3 id="code-block-testing" tabindex="-1"><a class="header-anchor" href="#code-block-testing" aria-hidden="true">#</a> Code-Block Testing</h3><ul><li><p><code>and</code> tests all code-blocks up until one of the code-blocks is unsuccessful, then <code>and</code> exits and returns <code>false</code>.</p></li><li><p><code>!and</code> tests all code-blocks up until one of the code-blocks is successful, then <code>!and</code> exits and returns <code>false</code> (ie <code>!and</code> is <code>not</code>ing every code-block).</p></li></ul><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>and</code></li><li><code>!and</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,17),h=e("code",null,"!",-1),f=e("code",null,"catch",-1),p=e("code",null,"try",-1),_=e("code",null,"trypipe",-1),m=e("code",null,"false",-1),b=e("code",null,"false",-1),k=e("code",null,"if",-1),x=e("code",null,"or",-1),y=e("code",null,"true",-1),g=e("code",null,"false",-1),w=e("code",null,"true",-1),v=e("code",null,"true",-1),R=e("code",null,"try",-1),C=e("code",null,"trypipe",-1);function N(B,S){const d=c("RouterLink");return a(),l("div",null,[u,e("ul",null,[e("li",null,[t(d,{to:"/commands/not.html"},{default:n(()=>[h,o(" (not)")]),_:1}),o(": Reads the STDIN and exit number from previous process and not's it's condition")]),e("li",null,[t(d,{to:"/commands/catch.html"},{default:n(()=>[f]),_:1}),o(": Handles the exception code raised by "),p,o(" or "),_]),e("li",null,[t(d,{to:"/commands/false.html"},{default:n(()=>[m]),_:1}),o(": Returns a "),b,o(" value")]),e("li",null,[t(d,{to:"/commands/if.html"},{default:n(()=>[k]),_:1}),o(": Conditional statement to execute different blocks of code depending on the result of the condition")]),e("li",null,[t(d,{to:"/commands/or.html"},{default:n(()=>[x]),_:1}),o(": Returns "),y,o(" or "),g,o(" depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.")]),e("li",null,[t(d,{to:"/commands/true.html"},{default:n(()=>[w]),_:1}),o(": Returns a "),v,o(" value")]),e("li",null,[t(d,{to:"/commands/try.html"},{default:n(()=>[R]),_:1}),o(": Handles errors inside a block of code")]),e("li",null,[t(d,{to:"/commands/trypipe.html"},{default:n(()=>[C]),_:1}),o(": Checks state of each function in a pipeline and exits block on error")])])])}const D=s(r,[["render",N],["__file","and.html.vue"]]);export{D as default};

import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as s,c as r,d as e,b as n,w as o,e as a,f as c}from"./app-97fd9f14.js";const i={},u=c(`<h1 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> <code>append</code></h1><blockquote><p>Add data to the end of an array</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>append</code> data to the end of an array.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>\`&lt;stdin&gt;\` -&gt; append: value -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» a: [Monday..Sunday] -&gt; append: Funday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
Funday
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>prepend</code> and <code>append</code> are data type aware:</p><pre><code>» tout json [1,2,3] -&gt; append 4 5 6 bob
Error in \`append\` (1,22): cannot convert &#39;bob&#39; to a floating point number: strconv.ParseFloat: parsing &quot;bob&quot;: invalid syntax
</code></pre><h2 id="synonyms" tabindex="-1"><a class="header-anchor" href="#synonyms" aria-hidden="true">#</a> Synonyms</h2><ul><li><code>append</code></li><li><code>list.append</code></li></ul><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,14),h=e("code",null,"[[",-1),m=e("code",null,"[",-1),p=e("code",null,"[",-1),_=e("code",null,"[",-1),f=e("code",null,"a",-1),y=e("code",null,"addheading",-1),x=e("code",null,"cast",-1),b=e("code",null,"count",-1),g=e("code",null,"ja",-1),v=e("code",null,"match",-1),S=e("code",null,"msort",-1),k=e("code",null,"mtac",-1),A=e("code",null,"prepend",-1),w=e("code",null,"regexp",-1);function N(O,q){const t=l("RouterLink");return s(),r("div",null,[u,e("ul",null,[e("li",null,[n(t,{to:"/commands/element.html"},{default:o(()=>[h,a(" (element)")]),_:1}),a(": Outputs an element from a nested structure")]),e("li",null,[n(t,{to:"/commands/index2.html"},{default:o(()=>[m,a(" (index)")]),_:1}),a(": Outputs an element from an array, map or table")]),e("li",null,[n(t,{to:"/commands/index2.html"},{default:o(()=>[p,a(" (index)")]),_:1}),a(": Outputs an element from an array, map or table")]),e("li",null,[n(t,{to:"/commands/range.html"},{default:o(()=>[_,a(" (range) ")]),_:1}),a(": Outputs a ranged subset of data from STDIN")]),e("li",null,[n(t,{to:"/commands/a.html"},{default:o(()=>[f,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simple way to build an array or list")]),e("li",null,[n(t,{to:"/commands/addheading.html"},{default:o(()=>[y]),_:1}),a(": Adds headings to a table")]),e("li",null,[n(t,{to:"/commands/cast.html"},{default:o(()=>[x]),_:1}),a(": Alters the data type of the previous function without altering it's output")]),e("li",null,[n(t,{to:"/commands/count.html"},{default:o(()=>[b]),_:1}),a(": Count items in a map, list or array")]),e("li",null,[n(t,{to:"/commands/ja.html"},{default:o(()=>[g,a(" (mkarray)")]),_:1}),a(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[n(t,{to:"/commands/match.html"},{default:o(()=>[v]),_:1}),a(": Match an exact value in an array")]),e("li",null,[n(t,{to:"/commands/msort.html"},{default:o(()=>[S]),_:1}),a(": Sorts an array - data type agnostic")]),e("li",null,[n(t,{to:"/commands/mtac.html"},{default:o(()=>[k]),_:1}),a(": Reverse the order of an array")]),e("li",null,[n(t,{to:"/commands/prepend.html"},{default:o(()=>[A]),_:1}),a(": Add data to the start of an array")]),e("li",null,[n(t,{to:"/commands/regexp.html"},{default:o(()=>[w]),_:1}),a(": Regexp tools for arrays / lists of strings")])])])}const T=d(i,[["render",N],["__file","append.html.vue"]]);export{T as default};

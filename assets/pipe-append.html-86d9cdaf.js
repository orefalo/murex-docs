import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as s,d as e,e as t,b as a,w as n,f as c}from"./app-ac63f6d4.js";const h={},p=e("h1",{id:"append-pipe-token-parser-reference",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#append-pipe-token-parser-reference","aria-hidden":"true"},"#"),t(" Append Pipe ("),e("code",null,">>"),t(") Token - Parser Reference")],-1),u=e("blockquote",null,[e("p",null,"Redirects STDOUT to a file and append its contents")],-1),f=e("h2",{id:"description",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),t(" Description")],-1),m=e("p",null,"This is used to redirect the STDOUT of a command and append it to a file. If that file does not exist, then the file is created.",-1),_={href:"https://www.gnu.org/software/bash/manual/bash.html#Appending-Redirected-Output",target:"_blank",rel:"noopener noreferrer"},x=c(`<h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>» out: &quot;Hello&quot; &gt;&gt; example.txt
» out: &quot;World!&quot; &gt;&gt; example.txt
» open: example.txt
Hello
World!
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p>This is just syntactic sugar for <code>-&gt; &gt;&gt;</code>. Thus when the parser reads code like the following:</p><pre><code>echo &quot;foobar&quot; &gt;&gt; example.txt
</code></pre><p>it will compile an abstract syntax tree which would reflect the following code instead:</p><pre><code>echo &quot;foobar&quot; | &gt;&gt; example.txt
</code></pre><h3 id="truncating-a-file" tabindex="-1"><a class="header-anchor" href="#truncating-a-file" aria-hidden="true">#</a> Truncating a file</h3><p>To truncate a file (ie overwrite its contents) use <code>|&gt;</code> instead.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,10),g=e("code",null,"->",-1),T=e("code",null,"|",-1),w=e("code",null,"?",-1),k=e("code",null,"<>",-1),b=e("code",null,"read-named-pipe",-1),S=e("code",null,">>",-1),D=e("code",null,">",-1),y=e("code",null,"ja",-1);function v(I,N){const r=i("ExternalLinkIcon"),o=i("RouterLink");return d(),s("div",null,[p,u,f,m,e("p",null,[t("This behaves similarly to the "),e("a",_,[t("Bash (et al) token"),a(r)]),t(" except it doesn't support adding alternative file descriptor numbers. Instead you will need to use named pipes to achieve the same effect in Murex.")]),x,e("ul",null,[e("li",null,[a(o,{to:"/parser/pipe-arrow.html"},{default:n(()=>[t("Arrow Pipe ("),g,t(") Token")]),_:1}),t(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[a(o,{to:"/parser/pipe-posix.html"},{default:n(()=>[t("POSIX Pipe ("),T,t(") Token")]),_:1}),t(": Pipes STDOUT from the left hand command to STDIN of the right hand command")]),e("li",null,[a(o,{to:"/user-guide/pipeline.html"},{default:n(()=>[t("Pipeline")]),_:1}),t(': Overview of what a "pipeline" is')]),e("li",null,[a(o,{to:"/parser/pipe-err.html"},{default:n(()=>[t("STDERR Pipe ("),w,t(") Token")]),_:1}),t(": Pipes STDERR from the left hand command to STDIN of the right hand command")]),e("li",null,[a(o,{to:"/commands/namedpipe.html"},{default:n(()=>[k,t(" / "),b]),_:1}),t(": Reads from a Murex named pipe")]),e("li",null,[a(o,{to:"/commands/greater-than-greater-than.html"},{default:n(()=>[S,t(" (append file)")]),_:1}),t(": Writes STDIN to disk - appending contents if file already exists")]),e("li",null,[a(o,{to:"/commands/greater-than.html"},{default:n(()=>[D,t(" (truncate file)")]),_:1}),t(": Writes STDIN to disk - overwriting contents if file already exists")]),e("li",null,[a(o,{to:"/commands/ja.html"},{default:n(()=>[y,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simply way to build a JSON array")])])])}const q=l(h,[["render",v],["__file","pipe-append.html.vue"]]);export{q as default};

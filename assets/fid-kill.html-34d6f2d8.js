import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as s,c as d,d as e,b as l,w as i,e as n,f as c}from"./app-7f3a7ef5.js";const r={},u=c(`<h1 id="fid-kill" tabindex="-1"><a class="header-anchor" href="#fid-kill" aria-hidden="true">#</a> <code>fid-kill</code></h1><blockquote><p>Terminate a running Murex function</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p><code>fid-kill</code> will terminate a running Murex function in a similar way that the POSIX <code>kill</code> (superficially speaking).</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>fid-kill fid
</code></pre><h2 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> Detail</h2><p><code>fid-kill</code> doesn&#39;t send a kernel signal to the process since Murex is a multi-threaded shell with a single signal, <code>fid-kill</code> will send a cancellation context to any builtins executing (which covers builtins, aliases, public and private functions and any external executables running which were launched within the current Murex shell).</p><p>The FID (function ID) sent is not the same as a POSIX (eg Linux, macOS, BSD) PID (process ID). You can obtain a FID from <code>fid-list</code>.</p><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,10),h=e("code",null,"bexists",-1),f=e("code",null,"bg",-1),m=e("code",null,"builtins",-1),_=e("code",null,"exec",-1),x=e("code",null,"fexec",-1),p=e("code",null,"fg",-1),b=e("code",null,"fid-killall",-1),g=e("em",null,"all",-1),k=e("code",null,"fid-list",-1),w=e("code",null,"jobs",-1),M=e("code",null,"murex-update-exe-list",-1);function D(I,S){const t=a("RouterLink");return s(),d("div",null,[u,e("ul",null,[e("li",null,[l(t,{to:"/commands/bexists.html"},{default:i(()=>[h]),_:1}),n(": Check which builtins exist")]),e("li",null,[l(t,{to:"/commands/bg.html"},{default:i(()=>[f]),_:1}),n(": Run processes in the background")]),e("li",null,[l(t,{to:"/commands/runtime.html"},{default:i(()=>[m]),_:1}),n(": Returns runtime information on the internal state of Murex")]),e("li",null,[l(t,{to:"/commands/exec.html"},{default:i(()=>[_]),_:1}),n(": Runs an executable")]),e("li",null,[l(t,{to:"/commands/fexec.html"},{default:i(()=>[x]),_:1}),n(": Execute a command or function, bypassing the usual order of precedence.")]),e("li",null,[l(t,{to:"/commands/fg.html"},{default:i(()=>[p]),_:1}),n(": Sends a background process into the foreground")]),e("li",null,[l(t,{to:"/commands/fid-killall.html"},{default:i(()=>[b]),_:1}),n(": Terminate "),g,n(" running Murex functions")]),e("li",null,[l(t,{to:"/commands/fid-list.html"},{default:i(()=>[k]),_:1}),n(": Lists all running functions within the current Murex session")]),e("li",null,[l(t,{to:"/commands/fid-list.html"},{default:i(()=>[w]),_:1}),n(": Lists all running functions within the current Murex session")]),e("li",null,[l(t,{to:"/commands/murex-update-exe-list.html"},{default:i(()=>[M]),_:1}),n(": Forces Murex to rescan $PATH looking for executables")])])])}const L=o(r,[["render",D],["__file","fid-kill.html.vue"]]);export{L as default};

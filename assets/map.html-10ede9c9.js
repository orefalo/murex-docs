import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as u,c as s,a as e,d as o,w as n,b as t,e as r}from"./app-5c3d1e58.js";const i={},c=r(`<h1 id="map-command-reference" tabindex="-1"><a class="header-anchor" href="#map-command-reference" aria-hidden="true">#</a> <code>map</code> - Command Reference</h1><blockquote><p>Creates a map from two data sources</p></blockquote><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This takes two parameters - which are code blocks - and combines them to output a key/value map in JSON.</p><p>The first block is the key and the second is the value.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><pre><code>map { code-block } { code-block } -&gt; \`&lt;stdout&gt;\`
</code></pre><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><pre><code>Â» map { tout: json ([&quot;key 1&quot;, &quot;key 2&quot;, &quot;key 3&quot;]) } { tout: json ([&quot;value 1&quot;, &quot;value 2&quot;, &quot;value 3&quot;]) }
{
    &quot;key 1&quot;: &quot;value 1&quot;,
    &quot;key 2&quot;: &quot;value 2&quot;,
    &quot;key 3&quot;: &quot;value 3&quot;
}
</code></pre><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>`,10),m=e("code",null,"[[",-1),h=e("code",null,"[",-1),p=e("code",null,"[",-1),_=e("code",null,"a",-1),f=e("code",null,"alter",-1),q=e("code",null,"append",-1),g=e("code",null,"count",-1),y=e("code",null,"ja",-1),k=e("code",null,"jsplit",-1),b=e("code",null,"prepend",-1);function x(v,w){const a=d("RouterLink");return u(),s("div",null,[c,e("ul",null,[e("li",null,[o(a,{to:"/guide/commands/element.html"},{default:n(()=>[m,t(" (element)")]),_:1}),t(": Outputs an element from a nested structure")]),e("li",null,[o(a,{to:"/guide/commands/"},{default:n(()=>[h,t(" (index)")]),_:1}),t(": Outputs an element from an array, map or table")]),e("li",null,[o(a,{to:"/guide/commands/range.html"},{default:n(()=>[p,t(" (range) ")]),_:1}),t(": Outputs a ranged subset of data from STDIN")]),e("li",null,[o(a,{to:"/guide/commands/a.html"},{default:n(()=>[_,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simple way to build an array or list")]),e("li",null,[o(a,{to:"/guide/commands/alter.html"},{default:n(()=>[f]),_:1}),t(": Change a value within a structured data-type and pass that change along the pipeline without altering the original source input")]),e("li",null,[o(a,{to:"/guide/commands/append.html"},{default:n(()=>[q]),_:1}),t(": Add data to the end of an array")]),e("li",null,[o(a,{to:"/guide/commands/count.html"},{default:n(()=>[g]),_:1}),t(": Count items in a map, list or array")]),e("li",null,[o(a,{to:"/guide/commands/ja.html"},{default:n(()=>[y,t(" (mkarray)")]),_:1}),t(": A sophisticated yet simply way to build a JSON array")]),e("li",null,[o(a,{to:"/guide/commands/jsplit.html"},{default:n(()=>[k]),_:1}),t(": Splits STDIN into a JSON array based on a regex parameter")]),e("li",null,[o(a,{to:"/guide/commands/prepend.html"},{default:n(()=>[b]),_:1}),t(": Add data to the start of an array")])])])}const j=l(i,[["render",x],["__file","map.html.vue"]]);export{j as default};

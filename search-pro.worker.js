const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1817,\"nextId\":1817,\"documentIds\":{\"0\":\"v-760458e9\",\"1\":\"v-760458e9#linux\",\"2\":\"v-760458e9#macos-darwin\",\"3\":\"v-760458e9#windows\",\"4\":\"v-760458e9#freebsd\",\"5\":\"v-760458e9#openbsd\",\"6\":\"v-760458e9#netbsd\",\"7\":\"v-760458e9#dragonflybsd\",\"8\":\"v-760458e9#plan-9\",\"9\":\"v-760458e9#other-cpu-architectures\",\"10\":\"v-0da3c85a\",\"11\":\"v-0da3c85a#other-reference-material\",\"12\":\"v-0da3c85a#language-guides\",\"13\":\"v-0da3c85a#murex-s-source-code\",\"14\":\"v-0da3c85a#shell-commands-for-querying-builtins\",\"15\":\"v-0da3c85a#pages\",\"16\":\"v-0da3c85a#optional-builtins\",\"17\":\"v-8daa1a0e\",\"18\":\"v-8daa1a0e#👁‍🗨-screenshots\",\"19\":\"v-8daa1a0e#📦-easy-to-install\",\"20\":\"v-8daa1a0e#🛟-getting-started-tutorial\",\"21\":\"v-144de286\",\"22\":\"v-144de286#language-tour\",\"23\":\"v-144de286#user-guides\",\"24\":\"v-144de286#operators-and-tokens\",\"25\":\"v-144de286#builtin-commands\",\"26\":\"v-144de286#standard-builtins\",\"27\":\"v-144de286#optional-builtins\",\"28\":\"v-144de286#data-types\",\"29\":\"v-144de286#events\",\"30\":\"v-144de286#api-reference\",\"31\":\"v-145ac574\",\"32\":\"v-145ac574#articles\",\"33\":\"v-145ac574#_22-04-2023-reading-lists-from-the-command-line\",\"34\":\"v-145ac574#_02-10-2021-the-split-personalities-of-shell-usage\",\"35\":\"v-145ac574@0\",\"36\":\"v-7057da6b\",\"37\":\"v-7057da6b#preface\",\"38\":\"v-7057da6b#reading-lines-in-bash-and-similar-shells\",\"39\":\"v-7057da6b#but-what-if-my-files-aren-t-line-delimited\",\"40\":\"v-7057da6b#iteration-in-bash-via-jq\",\"41\":\"v-7057da6b#iteration-in-murex-via-foreach\",\"42\":\"v-7057da6b#reading-json-arrays-in-powershell\",\"43\":\"v-7057da6b#conclusion\",\"44\":\"v-7057da6b#see-also\",\"45\":\"v-fef7c8f4\",\"46\":\"v-fef7c8f4#a-very-brief-history\",\"47\":\"v-fef7c8f4#opposing-requirements\",\"48\":\"v-fef7c8f4#the-traditional\",\"49\":\"v-fef7c8f4#the-modern\",\"50\":\"v-fef7c8f4#powershell\",\"51\":\"v-fef7c8f4#oil\",\"52\":\"v-fef7c8f4#murex\",\"53\":\"v-fef7c8f4#conclusion\",\"54\":\"v-fef7c8f4#see-also\",\"55\":\"v-3145ebbe\",\"56\":\"v-3145ebbe#reading-lines\",\"57\":\"v-3145ebbe#but-what-if-my-files-aren-t-line-delimited\",\"58\":\"v-3145ebbe#structured-iteration-in-murex\",\"59\":\"v-3145ebbe#the-foreach-builtin\",\"60\":\"v-3145ebbe#the-formap-builtin\",\"61\":\"v-3145ebbe#lambdas\",\"62\":\"v-3145ebbe#conclusion\",\"63\":\"v-3145ebbe#see-also\",\"64\":\"v-510ed0d4\",\"65\":\"v-510ed0d4#articles\",\"66\":\"v-510ed0d4#_18-07-2023-what-s-new-in-murex-v4-4\",\"67\":\"v-510ed0d4#_02-07-2023-what-s-new-in-murex-v4-3\",\"68\":\"v-510ed0d4#_19-06-2023-what-s-new-in-murex-v4-2\",\"69\":\"v-510ed0d4#_04-06-2023-what-s-new-in-murex-v4-1-x\",\"70\":\"v-510ed0d4#_26-03-2023-what-s-new-in-murex-v4-0\",\"71\":\"v-510ed0d4#_12-02-2023-what-s-new-in-murex-v3-1\",\"72\":\"v-510ed0d4#_31-12-2022-what-s-new-in-murex-v3-0\",\"73\":\"v-510ed0d4#_12-09-2022-what-s-new-in-murex-v2-11\",\"74\":\"v-510ed0d4#_01-08-2022-what-s-new-in-murex-v2-10\",\"75\":\"v-510ed0d4#_15-07-2022-what-s-new-in-murex-v2-9\",\"76\":\"v-510ed0d4#_23-05-2022-what-s-new-in-murex-v2-8\",\"77\":\"v-510ed0d4#_15-05-2022-what-s-new-in-murex-v2-7\",\"78\":\"v-510ed0d4#_26-02-2022-what-s-new-in-murex-v2-6\",\"79\":\"v-510ed0d4#_12-02-2022-what-s-new-in-murex-v2-5\",\"80\":\"v-510ed0d4#_09-12-2021-what-s-new-in-murex-v2-4\",\"81\":\"v-510ed0d4#_26-09-2021-what-s-new-in-murex-v2-3\",\"82\":\"v-510ed0d4#_21-06-2021-what-s-new-in-murex-v2-2\",\"83\":\"v-510ed0d4#_30-04-2021-what-s-new-in-murex-v2-1\",\"84\":\"v-510ed0d4#_17-04-2021-what-s-new-in-murex-v2-0\",\"85\":\"v-510ed0d4@0\",\"86\":\"v-6ef35007\",\"87\":\"v-6ef35007#see-also\",\"88\":\"v-70a828a6\",\"89\":\"v-70a828a6#breaking-changes\",\"90\":\"v-70a828a6#user-facing-changes\",\"91\":\"v-70a828a6#non-user-facing-maintenance-changes\",\"92\":\"v-70a828a6#see-also\",\"93\":\"v-b6e01f08\",\"94\":\"v-b6e01f08#see-also\",\"95\":\"v-b3766dca\",\"96\":\"v-b3766dca#see-also\",\"97\":\"v-725d0145\",\"98\":\"v-725d0145#breaking-changes\",\"99\":\"v-725d0145#user-facing-changes\",\"100\":\"v-725d0145#non-user-facing-maintenance-changes\",\"101\":\"v-725d0145#see-also\",\"102\":\"v-7411d9e4\",\"103\":\"v-7411d9e4#user-facing-changes\",\"104\":\"v-7411d9e4#non-user-facing-maintenance-changes\",\"105\":\"v-7411d9e4#see-also\",\"106\":\"v-75c6b283\",\"107\":\"v-75c6b283#breaking-changes\",\"108\":\"v-75c6b283#user-facing-changes\",\"109\":\"v-75c6b283#non-user-facing-maintenance-changes\",\"110\":\"v-75c6b283#see-also\",\"111\":\"v-777b8b22\",\"112\":\"v-777b8b22#see-also\",\"113\":\"v-793063c1\",\"114\":\"v-793063c1#see-also\",\"115\":\"v-7ae53c60\",\"116\":\"v-7ae53c60#see-also\",\"117\":\"v-7c9a14ff\",\"118\":\"v-7c9a14ff#see-also\",\"119\":\"v-7e4eed9e\",\"120\":\"v-7e4eed9e#see-also\",\"121\":\"v-52570634\",\"122\":\"v-52570634#see-also\",\"123\":\"v-4eed54f6\",\"124\":\"v-4eed54f6#see-also\",\"125\":\"v-3eb5a9c5\",\"126\":\"v-3eb5a9c5#breaking-changes\",\"127\":\"v-3eb5a9c5#features\",\"128\":\"v-3eb5a9c5#non-user-facing-maintenance-changes\",\"129\":\"v-3eb5a9c5#bug-fixes\",\"130\":\"v-3eb5a9c5#see-also\",\"131\":\"v-406a8264\",\"132\":\"v-406a8264#v4-1-7300\",\"133\":\"v-406a8264#breaking-changes\",\"134\":\"v-406a8264#features\",\"135\":\"v-406a8264#bug-fixes\",\"136\":\"v-406a8264#v4-1-6140\",\"137\":\"v-406a8264#breaking-changes-1\",\"138\":\"v-406a8264#features-1\",\"139\":\"v-406a8264#bug-fixes-1\",\"140\":\"v-406a8264#v4-1-5200\",\"141\":\"v-406a8264#breaking-changes-2\",\"142\":\"v-406a8264#features-2\",\"143\":\"v-406a8264#bug-fixes-2\",\"144\":\"v-406a8264#v4-1-4200\",\"145\":\"v-406a8264#breaking-changes-3\",\"146\":\"v-406a8264#features-3\",\"147\":\"v-406a8264#bug-fixes-3\",\"148\":\"v-406a8264#v4-1-3010\",\"149\":\"v-406a8264#breaking-changes-4\",\"150\":\"v-406a8264#features-4\",\"151\":\"v-406a8264#bug-fixes-4\",\"152\":\"v-406a8264#v4-1-1100\",\"153\":\"v-406a8264#breaking-changes-5\",\"154\":\"v-406a8264#features-5\",\"155\":\"v-406a8264#bug-fixes-5\",\"156\":\"v-406a8264#v4-1-10\",\"157\":\"v-406a8264#breaking-changes-6\",\"158\":\"v-406a8264#features-6\",\"159\":\"v-406a8264#bug-fixes-6\",\"160\":\"v-421f5b03\",\"161\":\"v-421f5b03#breaking-changes\",\"162\":\"v-421f5b03#features\",\"163\":\"v-421f5b03#bug-fixes\",\"164\":\"v-421f5b03#see-also\",\"165\":\"v-43d433a2\",\"166\":\"v-43d433a2#breaking-changes\",\"167\":\"v-43d433a2#features\",\"168\":\"v-43d433a2#bug-fixes\",\"169\":\"v-43d433a2#see-also\",\"170\":\"v-45890c41\",\"171\":\"v-45890c41#v4-4-8000\",\"172\":\"v-45890c41#breaking-changes\",\"173\":\"v-45890c41#features\",\"174\":\"v-45890c41#bug-fixes\",\"175\":\"v-45890c41#v4-4-7000\",\"176\":\"v-45890c41#breaking-changes-1\",\"177\":\"v-45890c41#features-1\",\"178\":\"v-45890c41#bug-fixes-1\",\"179\":\"v-45890c41#v4-4-x\",\"180\":\"v-45890c41#breaking-changes-2\",\"181\":\"v-45890c41#features-2\",\"182\":\"v-45890c41#bug-fixes-2\",\"183\":\"v-45890c41#see-also\",\"184\":\"v-fffb8e28\",\"185\":\"v-fffb8e28#highlight-features\",\"186\":\"v-fffb8e28#bar\",\"187\":\"v-fffb8e28#foo\",\"188\":\"v-7727a2f8\",\"189\":\"v-7727a2f8#download-links\",\"190\":\"v-7727a2f8#darwin-macos\",\"191\":\"v-7727a2f8#bsd-s\",\"192\":\"v-7727a2f8#dragonflybsd\",\"193\":\"v-7727a2f8#freebsd\",\"194\":\"v-7727a2f8#netbsd\",\"195\":\"v-7727a2f8#openbsd\",\"196\":\"v-7727a2f8#linux\",\"197\":\"v-7727a2f8#windows\",\"198\":\"v-7727a2f8#solaris\",\"199\":\"v-7727a2f8#plan-9\",\"200\":\"v-7727a2f8#install-instructions\",\"201\":\"v-7727a2f8#linux-unix-macos-instructions\",\"202\":\"v-7727a2f8#windows-instructions\",\"203\":\"v-10811026\",\"204\":\"v-10811026#supported-platforms\",\"205\":\"v-10811026#pre-compiled-binaries-https-download\",\"206\":\"v-10811026#installing-from-a-package-manager\",\"207\":\"v-10811026#compiling-from-source\",\"208\":\"v-10811026#installation-from-source-steps\",\"209\":\"v-10811026#including-optional-builtins\",\"210\":\"v-10811026#external-dependencies-optional\",\"211\":\"v-10811026#recommended-terminal-typeface\",\"212\":\"v-10811026@0\",\"213\":\"v-1559e17e\",\"214\":\"v-1559e17e#introduction\",\"215\":\"v-1559e17e#read–eval–print-loop\",\"216\":\"v-1559e17e#barewords\",\"217\":\"v-1559e17e#expressions-and-statements\",\"218\":\"v-1559e17e#functions-and-methods\",\"219\":\"v-1559e17e#the-bang-prefix\",\"220\":\"v-1559e17e#rosetta-stone\",\"221\":\"v-1559e17e#basic-syntax\",\"222\":\"v-1559e17e#quoting-strings\",\"223\":\"v-1559e17e#code-comments\",\"224\":\"v-1559e17e#variables\",\"225\":\"v-1559e17e#global-variables\",\"226\":\"v-1559e17e#environmental-variables\",\"227\":\"v-1559e17e#type-inference\",\"228\":\"v-1559e17e#scalars\",\"229\":\"v-1559e17e#arrays\",\"230\":\"v-1559e17e#piping-and-redirection\",\"231\":\"v-1559e17e#pipes\",\"232\":\"v-1559e17e#redirection\",\"233\":\"v-1559e17e#redirecting-to-files\",\"234\":\"v-1559e17e#type-conversion\",\"235\":\"v-1559e17e#cast\",\"236\":\"v-1559e17e#format\",\"237\":\"v-1559e17e#sub-shells\",\"238\":\"v-1559e17e#filesystem-wildcards-globbing\",\"239\":\"v-1559e17e#brace-expansion\",\"240\":\"v-1559e17e#executables\",\"241\":\"v-1559e17e#aliases\",\"242\":\"v-1559e17e#public-functions\",\"243\":\"v-1559e17e#private-functions\",\"244\":\"v-1559e17e#external-executables\",\"245\":\"v-1559e17e#control-structures\",\"246\":\"v-1559e17e#using-if-statements\",\"247\":\"v-1559e17e#using-switch-statements\",\"248\":\"v-1559e17e#using-foreach-loops\",\"249\":\"v-1559e17e#using-formap-loops\",\"250\":\"v-1559e17e#stopping-execution\",\"251\":\"v-1559e17e#the-continue-statement\",\"252\":\"v-1559e17e#the-break-statement\",\"253\":\"v-1559e17e#the-exit-statement\",\"254\":\"v-1559e17e#signal-sigint\",\"255\":\"v-1559e17e#signal-sigquit\",\"256\":\"v-1559e17e#signal-sigtstp\",\"257\":\"v-1559e17e@0\",\"258\":\"v-4f5c6536\",\"259\":\"v-4f5c6536#description\",\"260\":\"v-4f5c6536#usage\",\"261\":\"v-4f5c6536#examples\",\"262\":\"v-4f5c6536#parameters\",\"263\":\"v-4f5c6536#see-also\",\"264\":\"v-58e3e44a\",\"265\":\"v-58e3e44a#pages\",\"266\":\"v-b42f1180\",\"267\":\"v-b42f1180#description\",\"268\":\"v-b42f1180#usage\",\"269\":\"v-b42f1180#examples\",\"270\":\"v-b42f1180#detail\",\"271\":\"v-b42f1180#parameters\",\"272\":\"v-b42f1180#see-also\",\"273\":\"v-caa7ba00\",\"274\":\"v-caa7ba00#description\",\"275\":\"v-caa7ba00#usage\",\"276\":\"v-caa7ba00#examples\",\"277\":\"v-caa7ba00#detail\",\"278\":\"v-caa7ba00#parameters\",\"279\":\"v-caa7ba00#see-also\",\"280\":\"v-1ab5e467\",\"281\":\"v-1ab5e467#description\",\"282\":\"v-1ab5e467#usage\",\"283\":\"v-1ab5e467#examples\",\"284\":\"v-1ab5e467#detail\",\"285\":\"v-1ab5e467#parameters\",\"286\":\"v-1ab5e467#see-also\",\"287\":\"v-7b8d761d\",\"288\":\"v-7b8d761d#description\",\"289\":\"v-7b8d761d#usage\",\"290\":\"v-7b8d761d#examples\",\"291\":\"v-7b8d761d#detail\",\"292\":\"v-7b8d761d#parameters\",\"293\":\"v-7b8d761d#see-also\",\"294\":\"v-1efdf95a\",\"295\":\"v-1efdf95a#description\",\"296\":\"v-1efdf95a#usage\",\"297\":\"v-1efdf95a#examples\",\"298\":\"v-1efdf95a#detail\",\"299\":\"v-1efdf95a#parameters\",\"300\":\"v-1efdf95a#see-also\",\"301\":\"v-7d1b0bfe\",\"302\":\"v-7d1b0bfe#description\",\"303\":\"v-7d1b0bfe#usage\",\"304\":\"v-7d1b0bfe#examples\",\"305\":\"v-7d1b0bfe#parameters\",\"306\":\"v-7d1b0bfe#see-also\",\"307\":\"v-49ba0496\",\"308\":\"v-49ba0496#description\",\"309\":\"v-49ba0496#a-collection-of-functions\",\"310\":\"v-49ba0496#usage\",\"311\":\"v-49ba0496#examples\",\"312\":\"v-49ba0496#detail\",\"313\":\"v-49ba0496#see-also\",\"314\":\"v-bd78d148\",\"315\":\"v-bd78d148#description\",\"316\":\"v-bd78d148#examples\",\"317\":\"v-bd78d148#detail\",\"318\":\"v-bd78d148#api-source\",\"319\":\"v-bd78d148#parameters\",\"320\":\"v-bd78d148#see-also\",\"321\":\"v-5f3931c8\",\"322\":\"v-5f3931c8#api-reference-lang-arraytemplatewithtype-template-api\",\"323\":\"v-5f3931c8#description\",\"324\":\"v-5f3931c8#examples\",\"325\":\"v-5f3931c8#detail\",\"326\":\"v-5f3931c8#api-source\",\"327\":\"v-5f3931c8#parameters\",\"328\":\"v-5f3931c8#see-also\",\"329\":\"v-3e78a5c8\",\"330\":\"v-3e78a5c8#description\",\"331\":\"v-3e78a5c8#examples\",\"332\":\"v-3e78a5c8#detail\",\"333\":\"v-3e78a5c8#api-source\",\"334\":\"v-3e78a5c8#parameters\",\"335\":\"v-3e78a5c8#see-also\",\"336\":\"v-340b7a04\",\"337\":\"v-340b7a04#description\",\"338\":\"v-340b7a04#examples\",\"339\":\"v-340b7a04#detail\",\"340\":\"v-340b7a04#api-source\",\"341\":\"v-340b7a04#parameters\",\"342\":\"v-340b7a04#see-also\",\"343\":\"v-0b2c80fe\",\"344\":\"v-0b2c80fe#description\",\"345\":\"v-0b2c80fe#examples\",\"346\":\"v-0b2c80fe#detail\",\"347\":\"v-0b2c80fe#api-source\",\"348\":\"v-0b2c80fe#parameters\",\"349\":\"v-0b2c80fe#see-also\",\"350\":\"v-7eb588f2\",\"351\":\"v-7eb588f2#description\",\"352\":\"v-7eb588f2#usage\",\"353\":\"v-7eb588f2#examples\",\"354\":\"v-7eb588f2#detail\",\"355\":\"v-7eb588f2#parameters\",\"356\":\"v-7eb588f2#see-also\",\"357\":\"v-20a7caa0\",\"358\":\"v-20a7caa0#description\",\"359\":\"v-20a7caa0#usage\",\"360\":\"v-20a7caa0#examples\",\"361\":\"v-20a7caa0#detail\",\"362\":\"v-20a7caa0#parameters\",\"363\":\"v-20a7caa0#see-also\",\"364\":\"v-01cfd4cd\",\"365\":\"v-01cfd4cd#description\",\"366\":\"v-01cfd4cd#usage\",\"367\":\"v-01cfd4cd#examples\",\"368\":\"v-01cfd4cd#detail\",\"369\":\"v-01cfd4cd#see-also\",\"370\":\"v-2063d7da\",\"371\":\"v-2063d7da#description\",\"372\":\"v-2063d7da#usage\",\"373\":\"v-2063d7da#examples\",\"374\":\"v-2063d7da#detail\",\"375\":\"v-2063d7da#advanced-array-syntax\",\"376\":\"v-2063d7da#creating-json-arrays-with-ja\",\"377\":\"v-2063d7da#smart-arrays\",\"378\":\"v-2063d7da#see-also\",\"379\":\"v-31d7ae9d\",\"380\":\"v-31d7ae9d#description\",\"381\":\"v-31d7ae9d#usage\",\"382\":\"v-31d7ae9d#examples\",\"383\":\"v-31d7ae9d#see-also\",\"384\":\"v-43dc33f8\",\"385\":\"v-43dc33f8#description\",\"386\":\"v-43dc33f8#usage\",\"387\":\"v-43dc33f8#examples\",\"388\":\"v-43dc33f8#detail\",\"389\":\"v-43dc33f8#allowed-characters\",\"390\":\"v-43dc33f8#undefining-an-alias\",\"391\":\"v-43dc33f8#order-of-preference\",\"392\":\"v-43dc33f8#synonyms\",\"393\":\"v-43dc33f8#see-also\",\"394\":\"v-26a2e7fe\",\"395\":\"v-26a2e7fe#description\",\"396\":\"v-26a2e7fe#usage\",\"397\":\"v-26a2e7fe#examples\",\"398\":\"v-26a2e7fe#m-merge\",\"399\":\"v-26a2e7fe#s-sum\",\"400\":\"v-26a2e7fe#flags\",\"401\":\"v-26a2e7fe#detail\",\"402\":\"v-26a2e7fe#path\",\"403\":\"v-26a2e7fe#supported-data-types\",\"404\":\"v-26a2e7fe#see-also\",\"405\":\"v-6378419d\",\"406\":\"v-6378419d#description\",\"407\":\"v-6378419d#usage\",\"408\":\"v-6378419d#examples\",\"409\":\"v-6378419d#detail\",\"410\":\"v-6378419d#code-block-testing\",\"411\":\"v-6378419d#synonyms\",\"412\":\"v-6378419d#see-also\",\"413\":\"v-99b79038\",\"414\":\"v-99b79038#description\",\"415\":\"v-99b79038#usage\",\"416\":\"v-99b79038#examples\",\"417\":\"v-99b79038#detail\",\"418\":\"v-99b79038#synonyms\",\"419\":\"v-99b79038#see-also\",\"420\":\"v-8761e57e\",\"421\":\"v-8761e57e#description\",\"422\":\"v-8761e57e#usage\",\"423\":\"v-8761e57e#examples\",\"424\":\"v-8761e57e#see-also\",\"425\":\"v-62eeafd4\",\"426\":\"v-62eeafd4#description\",\"427\":\"v-62eeafd4#usage\",\"428\":\"v-62eeafd4#flags\",\"429\":\"v-62eeafd4#detail\",\"430\":\"v-62eeafd4#undefining-autocomplete\",\"431\":\"v-62eeafd4#directives\",\"432\":\"v-62eeafd4#alias-string-zls\",\"433\":\"v-62eeafd4#allowany-boolean-false\",\"434\":\"v-62eeafd4#allowmultiple-boolean-false\",\"435\":\"v-62eeafd4#anyvalue-boolean-false\",\"436\":\"v-62eeafd4#autobranch-boolean-false\",\"437\":\"v-62eeafd4#cachettl-int-5\",\"438\":\"v-62eeafd4#dynamic-string-zls\",\"439\":\"v-62eeafd4#dynamicdesc-string-zls\",\"440\":\"v-62eeafd4#execcmdline-boolean-false\",\"441\":\"v-62eeafd4#fileregexp-string-zls\",\"442\":\"v-62eeafd4#flagvalues-map-of-arrays-null\",\"443\":\"v-62eeafd4#defaults-for-matched-flags\",\"444\":\"v-62eeafd4#defaults-for-any-flags-including-unmatched\",\"445\":\"v-62eeafd4#flags-array-of-strings-auto-populated-from-man-pages\",\"446\":\"v-62eeafd4#flagsdesc-map-of-strings-null\",\"447\":\"v-62eeafd4#goto-string-zls\",\"448\":\"v-62eeafd4#ignoreprefix-boolean-false\",\"449\":\"v-62eeafd4#incdirs-boolean-false\",\"450\":\"v-62eeafd4#incexeall-boolean-false\",\"451\":\"v-62eeafd4#incexepath-boolean-false\",\"452\":\"v-62eeafd4#incfiles-boolean-true\",\"453\":\"v-62eeafd4#incmanpage-boolean-false\",\"454\":\"v-62eeafd4#listview-boolean-false\",\"455\":\"v-62eeafd4#nestedcommand-boolean-false\",\"456\":\"v-62eeafd4#optional-boolean-false\",\"457\":\"v-62eeafd4#see-also\",\"458\":\"v-11650e37\",\"459\":\"v-11650e37#description\",\"460\":\"v-11650e37#usage\",\"461\":\"v-11650e37#examples\",\"462\":\"v-11650e37#detail\",\"463\":\"v-11650e37#see-also\",\"464\":\"v-0eef4b16\",\"465\":\"v-0eef4b16#description\",\"466\":\"v-0eef4b16#usage\",\"467\":\"v-0eef4b16#examples\",\"468\":\"v-0eef4b16#detail\",\"469\":\"v-0eef4b16#see-also\",\"470\":\"v-c62f8fce\",\"471\":\"v-c62f8fce#description\",\"472\":\"v-c62f8fce#usage\",\"473\":\"v-c62f8fce#examples\",\"474\":\"v-c62f8fce#detail\",\"475\":\"v-c62f8fce#see-also\",\"476\":\"v-153904f2\",\"477\":\"v-153904f2#description\",\"478\":\"v-153904f2#usage\",\"479\":\"v-153904f2#examples\",\"480\":\"v-153904f2#detail\",\"481\":\"v-153904f2#ansi-constants\",\"482\":\"v-153904f2#synonyms\",\"483\":\"v-153904f2#see-also\",\"484\":\"v-c26b0e96\",\"485\":\"v-c26b0e96#description\",\"486\":\"v-c26b0e96#usage\",\"487\":\"v-c26b0e96#examples\",\"488\":\"v-c26b0e96#detail\",\"489\":\"v-c26b0e96#see-also\",\"490\":\"v-7b63901f\",\"491\":\"v-7b63901f#description\",\"492\":\"v-7b63901f#usage\",\"493\":\"v-7b63901f#examples\",\"494\":\"v-7b63901f#detail\",\"495\":\"v-7b63901f#see-also\",\"496\":\"v-35681879\",\"497\":\"v-35681879#description\",\"498\":\"v-35681879#usage\",\"499\":\"v-35681879#examples\",\"500\":\"v-35681879#detail\",\"501\":\"v-35681879#synonyms\",\"502\":\"v-35681879#see-also\",\"503\":\"v-66a02d06\",\"504\":\"v-66a02d06#description\",\"505\":\"v-66a02d06#usage\",\"506\":\"v-66a02d06#examples\",\"507\":\"v-66a02d06#detail\",\"508\":\"v-66a02d06#auto-cd\",\"509\":\"v-66a02d06#see-also\",\"510\":\"v-249bdcbc\",\"511\":\"v-249bdcbc#description\",\"512\":\"v-249bdcbc#usage\",\"513\":\"v-249bdcbc#examples\",\"514\":\"v-249bdcbc#detail\",\"515\":\"v-249bdcbc#app\",\"516\":\"v-249bdcbc#key\",\"517\":\"v-249bdcbc#value\",\"518\":\"v-249bdcbc#scope-scoped\",\"519\":\"v-249bdcbc#global\",\"520\":\"v-249bdcbc#directives\",\"521\":\"v-249bdcbc#datatype-string-required\",\"522\":\"v-249bdcbc#description-string-required\",\"523\":\"v-249bdcbc#global-boolean-false\",\"524\":\"v-249bdcbc#default-any-required\",\"525\":\"v-249bdcbc#options-array-nil\",\"526\":\"v-249bdcbc#dynamic-map-of-strings-nil\",\"527\":\"v-249bdcbc#dynamic\",\"528\":\"v-249bdcbc#dynamic-1\",\"529\":\"v-249bdcbc#synonyms\",\"530\":\"v-249bdcbc#see-also\",\"531\":\"v-43236537\",\"532\":\"v-43236537#description\",\"533\":\"v-43236537#usage\",\"534\":\"v-43236537#examples\",\"535\":\"v-43236537#detail\",\"536\":\"v-43236537#see-also\",\"537\":\"v-13660aa5\",\"538\":\"v-13660aa5#description\",\"539\":\"v-13660aa5#usage\",\"540\":\"v-13660aa5#examples\",\"541\":\"v-13660aa5#flags\",\"542\":\"v-13660aa5#detail\",\"543\":\"v-13660aa5#modes\",\"544\":\"v-13660aa5#total-total-t\",\"545\":\"v-13660aa5#duplications-duplications-d\",\"546\":\"v-13660aa5#unique-unique-u\",\"547\":\"v-13660aa5#synonyms\",\"548\":\"v-13660aa5#see-also\",\"549\":\"v-00f72f54\",\"550\":\"v-00f72f54#description\",\"551\":\"v-00f72f54#usage\",\"552\":\"v-00f72f54#examples\",\"553\":\"v-00f72f54#see-also\",\"554\":\"v-1c455177\",\"555\":\"v-1c455177#description\",\"556\":\"v-1c455177#usage\",\"557\":\"v-1c455177#examples\",\"558\":\"v-1c455177#see-also\",\"559\":\"v-b9520a3a\",\"560\":\"v-b9520a3a#description\",\"561\":\"v-b9520a3a#usage\",\"562\":\"v-b9520a3a#examples\",\"563\":\"v-b9520a3a#flags\",\"564\":\"v-b9520a3a#detail\",\"565\":\"v-b9520a3a#date-time-format-code-parsers\",\"566\":\"v-b9520a3a#py-python-strftime-strptime-format-codes\",\"567\":\"v-b9520a3a#go-go-lang-time-time-format-codes\",\"568\":\"v-b9520a3a#now-current-date-and-time\",\"569\":\"v-b9520a3a#see-also\",\"570\":\"v-392d203e\",\"571\":\"v-392d203e#description\",\"572\":\"v-392d203e#debug-method\",\"573\":\"v-392d203e#debug-function\",\"574\":\"v-392d203e#usage\",\"575\":\"v-392d203e#examples\",\"576\":\"v-392d203e#detail\",\"577\":\"v-392d203e#see-also\",\"578\":\"v-37b471f8\",\"579\":\"v-37b471f8#description\",\"580\":\"v-37b471f8#usage\",\"581\":\"v-37b471f8#examples\",\"582\":\"v-37b471f8#detail\",\"583\":\"v-37b471f8#synonyms\",\"584\":\"v-37b471f8#see-also\",\"585\":\"v-d75d0ed8\",\"586\":\"v-d75d0ed8#description\",\"587\":\"v-d75d0ed8#usage\",\"588\":\"v-d75d0ed8#examples\",\"589\":\"v-d75d0ed8#see-also\",\"590\":\"v-7de27618\",\"591\":\"v-7de27618#description\",\"592\":\"v-7de27618#usage\",\"593\":\"v-7de27618#examples\",\"594\":\"v-7de27618#detail\",\"595\":\"v-7de27618#element-counts-from-zero\",\"596\":\"v-7de27618#alternative-path-separators\",\"597\":\"v-7de27618#quoting-parameters\",\"598\":\"v-7de27618#synonyms\",\"599\":\"v-7de27618#see-also\",\"600\":\"v-829bed2a\",\"601\":\"v-829bed2a#description\",\"602\":\"v-829bed2a#usage\",\"603\":\"v-829bed2a#examples\",\"604\":\"v-829bed2a#detail\",\"605\":\"v-829bed2a#variables\",\"606\":\"v-829bed2a#strings\",\"607\":\"v-829bed2a#best-practice-recommendation\",\"608\":\"v-829bed2a#non-boolean-logic\",\"609\":\"v-829bed2a#read-more\",\"610\":\"v-829bed2a#synonyms\",\"611\":\"v-829bed2a#see-also\",\"612\":\"v-230c8a62\",\"613\":\"v-230c8a62#description\",\"614\":\"v-230c8a62#usage\",\"615\":\"v-230c8a62#examples\",\"616\":\"v-230c8a62#detail\",\"617\":\"v-230c8a62#ansi-constants\",\"618\":\"v-230c8a62#see-also\",\"619\":\"v-28164edd\",\"620\":\"v-28164edd#description\",\"621\":\"v-28164edd#usage\",\"622\":\"v-28164edd#examples\",\"623\":\"v-28164edd#synonyms\",\"624\":\"v-28164edd#see-also\",\"625\":\"v-2b131e13\",\"626\":\"v-2b131e13#description\",\"627\":\"v-2b131e13#usage\",\"628\":\"v-2b131e13#examples\",\"629\":\"v-2b131e13#see-also\",\"630\":\"v-d4422618\",\"631\":\"v-d4422618#description\",\"632\":\"v-d4422618#usage\",\"633\":\"v-d4422618#examples\",\"634\":\"v-d4422618#synonyms\",\"635\":\"v-d4422618#see-also\",\"636\":\"v-892799b8\",\"637\":\"v-892799b8#description\",\"638\":\"v-892799b8#usage\",\"639\":\"v-892799b8#examples\",\"640\":\"v-892799b8#synonyms\",\"641\":\"v-892799b8#see-also\",\"642\":\"v-e875b00c\",\"643\":\"v-e875b00c#description\",\"644\":\"v-e875b00c#usage\",\"645\":\"v-e875b00c#examples\",\"646\":\"v-e875b00c#detail\",\"647\":\"v-e875b00c#supported-events\",\"648\":\"v-e875b00c#ansi-constants\",\"649\":\"v-e875b00c#compiled-events\",\"650\":\"v-e875b00c#synonyms\",\"651\":\"v-e875b00c#see-also\",\"652\":\"v-10e453e6\",\"653\":\"v-10e453e6#description\",\"654\":\"v-10e453e6#usage\",\"655\":\"v-10e453e6#examples\",\"656\":\"v-10e453e6#detail\",\"657\":\"v-10e453e6#compatibility-with-posix\",\"658\":\"v-10e453e6#synonyms\",\"659\":\"v-10e453e6#see-also\",\"660\":\"v-2fadb4c0\",\"661\":\"v-2fadb4c0#description\",\"662\":\"v-2fadb4c0#usage\",\"663\":\"v-2fadb4c0#examples\",\"664\":\"v-2fadb4c0#see-also\",\"665\":\"v-64e3eaec\",\"666\":\"v-64e3eaec#description\",\"667\":\"v-64e3eaec#usage\",\"668\":\"v-64e3eaec#examples\",\"669\":\"v-64e3eaec#see-also\",\"670\":\"v-b29678ec\",\"671\":\"v-b29678ec#description\",\"672\":\"v-b29678ec#usage\",\"673\":\"v-b29678ec#examples\",\"674\":\"v-b29678ec#detail\",\"675\":\"v-b29678ec#deallocation\",\"676\":\"v-b29678ec#exporting-a-local-or-global-variable\",\"677\":\"v-b29678ec#type-annotations\",\"678\":\"v-b29678ec#scoping\",\"679\":\"v-b29678ec#local-variables\",\"680\":\"v-b29678ec#global-variables\",\"681\":\"v-b29678ec#environmental-variables\",\"682\":\"v-b29678ec#function-names\",\"683\":\"v-b29678ec#usage-inside-quotation-marks\",\"684\":\"v-b29678ec#synonyms\",\"685\":\"v-b29678ec#see-also\",\"686\":\"v-570b1329\",\"687\":\"v-570b1329#description\",\"688\":\"v-570b1329#usage\",\"689\":\"v-570b1329#examples\",\"690\":\"v-570b1329#see-also\",\"691\":\"v-0f5361a4\",\"692\":\"v-0f5361a4#description\",\"693\":\"v-0f5361a4#usage\",\"694\":\"v-0f5361a4#examples\",\"695\":\"v-0f5361a4#flags\",\"696\":\"v-0f5361a4#detail\",\"697\":\"v-0f5361a4#see-also\",\"698\":\"v-1c802f11\",\"699\":\"v-1c802f11#description\",\"700\":\"v-1c802f11#usage\",\"701\":\"v-1c802f11#examples\",\"702\":\"v-1c802f11#flags\",\"703\":\"v-1c802f11#see-also\",\"704\":\"v-641f16bd\",\"705\":\"v-641f16bd#description\",\"706\":\"v-641f16bd#usage\",\"707\":\"v-641f16bd#examples\",\"708\":\"v-641f16bd#flags\",\"709\":\"v-641f16bd#detail\",\"710\":\"v-641f16bd#order-of-precedence\",\"711\":\"v-641f16bd#compatibility-with-posix\",\"712\":\"v-641f16bd#synonyms\",\"713\":\"v-641f16bd#see-also\",\"714\":\"v-7081251d\",\"715\":\"v-7081251d#description\",\"716\":\"v-7081251d#usage\",\"717\":\"v-7081251d#detail\",\"718\":\"v-7081251d#see-also\",\"719\":\"v-bf9bdbd8\",\"720\":\"v-bf9bdbd8#description\",\"721\":\"v-bf9bdbd8#usage\",\"722\":\"v-bf9bdbd8#detail\",\"723\":\"v-bf9bdbd8#see-also\",\"724\":\"v-d1c7f686\",\"725\":\"v-d1c7f686#description\",\"726\":\"v-d1c7f686#usage\",\"727\":\"v-d1c7f686#detail\",\"728\":\"v-d1c7f686#see-also\",\"729\":\"v-972e3658\",\"730\":\"v-972e3658#description\",\"731\":\"v-972e3658#usage\",\"732\":\"v-972e3658#flags\",\"733\":\"v-972e3658#detail\",\"734\":\"v-972e3658#synonyms\",\"735\":\"v-972e3658#see-also\",\"736\":\"v-90af942a\",\"737\":\"v-90af942a#description\",\"738\":\"v-90af942a#usage\",\"739\":\"v-90af942a#examples\",\"740\":\"v-90af942a#detail\",\"741\":\"v-90af942a#syntax\",\"742\":\"v-90af942a#better-for-loops\",\"743\":\"v-90af942a#tips-when-writing-json-inside-for-loops\",\"744\":\"v-90af942a#foreach-will-automatically-cast-it-s-output-as-jsonl-if-it-s-stdin-type-is-json\",\"745\":\"v-90af942a#see-also\",\"746\":\"v-0ff6138a\",\"747\":\"v-0ff6138a#description\",\"748\":\"v-0ff6138a#usage\",\"749\":\"v-0ff6138a#examples\",\"750\":\"v-0ff6138a#writing-json-maps\",\"751\":\"v-0ff6138a#using-steps-to-jump-iterations-by-more-than-1-one\",\"752\":\"v-0ff6138a#flags\",\"753\":\"v-0ff6138a#detail\",\"754\":\"v-0ff6138a#meta-values\",\"755\":\"v-0ff6138a#preserving-the-data-type-when-no-flags-used\",\"756\":\"v-0ff6138a#tips-when-writing-json-inside-for-loops\",\"757\":\"v-0ff6138a#foreach-will-automatically-cast-it-s-output-as-jsonl-if-it-s-stdin-type-is-json\",\"758\":\"v-0ff6138a#see-also\",\"759\":\"v-73adaeab\",\"760\":\"v-73adaeab#description\",\"761\":\"v-73adaeab#usage\",\"762\":\"v-73adaeab#examples\",\"763\":\"v-73adaeab#flags\",\"764\":\"v-73adaeab#detail\",\"765\":\"v-73adaeab#meta-values\",\"766\":\"v-73adaeab#see-also\",\"767\":\"v-7a811127\",\"768\":\"v-7a811127#description\",\"769\":\"v-7a811127#usage\",\"770\":\"v-7a811127#examples\",\"771\":\"v-7a811127#see-also\",\"772\":\"v-2d76f4a6\",\"773\":\"v-2d76f4a6#description\",\"774\":\"v-2d76f4a6#usage\",\"775\":\"v-2d76f4a6#examples\",\"776\":\"v-2d76f4a6#detail\",\"777\":\"v-2d76f4a6#allowed-characters\",\"778\":\"v-2d76f4a6#undefining-a-function\",\"779\":\"v-2d76f4a6#using-parameterized-variable-names\",\"780\":\"v-2d76f4a6#syntax\",\"781\":\"v-2d76f4a6#variables\",\"782\":\"v-2d76f4a6#data-types\",\"783\":\"v-2d76f4a6#default-values\",\"784\":\"v-2d76f4a6#description-1\",\"785\":\"v-2d76f4a6#order-of-precedence\",\"786\":\"v-2d76f4a6#synonyms\",\"787\":\"v-2d76f4a6#see-also\",\"788\":\"v-0be9b066\",\"789\":\"v-0be9b066#description\",\"790\":\"v-0be9b066#usage\",\"791\":\"v-0be9b066#examples\",\"792\":\"v-0be9b066#detail\",\"793\":\"v-0be9b066#pattern-reference\",\"794\":\"v-0be9b066#inverse-matches\",\"795\":\"v-0be9b066#when-used-as-a-method\",\"796\":\"v-0be9b066#synonyms\",\"797\":\"v-0be9b066#see-also\",\"798\":\"v-3a5b64cd\",\"799\":\"v-3a5b64cd#description\",\"800\":\"v-3a5b64cd#usage\",\"801\":\"v-3a5b64cd#examples\",\"802\":\"v-3a5b64cd#see-also\",\"803\":\"v-11f4c37e\",\"804\":\"v-11f4c37e#description\",\"805\":\"v-11f4c37e#usage\",\"806\":\"v-11f4c37e#examples\",\"807\":\"v-11f4c37e#detail\",\"808\":\"v-11f4c37e#json-return\",\"809\":\"v-11f4c37e#see-also\",\"810\":\"v-4cd9fdfc\",\"811\":\"v-4cd9fdfc#description\",\"812\":\"v-4cd9fdfc#usage\",\"813\":\"v-4cd9fdfc#examples\",\"814\":\"v-4cd9fdfc#detail\",\"815\":\"v-4cd9fdfc#configurable-options\",\"816\":\"v-4cd9fdfc#see-also\",\"817\":\"v-1d2f1e0a\",\"818\":\"v-1d2f1e0a#description\",\"819\":\"v-1d2f1e0a#usage\",\"820\":\"v-1d2f1e0a#examples\",\"821\":\"v-1d2f1e0a#detail\",\"822\":\"v-1d2f1e0a#deallocation\",\"823\":\"v-1d2f1e0a#type-annotations\",\"824\":\"v-1d2f1e0a#scoping\",\"825\":\"v-1d2f1e0a#local-variables\",\"826\":\"v-1d2f1e0a#global-variables\",\"827\":\"v-1d2f1e0a#environmental-variables\",\"828\":\"v-1d2f1e0a#function-names\",\"829\":\"v-1d2f1e0a#usage-inside-quotation-marks\",\"830\":\"v-1d2f1e0a#synonyms\",\"831\":\"v-1d2f1e0a#see-also\",\"832\":\"v-536b9dc7\",\"833\":\"v-536b9dc7#description\",\"834\":\"v-536b9dc7#usage\",\"835\":\"v-536b9dc7#examples\",\"836\":\"v-536b9dc7#synonyms\",\"837\":\"v-536b9dc7#see-also\",\"838\":\"v-223fd82c\",\"839\":\"v-223fd82c#description\",\"840\":\"v-223fd82c#usage\",\"841\":\"v-223fd82c#examples\",\"842\":\"v-223fd82c#synonyms\",\"843\":\"v-223fd82c#see-also\",\"844\":\"v-2b196f80\",\"845\":\"v-2b196f80#description\",\"846\":\"v-2b196f80#usage\",\"847\":\"v-2b196f80#examples\",\"848\":\"v-2b196f80#detail\",\"849\":\"v-2b196f80#see-also\",\"850\":\"v-0d7efe41\",\"851\":\"v-0d7efe41#description\",\"852\":\"v-0d7efe41#usage\",\"853\":\"v-0d7efe41#function-if\",\"854\":\"v-0d7efe41#method-if\",\"855\":\"v-0d7efe41#negative-function-if\",\"856\":\"v-0d7efe41#negative-method-if\",\"857\":\"v-0d7efe41#please-note\",\"858\":\"v-0d7efe41#examples\",\"859\":\"v-0d7efe41#detail\",\"860\":\"v-0d7efe41#synonyms\",\"861\":\"v-0d7efe41#see-also\",\"862\":\"v-4d5c573b\",\"863\":\"v-4d5c573b#description\",\"864\":\"v-4d5c573b#usage\",\"865\":\"v-4d5c573b#examples\",\"866\":\"v-4d5c573b#detail\",\"867\":\"v-4d5c573b#index-counts-from-zero\",\"868\":\"v-4d5c573b#include-vs-exclude\",\"869\":\"v-4d5c573b#don-t-error-upon-missing-elements\",\"870\":\"v-4d5c573b#synonyms\",\"871\":\"v-4d5c573b#see-also\",\"872\":\"v-39dcfe67\",\"873\":\"v-39dcfe67#description\",\"874\":\"v-39dcfe67#usage\",\"875\":\"v-39dcfe67#examples\",\"876\":\"v-39dcfe67#detail\",\"877\":\"v-39dcfe67#see-also\",\"878\":\"v-93fd2064\",\"879\":\"v-93fd2064#description\",\"880\":\"v-93fd2064#usage\",\"881\":\"v-93fd2064#examples\",\"882\":\"v-93fd2064#detail\",\"883\":\"v-93fd2064#synonyms\",\"884\":\"v-93fd2064#see-also\",\"885\":\"v-bcc1af52\",\"886\":\"v-bcc1af52#description\",\"887\":\"v-bcc1af52#usage\",\"888\":\"v-bcc1af52#examples\",\"889\":\"v-bcc1af52#detail\",\"890\":\"v-bcc1af52#synonyms\",\"891\":\"v-bcc1af52#see-also\",\"892\":\"v-0f1d901f\",\"893\":\"v-0f1d901f#command-reference-len\",\"894\":\"v-0f1d901f#description\",\"895\":\"v-0f1d901f#usage\",\"896\":\"v-0f1d901f#examples\",\"897\":\"v-0f1d901f#detail\",\"898\":\"v-0f1d901f#see-also\",\"899\":\"v-195aa3d9\",\"900\":\"v-195aa3d9#description\",\"901\":\"v-195aa3d9#usage\",\"902\":\"v-195aa3d9#examples\",\"903\":\"v-195aa3d9#detail\",\"904\":\"v-195aa3d9#other-operators\",\"905\":\"v-195aa3d9#variables\",\"906\":\"v-195aa3d9#strings\",\"907\":\"v-195aa3d9#best-practice-recommendation\",\"908\":\"v-195aa3d9#non-boolean-logic\",\"909\":\"v-195aa3d9#read-more\",\"910\":\"v-195aa3d9#type-annotations\",\"911\":\"v-195aa3d9#scoping\",\"912\":\"v-195aa3d9#local-variables\",\"913\":\"v-195aa3d9#global-variables\",\"914\":\"v-195aa3d9#environmental-variables\",\"915\":\"v-195aa3d9#function-names\",\"916\":\"v-195aa3d9#usage-inside-quotation-marks\",\"917\":\"v-195aa3d9#see-also\",\"918\":\"v-090ab4b7\",\"919\":\"v-090ab4b7#description\",\"920\":\"v-090ab4b7#usage\",\"921\":\"v-090ab4b7#examples\",\"922\":\"v-090ab4b7#see-also\",\"923\":\"v-673ee0d7\",\"924\":\"v-673ee0d7#description\",\"925\":\"v-673ee0d7#usage\",\"926\":\"v-673ee0d7#examples\",\"927\":\"v-673ee0d7#flags\",\"928\":\"v-673ee0d7#detail\",\"929\":\"v-673ee0d7#limitations\",\"930\":\"v-673ee0d7#see-also\",\"931\":\"v-4b61187e\",\"932\":\"v-4b61187e#description\",\"933\":\"v-4b61187e#usage\",\"934\":\"v-4b61187e#examples\",\"935\":\"v-4b61187e#see-also\",\"936\":\"v-b260fd90\",\"937\":\"v-b260fd90#description\",\"938\":\"v-b260fd90#usage\",\"939\":\"v-b260fd90#examples\",\"940\":\"v-b260fd90#see-also\",\"941\":\"v-7f72f8a2\",\"942\":\"v-7f72f8a2#description\",\"943\":\"v-7f72f8a2#usage\",\"944\":\"v-7f72f8a2#examples\",\"945\":\"v-7f72f8a2#detail\",\"946\":\"v-7f72f8a2#synonyms\",\"947\":\"v-7f72f8a2#see-also\",\"948\":\"v-275f8b06\",\"949\":\"v-275f8b06#description\",\"950\":\"v-275f8b06#usage\",\"951\":\"v-275f8b06#examples\",\"952\":\"v-275f8b06#detail\",\"953\":\"v-275f8b06#type-groups\",\"954\":\"v-275f8b06#see-also\",\"955\":\"v-53a811a9\",\"956\":\"v-53a811a9#description\",\"957\":\"v-53a811a9#usage\",\"958\":\"v-53a811a9#examples\",\"959\":\"v-53a811a9#synonyms\",\"960\":\"v-53a811a9#see-also\",\"961\":\"v-2693ad95\",\"962\":\"v-2693ad95#description\",\"963\":\"v-2693ad95#usage\",\"964\":\"v-2693ad95#examples\",\"965\":\"v-2693ad95#detail\",\"966\":\"v-2693ad95#synonyms\",\"967\":\"v-2693ad95#see-also\",\"968\":\"v-07db6b13\",\"969\":\"v-07db6b13#description\",\"970\":\"v-07db6b13#usage\",\"971\":\"v-07db6b13#examples\",\"972\":\"v-07db6b13#flags\",\"973\":\"v-07db6b13#detail\",\"974\":\"v-07db6b13#synonyms\",\"975\":\"v-07db6b13#see-also\",\"976\":\"v-4c85049e\",\"977\":\"v-4c85049e#description\",\"978\":\"v-4c85049e#usage\",\"979\":\"v-4c85049e#flags\",\"980\":\"v-4c85049e#detail\",\"981\":\"v-4c85049e#murex-package-list-enabled-vs-loaded\",\"982\":\"v-4c85049e#see-also\",\"983\":\"v-380e4e6f\",\"984\":\"v-380e4e6f#description\",\"985\":\"v-380e4e6f#usage\",\"986\":\"v-380e4e6f#detail\",\"987\":\"v-380e4e6f#see-also\",\"988\":\"v-731b9847\",\"989\":\"v-731b9847#description\",\"990\":\"v-731b9847#usage\",\"991\":\"v-731b9847#examples\",\"992\":\"v-731b9847#detail\",\"993\":\"v-731b9847#see-also\",\"994\":\"v-2ea268cd\",\"995\":\"v-2ea268cd#description\",\"996\":\"v-2ea268cd#usage\",\"997\":\"v-2ea268cd#examples\",\"998\":\"v-2ea268cd#detail\",\"999\":\"v-2ea268cd#what-are-murex-named-pipes\",\"1000\":\"v-2ea268cd#namespaces-and-usage-in-modules-and-packages\",\"1001\":\"v-2ea268cd#synonyms\",\"1002\":\"v-2ea268cd#see-also\",\"1003\":\"v-0bc963be\",\"1004\":\"v-0bc963be#description\",\"1005\":\"v-0bc963be#usage\",\"1006\":\"v-0bc963be#examples\",\"1007\":\"v-0bc963be#synonyms\",\"1008\":\"v-0bc963be#see-also\",\"1009\":\"v-60d77726\",\"1010\":\"v-60d77726#description\",\"1011\":\"v-60d77726#usage\",\"1012\":\"v-60d77726#examples\",\"1013\":\"v-60d77726#detail\",\"1014\":\"v-60d77726#see-also\",\"1015\":\"v-d413d818\",\"1016\":\"v-d413d818#description\",\"1017\":\"v-d413d818#usage\",\"1018\":\"v-d413d818#examples\",\"1019\":\"v-d413d818#detail\",\"1020\":\"v-d413d818#file-extensions\",\"1021\":\"v-d413d818#mime-types\",\"1022\":\"v-d413d818#http-user-agent\",\"1023\":\"v-d413d818#open-flags\",\"1024\":\"v-d413d818#see-also\",\"1025\":\"v-05adfeb9\",\"1026\":\"v-05adfeb9#description\",\"1027\":\"v-05adfeb9#usage\",\"1028\":\"v-05adfeb9#detail\",\"1029\":\"v-05adfeb9#fileref\",\"1030\":\"v-05adfeb9#synonyms\",\"1031\":\"v-05adfeb9#see-also\",\"1032\":\"v-5f5e893b\",\"1033\":\"v-5f5e893b#description\",\"1034\":\"v-5f5e893b#usage\",\"1035\":\"v-5f5e893b#examples\",\"1036\":\"v-5f5e893b#detail\",\"1037\":\"v-5f5e893b#code-block-testing\",\"1038\":\"v-5f5e893b#synonyms\",\"1039\":\"v-5f5e893b#see-also\",\"1040\":\"v-611361da\",\"1041\":\"v-611361da#description\",\"1042\":\"v-611361da#usage\",\"1043\":\"v-611361da#examples\",\"1044\":\"v-611361da#see-also\",\"1045\":\"v-c13c42f4\",\"1046\":\"v-c13c42f4#description\",\"1047\":\"v-c13c42f4#usage\",\"1048\":\"v-c13c42f4#examples\",\"1049\":\"v-c13c42f4#detail\",\"1050\":\"v-c13c42f4#ansi-constants\",\"1051\":\"v-c13c42f4#synonyms\",\"1052\":\"v-c13c42f4#see-also\",\"1053\":\"v-ecc991e0\",\"1054\":\"v-ecc991e0#description\",\"1055\":\"v-ecc991e0#usage\",\"1056\":\"v-ecc991e0#examples\",\"1057\":\"v-ecc991e0#detail\",\"1058\":\"v-ecc991e0#what-are-murex-named-pipes\",\"1059\":\"v-ecc991e0#namespaces-and-usage-in-modules-and-packages\",\"1060\":\"v-ecc991e0#synonyms\",\"1061\":\"v-ecc991e0#see-also\",\"1062\":\"v-9da4b144\",\"1063\":\"v-9da4b144#description\",\"1064\":\"v-9da4b144#usage\",\"1065\":\"v-9da4b144#examples\",\"1066\":\"v-9da4b144#detail\",\"1067\":\"v-9da4b144#json-return\",\"1068\":\"v-9da4b144#post-as-a-method\",\"1069\":\"v-9da4b144#configurable-options\",\"1070\":\"v-9da4b144#see-also\",\"1071\":\"v-77afbf6c\",\"1072\":\"v-77afbf6c#description\",\"1073\":\"v-77afbf6c#usage\",\"1074\":\"v-77afbf6c#examples\",\"1075\":\"v-77afbf6c#detail\",\"1076\":\"v-77afbf6c#synonyms\",\"1077\":\"v-77afbf6c#see-also\",\"1078\":\"v-1d3ef674\",\"1079\":\"v-1d3ef674#description\",\"1080\":\"v-1d3ef674#usage\",\"1081\":\"v-1d3ef674#examples\",\"1082\":\"v-1d3ef674#detail\",\"1083\":\"v-1d3ef674#synonyms\",\"1084\":\"v-1d3ef674#see-also\",\"1085\":\"v-6d999808\",\"1086\":\"v-6d999808#description\",\"1087\":\"v-6d999808#usage\",\"1088\":\"v-6d999808#examples\",\"1089\":\"v-6d999808#see-also\",\"1090\":\"v-4893281e\",\"1091\":\"v-4893281e#description\",\"1092\":\"v-4893281e#usage\",\"1093\":\"v-4893281e#examples\",\"1094\":\"v-4893281e#detail\",\"1095\":\"v-4893281e#allowed-characters\",\"1096\":\"v-4893281e#undefining-a-private\",\"1097\":\"v-4893281e#order-of-preference\",\"1098\":\"v-4893281e#see-also\",\"1099\":\"v-d0a3148c\",\"1100\":\"v-d0a3148c#description\",\"1101\":\"v-d0a3148c#usage\",\"1102\":\"v-d0a3148c#examples\",\"1103\":\"v-d0a3148c#see-also\",\"1104\":\"v-07995ef9\",\"1105\":\"v-07995ef9#description\",\"1106\":\"v-07995ef9#usage\",\"1107\":\"v-07995ef9#examples\",\"1108\":\"v-07995ef9#flags\",\"1109\":\"v-07995ef9#detail\",\"1110\":\"v-07995ef9#security\",\"1111\":\"v-07995ef9#see-also\",\"1112\":\"v-362de192\",\"1113\":\"v-362de192#description\",\"1114\":\"v-362de192#usage\",\"1115\":\"v-362de192#examples\",\"1116\":\"v-362de192#flags\",\"1117\":\"v-362de192#synonyms\",\"1118\":\"v-362de192#see-also\",\"1119\":\"v-1125dfb0\",\"1120\":\"v-1125dfb0#description\",\"1121\":\"v-1125dfb0#usage\",\"1122\":\"v-1125dfb0#examples\",\"1123\":\"v-1125dfb0#flags\",\"1124\":\"v-1125dfb0#detail\",\"1125\":\"v-1125dfb0#classic-usage\",\"1126\":\"v-1125dfb0#see-also\",\"1127\":\"v-063ccb55\",\"1128\":\"v-063ccb55#description\",\"1129\":\"v-063ccb55#usage\",\"1130\":\"v-063ccb55#examples\",\"1131\":\"v-063ccb55#find-elements\",\"1132\":\"v-063ccb55#match-elements\",\"1133\":\"v-063ccb55#substitute-expression\",\"1134\":\"v-063ccb55#flags\",\"1135\":\"v-063ccb55#detail\",\"1136\":\"v-063ccb55#synonyms\",\"1137\":\"v-063ccb55#see-also\",\"1138\":\"v-6a0bb0e4\",\"1139\":\"v-6a0bb0e4#description\",\"1140\":\"v-6a0bb0e4#usage\",\"1141\":\"v-6a0bb0e4#examples\",\"1142\":\"v-6a0bb0e4#detail\",\"1143\":\"v-6a0bb0e4#see-also\",\"1144\":\"v-03398c90\",\"1145\":\"v-03398c90#description\",\"1146\":\"v-03398c90#usage\",\"1147\":\"v-03398c90#examples\",\"1148\":\"v-03398c90#detail\",\"1149\":\"v-03398c90#synonyms\",\"1150\":\"v-03398c90#see-also\",\"1151\":\"v-48662186\",\"1152\":\"v-48662186#description\",\"1153\":\"v-48662186#nearest-decimal-place\",\"1154\":\"v-48662186#nearest-integer\",\"1155\":\"v-48662186#nearest-multiple\",\"1156\":\"v-48662186#usage\",\"1157\":\"v-48662186#examples\",\"1158\":\"v-48662186#flags\",\"1159\":\"v-48662186#see-also\",\"1160\":\"v-ce8844b4\",\"1161\":\"v-ce8844b4#description\",\"1162\":\"v-ce8844b4#usage\",\"1163\":\"v-ce8844b4#examples\",\"1164\":\"v-ce8844b4#detail\",\"1165\":\"v-ce8844b4#_1st-parameter\",\"1166\":\"v-ce8844b4#try\",\"1167\":\"v-ce8844b4#trypipe\",\"1168\":\"v-ce8844b4#_2nd-parameter\",\"1169\":\"v-ce8844b4#function\",\"1170\":\"v-ce8844b4#module\",\"1171\":\"v-ce8844b4#see-also\",\"1172\":\"v-136beebc\",\"1173\":\"v-136beebc#description\",\"1174\":\"v-136beebc#usage\",\"1175\":\"v-136beebc#examples\",\"1176\":\"v-136beebc#flags\",\"1177\":\"v-136beebc#detail\",\"1178\":\"v-136beebc#usage-in-scripts\",\"1179\":\"v-136beebc#file-reference\",\"1180\":\"v-136beebc#debug-mode\",\"1181\":\"v-136beebc#synonyms\",\"1182\":\"v-136beebc#see-also\",\"1183\":\"v-084e4eb8\",\"1184\":\"v-084e4eb8#description\",\"1185\":\"v-084e4eb8#usage\",\"1186\":\"v-084e4eb8#examples\",\"1187\":\"v-084e4eb8#detail\",\"1188\":\"v-084e4eb8#traversing-directories\",\"1189\":\"v-084e4eb8#inverse-matches\",\"1190\":\"v-084e4eb8#when-used-as-a-method\",\"1191\":\"v-084e4eb8#synonyms\",\"1192\":\"v-084e4eb8#see-also\",\"1193\":\"v-1efa441c\",\"1194\":\"v-1efa441c#description\",\"1195\":\"v-1efa441c#usage\",\"1196\":\"v-1efa441c#examples\",\"1197\":\"v-1efa441c#detail\",\"1198\":\"v-1efa441c#deallocation\",\"1199\":\"v-1efa441c#type-annotations\",\"1200\":\"v-1efa441c#scoping\",\"1201\":\"v-1efa441c#local-variables\",\"1202\":\"v-1efa441c#global-variables\",\"1203\":\"v-1efa441c#environmental-variables\",\"1204\":\"v-1efa441c#function-names\",\"1205\":\"v-1efa441c#usage-inside-quotation-marks\",\"1206\":\"v-1efa441c#synonyms\",\"1207\":\"v-1efa441c#see-also\",\"1208\":\"v-1e851783\",\"1209\":\"v-1e851783#description\",\"1210\":\"v-1e851783#usage\",\"1211\":\"v-1e851783#examples\",\"1212\":\"v-1e851783#synonyms\",\"1213\":\"v-1e851783#see-also\",\"1214\":\"v-44a310cc\",\"1215\":\"v-44a310cc#description\",\"1216\":\"v-44a310cc#usage\",\"1217\":\"v-44a310cc#examples\",\"1218\":\"v-44a310cc#detail\",\"1219\":\"v-44a310cc#what-are-murex-named-pipes\",\"1220\":\"v-44a310cc#namespaces-and-usage-in-modules-and-packages\",\"1221\":\"v-44a310cc#synonyms\",\"1222\":\"v-44a310cc#see-also\",\"1223\":\"v-280394a8\",\"1224\":\"v-280394a8#description\",\"1225\":\"v-280394a8#usage\",\"1226\":\"v-280394a8#examples\",\"1227\":\"v-280394a8#flags\",\"1228\":\"v-280394a8#see-also\",\"1229\":\"v-b102cbe6\",\"1230\":\"v-b102cbe6#description\",\"1231\":\"v-b102cbe6#usage\",\"1232\":\"v-b102cbe6#examples\",\"1233\":\"v-b102cbe6#detail\",\"1234\":\"v-b102cbe6#synonyms\",\"1235\":\"v-b102cbe6#see-also\",\"1236\":\"v-048bc7ae\",\"1237\":\"v-048bc7ae#description\",\"1238\":\"v-048bc7ae#usage\",\"1239\":\"v-048bc7ae#examples\",\"1240\":\"v-048bc7ae#synonyms\",\"1241\":\"v-048bc7ae#see-also\",\"1242\":\"v-bb075fec\",\"1243\":\"v-bb075fec#description\",\"1244\":\"v-bb075fec#usage\",\"1245\":\"v-bb075fec#examples\",\"1246\":\"v-bb075fec#detail\",\"1247\":\"v-bb075fec#comparing-values-vs-boolean-state\",\"1248\":\"v-bb075fec#by-values\",\"1249\":\"v-bb075fec#by-boolean-state\",\"1250\":\"v-bb075fec#when-to-use-case-if-and-default\",\"1251\":\"v-bb075fec#case\",\"1252\":\"v-bb075fec#if\",\"1253\":\"v-bb075fec#default\",\"1254\":\"v-bb075fec#catch\",\"1255\":\"v-bb075fec#see-also\",\"1256\":\"v-345e3f1b\",\"1257\":\"v-345e3f1b#command-reference-swivel-datatype\",\"1258\":\"v-345e3f1b#description\",\"1259\":\"v-345e3f1b#usage\",\"1260\":\"v-345e3f1b#examples\",\"1261\":\"v-345e3f1b#detail\",\"1262\":\"v-345e3f1b#see-also\",\"1263\":\"v-a3360436\",\"1264\":\"v-a3360436#command-reference-swivel-table\",\"1265\":\"v-a3360436#description\",\"1266\":\"v-a3360436#usage\",\"1267\":\"v-a3360436#examples\",\"1268\":\"v-a3360436#see-also\",\"1269\":\"v-4adb4ef1\",\"1270\":\"v-4adb4ef1#description\",\"1271\":\"v-4adb4ef1#usage\",\"1272\":\"v-4adb4ef1#examples\",\"1273\":\"v-4adb4ef1#detail\",\"1274\":\"v-4adb4ef1#see-also\",\"1275\":\"v-2daeb9d0\",\"1276\":\"v-2daeb9d0#description\",\"1277\":\"v-2daeb9d0#usage\",\"1278\":\"v-2daeb9d0#flags\",\"1279\":\"v-2daeb9d0#detail\",\"1280\":\"v-2daeb9d0#dynamic-autocompletion\",\"1281\":\"v-2daeb9d0#see-also\",\"1282\":\"v-1918baa8\",\"1283\":\"v-1918baa8#description\",\"1284\":\"v-1918baa8#usage\",\"1285\":\"v-1918baa8#examples\",\"1286\":\"v-1918baa8#detail\",\"1287\":\"v-1918baa8#report\",\"1288\":\"v-1918baa8#synonyms\",\"1289\":\"v-1918baa8#see-also\",\"1290\":\"v-3bfa4151\",\"1291\":\"v-3bfa4151#description\",\"1292\":\"v-3bfa4151#usage\",\"1293\":\"v-3bfa4151#examples\",\"1294\":\"v-3bfa4151#detail\",\"1295\":\"v-3bfa4151#see-also\",\"1296\":\"v-0e7afb46\",\"1297\":\"v-0e7afb46#description\",\"1298\":\"v-0e7afb46#usage\",\"1299\":\"v-0e7afb46#examples\",\"1300\":\"v-0e7afb46#detail\",\"1301\":\"v-0e7afb46#see-also\",\"1302\":\"v-6c0bd9e4\",\"1303\":\"v-6c0bd9e4#description\",\"1304\":\"v-6c0bd9e4#usage\",\"1305\":\"v-6c0bd9e4#examples\",\"1306\":\"v-6c0bd9e4#detail\",\"1307\":\"v-6c0bd9e4#see-also\",\"1308\":\"v-7ffafeec\",\"1309\":\"v-7ffafeec#description\",\"1310\":\"v-7ffafeec#usage\",\"1311\":\"v-7ffafeec#examples\",\"1312\":\"v-7ffafeec#detail\",\"1313\":\"v-7ffafeec#see-also\",\"1314\":\"v-ebd2a1a0\",\"1315\":\"v-ebd2a1a0#description\",\"1316\":\"v-ebd2a1a0#usage\",\"1317\":\"v-ebd2a1a0#examples\",\"1318\":\"v-ebd2a1a0#flags\",\"1319\":\"v-ebd2a1a0#see-also\",\"1320\":\"v-109d4839\",\"1321\":\"v-109d4839#description\",\"1322\":\"v-109d4839#usage\",\"1323\":\"v-109d4839#examples\",\"1324\":\"v-109d4839#detail\",\"1325\":\"v-109d4839#see-also\",\"1326\":\"v-30e9f34b\",\"1327\":\"v-30e9f34b#description\",\"1328\":\"v-30e9f34b#usage\",\"1329\":\"v-30e9f34b#examples\",\"1330\":\"v-30e9f34b#detail\",\"1331\":\"v-30e9f34b#see-also\",\"1332\":\"v-cc1e7c88\",\"1333\":\"v-cc1e7c88#description\",\"1334\":\"v-cc1e7c88#usage\",\"1335\":\"v-cc1e7c88#examples\",\"1336\":\"v-cc1e7c88#flags\",\"1337\":\"v-cc1e7c88#see-also\",\"1338\":\"v-8d5ed47a\",\"1339\":\"v-8d5ed47a#description\",\"1340\":\"v-8d5ed47a#usage\",\"1341\":\"v-8d5ed47a#examples\",\"1342\":\"v-8d5ed47a#detail\",\"1343\":\"v-8d5ed47a#meta-values\",\"1344\":\"v-8d5ed47a#synonyms\",\"1345\":\"v-8d5ed47a#see-also\",\"1346\":\"v-48f6c38a\",\"1347\":\"v-48f6c38a#description\",\"1348\":\"v-48f6c38a#usage\",\"1349\":\"v-48f6c38a#valid-interrupts\",\"1350\":\"v-48f6c38a#examples\",\"1351\":\"v-48f6c38a#detail\",\"1352\":\"v-48f6c38a#payload\",\"1353\":\"v-48f6c38a#name\",\"1354\":\"v-48f6c38a#command\",\"1355\":\"v-48f6c38a#operation\",\"1356\":\"v-48f6c38a#stdout\",\"1357\":\"v-48f6c38a#stderr\",\"1358\":\"v-48f6c38a#exitnum\",\"1359\":\"v-48f6c38a#stdout-1\",\"1360\":\"v-48f6c38a#see-also\",\"1361\":\"v-e4ae1fd6\",\"1362\":\"v-e4ae1fd6#description\",\"1363\":\"v-e4ae1fd6#payload\",\"1364\":\"v-e4ae1fd6#name\",\"1365\":\"v-e4ae1fd6#path\",\"1366\":\"v-e4ae1fd6#operation\",\"1367\":\"v-e4ae1fd6#usage\",\"1368\":\"v-e4ae1fd6#valid-interrupts\",\"1369\":\"v-e4ae1fd6#examples\",\"1370\":\"v-e4ae1fd6#detail\",\"1371\":\"v-e4ae1fd6#stdout\",\"1372\":\"v-e4ae1fd6#posix-only\",\"1373\":\"v-e4ae1fd6#see-also\",\"1374\":\"v-06e1172c\",\"1375\":\"v-06e1172c#description\",\"1376\":\"v-06e1172c#usage\",\"1377\":\"v-06e1172c#valid-interrupts\",\"1378\":\"v-06e1172c#examples\",\"1379\":\"v-06e1172c#detail\",\"1380\":\"v-06e1172c#payload\",\"1381\":\"v-06e1172c#name\",\"1382\":\"v-06e1172c#interrupt-name\",\"1383\":\"v-06e1172c#operation\",\"1384\":\"v-06e1172c#cmdline\",\"1385\":\"v-06e1172c#stdout\",\"1386\":\"v-06e1172c#order-of-execution\",\"1387\":\"v-06e1172c#namespacing\",\"1388\":\"v-06e1172c#see-also\",\"1389\":\"v-6ddecb13\",\"1390\":\"v-6ddecb13#description\",\"1391\":\"v-6ddecb13#usage\",\"1392\":\"v-6ddecb13#valid-interrupts\",\"1393\":\"v-6ddecb13#examples\",\"1394\":\"v-6ddecb13#detail\",\"1395\":\"v-6ddecb13#payload\",\"1396\":\"v-6ddecb13#name\",\"1397\":\"v-6ddecb13#interrupt\",\"1398\":\"v-6ddecb13#see-also\",\"1399\":\"v-087d4500\",\"1400\":\"v-087d4500#working-with-structured-data\",\"1401\":\"v-087d4500#the-array-builtin\",\"1402\":\"v-087d4500#character-arrays\",\"1403\":\"v-087d4500#special-ranges\",\"1404\":\"v-087d4500#advanced-array-syntax\",\"1405\":\"v-087d4500#creating-json-arrays-with-ja\",\"1406\":\"v-1ff19c50\",\"1407\":\"v-1ff19c50#description\",\"1408\":\"v-1ff19c50#usage\",\"1409\":\"v-1ff19c50#examples\",\"1410\":\"v-1ff19c50#see-also\",\"1411\":\"v-23d96e2a\",\"1412\":\"v-23d96e2a#description\",\"1413\":\"v-23d96e2a#usage\",\"1414\":\"v-23d96e2a#examples\",\"1415\":\"v-23d96e2a#detail\",\"1416\":\"v-23d96e2a#current-date\",\"1417\":\"v-23d96e2a#case-sensitivity\",\"1418\":\"v-23d96e2a#lower-case\",\"1419\":\"v-23d96e2a#title-case\",\"1420\":\"v-23d96e2a#upper-case\",\"1421\":\"v-23d96e2a#supported-date-formatting\",\"1422\":\"v-23d96e2a#see-also\",\"1423\":\"v-e21345b0\",\"1424\":\"v-e21345b0#description\",\"1425\":\"v-e21345b0#usage\",\"1426\":\"v-e21345b0#examples\",\"1427\":\"v-e21345b0#detail\",\"1428\":\"v-e21345b0#floating-point-numbers\",\"1429\":\"v-e21345b0#everything-is-a-string\",\"1430\":\"v-e21345b0#see-also\",\"1431\":\"v-1db10c28\",\"1432\":\"v-1db10c28#description\",\"1433\":\"v-1db10c28#usage\",\"1434\":\"v-1db10c28#examples\",\"1435\":\"v-1db10c28#detail\",\"1436\":\"v-1db10c28#floating-point-numbers\",\"1437\":\"v-1db10c28#everything-is-a-string\",\"1438\":\"v-1db10c28#see-also\",\"1439\":\"v-37a650c0\",\"1440\":\"v-37a650c0#description\",\"1441\":\"v-37a650c0#usage\",\"1442\":\"v-37a650c0#examples\",\"1443\":\"v-37a650c0#detail\",\"1444\":\"v-37a650c0#case-sensitivity\",\"1445\":\"v-37a650c0#lower-case\",\"1446\":\"v-37a650c0#title-case\",\"1447\":\"v-37a650c0#upper-case\",\"1448\":\"v-37a650c0#looping-vs-negative-ranges\",\"1449\":\"v-37a650c0#supported-dictionary-terms\",\"1450\":\"v-37a650c0#see-also\",\"1451\":\"v-14b03163\",\"1452\":\"v-14b03163#other-reference-material\",\"1453\":\"v-14b03163#language-guides\",\"1454\":\"v-14b03163#murex-s-source-code\",\"1455\":\"v-14b03163#shell-commands-for-querying-builtins\",\"1456\":\"v-14b03163#pages\",\"1457\":\"v-7cb680b2\",\"1458\":\"v-7cb680b2#description\",\"1459\":\"v-7cb680b2#usage\",\"1460\":\"v-7cb680b2#examples\",\"1461\":\"v-7cb680b2#detail\",\"1462\":\"v-7cb680b2#synonyms\",\"1463\":\"v-7cb680b2#see-also\",\"1464\":\"v-265d18a2\",\"1465\":\"v-265d18a2#description\",\"1466\":\"v-265d18a2#usage\",\"1467\":\"v-265d18a2#detail\",\"1468\":\"v-265d18a2#synonyms\",\"1469\":\"v-265d18a2#see-also\",\"1470\":\"v-b2f545fa\",\"1471\":\"v-b2f545fa#description\",\"1472\":\"v-b2f545fa#usage\",\"1473\":\"v-b2f545fa#synonyms\",\"1474\":\"v-b2f545fa#see-also\",\"1475\":\"v-ac462ed6\",\"1476\":\"v-ac462ed6#description\",\"1477\":\"v-ac462ed6#usage\",\"1478\":\"v-ac462ed6#examples\",\"1479\":\"v-ac462ed6#detail\",\"1480\":\"v-ac462ed6#see-also\",\"1481\":\"v-21c9ec1a\",\"1482\":\"v-21c9ec1a#description\",\"1483\":\"v-21c9ec1a#usage\",\"1484\":\"v-21c9ec1a#examples\",\"1485\":\"v-21c9ec1a#detail\",\"1486\":\"v-21c9ec1a#default-table-name\",\"1487\":\"v-21c9ec1a#config-options\",\"1488\":\"v-21c9ec1a#read-all-vs-sequential-reads\",\"1489\":\"v-21c9ec1a#early-release\",\"1490\":\"v-21c9ec1a#synonyms\",\"1491\":\"v-21c9ec1a#see-also\",\"1492\":\"v-39b8d205\",\"1493\":\"v-39b8d205#description\",\"1494\":\"v-39b8d205#usage\",\"1495\":\"v-39b8d205#examples\",\"1496\":\"v-39b8d205#detail\",\"1497\":\"v-39b8d205#see-also\",\"1498\":\"v-a03f24f8\",\"1499\":\"v-a03f24f8#other-reference-material\",\"1500\":\"v-a03f24f8#language-guides\",\"1501\":\"v-a03f24f8#murex-s-source-code\",\"1502\":\"v-a03f24f8#pages\",\"1503\":\"v-32ebb6a4\",\"1504\":\"v-32ebb6a4#description\",\"1505\":\"v-32ebb6a4#examples\",\"1506\":\"v-32ebb6a4#detail\",\"1507\":\"v-32ebb6a4#see-also\",\"1508\":\"v-ed7d2d8a\",\"1509\":\"v-ed7d2d8a#description\",\"1510\":\"v-ed7d2d8a#examples\",\"1511\":\"v-ed7d2d8a#as-a-parameter\",\"1512\":\"v-ed7d2d8a#as-a-function\",\"1513\":\"v-ed7d2d8a#nested-quotes\",\"1514\":\"v-ed7d2d8a#detail\",\"1515\":\"v-ed7d2d8a#multi-line-quotes\",\"1516\":\"v-ed7d2d8a#legacy-support\",\"1517\":\"v-ed7d2d8a#deprecated-syntax\",\"1518\":\"v-ed7d2d8a#see-also\",\"1519\":\"v-2f8bbe8d\",\"1520\":\"v-2f8bbe8d#description\",\"1521\":\"v-2f8bbe8d#examples\",\"1522\":\"v-2f8bbe8d#arrays-passed-as-a-json-string\",\"1523\":\"v-2f8bbe8d#different-supported-syntax-for-creating-a-numeric-array\",\"1524\":\"v-2f8bbe8d#as-a-range\",\"1525\":\"v-2f8bbe8d#json-formatted\",\"1526\":\"v-2f8bbe8d#whitespace-separated\",\"1527\":\"v-2f8bbe8d#values-and-ranges\",\"1528\":\"v-2f8bbe8d#strings\",\"1529\":\"v-2f8bbe8d#barewords-and-whitespace-separated\",\"1530\":\"v-2f8bbe8d#json-formatted-1\",\"1531\":\"v-2f8bbe8d#special-ranges\",\"1532\":\"v-2f8bbe8d#multiple-expansion-blocks\",\"1533\":\"v-2f8bbe8d#nested-arrays\",\"1534\":\"v-2f8bbe8d#json-objects-within-arrays\",\"1535\":\"v-2f8bbe8d#detail\",\"1536\":\"v-2f8bbe8d#see-also\",\"1537\":\"v-f0a90ba6\",\"1538\":\"v-f0a90ba6#description\",\"1539\":\"v-f0a90ba6#examples\",\"1540\":\"v-f0a90ba6#see-also\",\"1541\":\"v-35e6be0a\",\"1542\":\"v-35e6be0a#description\",\"1543\":\"v-35e6be0a#detail\",\"1544\":\"v-35e6be0a#multiline-blocks\",\"1545\":\"v-35e6be0a#code-golfing\",\"1546\":\"v-35e6be0a#ansi-constants\",\"1547\":\"v-35e6be0a#see-also\",\"1548\":\"v-7bb28e55\",\"1549\":\"v-7bb28e55#description\",\"1550\":\"v-7bb28e55#examples\",\"1551\":\"v-7bb28e55#detail\",\"1552\":\"v-7bb28e55#see-also\",\"1553\":\"v-12c2c7ac\",\"1554\":\"v-12c2c7ac#description\",\"1555\":\"v-12c2c7ac#examples\",\"1556\":\"v-12c2c7ac#detail\",\"1557\":\"v-12c2c7ac#see-also\",\"1558\":\"v-c427ade4\",\"1559\":\"v-c427ade4#description\",\"1560\":\"v-c427ade4#examples\",\"1561\":\"v-c427ade4#detail\",\"1562\":\"v-c427ade4#see-also\",\"1563\":\"v-379c35e4\",\"1564\":\"v-379c35e4#description\",\"1565\":\"v-379c35e4#examples\",\"1566\":\"v-379c35e4#detail\",\"1567\":\"v-379c35e4#truncating-a-file\",\"1568\":\"v-379c35e4#see-also\",\"1569\":\"v-1791f5eb\",\"1570\":\"v-1791f5eb#description\",\"1571\":\"v-1791f5eb#examples\",\"1572\":\"v-1791f5eb#see-also\",\"1573\":\"v-67327ccf\",\"1574\":\"v-67327ccf#description\",\"1575\":\"v-67327ccf#examples\",\"1576\":\"v-67327ccf#see-also\",\"1577\":\"v-ca2843c6\",\"1578\":\"v-ca2843c6#description\",\"1579\":\"v-ca2843c6#examples\",\"1580\":\"v-ca2843c6#see-also\",\"1581\":\"v-517a289e\",\"1582\":\"v-517a289e#description\",\"1583\":\"v-517a289e#examples\",\"1584\":\"v-517a289e#see-also\",\"1585\":\"v-3edf3504\",\"1586\":\"v-3edf3504#description\",\"1587\":\"v-3edf3504#examples\",\"1588\":\"v-3edf3504#detail\",\"1589\":\"v-3edf3504#see-also\",\"1590\":\"v-3b360938\",\"1591\":\"v-3b360938#description\",\"1592\":\"v-3b360938#examples\",\"1593\":\"v-3b360938#detail\",\"1594\":\"v-3b360938#see-also\",\"1595\":\"v-2b41ed05\",\"1596\":\"v-2b41ed05#description\",\"1597\":\"v-2b41ed05#examples\",\"1598\":\"v-2b41ed05#detail\",\"1599\":\"v-2b41ed05#see-also\",\"1600\":\"v-36f2e27c\",\"1601\":\"v-36f2e27c#definitions\",\"1602\":\"v-36f2e27c#feature-sets\",\"1603\":\"v-36f2e27c#pages\",\"1604\":\"v-264e33ad\",\"1605\":\"v-264e33ad#description\",\"1606\":\"v-264e33ad#supported-hooks\",\"1607\":\"v-264e33ad#see-also\",\"1608\":\"v-5538ab7c\",\"1609\":\"v-5538ab7c#description\",\"1610\":\"v-5538ab7c#detail\",\"1611\":\"v-5538ab7c#supported-hooks\",\"1612\":\"v-5538ab7c#see-also\",\"1613\":\"v-0b8abf55\",\"1614\":\"v-0b8abf55#description\",\"1615\":\"v-0b8abf55#detail\",\"1616\":\"v-0b8abf55#default-associations\",\"1617\":\"v-0b8abf55#supported-hooks\",\"1618\":\"v-0b8abf55#see-also\",\"1619\":\"v-33ae8782\",\"1620\":\"v-33ae8782#description\",\"1621\":\"v-33ae8782#supported-hooks\",\"1622\":\"v-33ae8782#see-also\",\"1623\":\"v-b3e77db8\",\"1624\":\"v-b3e77db8#description\",\"1625\":\"v-b3e77db8#supported-hooks\",\"1626\":\"v-b3e77db8#see-also\",\"1627\":\"v-9907152c\",\"1628\":\"v-9907152c#description\",\"1629\":\"v-9907152c#examples\",\"1630\":\"v-9907152c#default-associations\",\"1631\":\"v-9907152c#supported-hooks\",\"1632\":\"v-9907152c#see-also\",\"1633\":\"v-6ee8f30c\",\"1634\":\"v-6ee8f30c#description\",\"1635\":\"v-6ee8f30c#supported-hooks\",\"1636\":\"v-6ee8f30c#see-also\",\"1637\":\"v-6b60106f\",\"1638\":\"v-6b60106f#description\",\"1639\":\"v-6b60106f#examples\",\"1640\":\"v-6b60106f#detail\",\"1641\":\"v-6b60106f#tips-when-writing-json-inside-for-loops\",\"1642\":\"v-6b60106f#foreach-will-automatically-cast-it-s-output-as-jsonl-if-it-s-stdin-type-is-json\",\"1643\":\"v-6b60106f#default-associations\",\"1644\":\"v-6b60106f#supported-hooks\",\"1645\":\"v-6b60106f#see-also\",\"1646\":\"v-57dc2980\",\"1647\":\"v-57dc2980#description\",\"1648\":\"v-57dc2980#single-line-concatenated-json\",\"1649\":\"v-57dc2980#multi-line-concatenated-json\",\"1650\":\"v-57dc2980#examples\",\"1651\":\"v-57dc2980#tabulated-data\",\"1652\":\"v-57dc2980#nested-objects\",\"1653\":\"v-57dc2980#detail\",\"1654\":\"v-57dc2980#similarities-with-jsonl\",\"1655\":\"v-57dc2980#default-associations\",\"1656\":\"v-57dc2980#supported-hooks\",\"1657\":\"v-57dc2980#see-also\",\"1658\":\"v-6737c717\",\"1659\":\"v-6737c717#description\",\"1660\":\"v-6737c717#examples\",\"1661\":\"v-6737c717#tabulated-data\",\"1662\":\"v-6737c717#nested-objects\",\"1663\":\"v-6737c717#detail\",\"1664\":\"v-6737c717#concatenated-json\",\"1665\":\"v-6737c717#single-line-concatenated-json\",\"1666\":\"v-6737c717#multi-line-concatenated-json\",\"1667\":\"v-6737c717#more-information\",\"1668\":\"v-6737c717#default-associations\",\"1669\":\"v-6737c717#supported-hooks\",\"1670\":\"v-6737c717#see-also\",\"1671\":\"v-2ea04ba4\",\"1672\":\"v-2ea04ba4#description\",\"1673\":\"v-2ea04ba4#line-comments\",\"1674\":\"v-2ea04ba4#block-quotation\",\"1675\":\"v-2ea04ba4#see-also\",\"1676\":\"v-46aef456\",\"1677\":\"v-46aef456#description\",\"1678\":\"v-46aef456#supported-hooks\",\"1679\":\"v-46aef456#see-also\",\"1680\":\"v-d530d15c\",\"1681\":\"v-d530d15c#data-type-reference-path-string\",\"1682\":\"v-d530d15c#description\",\"1683\":\"v-d530d15c#supported-hooks\",\"1684\":\"v-d530d15c#see-also\",\"1685\":\"v-909f33ec\",\"1686\":\"v-909f33ec#description\",\"1687\":\"v-909f33ec#supported-hooks\",\"1688\":\"v-909f33ec#see-also\",\"1689\":\"v-29518b3d\",\"1690\":\"v-29518b3d#description\",\"1691\":\"v-29518b3d#examples\",\"1692\":\"v-29518b3d#default-associations\",\"1693\":\"v-29518b3d#supported-hooks\",\"1694\":\"v-29518b3d#see-also\",\"1695\":\"v-60574210\",\"1696\":\"v-60574210#description\",\"1697\":\"v-60574210#default-associations\",\"1698\":\"v-60574210#supported-hooks\",\"1699\":\"v-60574210#see-also\",\"1700\":\"v-12dff5e6\",\"1701\":\"v-12dff5e6#constants\",\"1702\":\"v-12dff5e6#how-to-read-the-code-above\",\"1703\":\"v-12dff5e6#unsupported-constants\",\"1704\":\"v-12dff5e6#enabling-disabling-ansi-escape-sequences\",\"1705\":\"v-12dff5e6#see-also\",\"1706\":\"v-6635bffb\",\"1707\":\"v-6635bffb#see-also\",\"1708\":\"v-32c32ca3\",\"1709\":\"v-32c32ca3#see-also\",\"1710\":\"v-432b96aa\",\"1711\":\"v-432b96aa#module-strings-for-non-module-code\",\"1712\":\"v-432b96aa#source\",\"1713\":\"v-432b96aa#repl\",\"1714\":\"v-432b96aa#see-also\",\"1715\":\"v-39dd9786\",\"1716\":\"v-39dd9786#overview\",\"1717\":\"v-39dd9786#readline\",\"1718\":\"v-39dd9786#hotkeys\",\"1719\":\"v-39dd9786#autocompletion\",\"1720\":\"v-39dd9786#syntax-completion\",\"1721\":\"v-39dd9786#syntax-highlighting\",\"1722\":\"v-39dd9786#spellchecker\",\"1723\":\"v-39dd9786#hint-text\",\"1724\":\"v-39dd9786#configuring-hint-text-colour\",\"1725\":\"v-39dd9786#custom-hint-text-statuses\",\"1726\":\"v-39dd9786#disabling-hint-text\",\"1727\":\"v-39dd9786#see-also\",\"1728\":\"v-4af5768a\",\"1729\":\"v-4af5768a#what-are-packages-and-modules\",\"1730\":\"v-4af5768a#using-packages-and-modules\",\"1731\":\"v-4af5768a#consistency\",\"1732\":\"v-4af5768a#extendability\",\"1733\":\"v-4af5768a#sharing-code\",\"1734\":\"v-4af5768a#updating-packages\",\"1735\":\"v-4af5768a#tracking-code\",\"1736\":\"v-4af5768a#module-strings-for-non-module-code\",\"1737\":\"v-4af5768a#source\",\"1738\":\"v-4af5768a#repl\",\"1739\":\"v-4af5768a#see-also\",\"1740\":\"v-d94eb878\",\"1741\":\"v-d94eb878#background\",\"1742\":\"v-d94eb878#in-murex\",\"1743\":\"v-d94eb878#see-also\",\"1744\":\"v-896584e4\",\"1745\":\"v-896584e4#examples\",\"1746\":\"v-896584e4#detail\",\"1747\":\"v-896584e4#named-pipes\",\"1748\":\"v-896584e4#see-also\",\"1749\":\"v-bb9c304e\",\"1750\":\"v-bb9c304e#murex-preload\",\"1751\":\"v-bb9c304e#murex-modules\",\"1752\":\"v-bb9c304e#murex-profile\",\"1753\":\"v-bb9c304e#overriding-the-default-paths-xdg\",\"1754\":\"v-bb9c304e#see-also\",\"1755\":\"v-58921e11\",\"1756\":\"v-58921e11#self-json\",\"1757\":\"v-58921e11#parent-num\",\"1758\":\"v-58921e11#scope-num\",\"1759\":\"v-58921e11#tty-bool\",\"1760\":\"v-58921e11#method-bool\",\"1761\":\"v-58921e11#not-bool\",\"1762\":\"v-58921e11#background-bool\",\"1763\":\"v-58921e11#module-str\",\"1764\":\"v-58921e11#args-json\",\"1765\":\"v-58921e11#params-json\",\"1766\":\"v-58921e11#murex-exe-str\",\"1767\":\"v-58921e11#murex-args-json\",\"1768\":\"v-58921e11#hostname-str\",\"1769\":\"v-58921e11#_0-str\",\"1770\":\"v-58921e11#_1-2-3-str\",\"1771\":\"v-58921e11#see-also\",\"1772\":\"v-9f3ddb50\",\"1773\":\"v-9f3ddb50#footnotes\",\"1774\":\"v-9f3ddb50#see-also\",\"1775\":\"v-2b0ec118\",\"1776\":\"v-2b0ec118#normal\",\"1777\":\"v-2b0ec118#try\",\"1778\":\"v-2b0ec118#try-pipe\",\"1779\":\"v-2b0ec118#see-also\",\"1780\":\"v-37c2dc71\",\"1781\":\"v-37c2dc71#what-instantiates-a-new-scope\",\"1782\":\"v-37c2dc71#see-also\",\"1783\":\"v-0f6a1850\",\"1784\":\"v-0f6a1850#cli-spellchecker-3rd-party-software\",\"1785\":\"v-0f6a1850#murex-config\",\"1786\":\"v-0f6a1850#ansi-escape-sequences\",\"1787\":\"v-0f6a1850#spellcheck-enable\",\"1788\":\"v-0f6a1850#spellcheck-murex-code\",\"1789\":\"v-0f6a1850#how-to-write-your-own-spellcheck-func\",\"1790\":\"v-0f6a1850#user-dictionary\",\"1791\":\"v-0f6a1850#ignored-by-default\",\"1792\":\"v-0f6a1850#common-problems-with-aspell\",\"1793\":\"v-0f6a1850#error-no-word-lists-can-be-found-for-the-language-en-nz\",\"1794\":\"v-0f6a1850#see-also\",\"1795\":\"v-b54cccc6\",\"1796\":\"v-b54cccc6#command-prompt\",\"1797\":\"v-b54cccc6#autocomplete\",\"1798\":\"v-b54cccc6#fuzzy-find-autocomplete\",\"1799\":\"v-b54cccc6#preview-box\",\"1800\":\"v-b54cccc6#search-shell-history\",\"1801\":\"v-b54cccc6#line-editing\",\"1802\":\"v-b54cccc6#navigation\",\"1803\":\"v-b54cccc6#general-hotkeys\",\"1804\":\"v-b54cccc6#vim-keys\",\"1805\":\"v-b54cccc6#supported-keys\",\"1806\":\"v-b54cccc6#full-screen-editing-via-editor\",\"1807\":\"v-b54cccc6#recalling-previous-words\",\"1808\":\"v-b54cccc6#job-control\",\"1809\":\"v-b54cccc6#miscellaneous\",\"1810\":\"v-b54cccc6#cancel-prompt\",\"1811\":\"v-b54cccc6#end-of-file\",\"1812\":\"v-b54cccc6#alternative-cancel-key\",\"1813\":\"v-b54cccc6#clear-screen\",\"1814\":\"v-b54cccc6#see-also\",\"1815\":\"v-e5cf306c\",\"1816\":\"v-4c561489\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,32],\"1\":[1,19],\"2\":[3,17],\"3\":[1,145],\"4\":[1,10],\"5\":[1,10],\"6\":[1,10],\"7\":[1,10],\"8\":[2,52],\"9\":[3,13],\"10\":[2,59],\"11\":[3],\"12\":[2,21],\"13\":[4,13],\"14\":[5,34],\"15\":[1,459],\"16\":[2,33],\"17\":[1],\"18\":[2],\"19\":[4,15],\"20\":[4,10],\"21\":[1,35],\"22\":[2,12],\"23\":[2,103],\"24\":[3,81],\"25\":[2],\"26\":[2,459],\"27\":[2,55],\"28\":[2,58],\"29\":[1,27],\"30\":[2,80],\"31\":[1,9],\"32\":[1],\"33\":[9,39],\"34\":[9,36],\"35\":[null,null,1],\"36\":[7,60],\"37\":[1,56],\"38\":[7,126],\"39\":[10,120],\"40\":[5,172],\"41\":[5,130],\"42\":[5,124],\"43\":[1,74],\"44\":[2,38],\"45\":[7,35],\"46\":[4,141],\"47\":[2,226],\"48\":[2,148],\"49\":[2,10],\"50\":[1,217],\"51\":[1,93],\"52\":[1,128],\"53\":[1,69],\"54\":[2,70],\"55\":[6,10],\"56\":[2,128],\"57\":[10,121],\"58\":[4,20],\"59\":[3,120],\"60\":[3,77],\"61\":[1,71],\"62\":[1,23],\"63\":[2,31],\"64\":[1,12],\"65\":[1],\"66\":[10,31],\"67\":[10,17],\"68\":[10,21],\"69\":[11,41],\"70\":[10,40],\"71\":[10,33],\"72\":[10,48],\"73\":[10,15],\"74\":[10,17],\"75\":[10,26],\"76\":[10,38],\"77\":[10,36],\"78\":[10,43],\"79\":[10,32],\"80\":[10,20],\"81\":[10,9],\"82\":[10,20],\"83\":[10,22],\"84\":[10,12],\"85\":[null,null,1],\"86\":[9,85],\"87\":[2,45],\"88\":[9,31],\"89\":[3,45],\"90\":[4,220],\"91\":[5,44],\"92\":[2,57],\"93\":[9,131],\"94\":[2,104],\"95\":[9,236],\"96\":[2,59],\"97\":[9,32],\"98\":[3,34],\"99\":[4,88],\"100\":[5,50],\"101\":[2,11],\"102\":[9,21],\"103\":[4,215],\"104\":[5,64],\"105\":[2,31],\"106\":[9,27],\"107\":[3,24],\"108\":[4,267],\"109\":[5,68],\"110\":[2,93],\"111\":[9,292],\"112\":[2,74],\"113\":[9,295],\"114\":[2,28],\"115\":[9,272],\"116\":[2,60],\"117\":[9,143],\"118\":[2,35],\"119\":[9,257],\"120\":[2,91],\"121\":[9,392],\"122\":[2,90],\"123\":[9,148],\"124\":[2,17],\"125\":[9,40],\"126\":[2,44],\"127\":[1,101],\"128\":[6,16],\"129\":[3,96],\"130\":[2,49],\"131\":[10,41],\"132\":[3],\"133\":[2,1],\"134\":[1,22],\"135\":[2,47],\"136\":[3],\"137\":[2,1],\"138\":[1,30],\"139\":[2,53],\"140\":[3],\"141\":[2,1],\"142\":[1,86],\"143\":[2,18],\"144\":[3],\"145\":[2,1],\"146\":[1,4],\"147\":[2,51],\"148\":[3],\"149\":[2,1],\"150\":[1,15],\"151\":[2,51],\"152\":[3],\"153\":[2,37],\"154\":[1,25],\"155\":[2,42],\"156\":[3],\"157\":[2,1],\"158\":[1,3],\"159\":[2,25],\"160\":[9,21],\"161\":[2,1],\"162\":[1,147],\"163\":[3,90],\"164\":[2,68],\"165\":[9,17],\"166\":[2,15],\"167\":[1,38],\"168\":[3,27],\"169\":[2,28],\"170\":[4,31],\"171\":[3],\"172\":[2,15],\"173\":[1,1],\"174\":[2,65],\"175\":[3],\"176\":[2,21],\"177\":[1,15],\"178\":[2,16],\"179\":[3],\"180\":[2,11],\"181\":[1,97],\"182\":[3,160],\"183\":[2,89],\"184\":[1],\"185\":[2],\"186\":[1,2],\"187\":[1,2],\"188\":[1,21],\"189\":[2,45],\"190\":[3,27],\"191\":[2],\"192\":[1,4],\"193\":[1,7],\"194\":[1,7],\"195\":[1,7],\"196\":[1,7],\"197\":[1,28],\"198\":[1,34],\"199\":[2,40],\"200\":[2],\"201\":[4,70],\"202\":[2,98],\"203\":[1],\"204\":[2,17],\"205\":[6,18],\"206\":[5,7],\"207\":[3,62],\"208\":[4,179],\"209\":[3,47],\"210\":[4,32],\"211\":[3,62],\"212\":[null,null,1],\"213\":[2],\"214\":[1,73],\"215\":[4,22],\"216\":[1,54],\"217\":[3,77],\"218\":[3,63],\"219\":[3,52],\"220\":[2,26],\"221\":[2],\"222\":[2,38],\"223\":[2,51],\"224\":[1,51],\"225\":[2,38],\"226\":[2,55],\"227\":[2,49],\"228\":[1,67],\"229\":[1,29],\"230\":[3],\"231\":[1,91],\"232\":[1,87],\"233\":[3,9],\"234\":[2,15],\"235\":[1,36],\"236\":[1,18],\"237\":[2,69],\"238\":[4,80],\"239\":[2,34],\"240\":[1],\"241\":[1,24],\"242\":[2,23],\"243\":[2,17],\"244\":[2,55],\"245\":[2],\"246\":[3,29],\"247\":[3,40],\"248\":[3,26],\"249\":[3,30],\"250\":[2],\"251\":[3,56],\"252\":[3,63],\"253\":[3,26],\"254\":[2,10],\"255\":[2,33],\"256\":[2,9],\"257\":[null,null,1],\"258\":[4,11],\"259\":[1,47],\"260\":[1,42],\"261\":[1,66],\"262\":[1,18],\"263\":[2,20],\"264\":[2,43],\"265\":[1,68],\"266\":[4,10],\"267\":[1,47],\"268\":[1,19],\"269\":[1,52],\"270\":[1,90],\"271\":[1,21],\"272\":[2,45],\"273\":[4,15],\"274\":[1,64],\"275\":[1,19],\"276\":[1,52],\"277\":[1,94],\"278\":[1,31],\"279\":[2,45],\"280\":[4,7],\"281\":[1,43],\"282\":[1,21],\"283\":[1,39],\"284\":[1,24],\"285\":[1,18],\"286\":[2,52],\"287\":[4,12],\"288\":[1,48],\"289\":[1,19],\"290\":[1,40],\"291\":[1,22],\"292\":[1,45],\"293\":[2,29],\"294\":[4,9],\"295\":[1,43],\"296\":[1,21],\"297\":[1,47],\"298\":[1,24],\"299\":[1,18],\"300\":[2,50],\"301\":[4,7],\"302\":[1,41],\"303\":[1,44],\"304\":[1,99],\"305\":[1,12],\"306\":[2,20],\"307\":[4,9],\"308\":[1,46],\"309\":[4,36],\"310\":[1,19],\"311\":[1,34],\"312\":[1,62],\"313\":[2,35],\"314\":[5,14],\"315\":[1,61],\"316\":[1,37],\"317\":[1],\"318\":[3,72],\"319\":[1,23],\"320\":[2,45],\"321\":[3],\"322\":[6,16],\"323\":[1,61],\"324\":[1,34],\"325\":[1],\"326\":[3,67],\"327\":[1,24],\"328\":[2,42],\"329\":[5,16],\"330\":[1,61],\"331\":[1,37],\"332\":[1],\"333\":[3,89],\"334\":[1,25],\"335\":[2,45],\"336\":[5,7],\"337\":[1,41],\"338\":[1,39],\"339\":[1],\"340\":[3,130],\"341\":[1,32],\"342\":[2,49],\"343\":[5,6],\"344\":[1,41],\"345\":[1,48],\"346\":[1],\"347\":[3,193],\"348\":[1,44],\"349\":[2,49],\"350\":[5,12],\"351\":[1],\"352\":[1,9],\"353\":[1,24],\"354\":[1,121],\"355\":[1,21],\"356\":[2,20],\"357\":[5,8],\"358\":[1],\"359\":[1,8],\"360\":[1,28],\"361\":[1,141],\"362\":[1,16],\"363\":[2,21],\"364\":[3,9],\"365\":[1,13],\"366\":[1,6],\"367\":[1,28],\"368\":[1,12],\"369\":[2,60],\"370\":[4,11],\"371\":[1,37],\"372\":[1,25],\"373\":[1,8],\"374\":[1],\"375\":[3,75],\"376\":[5,73],\"377\":[2,52],\"378\":[2,50],\"379\":[3,5],\"380\":[1,22],\"381\":[1,6],\"382\":[1,11],\"383\":[2,64],\"384\":[3,6],\"385\":[1,6],\"386\":[1,5],\"387\":[1,92],\"388\":[1],\"389\":[2,30],\"390\":[3,27],\"391\":[3,101],\"392\":[1,1],\"393\":[2,56],\"394\":[3,19],\"395\":[1,49],\"396\":[1,12],\"397\":[1,95],\"398\":[3,44],\"399\":[3,37],\"400\":[1,22],\"401\":[1],\"402\":[1,39],\"403\":[3,39],\"404\":[2,48],\"405\":[3,11],\"406\":[1,22],\"407\":[1,14],\"408\":[1,18],\"409\":[1,36],\"410\":[3,22],\"411\":[1,1],\"412\":[2,59],\"413\":[3,8],\"414\":[1,9],\"415\":[1,6],\"416\":[1,12],\"417\":[1,34],\"418\":[1,2],\"419\":[2,69],\"420\":[3,8],\"421\":[1,66],\"422\":[1,8],\"423\":[1,126],\"424\":[2,7],\"425\":[3,9],\"426\":[1,21],\"427\":[1,8],\"428\":[1,10],\"429\":[1],\"430\":[2,17],\"431\":[1,85],\"432\":[4,44],\"433\":[4,84],\"434\":[4,29],\"435\":[4,6],\"436\":[4,46],\"437\":[4,83],\"438\":[4,99],\"439\":[4,99],\"440\":[4,168],\"441\":[4,65],\"442\":[6,45],\"443\":[4,52],\"444\":[7,34],\"445\":[10,73],\"446\":[6,37],\"447\":[4,100],\"448\":[4,27],\"449\":[4,23],\"450\":[4,18],\"451\":[4,16],\"452\":[4,51],\"453\":[4,43],\"454\":[4,38],\"455\":[4,38],\"456\":[4,16],\"457\":[2,52],\"458\":[5,7],\"459\":[1,56],\"460\":[1,3],\"461\":[1,3],\"462\":[1,45],\"463\":[2,35],\"464\":[3,4],\"465\":[1,22],\"466\":[1,5],\"467\":[1,8],\"468\":[1,61],\"469\":[2,27],\"470\":[3,5],\"471\":[1,27],\"472\":[1,12],\"473\":[1,11],\"474\":[1,49],\"475\":[2,27],\"476\":[5,9],\"477\":[1,11],\"478\":[1,6],\"479\":[1,10],\"480\":[1,38],\"481\":[2,4],\"482\":[1,1],\"483\":[2,57],\"484\":[3,9],\"485\":[1,34],\"486\":[1,4],\"487\":[1,70],\"488\":[1,62],\"489\":[2,51],\"490\":[3,12],\"491\":[1,32],\"492\":[1,7],\"493\":[1,15],\"494\":[1,16],\"495\":[2,24],\"496\":[3,9],\"497\":[1,21],\"498\":[1,9],\"499\":[1,24],\"500\":[1,24],\"501\":[1,1],\"502\":[2,50],\"503\":[3,3],\"504\":[1,5],\"505\":[1,3],\"506\":[1,10],\"507\":[1,27],\"508\":[2,37],\"509\":[2,15],\"510\":[3,6],\"511\":[1,30],\"512\":[1,29],\"513\":[1,24],\"514\":[1,10],\"515\":[2,48],\"516\":[2,34],\"517\":[2,21],\"518\":[3,40],\"519\":[2,17],\"520\":[1,38],\"521\":[4,9],\"522\":[4,20],\"523\":[4,32],\"524\":[4,8],\"525\":[4,16],\"526\":[6,108],\"527\":[2,19],\"528\":[2,21],\"529\":[1,1],\"530\":[2,73],\"531\":[3,8],\"532\":[1,35],\"533\":[1,4],\"534\":[1,29],\"535\":[1,62],\"536\":[2,52],\"537\":[3,8],\"538\":[1],\"539\":[1,9],\"540\":[1,18],\"541\":[1,36],\"542\":[1],\"543\":[1,12],\"544\":[3,89],\"545\":[3,54],\"546\":[3,41],\"547\":[1,2],\"548\":[2,65],\"549\":[1,9],\"550\":[1,6],\"551\":[1,4],\"552\":[1,3],\"553\":[2,16],\"554\":[3,10],\"555\":[1,11],\"556\":[1,4],\"557\":[1,3],\"558\":[2,11],\"559\":[3,13],\"560\":[1,42],\"561\":[1,18],\"562\":[1,38],\"563\":[1,32],\"564\":[1],\"565\":[5,11],\"566\":[7,37],\"567\":[8,23],\"568\":[6,15],\"569\":[2,22],\"570\":[3,2],\"571\":[1,10],\"572\":[2,12],\"573\":[3,8],\"574\":[1,6],\"575\":[1,81],\"576\":[1,63],\"577\":[2,19],\"578\":[3,5],\"579\":[1,16],\"580\":[1,4],\"581\":[1,6],\"582\":[1,27],\"583\":[1,1],\"584\":[2,18],\"585\":[3,8],\"586\":[1,9],\"587\":[1,2],\"588\":[1,2],\"589\":[2,18],\"590\":[4,7],\"591\":[1,55],\"592\":[1,6],\"593\":[1,25],\"594\":[1],\"595\":[4,17],\"596\":[3,128],\"597\":[2,40],\"598\":[1,2],\"599\":[2,43],\"600\":[5,6],\"601\":[1,20],\"602\":[1,6],\"603\":[1,22],\"604\":[1],\"605\":[1,133],\"606\":[1,55],\"607\":[3,56],\"608\":[3,30],\"609\":[2,15],\"610\":[1,1],\"611\":[2,70],\"612\":[3,6],\"613\":[1,11],\"614\":[1,7],\"615\":[1,4],\"616\":[1,73],\"617\":[2,5],\"618\":[2,78],\"619\":[3,4],\"620\":[1,24],\"621\":[1,10],\"622\":[1,11],\"623\":[1,1],\"624\":[2,20],\"625\":[3,9],\"626\":[1,29],\"627\":[1,6],\"628\":[1,18],\"629\":[2,37],\"630\":[3,6],\"631\":[1,25],\"632\":[1,11],\"633\":[1,15],\"634\":[1,1],\"635\":[2,48],\"636\":[3,7],\"637\":[1,27],\"638\":[1,11],\"639\":[1,13],\"640\":[1,1],\"641\":[2,48],\"642\":[3,6],\"643\":[1,92],\"644\":[1,7],\"645\":[1,20],\"646\":[1],\"647\":[2,27],\"648\":[2,21],\"649\":[2,17],\"650\":[1,1],\"651\":[2,28],\"652\":[3,3],\"653\":[1,74],\"654\":[1,5],\"655\":[1,25],\"656\":[1,72],\"657\":[3,16],\"658\":[1,2],\"659\":[2,65],\"660\":[3,2],\"661\":[1,41],\"662\":[1,3],\"663\":[1,3],\"664\":[2,22],\"665\":[3,7],\"666\":[1,8],\"667\":[1,4],\"668\":[1,3],\"669\":[2,19],\"670\":[3,9],\"671\":[1,8],\"672\":[1,7],\"673\":[1,14],\"674\":[1],\"675\":[1,43],\"676\":[6,42],\"677\":[2,92],\"678\":[1,44],\"679\":[2,128],\"680\":[2,38],\"681\":[2,40],\"682\":[2,88],\"683\":[4,27],\"684\":[1,2],\"685\":[2,48],\"686\":[3,6],\"687\":[1],\"688\":[1,5],\"689\":[1,13],\"690\":[2,19],\"691\":[3,9],\"692\":[1,67],\"693\":[1,6],\"694\":[1,32],\"695\":[1,68],\"696\":[1,16],\"697\":[2,18],\"698\":[3,4],\"699\":[1,5],\"700\":[1,4],\"701\":[1,17],\"702\":[1,9],\"703\":[2,45],\"704\":[3,12],\"705\":[1,16],\"706\":[1,7],\"707\":[1,7],\"708\":[1,10],\"709\":[1],\"710\":[3,101],\"711\":[3,15],\"712\":[1,2],\"713\":[2,64],\"714\":[3,7],\"715\":[1,12],\"716\":[1,5],\"717\":[1,26],\"718\":[2,26],\"719\":[4,5],\"720\":[1,17],\"721\":[1,3],\"722\":[1,59],\"723\":[2,60],\"724\":[4,5],\"725\":[1,9],\"726\":[1,3],\"727\":[1,65],\"728\":[2,60],\"729\":[4,9],\"730\":[1,47],\"731\":[1,11],\"732\":[1,33],\"733\":[1,66],\"734\":[1,3],\"735\":[2,75],\"736\":[3,8],\"737\":[1,43],\"738\":[1,9],\"739\":[1,12],\"740\":[1],\"741\":[1,76],\"742\":[3,109],\"743\":[7,206],\"744\":[14,18],\"745\":[2,63],\"746\":[3,4],\"747\":[1,65],\"748\":[1,25],\"749\":[1,68],\"750\":[3,20],\"751\":[11,49],\"752\":[1,29],\"753\":[1],\"754\":[2,47],\"755\":[9,121],\"756\":[7,206],\"757\":[14,18],\"758\":[2,114],\"759\":[3,9],\"760\":[1,53],\"761\":[1,19],\"762\":[1,69],\"763\":[1,12],\"764\":[1,46],\"765\":[2,47],\"766\":[2,54],\"767\":[3,6],\"768\":[1,14],\"769\":[1,7],\"770\":[1,12],\"771\":[2,32],\"772\":[3,4],\"773\":[1,7],\"774\":[1,24],\"775\":[1,13],\"776\":[1],\"777\":[2,25],\"778\":[3,20],\"779\":[4,64],\"780\":[1,131],\"781\":[1,65],\"782\":[2,63],\"783\":[2,58],\"784\":[1,38],\"785\":[3,101],\"786\":[1,1],\"787\":[2,80],\"788\":[3,10],\"789\":[1,15],\"790\":[1,7],\"791\":[1,45],\"792\":[1],\"793\":[2,10],\"794\":[2,34],\"795\":[5,78],\"796\":[1,1],\"797\":[2,29],\"798\":[4,9],\"799\":[1,16],\"800\":[1,8],\"801\":[1,46],\"802\":[2,46],\"803\":[3,12],\"804\":[1,10],\"805\":[1,6],\"806\":[1,10],\"807\":[1],\"808\":[2,104],\"809\":[2,41],\"810\":[3,19],\"811\":[1,9],\"812\":[1,5],\"813\":[1,4],\"814\":[1,65],\"815\":[2,51],\"816\":[2,30],\"817\":[3,9],\"818\":[1,8],\"819\":[1,30],\"820\":[1,14],\"821\":[1],\"822\":[1,13],\"823\":[2,92],\"824\":[1,44],\"825\":[2,128],\"826\":[2,38],\"827\":[2,40],\"828\":[2,88],\"829\":[4,27],\"830\":[1,1],\"831\":[2,60],\"832\":[5,10],\"833\":[1,19],\"834\":[1,4],\"835\":[1,5],\"836\":[1,2],\"837\":[2,51],\"838\":[5,10],\"839\":[1,19],\"840\":[1,4],\"841\":[1,5],\"842\":[1,2],\"843\":[2,52],\"844\":[3,5],\"845\":[1,6],\"846\":[1,4],\"847\":[1,33],\"848\":[1,14],\"849\":[2,14],\"850\":[3,13],\"851\":[1,29],\"852\":[1],\"853\":[3,8],\"854\":[3,7],\"855\":[4,6],\"856\":[4,5],\"857\":[3,38],\"858\":[1,21],\"859\":[1,72],\"860\":[1,1],\"861\":[2,69],\"862\":[4,8],\"863\":[1,20],\"864\":[1,6],\"865\":[1,113],\"866\":[1],\"867\":[4,17],\"868\":[3,14],\"869\":[6,33],\"870\":[1,2],\"871\":[2,43],\"872\":[4,10],\"873\":[1,44],\"874\":[1,7],\"875\":[1,38],\"876\":[1,16],\"877\":[2,49],\"878\":[3,10],\"879\":[1,18],\"880\":[1,6],\"881\":[1,10],\"882\":[1,56],\"883\":[1,3],\"884\":[2,55],\"885\":[3,7],\"886\":[1,27],\"887\":[1,6],\"888\":[1,18],\"889\":[1,10],\"890\":[1,2],\"891\":[2,53],\"892\":[3],\"893\":[3,6],\"894\":[1,13],\"895\":[1,5],\"896\":[1,9],\"897\":[1,70],\"898\":[2,54],\"899\":[3,10],\"900\":[1,24],\"901\":[1,6],\"902\":[1,17],\"903\":[1],\"904\":[2,43],\"905\":[1,133],\"906\":[1,55],\"907\":[3,56],\"908\":[3,30],\"909\":[2,15],\"910\":[2,92],\"911\":[1,44],\"912\":[2,128],\"913\":[2,38],\"914\":[2,40],\"915\":[2,88],\"916\":[4,27],\"917\":[2,71],\"918\":[3,5],\"919\":[1,9],\"920\":[1,24],\"921\":[1,21],\"922\":[2,17],\"923\":[5,8],\"924\":[1,65],\"925\":[1,9],\"926\":[1,42],\"927\":[1,15],\"928\":[1],\"929\":[1,52],\"930\":[2,18],\"931\":[4,7],\"932\":[1,17],\"933\":[1,6],\"934\":[1,11],\"935\":[2,27],\"936\":[3,7],\"937\":[1,26],\"938\":[1,6],\"939\":[1,9],\"940\":[2,65],\"941\":[3,6],\"942\":[1,50],\"943\":[1,13],\"944\":[1,13],\"945\":[1,27],\"946\":[1,3],\"947\":[2,72],\"948\":[3,6],\"949\":[1,17],\"950\":[1,5],\"951\":[1,8],\"952\":[1],\"953\":[2,57],\"954\":[2,46],\"955\":[3,6],\"956\":[1,96],\"957\":[1,5],\"958\":[1,26],\"959\":[1,3],\"960\":[2,68],\"961\":[3,6],\"962\":[1,58],\"963\":[1,5],\"964\":[1,12],\"965\":[1,59],\"966\":[1,3],\"967\":[2,65],\"968\":[4,7],\"969\":[1,8],\"970\":[1,7],\"971\":[1,7],\"972\":[1,14],\"973\":[1,10],\"974\":[1,3],\"975\":[2,66],\"976\":[4,4],\"977\":[1,57],\"978\":[1,36],\"979\":[1,50],\"980\":[1],\"981\":[6,52],\"982\":[2,47],\"983\":[4,9],\"984\":[1,44],\"985\":[1,8],\"986\":[1,43],\"987\":[2,21],\"988\":[6,8],\"989\":[1,47],\"990\":[1,5],\"991\":[1,5],\"992\":[1,20],\"993\":[2,19],\"994\":[6,6],\"995\":[1,28],\"996\":[1,10],\"997\":[1,18],\"998\":[1],\"999\":[6,139],\"1000\":[6,43],\"1001\":[1,6],\"1002\":[2,41],\"1003\":[4,13],\"1004\":[1,14],\"1005\":[1,4],\"1006\":[1,7],\"1007\":[1,1],\"1008\":[2,34],\"1009\":[4,7],\"1010\":[1,27],\"1011\":[1,8],\"1012\":[1,11],\"1013\":[1,11],\"1014\":[2,13],\"1015\":[3,6],\"1016\":[1,64],\"1017\":[1,7],\"1018\":[1,17],\"1019\":[1],\"1020\":[2,31],\"1021\":[2,128],\"1022\":[3,83],\"1023\":[2,52],\"1024\":[2,67],\"1025\":[3,6],\"1026\":[1,21],\"1027\":[1,17],\"1028\":[1],\"1029\":[1,23],\"1030\":[1,1],\"1031\":[2,42],\"1032\":[3,19],\"1033\":[1,22],\"1034\":[1,13],\"1035\":[1,17],\"1036\":[1,38],\"1037\":[3,28],\"1038\":[1,1],\"1039\":[2,55],\"1040\":[3,6],\"1041\":[1,7],\"1042\":[1,6],\"1043\":[1,67],\"1044\":[2,14],\"1045\":[3,11],\"1046\":[1,11],\"1047\":[1,7],\"1048\":[1,13],\"1049\":[1,20],\"1050\":[2,5],\"1051\":[1,2],\"1052\":[2,68],\"1053\":[3,4],\"1054\":[1,8],\"1055\":[1,6],\"1056\":[1,25],\"1057\":[1],\"1058\":[6,139],\"1059\":[6,43],\"1060\":[1,1],\"1061\":[2,59],\"1062\":[3,8],\"1063\":[1,11],\"1064\":[1,8],\"1065\":[1,12],\"1066\":[1],\"1067\":[2,35],\"1068\":[4,29],\"1069\":[2,51],\"1070\":[2,41],\"1071\":[3,8],\"1072\":[1,14],\"1073\":[1,6],\"1074\":[1,10],\"1075\":[1,10],\"1076\":[1,2],\"1077\":[2,54],\"1078\":[3,8],\"1079\":[1,10],\"1080\":[1,6],\"1081\":[1,18],\"1082\":[1,34],\"1083\":[1,2],\"1084\":[2,65],\"1085\":[3,7],\"1086\":[1,17],\"1087\":[1,5],\"1088\":[1,15],\"1089\":[2,24],\"1090\":[3,5],\"1091\":[1,47],\"1092\":[1,5],\"1093\":[1,36],\"1094\":[1],\"1095\":[2,25],\"1096\":[3,30],\"1097\":[3,101],\"1098\":[2,64],\"1099\":[3,8],\"1100\":[1,19],\"1101\":[1,5],\"1102\":[1,23],\"1103\":[2,42],\"1104\":[3,3],\"1105\":[1,11],\"1106\":[1,6],\"1107\":[1,25],\"1108\":[1,33],\"1109\":[1],\"1110\":[1,45],\"1111\":[2,23],\"1112\":[4,8],\"1113\":[1,54],\"1114\":[1,7],\"1115\":[1,45],\"1116\":[1,43],\"1117\":[1,1],\"1118\":[2,62],\"1119\":[3,12],\"1120\":[1,14],\"1121\":[1,20],\"1122\":[1,26],\"1123\":[1,53],\"1124\":[1],\"1125\":[2,66],\"1126\":[2,58],\"1127\":[3,7],\"1128\":[1,24],\"1129\":[1,6],\"1130\":[1],\"1131\":[2,38],\"1132\":[2,17],\"1133\":[2,16],\"1134\":[1,19],\"1135\":[1,27],\"1136\":[1,3],\"1137\":[2,69],\"1138\":[3,4],\"1139\":[1,39],\"1140\":[1,4],\"1141\":[1,45],\"1142\":[1,30],\"1143\":[2,34],\"1144\":[3,7],\"1145\":[1,27],\"1146\":[1,6],\"1147\":[1,16],\"1148\":[1,10],\"1149\":[1,2],\"1150\":[2,53],\"1151\":[3,7],\"1152\":[1,9],\"1153\":[3,65],\"1154\":[2,42],\"1155\":[2,37],\"1156\":[1,6],\"1157\":[1,10],\"1158\":[1,20],\"1159\":[2,7],\"1160\":[3,9],\"1161\":[1,65],\"1162\":[1,4],\"1163\":[1,30],\"1164\":[1,6],\"1165\":[2],\"1166\":[1,18],\"1167\":[1,17],\"1168\":[2],\"1169\":[1,21],\"1170\":[1,35],\"1171\":[2,76],\"1172\":[3,9],\"1173\":[1,19],\"1174\":[1,10],\"1175\":[1,148],\"1176\":[1,130],\"1177\":[1],\"1178\":[3,91],\"1179\":[2,55],\"1180\":[2,28],\"1181\":[1,2],\"1182\":[2,109],\"1183\":[3,10],\"1184\":[1,15],\"1185\":[1,6],\"1186\":[1,42],\"1187\":[1],\"1188\":[2,31],\"1189\":[2,36],\"1190\":[5,77],\"1191\":[1,1],\"1192\":[2,29],\"1193\":[3,9],\"1194\":[1,8],\"1195\":[1,29],\"1196\":[1,14],\"1197\":[1],\"1198\":[1,13],\"1199\":[2,92],\"1200\":[1,44],\"1201\":[2,128],\"1202\":[2,38],\"1203\":[2,40],\"1204\":[2,88],\"1205\":[4,27],\"1206\":[1,1],\"1207\":[2,64],\"1208\":[3,8],\"1209\":[1,26],\"1210\":[1,14],\"1211\":[1,18],\"1212\":[1,2],\"1213\":[2,49],\"1214\":[3,8],\"1215\":[1,18],\"1216\":[1,4],\"1217\":[1,54],\"1218\":[1,33],\"1219\":[6,139],\"1220\":[6,43],\"1221\":[1,1],\"1222\":[2,43],\"1223\":[4,10],\"1224\":[1,32],\"1225\":[1,8],\"1226\":[1,109],\"1227\":[1,23],\"1228\":[2,28],\"1229\":[3,8],\"1230\":[1,14],\"1231\":[1,6],\"1232\":[1,10],\"1233\":[1,10],\"1234\":[1,2],\"1235\":[2,54],\"1236\":[3,7],\"1237\":[1,44],\"1238\":[1,8],\"1239\":[1,12],\"1240\":[1,1],\"1241\":[2,46],\"1242\":[3,4],\"1243\":[1,12],\"1244\":[1,37],\"1245\":[1,73],\"1246\":[1],\"1247\":[5],\"1248\":[2,35],\"1249\":[3,36],\"1250\":[8,25],\"1251\":[1,32],\"1252\":[1,21],\"1253\":[1,28],\"1254\":[1,13],\"1255\":[2,81],\"1256\":[3],\"1257\":[4,16],\"1258\":[1,25],\"1259\":[1,8],\"1260\":[1,81],\"1261\":[1,23],\"1262\":[2,63],\"1263\":[3],\"1264\":[4,6],\"1265\":[1,14],\"1266\":[1,6],\"1267\":[1,96],\"1268\":[2,63],\"1269\":[4,15],\"1270\":[1,33],\"1271\":[1,9],\"1272\":[1,49],\"1273\":[1,16],\"1274\":[2,43],\"1275\":[3,3],\"1276\":[1,53],\"1277\":[1,6],\"1278\":[1,75],\"1279\":[1],\"1280\":[2,41],\"1281\":[2,36],\"1282\":[3,11],\"1283\":[1,13],\"1284\":[1,45],\"1285\":[1,55],\"1286\":[1],\"1287\":[1,28],\"1288\":[1,1],\"1289\":[2,14],\"1290\":[3,10],\"1291\":[1,19],\"1292\":[1,8],\"1293\":[1,11],\"1294\":[1,22],\"1295\":[2,21],\"1296\":[3,8],\"1297\":[1,40],\"1298\":[1,7],\"1299\":[1,18],\"1300\":[1,107],\"1301\":[2,26],\"1302\":[3,12],\"1303\":[1,21],\"1304\":[1,9],\"1305\":[1,11],\"1306\":[1,15],\"1307\":[2,48],\"1308\":[3,16],\"1309\":[1,30],\"1310\":[1,9],\"1311\":[1,19],\"1312\":[1,46],\"1313\":[2,51],\"1314\":[3,4],\"1315\":[1,5],\"1316\":[1,4],\"1317\":[1,17],\"1318\":[1,9],\"1319\":[2,45],\"1320\":[3,7],\"1321\":[1,71],\"1322\":[1,7],\"1323\":[1,15],\"1324\":[1,38],\"1325\":[2,61],\"1326\":[3,13],\"1327\":[1,48],\"1328\":[1,7],\"1329\":[1,34],\"1330\":[1,38],\"1331\":[2,55],\"1332\":[3,3],\"1333\":[1,4],\"1334\":[1,5],\"1335\":[1,18],\"1336\":[1,20],\"1337\":[2,43],\"1338\":[3,4],\"1339\":[1,33],\"1340\":[1,11],\"1341\":[1,29],\"1342\":[1],\"1343\":[2,47],\"1344\":[1,1],\"1345\":[2,49],\"1346\":[2,8],\"1347\":[1,54],\"1348\":[1,7],\"1349\":[2,8],\"1350\":[1,65],\"1351\":[1],\"1352\":[1,19],\"1353\":[1,10],\"1354\":[1,10],\"1355\":[1,7],\"1356\":[1,32],\"1357\":[1,32],\"1358\":[1,10],\"1359\":[1,30],\"1360\":[2,66],\"1361\":[2,4],\"1362\":[1,15],\"1363\":[1,15],\"1364\":[1,9],\"1365\":[1,9],\"1366\":[1,52],\"1367\":[1,7],\"1368\":[2,11],\"1369\":[1,31],\"1370\":[1],\"1371\":[1,7],\"1372\":[2,44],\"1373\":[2,14],\"1374\":[2,10],\"1375\":[1,24],\"1376\":[1,12],\"1377\":[2,26],\"1378\":[1,33],\"1379\":[1],\"1380\":[1,15],\"1381\":[1,9],\"1382\":[2,10],\"1383\":[1,15],\"1384\":[1,17],\"1385\":[1,30],\"1386\":[3,34],\"1387\":[1,62],\"1388\":[2,42],\"1389\":[2,5],\"1390\":[1,8],\"1391\":[1,7],\"1392\":[2,10],\"1393\":[1,9],\"1394\":[1],\"1395\":[1,14],\"1396\":[1,10],\"1397\":[1,11],\"1398\":[2,14],\"1399\":[5],\"1400\":[4,125],\"1401\":[3,75],\"1402\":[2,17],\"1403\":[2,120],\"1404\":[3,109],\"1405\":[5,58],\"1406\":[3,7],\"1407\":[1,26],\"1408\":[1,25],\"1409\":[1,4],\"1410\":[2,48],\"1411\":[4,4],\"1412\":[1,24],\"1413\":[1,25],\"1414\":[1,14],\"1415\":[1],\"1416\":[2,62],\"1417\":[2,18],\"1418\":[2,6],\"1419\":[2,6],\"1420\":[2,6],\"1421\":[3,58],\"1422\":[2,65],\"1423\":[3,5],\"1424\":[1,21],\"1425\":[1,25],\"1426\":[1,8],\"1427\":[1],\"1428\":[3,35],\"1429\":[4,23],\"1430\":[2,52],\"1431\":[4,9],\"1432\":[1,72],\"1433\":[1,25],\"1434\":[1,20],\"1435\":[1],\"1436\":[3,38],\"1437\":[4,23],\"1438\":[2,48],\"1439\":[3,13],\"1440\":[1,29],\"1441\":[1,25],\"1442\":[1,5],\"1443\":[1],\"1444\":[2,18],\"1445\":[2,5],\"1446\":[2,5],\"1447\":[2,5],\"1448\":[4,100],\"1449\":[3,86],\"1450\":[2,59],\"1451\":[3,51],\"1452\":[3],\"1453\":[2,28],\"1454\":[4,13],\"1455\":[5,34],\"1456\":[1,33],\"1457\":[4,6],\"1458\":[1,11],\"1459\":[1,5],\"1460\":[1,10],\"1461\":[1,54],\"1462\":[1,1],\"1463\":[2,33],\"1464\":[5,4],\"1465\":[1,12],\"1466\":[1,5],\"1467\":[1,12],\"1468\":[1,2],\"1469\":[2,33],\"1470\":[4,6],\"1471\":[1,13],\"1472\":[1,5],\"1473\":[1,1],\"1474\":[2,32],\"1475\":[4,6],\"1476\":[1,23],\"1477\":[1,5],\"1478\":[1,17],\"1479\":[1,31],\"1480\":[2,20],\"1481\":[4,5],\"1482\":[1,25],\"1483\":[1,10],\"1484\":[1,60],\"1485\":[1],\"1486\":[3,40],\"1487\":[2,77],\"1488\":[5,44],\"1489\":[2,38],\"1490\":[1,1],\"1491\":[2,42],\"1492\":[4,8],\"1493\":[1,16],\"1494\":[1,3],\"1495\":[1,7],\"1496\":[1,34],\"1497\":[2,21],\"1498\":[2,12],\"1499\":[3],\"1500\":[2,27],\"1501\":[4,15],\"1502\":[1,81],\"1503\":[4,5],\"1504\":[1,21],\"1505\":[1,105],\"1506\":[1,32],\"1507\":[2,56],\"1508\":[5,8],\"1509\":[1,72],\"1510\":[1],\"1511\":[4,4],\"1512\":[4,3],\"1513\":[3,88],\"1514\":[1],\"1515\":[3,11],\"1516\":[2,47],\"1517\":[2,24],\"1518\":[2,61],\"1519\":[5,3],\"1520\":[1,64],\"1521\":[1],\"1522\":[7,7],\"1523\":[9],\"1524\":[3,4],\"1525\":[2,4],\"1526\":[2,4],\"1527\":[3,4],\"1528\":[2],\"1529\":[4,16],\"1530\":[2,3],\"1531\":[2,15],\"1532\":[4,7],\"1533\":[3,11],\"1534\":[4,12],\"1535\":[1,52],\"1536\":[2,60],\"1537\":[5,5],\"1538\":[1,69],\"1539\":[1,22],\"1540\":[2,38],\"1541\":[5,6],\"1542\":[1,54],\"1543\":[1],\"1544\":[2,11],\"1545\":[2,31],\"1546\":[2,47],\"1547\":[2,72],\"1548\":[5,8],\"1549\":[1,38],\"1550\":[1,7],\"1551\":[1,11],\"1552\":[2,51],\"1553\":[5,6],\"1554\":[1,43],\"1555\":[1,19],\"1556\":[1,12],\"1557\":[2,52],\"1558\":[6,7],\"1559\":[1,45],\"1560\":[1,19],\"1561\":[1,38],\"1562\":[2,52],\"1563\":[6,9],\"1564\":[1,48],\"1565\":[1,8],\"1566\":[1,33],\"1567\":[3,12],\"1568\":[2,52],\"1569\":[6,11],\"1570\":[1,66],\"1571\":[1,33],\"1572\":[2,48],\"1573\":[5,11],\"1574\":[1,26],\"1575\":[1,40],\"1576\":[2,50],\"1577\":[6,14],\"1578\":[1,47],\"1579\":[1,30],\"1580\":[2,47],\"1581\":[6,11],\"1582\":[1,33],\"1583\":[1,33],\"1584\":[2,48],\"1585\":[5,9],\"1586\":[1,34],\"1587\":[1,7],\"1588\":[1,11],\"1589\":[2,50],\"1590\":[5,5],\"1591\":[1,63],\"1592\":[1,105],\"1593\":[1,61],\"1594\":[2,68],\"1595\":[5,4],\"1596\":[1,15],\"1597\":[1,7],\"1598\":[1,21],\"1599\":[2,53],\"1600\":[3,47],\"1601\":[1,90],\"1602\":[2,49],\"1603\":[1,58],\"1604\":[4,3],\"1605\":[1,6],\"1606\":[2,3],\"1607\":[2,21],\"1608\":[4,5],\"1609\":[1,18],\"1610\":[1,44],\"1611\":[2,41],\"1612\":[2,64],\"1613\":[4,8],\"1614\":[1,25],\"1615\":[1,39],\"1616\":[2,6],\"1617\":[2,36],\"1618\":[2,61],\"1619\":[7,5],\"1620\":[1,39],\"1621\":[2,3],\"1622\":[2,21],\"1623\":[5,3],\"1624\":[1,15],\"1625\":[2,38],\"1626\":[2,61],\"1627\":[4,5],\"1628\":[1,105],\"1629\":[1,48],\"1630\":[2,8],\"1631\":[2,44],\"1632\":[2,95],\"1633\":[4,4],\"1634\":[1,71],\"1635\":[2,3],\"1636\":[2,59],\"1637\":[4,5],\"1638\":[1,29],\"1639\":[1,45],\"1640\":[1],\"1641\":[7,206],\"1642\":[14,18],\"1643\":[2,6],\"1644\":[2,42],\"1645\":[2,116],\"1646\":[4,2],\"1647\":[1,79],\"1648\":[4,10],\"1649\":[4,10],\"1650\":[1,36],\"1651\":[2,26],\"1652\":[2,20],\"1653\":[1],\"1654\":[3,65],\"1655\":[2,12],\"1656\":[2,29],\"1657\":[2,116],\"1658\":[4,2],\"1659\":[1,49],\"1660\":[1,8],\"1661\":[2,26],\"1662\":[2,20],\"1663\":[1],\"1664\":[2,81],\"1665\":[4,10],\"1666\":[4,59],\"1667\":[2,28],\"1668\":[2,13],\"1669\":[2,29],\"1670\":[2,116],\"1671\":[4,5],\"1672\":[1,67],\"1673\":[2,13],\"1674\":[2,41],\"1675\":[2,120],\"1676\":[5,5],\"1677\":[1,40],\"1678\":[2,3],\"1679\":[2,58],\"1680\":[3],\"1681\":[6,3],\"1682\":[1,16],\"1683\":[2,26],\"1684\":[2,4],\"1685\":[5,3],\"1686\":[1,16],\"1687\":[2,27],\"1688\":[2,60],\"1689\":[4,7],\"1690\":[1,52],\"1691\":[1,71],\"1692\":[2,6],\"1693\":[2,21],\"1694\":[2,86],\"1695\":[4,6],\"1696\":[1,52],\"1697\":[2,7],\"1698\":[2,29],\"1699\":[2,90],\"1700\":[4,32],\"1701\":[1,191],\"1702\":[6,42],\"1703\":[2,34],\"1704\":[5,31],\"1705\":[2,37],\"1706\":[4,80],\"1707\":[2,56],\"1708\":[5,148],\"1709\":[2,31],\"1710\":[3,74],\"1711\":[5],\"1712\":[1,57],\"1713\":[1,26],\"1714\":[2,34],\"1715\":[6,25],\"1716\":[1,126],\"1717\":[1,38],\"1718\":[1,13],\"1719\":[1,100],\"1720\":[2,12],\"1721\":[2,30],\"1722\":[1,28],\"1723\":[2,46],\"1724\":[4,50],\"1725\":[4,76],\"1726\":[3,23],\"1727\":[2,82],\"1728\":[5,95],\"1729\":[6,57],\"1730\":[4],\"1731\":[1,70],\"1732\":[1,25],\"1733\":[2,25],\"1734\":[2,8],\"1735\":[2,39],\"1736\":[5],\"1737\":[1,57],\"1738\":[1,26],\"1739\":[2,34],\"1740\":[5,8],\"1741\":[1,110],\"1742\":[2,47],\"1743\":[2,27],\"1744\":[3,42],\"1745\":[1,43],\"1746\":[1,122],\"1747\":[2,71],\"1748\":[2,42],\"1749\":[5,24],\"1750\":[3,67],\"1751\":[3,19],\"1752\":[3,45],\"1753\":[6,127],\"1754\":[2,21],\"1755\":[4,29],\"1756\":[3,69],\"1757\":[3,30],\"1758\":[3,13],\"1759\":[3,19],\"1760\":[3,23],\"1761\":[3,17],\"1762\":[3,16],\"1763\":[3,10],\"1764\":[3,26],\"1765\":[3,26],\"1766\":[4,28],\"1767\":[4,13],\"1768\":[3,11],\"1769\":[3,10],\"1770\":[5,41],\"1771\":[2,79],\"1772\":[4,281],\"1773\":[1,94],\"1774\":[2,100],\"1775\":[3,32],\"1776\":[1,40],\"1777\":[1,42],\"1778\":[2,56],\"1779\":[2,53],\"1780\":[6,84],\"1781\":[6,47],\"1782\":[2,77],\"1783\":[3,32],\"1784\":[6,65],\"1785\":[2],\"1786\":[3,24],\"1787\":[2,43],\"1788\":[3,51],\"1789\":[7,107],\"1790\":[2,49],\"1791\":[3,39],\"1792\":[4],\"1793\":[13,64],\"1794\":[2,90],\"1795\":[4,47],\"1796\":[2],\"1797\":[1,81],\"1798\":[3,144],\"1799\":[2,61],\"1800\":[3,48],\"1801\":[2,16],\"1802\":[1,59],\"1803\":[2,8],\"1804\":[2,24],\"1805\":[2,75],\"1806\":[5,24],\"1807\":[3,33],\"1808\":[2,73],\"1809\":[1],\"1810\":[2,14],\"1811\":[3,19],\"1812\":[3,14],\"1813\":[2,7],\"1814\":[2,26],\"1815\":[1],\"1816\":[2]},\"averageFieldLength\":[2.199816780694544,36.13273362241181,0.047301036083832015],\"storedFields\":{\"0\":{\"h\":\"\",\"t\":[\"The following is a list of platforms Murex has been tested on and the level of support it has:\",\"Table of Contents\",\"Linux\",\"macOS (Darwin)\",\"Windows\",\"FreeBSD\",\"OpenBSD\",\"NetBSD\",\"DragonflyBSD\",\"Plan 9\",\"Other CPU architectures\"]},\"1\":{\"h\":\"Linux\",\"t\":[\"The shell has been extensively tested across a number of distributions. There are no known distribution specific issues.\"]},\"2\":{\"h\":\"macOS (Darwin)\",\"t\":[\"All features work aside alt-hotkeys.\",\"Both x86 (Intel) and AMD (M2 etc) architectures are supported.\"]},\"3\":{\"h\":\"Windows\",\"t\":[\"Windows is supported there are a few known issue with the way how Windows internals are built. These cannot be easily worked around:\",\"Windows doesn't decouple the terminal emulator and the shell Which means you cannot rely upon STDIN working as expected (eg some commands don't read input from STDIN but instead poll the terminal emulator directly)\",\"Windows sends parameters as a single string rather than an array of string. This is to retain backwards compatibility with DOS but it breaks the way how quotation marks and escaping works. Murex will compile an array of parameters based on the quotation strings (there are 3 different types of quotations in Murex), infixed variables, subshells, etc. These would not be honoured by any Windows commands because every Windows application then has to handle how the one long string of parameters is chopped up into different arguments; how quotation marks are handles, spaces, escaping, etc. This means there is no standard so one command might handle spaces correctly but another wouldn't.\",\"Job control (bg, ^z, fg, etc) isn't supported because Windows doesn't have an equivalent of the SIGSTSP (etc) POSIX signals.\",\"There is also the caveat that without a broad range of command line utilities (eg GNU coreutils) the usefulness of Murex is seriously diminished. You can mitigate this by installing MSYS2 or Cygwin.\"]},\"4\":{\"h\":\"FreeBSD\",\"t\":[\"FreeBSD is officially supported and tested by the community.\"]},\"5\":{\"h\":\"OpenBSD\",\"t\":[\"FreeBSD is officially supported and tested by the community.\"]},\"6\":{\"h\":\"NetBSD\",\"t\":[\"FreeBSD is officially supported and tested by the community.\"]},\"7\":{\"h\":\"DragonflyBSD\",\"t\":[\"FreeBSD is officially supported and tested by the community.\"]},\"8\":{\"h\":\"Plan 9\",\"t\":[\"Plan 9 is included as part of the automated built tests however no functional tests have been run.\",\"If you do happen to run into any such bugs then I do welcome pull requests.\",\"Feature wise, job control isn't supported in Plan 9 because Plan 9 doesn't support all of the required signals. All other functions are expected to work.\"]},\"9\":{\"h\":\"Other CPU architectures\",\"t\":[\"Several CPU architectures are supported:\",\"386 (x86 32bit)\",\"AMD64 (x86 64bit)\",\"ARMv7 (32bit)\",\"ARMv8 (64bit)\"]},\"10\":{\"h\":\"Command Reference\",\"t\":[\"This section is a glossary of Murex builtin commands.\",\"Because Murex is loosely modelled on the functional paradigm, it means all language constructs are exposed via functions and those are typically builtins because they can share the Murex runtime virtual machine. However any executable command can also be called from within Murex; be that either via the exec builtin or natively like you would from any Linux, UNIX, or even Windows command prompt.\"]},\"11\":{\"h\":\"Other Reference Material\"},\"12\":{\"h\":\"Language Guides\",\"t\":[\"Language Tour, which is an introduction into the Murex language.\",\"Rosetta Stone, which is a reference table comparing Bash syntax to Murex's.\"]},\"13\":{\"h\":\"Murex's Source Code\",\"t\":[\"The source for each of these builtins can be found on Github.\"]},\"14\":{\"h\":\"Shell Commands For Querying Builtins\",\"t\":[\"From the shell itself: run builtins to list the builtin command.\",\"If you require a manual on any of those commands, you can run murex-docs to return the same markdown-formatted document as those listed below. eg\",\"murex-docs trypipe \"]},\"15\":{\"h\":\"Pages\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"( (brace quote): Write a string to the STDOUT without new line\",\"2darray: Create a 2D JSON array from multiple input sources\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"<stdin>: Read the STDIN belonging to the parent code block\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"@g (autoglob) : Command prefix to expand globbing (deprecated)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"addheading: Adds headings to a table\",\"alias: Create an alias for a command\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"and: Returns true or false depending on whether multiple conditions are met\",\"append: Add data to the end of an array\",\"args: Command line flag parser for Murex shell scripting\",\"autocomplete: Set definitions for tab-completion in the command line\",\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"break: Terminate execution of a block within your processes scope\",\"cast: Alters the data type of the previous function without altering it's output\",\"catch: Handles the exception code raised by try or trypipe\",\"cd: Change (working) directory\",\"config: Query or define Murex runtime settings\",\"continue: Terminate process of a block within a caller function\",\"count: Count items in a map, list or array\",\"cpuarch: Output the hosts CPU architecture\",\"cpucount: Output the number of CPU cores available on your host\",\"datetime: A date and/or time conversion tool (like printf but for date and time values)\",\"debug: Debugging information\",\"die: Terminate murex with an exit number of 1\",\"err: Print a line to the STDERR\",\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl: Encode or decodes text for the URL\",\"event: Event driven programming for shell scripts\",\"exec: Runs an executable\",\"exit: Exit murex\",\"exitnum: Output the exit number of the previous process\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"f: Lists or filters file system objects (eg files)\",\"false: Returns a false value\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"for: A more familiar iteration loop to existing developers\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"format: Reformat one data-type into another data-type\",\"function: Define a function block\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"get-type: Returns the data-type of a variable or pipe\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"global: Define a global variable and set it's value\",\"history: Outputs murex's command history\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"left: Left substring every item in a list\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"lockfile: Create and manage lock files\",\"man-get-flags: Parses man page files for command line flags\",\"man-summary: Outputs a man page summary of a command\",\"map: Creates a map from two data sources\",\"match: Match an exact value in an array\",\"method: Define a methods supported data-types\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"murex-docs: Displays the man pages for Murex builtins\",\"murex-package: Murex's package manager\",\"murex-parser: Runs the Murex parser against a block of code\",\"murex-update-exe-list: Forces Murex to rescan $PATH looking for executables\",\"null: null function. Similar to /dev/null\",\"open-image: Renders bitmap image data on your terminal\",\"open: Open a file with a preferred handler\",\"openagent: Creates a handler function for `open\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"os: Output the auto-detected OS name\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pipe: Manage Murex named pipes\",\"post: HTTP POST request with a JSON-parsable return\",\"prefix: Prefix a string to every item in a list\",\"prepend: Add data to the start of an array\",\"pretty: Prettifies JSON to make it human readable\",\"private: Define a private function block\",\"pt: Pipe telemetry. Writes data-types and bytes written\",\"rand: Random field generator\",\"read: read a line of input from the user and store as a variable\",\"regexp: Regexp tools for arrays / lists of strings\",\"return: Exits current function scope\",\"right: Right substring every item in a list\",\"round: Round a number by a user defined precision\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"runtime: Returns runtime information on the internal state of Murex\",\"rx: Regexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\",\"set: Define a local variable and set it's value\",\"source: Import Murex code from another file of code block\",\"struct-keys: Outputs all the keys in a structure as a file path\",\"suffix: Prefix a string to every item in a list\",\"summary: Defines a summary help text for a command\",\"switch: Blocks of cascading conditionals\",\"ta (mkarray): A sophisticated yet simple way to build an array of a user defined data-type\",\"tabulate: Table transformation tools\",\"test: Murex's test framework - define tests, run tests and debug shell scripts\",\"time: Returns the execution run time of a command or block\",\"tmp: Create a temporary file and write to it\",\"tout: Print a string to the STDOUT and set it's data-type\",\"tread: read a line of input from the user and store as a user defined typed variable (deprecated)\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe: Checks state of each function in a pipeline and exits block on error\",\"version: Get Murex version\",\"while: Loop until condition false\"]},\"16\":{\"h\":\"Optional Builtins\",\"t\":[\"!bz2: Decompress a bz2 file\",\"base64: Encode or decode a base64 string\",\"gz: Compress or decompress a gzip file\",\"qr: Creates a QR code from STDIN\",\"select: Inlining SQL into shell pipelines\",\"sleep:\\nSuspends the shell for a number of seconds\"]},\"17\":{\"h\":\"Murex\"},\"18\":{\"h\":\"👁‍🗨 Screenshots\"},\"19\":{\"h\":\"📦 Easy to Install\",\"t\":[\"Install Murex from your favorite package manager\",\"More options are available in the INSTALL document\"]},\"20\":{\"h\":\"🛟 Getting Started Tutorial\",\"t\":[\"Take your your first steps with Murex by following our Tutorial\"]},\"21\":{\"h\":\"\",\"t\":[\"This section contains miscellaneous documents on using and configuring the shell and Murex's numerous features.\",\"Table of Contents\",\"Language Tour\",\"User Guides\",\"Operators And Tokens\",\"Builtin Commands\",\"Standard Builtins\",\"Optional Builtins\",\"Data Types\",\"Events\",\"API Reference\"]},\"22\":{\"h\":\"Language Tour\",\"t\":[\"The Language Tour is a great introduction into the Murex language.\"]},\"23\":{\"h\":\"User Guides\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"Bang Prefix: Bang prefixing to reverse default actions\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"FileRef: How to track what code was loaded and from where\",\"Modules and Packages: An introduction to Murex modules and packages\",\"Murex Named Pipes: A detailed breakdown of named pipes in Murex\",\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"Reserved Variables: Special variables reserved by Murex\",\"Rosetta Stone: A tabulated list of Bashism's and their equivalent Murex syntax\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"Spellcheck: How to enable inline spellchecking\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"Variable and Config Scoping: How scoping works within Murex\"]},\"24\":{\"h\":\"Operators And Tokens\",\"t\":[\"And (&&) Logical Operator: Continues next operation if previous operation passes\",\"Append Pipe (>>) Token: Redirects STDOUT to a file and append its contents\",\"Array (@) Token: Expand values as an array\",\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Create array (%[]) constructor: Quickly generate arrays\",\"Create object (%{}) constructor: Quickly generate objects and maps\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"Or (||) Logical Operator: Continues next operation only if previous operation fails\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\"]},\"25\":{\"h\":\"Builtin Commands\"},\"26\":{\"h\":\"Standard Builtins\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"( (brace quote): Write a string to the STDOUT without new line\",\"2darray: Create a 2D JSON array from multiple input sources\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"<stdin>: Read the STDIN belonging to the parent code block\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"@g (autoglob) : Command prefix to expand globbing (deprecated)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"addheading: Adds headings to a table\",\"alias: Create an alias for a command\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"and: Returns true or false depending on whether multiple conditions are met\",\"append: Add data to the end of an array\",\"args: Command line flag parser for Murex shell scripting\",\"autocomplete: Set definitions for tab-completion in the command line\",\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"break: Terminate execution of a block within your processes scope\",\"cast: Alters the data type of the previous function without altering it's output\",\"catch: Handles the exception code raised by try or trypipe\",\"cd: Change (working) directory\",\"config: Query or define Murex runtime settings\",\"continue: Terminate process of a block within a caller function\",\"count: Count items in a map, list or array\",\"cpuarch: Output the hosts CPU architecture\",\"cpucount: Output the number of CPU cores available on your host\",\"datetime: A date and/or time conversion tool (like printf but for date and time values)\",\"debug: Debugging information\",\"die: Terminate murex with an exit number of 1\",\"err: Print a line to the STDERR\",\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl: Encode or decodes text for the URL\",\"event: Event driven programming for shell scripts\",\"exec: Runs an executable\",\"exit: Exit murex\",\"exitnum: Output the exit number of the previous process\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"f: Lists or filters file system objects (eg files)\",\"false: Returns a false value\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"for: A more familiar iteration loop to existing developers\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"format: Reformat one data-type into another data-type\",\"function: Define a function block\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"get-type: Returns the data-type of a variable or pipe\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"global: Define a global variable and set it's value\",\"history: Outputs murex's command history\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"left: Left substring every item in a list\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"lockfile: Create and manage lock files\",\"man-get-flags: Parses man page files for command line flags\",\"man-summary: Outputs a man page summary of a command\",\"map: Creates a map from two data sources\",\"match: Match an exact value in an array\",\"method: Define a methods supported data-types\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"murex-docs: Displays the man pages for Murex builtins\",\"murex-package: Murex's package manager\",\"murex-parser: Runs the Murex parser against a block of code\",\"murex-update-exe-list: Forces Murex to rescan $PATH looking for executables\",\"null: null function. Similar to /dev/null\",\"open-image: Renders bitmap image data on your terminal\",\"open: Open a file with a preferred handler\",\"openagent: Creates a handler function for `open\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"os: Output the auto-detected OS name\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pipe: Manage Murex named pipes\",\"post: HTTP POST request with a JSON-parsable return\",\"prefix: Prefix a string to every item in a list\",\"prepend: Add data to the start of an array\",\"pretty: Prettifies JSON to make it human readable\",\"private: Define a private function block\",\"pt: Pipe telemetry. Writes data-types and bytes written\",\"rand: Random field generator\",\"read: read a line of input from the user and store as a variable\",\"regexp: Regexp tools for arrays / lists of strings\",\"return: Exits current function scope\",\"right: Right substring every item in a list\",\"round: Round a number by a user defined precision\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"runtime: Returns runtime information on the internal state of Murex\",\"rx: Regexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\",\"set: Define a local variable and set it's value\",\"source: Import Murex code from another file of code block\",\"struct-keys: Outputs all the keys in a structure as a file path\",\"suffix: Prefix a string to every item in a list\",\"summary: Defines a summary help text for a command\",\"switch: Blocks of cascading conditionals\",\"ta (mkarray): A sophisticated yet simple way to build an array of a user defined data-type\",\"tabulate: Table transformation tools\",\"test: Murex's test framework - define tests, run tests and debug shell scripts\",\"time: Returns the execution run time of a command or block\",\"tmp: Create a temporary file and write to it\",\"tout: Print a string to the STDOUT and set it's data-type\",\"tread: read a line of input from the user and store as a user defined typed variable (deprecated)\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe: Checks state of each function in a pipeline and exits block on error\",\"version: Get Murex version\",\"while: Loop until condition false\"]},\"27\":{\"h\":\"Optional Builtins\",\"t\":[\"These builtins are optional. select is included as part of the default build but can be disabled without breaking functionality. The other optional builtins are only included by default on Windows.\",\"!bz2: Decompress a bz2 file\",\"base64: Encode or decode a base64 string\",\"gz: Compress or decompress a gzip file\",\"qr: Creates a QR code from STDIN\",\"select: Inlining SQL into shell pipelines\",\"sleep: Suspends the shell for a number of seconds\"]},\"28\":{\"h\":\"Data Types\",\"t\":[\"* (generic) : generic (primitive)\",\"bool: Boolean (primitive)\",\"commonlog: Apache httpd \\\"common\\\" log format\",\"csv: CSV files (and other character delimited tables)\",\"float (floating point number): Floating point number (primitive)\",\"hcl: HashiCorp Configuration Language (HCL)\",\"int: Whole number (primitive)\",\"json: JavaScript Object Notation (JSON)\",\"jsonc: Concatenated JSON\",\"jsonl: JSON Lines\",\"num (number): Floating point number (primitive)\",\"str (string) : string (primitive)\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson: Murex-flavoured JSON (deprecated)\"]},\"29\":{\"h\":\"Events\",\"t\":[\"onCommandCompletion: Trigger an event upon a command's completion\",\"onFileSystemChange: Add a filesystem watch\",\"onPrompt: Events triggered by changes in state of the interactive shell\",\"onSecondsElapsed: Events triggered by time intervals\"]},\"30\":{\"h\":\"API Reference\",\"t\":[\"These API docs are provided for any developers wishing to write their own builtins.\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"lang.ArrayWithTypeTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array with data type included\",\"lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"lang.IndexTemplateTable() (template API): Returns element(s) from a table\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API):\\nConverts a Murex data-type into structured memory\"]},\"31\":{\"h\":\"Blog\",\"t\":[\"Collection of Murex related documents and personal thoughts.\"]},\"32\":{\"h\":\"Articles\"},\"33\":{\"h\":\"22.04.2023 - Reading Lists From The Command Line\",\"t\":[\"How hard can it be to read a list of data from the command line? If your list is line delimited then it should be easy. However what if your list is a JSON array? This post will explore how to work with lists in a different command line environments.\"]},\"34\":{\"h\":\"02.10.2021 - The Split Personalities of Shell Usage\",\"t\":[\"Shell usage is split between the need to write something quickly and frequently verses the need to write something more complex but o\\nnly the once. In this article is explore those opposing use cases and how different $SHELLs have chosen to address them.\"]},\"35\":{\"c\":[\"Blog\"]},\"36\":{\"h\":\"Reading Lists From The Command Line - Blog\",\"t\":[\"How hard can it be to read a list of data from the command line? If your list is line delimited then it should be easy. However what if your list is a JSON array? This post will explore how to work with lists in a different command line environments.\",\"Table of Contents\",\"Preface\",\"Reading lines in Bash and similar shells\",\"But what if my files aren't line delimited?\",\"Iteration in Bash via jq\",\"Iteration in Murex via foreach\",\"Reading JSON arrays in PowerShell\",\"Conclusion\"]},\"37\":{\"h\":\"Preface\",\"t\":[\"A common problem we resort to shell scripting for is iterating through lists. This was easy in the days of old when most data was \\\\n (new line) delimited but these days structured data is common place with formats like JSON, YAML, TOML, XML and even S-Expressions appearing commonly throughout developer and DevOps tooling.\",\"So lets explore a few techniques for iterating through lists.\"]},\"38\":{\"h\":\"Reading lines in Bash and similar shells\",\"t\":[\"Bash shell is a popular command-line interface for Unix and Linux operating systems. One of its many useful features is the ability to read files line by line. This can be helpful for processing large files or performing repetitive tasks on a file's contents. The most basic way to read a file line by line is to use a while loop with the read command:\",\"while read line; do echo $line done < file.txt \",\"In this example, the while loop reads each line of the file.txt file and stores it in the $line variable. The echo command then prints the contents of the $line variable to the console. The < symbol tells Bash to redirect the contents of the file into the loop.\",\"The read command is what actually reads each line of the file. By default, it reads one line at a time and stores it in the variable specified. You can also use the -r option with the read command to disable backslash interpretation, which can be useful when dealing with files that contain backslashes.\",\"Another useful feature of Bash is the ability to perform operations on each line of a file before processing it. For example, you can use sed to replace text within each line of a file:\",\"while read line; do new_line=$(echo $line | sed 's/foo/bar/g') echo $new_line done < file.txt \",\"In this example, sed replaces all instances of \\\"foo\\\" with \\\"bar\\\" in each line of the file. The modified line is then stored in the $new_line variable and printed to the console.\",\"Of course you could just run\",\"sed 's/foo/bar/g' file.txt \",\"...but the reasons for the for this contrived example will follow.\"]},\"39\":{\"h\":\"But what if my files aren't line delimited?\",\"t\":[\"The problem with Bash, and all traditional Linux or UNIX shells, is that they operate on byte streams. To be fair, this isn't so much a fault of Bash per se but more a result of the design of UNIX where (almost) everything is a file, including pipes. This means everything is treated as bytes. Unlike, for example, Powershell which passes .NET objects around. Byte streams make complete sense when you're working on '70s or '80s mainframes but it is a little less productive in the modern world of structured formats like JSON.\",\"So how do you read lists from objects in, for example, JSON? In Bash, this isn't so easy. You need to rely on third party tools like jq. However you do have the benefit of compatibility with all of the older core utilities, like sed, that have become muscle memory by now. This does also come with its own drawbacks as well, which I'll explore in the following section.\"]},\"40\":{\"h\":\"Iteration in Bash via jq\",\"t\":[\"jq is a fantastic tool that has become a staple of many a CI/CD pipeline however it is not part of most operating systems base platform, so it would need to be installed separately. This also creates additional complications whereby you end up having a language within a language -- like running awk or sed inside Bash, you're now introducing jq too. Thus its syntax isn't always the easiest to grok when delving deep into nested JSON with conditionals and such like compared with shells that offer first party tools for working with objects. We can delve deeper into the power of jq in another article but for now we are going to keep things intentionally simple:\",\"Lets create a JSON array:\",\"json='[\\\"Monday\\\",\\\"Tuesday\\\",\\\"Wednesday\\\",\\\"Thursday\\\",\\\"Friday\\\",\\\"Saturday\\\",\\\"Sunday\\\"]' \",\"Straight away you should be able to see that Bash, with its reliance on whitespace delimitations, couldn't natively parse this. So now lets run it through jq:\",\"$ echo $json | jq -r '.[]' | while read -r day do; echo \\\"Happy $day\\\"; done Happy Monday Happy Tuesday Happy Wednesday Happy Thursday Happy Friday Happy Saturday Happy Sunday \",\"What's happening here is the jq tool is converting our JSON array into a \\\\n delimited list. And from there, we can use while and read just like we did in our first example at the start of this article.\",\"The -r flag tells jq to strip quotation marks around the values. Without -r you'd see Happy \\\"Monday\\\"' and so on and so forth.\",\".[] is jq syntax for \\\"all elements ([]) in the root object space (.).\"]},\"41\":{\"h\":\"Iteration in Murex via foreach\",\"t\":[\"Murex doesn't just treat files as byte streams, it passes type annotations too. And it uses those annotations to dynamically alter how to read files. The following examples will also use JSON as the input format, however Murex natively supports other structured data formats too, like YAML, CSV and S-Expressions.\",\"Lets use the same JSON array as we did earlier, except use one of Murex's features to generate arrays programmatically:\",\"» %[Monday..Sunday] [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\", \\\"Sunday\\\" ] \",\"The jq example rewritten in Murex would look like the following:\",\"%[Monday..Sunday] | foreach day { out \\\"Happy $day\\\" } \",\"What's happening here is %[...] creates the JSON array (as described above) and then the foreach builtin iterates through the array and assigns that element to a variable named day.\",\"out in Murex is the equivalent of echo in Bash. In fact you can still use echo in Murex albeit that is just aliased to out.\",\"It is also worth noting that since Murex version 3.1 lambdas have been available, allowing you to write code that looks a like this:\",\"$json[{out \\\"Hello $.\\\"}] \",\"But more on that in a different article.\"]},\"42\":{\"h\":\"Reading JSON arrays in PowerShell\",\"t\":[\"Microsoft PowerShell is a typed shell, like Murex, which was originally built for Windows but has since been ported to macOS and Linux too. Where PowerShell differs is that rather than using byte streams with type annotations, PowerShell passes .NET objects. Thus you'll see a little more boilerplate code in PowerShell where you need to explicitly convert types -- whereas Murex can get away with implicit definitions.\",\"$jsonString = '[\\\"Monday\\\",\\\"Tuesday\\\",\\\"Wednesday\\\",\\\"Thursday\\\",\\\"Friday\\\",\\\"Saturday\\\",\\\"Sunday\\\"]' $jsonObject = ConvertFrom-Json $jsonString foreach ($day in $jsonObject) { Write-Host \\\"Hello $day\\\" } \",\"The first line is just creating a JSON string and allocating that to $jsonString. We can largely ignore that as it is the same as we've seen in Bash already. The second line is more interesting as that is where the type conversion happens. ConvertFrom-Json does exactly as it describes -- PowerShell is generally pretty good at having descriptive names for commands,\",\"From there on it looks relatively similar to Murex syntax: foreach being the statement name, followed by the variable name.\"]},\"43\":{\"h\":\"Conclusion\",\"t\":[\"Iterating over a JSON array from the command line can be done in various ways using different shells. PowerShell, jq, and Murex offer their unique approaches and syntaxes, making it easy to work with JSON data in different environments. Whether you're a Windows user who prefers PowerShell or a Linux user who prefers Bash or Murex, there are many options available to suit your needs. Regardless of the shell you choose, mastering the art of iterating over JSON arrays can greatly enhance your command-line skills and help you work more efficiently with JSON data.\",\"Published: 22.04.2023 at 11:43\"]},\"44\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"cast: Alters the data type of the previous function without altering it's output\",\"foreach: Iterate through an array\",\"formap:\\nIterate through a map or other collection of data\"]},\"45\":{\"h\":\"The Split Personalities of Shell Usage - Blog\",\"t\":[\"Shell usage is split between the need to write something quickly and frequently verses the need to write something more complex but only the once. In this article is explore those opposing use cases and how different $SHELLs have chosen to address them.\"]},\"46\":{\"h\":\"A Very Brief History\",\"t\":[\"In the very early days of UNIX you had the Thompson shell which supported pipes, some basic control structures and wildcards. Thompson shell was based after the Multics shell, which in turn was inspired from RUNCOM. In fact the 'rc' extension often seen in shell profiles is directly taken from RUNCOM.\",\"It wasn't until a little later that variables were a feature in shells. That came with the PWB shell, which was designed to be upwardly-compatible with the Thompson shell, supporting Thompson syntax while bringing advancements intended to make shell scripting much more practical.\",\"While the inspiration behind modern shells, RUNCOM, is a program that literally just ran commands from a file; it is this authors opinion that early UNIX shells were originally designed to be interactive terminals for launching applications first and foremost, with scripting as a feature that took a few years to mature. Furthermore, the ALGOL-inspired scripting commands were originally external executables and only later rewritten as shell builtins for performance reasons. For example running if in the shell would originally fork() the executable /bin/if but that quickly became call a builtin function that was part of the shell itself.\",\"I believe it is these reasons why $SHELLs based on that lineage, be it the Bourne shell, Bash or Zsh, all share a scripting syntax which very much feels like it is extended from REPL usage.\"]},\"47\":{\"h\":\"Opposing Requirements\",\"t\":[\"The problem with shell usage is it falls into two contradictory categories equally:\",\"You need an interactive terminal that is optimized for the operators productivity. Since it is a REPL environment, any instructions you do pass are going to be write-many read-once. In other words, the syntax needs to be quick to type because it's going to be typed often. However it doesn't have to be particularly readable because you're not going to save and read back whatever instructions you've keyed into the REPL.\",\"You need the ability to write short scripts. The language here needs to be familiar because it is aimed at non-developers (otherwise they might just as well use C, FORTRAN, ALGOL or others) and succinct (again, otherwise a developer might as well use a compiled language). However it also should be readable because scripts are saved, recalled, reused and often extended over time. So they fall into the write-once read-many category.\",\"In an interactive program manager it makes sense to forgo quotation marks around strings, commas to separate parameters and semi-colons to terminate the line. Even the C shell, csh then later tcsh, doesn't follow C's syntax that strictly -- instead understanding that brevity is required for interactive use.\",\"When I first started writing my own shell, Murex, I originally started out with syntax that was inspired by the C. A pipeline would look something like the following:\",\"cat (\\\"./example.csv\\\") | grep (\\\"-n\\\", \\\"foobar\\\") \",\"While this came with some readability improvements, it was a massive pain to write over and over. So I added some syntax completion to the terminal, inspired by IDE's and how they attempt to minimize the repetition of entering syntax tokens. However this didn't remove the pain entirely, it just masked it a little. So I removed the redundant braces. But the enforced quotation marks were still annoying, so I decided to make the quotation marks optional. Then the commas were removed...and before I knew it, I'd basically just reinvented the same syntax for writing commands as everyone had already been using for a multitude of decades prior. What started out as the example above ended up looking more like the example below:\",\"cat ./example.csv | grep -n foobar \",\"(please excuse the useless use of cat in these examples -- it's purely there for illustrative reasons)\"]},\"48\":{\"h\":\"The Traditional\",\"t\":[\"As I've already hinted in the section before, Bourne, Bash, Zsh all fall nicely into the first camp. The write-many read-once camp. And that makes sense to me when I consider the evolution of those shells. Their heritage does stem from interactive terminals firstly and scripting secondly.\",\"The problem with traditional shells is that their grammar is lousy for anyone who needs a write-once read-many language. Worse still, while a significant amount of their grammar has now been included as builtins, for practical use operators often find themselves inlining other languages anyway, such as awk, sed, Perl and others. So it is understandable that a great many chose to do away with traditional shells for scripting and instead use more other, more powerful and readable languages like Python.\",\"Unfortunately the same problems transfer the other way too, in that I have already demonstrated why Python (and other programming languages) don't always make good shells. While I will conceded that there is a loyal fanbase who will swear by their Python REPL for terminal usage, and if they're happy with that then I salute them, their usage is as niche as those who enjoy using Bash for complex scripts. Perhaps the only language I've used which translates well both for terse REPLs and lengthier scripts is LISP.\"]},\"49\":{\"h\":\"The Modern\",\"t\":[\"So how are modern shells addressing these split concerns?\"]},\"50\":{\"h\":\"Powershell\",\"t\":[\"Microsoft had the benefit of being able to start from a clean room. They didn't need to inherit 50+ years of UNIX legacy when they wrote Powershell. So their approach was naturally to base their shell on .NET. Passing .NET objects around has a number of advantages over the POSIX specification of passing files, byte streams, to applications. This allows developers to write richer command line applications in their preferred .NET language rather than being tied to the shell's syntax. However one could argue the same is true with POSIX shells and how you can write a program in any language you like. But in Powershell those other .NET programs feel more tightly integrated into Powershell than a forked process does in Bash. Again, I put this down to Powershell passing .NET objects along the pipeline.\",\"Where Powershell falls down for me is in two key areas:\",\"Many of the flags passed are verbose. Calling .NET objects can be verbose. Take this example of base64 encoding a string:\",\" [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(\\\"TextToEncode\\\")) \",\"Powershell doesn't play nicely with POSIX. Okay, I'm arguably contradicting myself now because earlier I raised this as a benefit. And in many ways it is. However if you wish to run Powershell on Linux, which you can do, you may find that you'll want to work with CLI tools that do \\\"think\\\" in terms of byte streams. Many of these tools have equivalent aliases written in .NET so you can appear to use them without escaping the rich programming environment provided by Powershell. However you may, and I often did, run into a great many scenarios where my expectations didn't match the practicalities of Powershell.\",\"(I will talk more about the second point in another article where I'll discuss pipelines, data types and the need for modern shells to understand rich data rather than treating everything as a flat stream of bytes)\",\"There is no question that Powershell is a more powerful REPL than Bash but it definitely slides more towards the \\\"write-once read-many\\\" end of the spectrum.\"]},\"51\":{\"h\":\"Oil\",\"t\":[\"Oil describes itself as the following:\",\"Oil is a new Unix shell. It's our upgrade path from bash to a better language and runtime. It's also for Python and JavaScript users who avoid shell!\",\"The way Oil achieves this is a lot of how PWB improved upon the Thompson shell in the 1970s. Oil aims to be upwards-compatible with Bash. Any command line or shell script you can run in Bash should, eventually, be supported in Oil as well. Oil can extend on that and support a syntax and grammar that is more readable and sane to write longer lived scripts in. Thus bridging the conflict between \\\"write-many\\\" and \\\"read-many\\\" languages.\",\"This make Oil one of the most interesting alternative shells I have come across.\"]},\"52\":{\"h\":\"Murex\",\"t\":[\"The approach Murex takes sits somewhere in between the previous two shells. It attempts to retain familiarity with POSIX syntax but isn't afraid to break compatibility where it makes sense. The emphasis is on creating grammar that is both succinct but also readable. This mission was driven from originally attempting to create something more familiar to Javascript developers then falling back to some old Bash-ism's when I realized that for all of it's warts, Bash and its kin aren't actually bad for quick REPL usage of C-style braces over ALGOL style named scopes:\",\"POSIX:\",\"if [ 0 -eq 1 ]; then echo '0 == 1' else echo '0 != 1' fi \",\"Murex:\",\"if { 0 == 1 } then { echo '0 == 1' } else { echo '0 != 1' } \",\"But since the curly braces are tokens, grammar like then / else become superfluous words that only exist for readability. So then we can make them optional. And you end up with a syntax that allows for a certain amount of golfing in the REPL should the operator want to save a few key strokes\",\"if { 0 == 1 } { echo '0 == 1' } { echo '0 != 1' } \"]},\"53\":{\"h\":\"Conclusion\",\"t\":[\"The write-many read-once tendencies of the interactive terminal and the write-once read-many demands of scripting might be difficult to consolidate but I do think it is achievable and I'm not convinced the current heavy weights do a good job at addressing those conflicting concerns. Whereas alternative shells like Oil, Elfish and Murex seem to be putting a lot more thought into this problem and it is really exciting seeing the different ideas that are being produced.\",\"Published: 02.10.2021 at 22:42\"]},\"54\":{\"h\":\"See Also\",\"t\":[\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Reading Lists From The Command Line: How hard can it be to read a list of data from the command line? If your list is line delimited then it should be easy. However what if your list is a JSON array? This post will explore how to work with lists in a different command line environments.\",\"Rosetta Stone: A tabulated list of Bashism's and their equivalent Murex syntax\",\"if:\\nConditional statement to execute different blocks of code depending on the result of the condition\"]},\"55\":{\"h\":\"Why Create A New Shell? - Blog\",\"t\":[\"This article discuses the motivation behind creating a new shell\"]},\"56\":{\"h\":\"Reading lines\",\"t\":[\"Bash shell is a popular command-line interface for Unix and Linux operating systems. One of its many useful features is the ability to read files line by line. This can be helpful for processing large files or performing repetitive tasks on a file's contents. The most basic way to read a file line by line is to use a while loop with the read command:\",\"#!/bin/bash while read line; do echo $line done < file.txt \",\"In this example, the while loop reads each line of the file.txt file and stores it in the $line variable. The echo command then prints the contents of the $line variable to the console. The < symbol tells Bash to redirect the contents of the file into the loop.\",\"The read command is what actually reads each line of the file. By default, it reads one line at a time and stores it in the variable specified. You can also use the -r option with the read command to disable backslash interpretation, which can be useful when dealing with files that contain backslashes.\",\"Another useful feature of Bash is the ability to perform operations on each line of a file before processing it. For example, you can use sed to replace text within each line of a file:\",\"#!/bin/bash while read line; do new_line=$(echo $line | sed 's/foo/bar/g') echo $new_line done < file.txt \",\"In this example, sed replaces all instances of \\\"foo\\\" with \\\"bar\\\" in each line of the file. The modified line is then stored in the $new_line variable and printed to the console.\",\"Of course you could just run\",\"sed 's/foo/bar/g' file.txt \",\"...but the reasons for the for this contrived example will follow.\"]},\"57\":{\"h\":\"But what if my files aren't line delimited?\",\"t\":[\"The problem with Bash, and all traditional Linux or UNIX shells, is that they operate on byte streams. To be fair, this isn't so much a fault of Bash per se but more a result of the design of UNIX where (almost) everything is a file, including pipes. This means everything is treated as bytes. Unlike, for example, Powershell which passes .NET objects around. Byte streams make complete sense when you're working on '70s or '80s mainframes but it is a little less productive in the modern world of structured formats like JSON.\",\"So how do you read lists from objects in, for example, JSON? In Bash, this isn't so easy. You need to rely on third party tools like jq and often end up throwing out all of the older core utilities, like sed, that have become muscle memory. In Powershell it is a lot easier but you then need .NET wrappers around your existing command line tools. In Murex you can have your proverbial cake and eat it.\"]},\"58\":{\"h\":\"Structured iteration in Murex\",\"t\":[\"The following examples will use JSON as the input format, however Murex natively supports other structured data formats too.\"]},\"59\":{\"h\":\"The foreach builtin\",\"t\":[\"Lets say you have an array that looks something like the following:\",\"» %[January..December] [ \\\"January\\\", \\\"February\\\", \\\"March\\\", \\\"April\\\", \\\"May\\\", \\\"June\\\", \\\"July\\\", \\\"August\\\", \\\"September\\\", \\\"October\\\", \\\"November\\\", \\\"December\\\" ] \",\"And lets say you wanted to only return months that ended in ber (excuse the following video but I find this track be B.E.R. to be a particularly effective earworm)\",\"Sure you could grep that in Bash but what you're left with isn't JSON. And what if that JSON is minified?\",\"[\\\"January\\\",\\\"February\\\",\\\"March\\\",\\\"April\\\",\\\"May\\\",\\\"June\\\",\\\"July\\\",\\\"August\\\",\\\"September\\\",\\\"October\\\",\\\"November\\\",\\\"December\\\"] \",\"Now reading each line isn't going to work.\",\"Murex doesn't just treat files as byte streams, it passes type annotations too. And it uses those annotations to dynamically alter how to read files. So you could grep only ber from minified JSON with a simple foreach { | grep \\\"ber\\\" }:\",\"$months = %[January..December] $months | foreach { | grep ber } \",\"The best thing is foreach will understand arrays from JSON, YAML, S-Expressions, CSV, and others... as well as regular terminal output. So it is one syntax to learn regardless of the input file format.\"]},\"60\":{\"h\":\"The formap builtin\",\"t\":[\"Arrays are easy though. What about maps? Or dictionaries, objects, hashes... as other languages might refer to them. Key value pairs are always going to be harder to parse because even with file formats like YAML, arrays are line delimited where as splitting key value pairs requires extra grokking.\",\"Murex also has an iterator for such constructs: formap:\",\"» echo '{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}' | :json: formap key value { echo \\\"key=$key, value=$value\\\" } key=a, value=1 key=b, value=2 key=c, value=3 \",\"Here we are using :json: to cast / annotate the STDIN stream for formap.\"]},\"61\":{\"h\":\"Lambdas\",\"t\":[\"Lambdas were introduced in version 4.0 of Murex. Lambdas offer shortcuts around common matching problems with structured data. For example:\",\"» $example = %{a:1, b:2, c:3} » @example[{$.val == 2}] { \\\"b\\\": 2 } \",\"The way this particular lambda works is that for each element in $example the code block {$.val == 2} runs with the $. variable is assigned with a structure that looks like this:\",\"# first iteration { \\\"key\\\": \\\"a\\\", \\\"val\\\": 1 } # second iteration { \\\"key\\\": \\\"b\\\", \\\"val\\\": 2 } # third iteration { \\\"key\\\": \\\"c\\\", \\\"val\\\": 3 } \",\"Thus $.val (eg 2) would be compared to the number 2. If the result is true, that element is output. If the result is false then that element is ignored.\"]},\"62\":{\"h\":\"Conclusion\",\"t\":[\"There are a multitude of ways to iterate through structured data on Linux and UNIX systems.\",\"Published: 06.05.2021 at 08:24\"]},\"63\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"cast: Alters the data type of the previous function without altering it's output\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"mkarray:\"]},\"64\":{\"h\":\"ChangeLog\",\"t\":[\"Track new features, any breaking changes, and the release history here.\"]},\"65\":{\"h\":\"Articles\"},\"66\":{\"h\":\"18.07.2023 - What's new in murex v4.4\",\"t\":[\"v4.4 features two new builtins, improvements in testing, and automatic generation of autocompletion suggestions backed by man page parsing. Plus there has been a lot of focus on improving readline responsiveness\"]},\"67\":{\"h\":\"02.07.2023 - What's new in murex v4.3\",\"t\":[\"This brings improved support on Windows plus one breaking change from the previous release (v4.2)\"]},\"68\":{\"h\":\"19.06.2023 - What's new in murex v4.2\",\"t\":[\"Murex usage has raised considerably in recent weeks. This release addresses a number of feature requests and bugs raised on Github.\"]},\"69\":{\"h\":\"04.06.2023 - What's new in murex v4.1.x\",\"t\":[\"The previous releases have brought significant advancements to Murex's syntax but at the cost of longer gaps between releases. So the 4.1.x versions will be shorter releases but focusing on bug fixes. The 4.1.x release notes will be appended to murex.rocks changelog and available on Github releases too\"]},\"70\":{\"h\":\"26.03.2023 - What's new in murex v4.0\",\"t\":[\"This release sees significant improvements for use with non-latin characters in both the interactive prompt and shell scripting. It introduces new syntax to make working with structured data even easier than before. As well as new data types and smoother user experience.\"]},\"71\":{\"h\":\"12.02.2023 - What's new in murex v3.1\",\"t\":[\"This release includes mostly bug fixes and new experimental features which are opt into. To enable all experimental features, set the environmental variable MUREX_EXPERIMENTAL to any value. Or you can enable specific features individually via `config\"]},\"72\":{\"h\":\"31.12.2022 - What's new in murex v3.0\",\"t\":[\"This is a major release that brings a significant number of changes and improvements, including a complete overhaul of the parser. Backwards compatibility is a high priority however these new features bring greater readability and consistency to shell scripting. So while the older syntax remains for compatibility, it is worth migrating over to the newer syntax for all new code being written\"]},\"73\":{\"h\":\"12.09.2022 - What's new in murex v2.11\",\"t\":[\"This release mainly focuses on refinements in performance and usability, rather than introducing new features\"]},\"74\":{\"h\":\"01.08.2022 - What's new in murex v2.10\",\"t\":[\"This release brings a few minor improvements and bug fixes rather than big new headline features.\"]},\"75\":{\"h\":\"15.07.2022 - What's new in murex v2.9\",\"t\":[\"This release focuses on testing and REPL usability improvements but also includes updates several new run modes to make error handling easier in larger scripts.\"]},\"76\":{\"h\":\"23.05.2022 - What's new in murex v2.8\",\"t\":[\"This release comes with a number of experimental but stable features that might eventually become standard practice. The features are there to use if you with but adjacent from the older code so there is zero risk in updating to this version.\"]},\"77\":{\"h\":\"15.05.2022 - What's new in murex v2.7\",\"t\":[\"This update has introduced another potential breaking change for your safety: zero length arrays now fail by default. Also errors inside subshells will cause the parent command to fail if ran inside a try or trypipe block.\"]},\"78\":{\"h\":\"26.02.2022 - What's new in murex v2.6\",\"t\":[\"This update has introduced a potential breaking change: variables now need to be defined before usage otherwise the commandline will fail. Read notes to learn how to disable this feature where needed. Also included in this release is the select command as part of the standard build.\"]},\"79\":{\"h\":\"12.02.2022 - What's new in murex v2.5\",\"t\":[\"This release introduces a number of new builtins, fixes some regression bugs and supercharges the select optional builtin (which I plan to include into the core builtins for non-Windows users in the next release).\"]},\"80\":{\"h\":\"09.12.2021 - What's new in murex v2.4\",\"t\":[\"This release introduces a strict mode for variables, new builtin, performance improvements, and better error messages; plus a potential breaking change\"]},\"81\":{\"h\":\"26.09.2021 - What's new in murex v2.3\",\"t\":[\"This release includes significant changes to the interactive terminal\"]},\"82\":{\"h\":\"21.06.2021 - What's new in murex v2.2\",\"t\":[\"This is mainly a bug fix release but it does include one breaking change for config. Please read for details.\"]},\"83\":{\"h\":\"30.04.2021 - What's new in murex v2.1\",\"t\":[\"This release comes with support for inlining SQL and some major bug fixes plus a breaking change for config. Please read for details.\"]},\"84\":{\"h\":\"17.04.2021 - What's new in murex v2.0\",\"t\":[\"This release comes with spellchecking, inlined images, smarter syntax completion and more\"]},\"85\":{\"c\":[\"Guide\"]},\"86\":{\"h\":\"What's new in murex v2.0 - Change Log\",\"t\":[\"This release comes with spellchecking, inlined images, smarter syntax completion and more\",\"This release seems some major upgrade to the default experience:\",\"Inlined spellchecking enabled by default (requires aspell installed)\",\"[![asciicast](https://asciinema.org/a/408024.svg)](https://asciinema.org/a/408024) (see spellcheck link below) \",\"Support for inlining images enabled by default (was previously an external module)\",\"[![asciicast](https://asciinema.org/a/408028.svg)](https://asciinema.org/a/408028) \",\"Massively overhauled syntax completion\",\"Additional tab autocompletions included in base install\",\"Minor readline bug fixes: git commits\",\"Rewritten config backend which copies less data around\",\"Significantly more features documented: https://murex.rocks\",\"Plus this new blog!\",\"Published: 17.04.2021 at 12:49\"]},\"87\":{\"h\":\"See Also\",\"t\":[\"Modules and Packages: An introduction to Murex modules and packages\",\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Spellcheck: How to enable inline spellchecking\",\"config: Query or define Murex runtime settings\",\"murex-package: Murex's package manager\",\"open-image: Renders bitmap image data on your terminal\",\"open:\\nOpen a file with a preferred handler\"]},\"88\":{\"h\":\"What's new in murex v2.1 - Change Log\",\"t\":[\"This release comes with support for inlining SQL and some major bug fixes plus a breaking change for config. Please read for details.\",\"This release sees new optional features plus major bug fixes to the existing code base:\"]},\"89\":{\"h\":\"Breaking Changes:\",\"t\":[\"Two configshell keys have changed names:\",\"recursive-soft-timeout -> autocomplete-soft-timeout\",\"recursive-hard-timeout -> autocomplete-hard-timeout\",\"This is to better describe their functionality now that those values are also used for Dynamic and DynamicDesc autocompletions as well as recursive directory lookups.\",\"This change might break some of your existing profile config!\"]},\"90\":{\"h\":\"User Facing Changes:\",\"t\":[\"configshellmax-suggestions now defaults at 12 rather than 6\",\"New optional builtin, select, allows you to inline SQL queries against any tabulated output (eg ps -fe, jsonlines arrays, CSV files, etc). This works via importing output into an in memory sqlite3 database. However this also breaks cross compiling due to the C includes with sqlite3. Thus this builtin will remain optional for now.\",\"Rethink of how optionals are imported. Rather than modifying // +build headers in .go files, optionals can be copied (or symlinked) from builtins/imports_src -> builtins/imports_build. This enables us to write a user friendly pre-compiling build script to enable users to easily select which optional builtins to include.\",\"Stopping jobs via ^z has been fixed in UNIX. This was a regression bug introduced a while back however no tests were in place to catch it. Unfortunately this kind of testing would fall outside of unit testing each function so I'll need to add another layer of testing against the compiled executable to verify any future regressions like these: discussion To use this feature, run a command and then press ^z (ctrl+z) to pause the process. You can check which jobs have been paused via jobs and/or modify processes to run in the background/foreground via bg and fg.\",\"Added new API endpoints: ReadArrayWithType(). This solves some edge cases in foreach where elements might not match the same data type as the parent object (eg a json object might have int or str elements in an array)\",\"Rewritten how Dynamic autocompletions are executed to fall in line with DynamicDesc. This should bring improvements to running autocompletions in the background and thus improve the user experience with regards to the shell's responsiveness. The next step would be to have a lower soft-timeout\",\"Improvements to the context completions\",\"Default lengths for autocompletions where all results are deferred to the background have been tweaked slightly to give some extra length\",\"Minor website tweaks\"]},\"91\":{\"h\":\"Non-User Facing / Maintenance Changes\",\"t\":[\"All dependencies have been updated, pinned and the vendors directory rebuilt\",\"Fixed some issues flagged up in goreportcard.com\",\"Some internal API changes that have no UI/UX ramifications but makes the code more maintainable\",\"Lots more unit tests added\",\"Published: 30.04.2021 at 10:00\"]},\"92\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"bg: Run processes in the background\",\"csv: CSV files (and other character delimited tables)\",\"fg: Sends a background process into the foreground\",\"foreach: Iterate through an array\",\"jobs: Lists all running functions within the current Murex session\",\"jsonl: JSON Lines\",\"select:\\nInlining SQL into shell pipelines\"]},\"93\":{\"h\":\"What's new in murex v2.10 - Change Log\",\"t\":[\"This release brings a few minor improvements and bug fixes rather than big new headline features.\",\"Breaking Changes:\",\"None\",\"Features:\",\"Added support for ranges to be used as variables. eg\",\"f: +f -> set v echo: @v[2..]\",\"Complete re-write of f. It is now the tool I had always intended when I first created that builtin\",\"g now supports being run as a method (eg to filter items from a file list)\",\"rx now supports being run as a method (eg to filter items from a file list)\",\"Updated autocompletes for git\",\"Updated autocompletes for terraform\",\"Minor Changes:\",\"Added support for profiling\",\"Removed unused data types\",\"Dropped profile/ prefix from the module string for modules and profiles (as seen in FileRef)\",\"Bug Fixes:\",\"Lots of improvements to how || and && are used in other runmode's, try, and trypipe\",\"autoglob prompt now has a mutex wrapped around it to prevent concurrent processes sending the prompt haywire\",\"Spellchecker no longer underlines partial words\",\"Better removal of \\\\x16 and other non-printable characters leaking into readline\",\"Published: 01.08.2022 at 20:10\"]},\"94\":{\"h\":\"See Also\",\"t\":[\"And (&&) Logical Operator: Continues next operation if previous operation passes\",\"FileRef: How to track what code was loaded and from where\",\"Modules and Packages: An introduction to Murex modules and packages\",\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"Or (||) Logical Operator: Continues next operation only if previous operation fails\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"Spellcheck: How to enable inline spellchecking\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"autocomplete: Set definitions for tab-completion in the command line\",\"f: Lists or filters file system objects (eg files)\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"rx: Regexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"95\":{\"h\":\"What's new in murex v2.11 - Change Log\",\"t\":[\"This release mainly focuses on refinements in performance and usability, rather than introducing new features\",\"Breaking Changes:\",\"None\",\"Features:\",\"File index caching for faster completions (eg on mechanical drives). This happens upon shell start up (except on Darwin for security reasons) and after every cd\",\"Relaxed alias syntax. It now supports whitespace between the = statement (like set and let do)\",\"New aliases added for common methods which work against lists/arrays. Type list.{TAB} to see the complete list of methods\",\"Added support for alternative separator values in struct-keys\",\"Hint summaries are now cached, to improve performance on slower machines\",\"Opt in support to pre-cache hint summaries. This will also auto-disable appending colon to command suggestions in autocomplete. This is not enabled by default because it could negatively affect performance on some slower machines and is more of an aesthetic improvement. You can enable it by adding config: set shell pre-cache-hint-summaries true to your Murex profile\",\"New autocompletions for yay (ArchLinux)\",\"Some minor performance improvements\",\"website: updates to docs\",\"Bug Fixes:\",\"readline: max field size adjusted for autocompletes so more completions are visible at one time\",\"readline: all cropped autocompletions now provide an uncropped version in the hint text field\",\"readline: fix bug with history not getting written\",\"OS signals (^c et al) are now re-registered after each exec (fixes bug where some programs would \\\"steal\\\" ^c, breaking support for those signals upon subsequent execs)\",\"Fixed regression bug in man page parsing\",\"Added check for zero-length string used as a process name (this shouldn't ever happen under normal circumstances however closing this bug allows for a managed error rather than the code panicking)\",\"readline: Prompt environment reset on each loop (this change is to future-proof against potential bugs)\",\"Fixed race condition bug when some of the tests are run concurrently (this bug only existed in the unit tests but sometimes caused those tests to fail)\",\"Added CI tests for Go v19.x\",\"Published: 12.09.2022 at 08:10\"]},\"96\":{\"h\":\"See Also\",\"t\":[\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"alias: Create an alias for a command\",\"autocomplete: Set definitions for tab-completion in the command line\",\"cd: Change (working) directory\",\"config: Query or define Murex runtime settings\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set: Define a local variable and set it's value\",\"struct-keys:\\nOutputs all the keys in a structure as a file path\"]},\"97\":{\"h\":\"What's new in murex v2.2 - Change Log\",\"t\":[\"This is mainly a bug fix release but it does include one breaking change for config. Please read for details.\",\"This release sees new optional features plus major bug fixes to the existing code base:\"]},\"98\":{\"h\":\"Breaking Changes:\",\"t\":[\"One configshell key has changed it's name:\",\"spellcheck-block -> spellcheck-func\",\"This is to bring spellcheck inline with other keys that contain executable code.\",\"This change might break some of your existing profile config!\"]},\"99\":{\"h\":\"User Facing Changes:\",\"t\":[\"Windows coreutils no longer returns exit code of 13 for aliases\",\"Fixed regression bug in fg (added stronger testing here to prevent future regressions)\",\"Generic data type, *, now uses tabwriter to align columns\",\"Spellchecker error handling tweaked to be more user friendly\",\"Environmental variables can been created per command:\",\"<pre><code>» env <env:foo=bar> | grep foo foo=bar</code></pre> \",\"stdstream.SetDataType() only works on first call -- ignored thereafter. This will impact pipes that are written to by many processes but results in more predictable code due possible timing errors where different processes are overwriting the stream data type\",\"stdstream.SetDataType() only works on first call -- ignored thereafter. This will impact pipes that are written to by many processes but results in more predictable code due possible timing errors where different processes are overwriting the stream data type\"]},\"100\":{\"h\":\"Non-User Facing / Maintenance Changes\",\"t\":[\"All dependencies have been updated, pinned and the vendors directory rebuilt\",\"Fixed some issues flagged up in goreportcard.com\",\"Some internal API changes that have no UI/UX ramifications but makes the code more maintainable\",\"Lots more unit tests added\",\"Lots of code rewritten to avoid potential data races\",\"Published: 21.06.2021 at 21:51\"]},\"101\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"fg:\\nSends a background process into the foreground\"]},\"102\":{\"h\":\"What's new in murex v2.3 - Change Log\",\"t\":[\"This release includes significant changes to the interactive terminal\",\"This release brings some major improvements to the discoverability of commands and their parameters in the interactive terminal.\"]},\"103\":{\"h\":\"User Facing Changes:\",\"t\":[\"New builtin: method. This is used to help turn some commands into a \\\"method\\\", similar in concept to object orientated development where the tab- completer will return a list of other commands that are compatible with the formers output data types. It's purely an autocompletion tool and has no effect in shell scripts.\",\"Autocompletion suggestions will differ based on what pipes are used. The idea behind this is to improve the discoverability of commands. All tokens can still be used to pipeline to any command type (like before). This rule only affects autocomplete suggestions in the interactive prompt.\",\"- `|` will show all available aliases, functions, builtins and external commands, as usual - `->` will default to showing only compatible commands defined in `method` (see above), however if no methods are found then `->` will fall back to suggesting all available aliases, functions, builtins and external commands, like `|`. The idea here is for `->` to surface commands that are commonly expected to be pipelined together but without forcing the user to pause and remember which token exposes what commands. While `|` is still available for familiarity \",\"Autocompletion de-duplication now places hyphen-prefixed flags at the end of the results when sorting. This helps bring more relevant flags forward, with hyphen-prefixed flags still visible when users press -\",\"External commands return a error message if the exit status is non-zero (issue #299)\",\"<pre><code>» exec: false Error in `exec` (1,1): exit status 1</code></pre> \",\"Index() ([) now returns a different data type from the root object if the element is a string, integer, float64, boolean or nil (issue #316)\",\"runtime was missing a few flags for reporting supported data types against the newer APIs\",\"Generic types (* / generic) to include two spaces between columns when marshalled\",\"Syntax highlighter colour tweaks -- no longer using background highlighting because that looks weird and unreadable on some terminal colour schemes\",\"Bug fixes to the fast parser\",\"Bug fixes to readline merged from v2.2.1200 (issue #362)\"]},\"104\":{\"h\":\"Non-User Facing / Maintenance Changes\",\"t\":[\"hcl and bson types now use ReadArray templates so their behavior should mimic JSON and YAML\",\"Fast parser is now aware of which pipe token (eg |, ->, =>, ?) is used\",\"Unit test concurrency fix\",\"New tests written for the fast parser\",\"Refactored code around hint text and completions to allow for a potential new UI feature to be built in the future\",\"Updated documentation\",\"Published: 26.09.2021 at 11:33\"]},\"105\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"method: Define a methods supported data-types\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"106\":{\"h\":\"What's new in murex v2.4 - Change Log\",\"t\":[\"This release introduces a strict mode for variables, new builtin, performance improvements, and better error messages; plus a potential breaking change\",\"There are a number of new features in this release\"]},\"107\":{\"h\":\"Breaking Changes:\",\"t\":[\"mkarray (a et al) no longer returns an error if the start and end ranges are the same. Instead it returns an array of 1 value.\"]},\"108\":{\"h\":\"User Facing Changes:\",\"t\":[\"Strict variables now supported (like set -u in Bash). This will mean any variables passed that haven't been initialized beforehand will cause that pipeline to fail. Currently this is opt in, a future release of Murex will flip that and make it opt out. So take this opportunity to enable it in your ~/.murex_profile and test your scripts. Enable this via config:\",\"<pre><code>config: set proc strict-vars true</code></pre> This feature was requested in [issue #380](https://github.com/lmorg/murex/issues/380). \",\"New builtin: datetime. This builtin allows you to convert date and/or time strings of one format into strings of another format. datetime is a supercharged alternative to the UNIX command date aimed at making scripting easier.\",\"mkarray (a et al) now supports dates. eg [01-Jan-20..05-May-21]. If no start nor end date appears then mkarray assumes range starts or ends at current date.\",\"openagent profile for image data types has been improved. Murex now better supports tmux and iTerm2.\",\"runtime --config now displays FileRef for every set as well as define, named FileRefSet and FileRefDefine respectively. So you can now easily trace where global config is being set and defined.\",\"Better error messages in the interactive terminal.\",\"Prompt now defaults to only displaying current directory rather than the full path. You can revert this change by adding your own prompt in config. eg:\",\"<pre><code>config: set shell prompt { out \\\"{RESET}{YELLOW}${pwd_short} {RESET}» \\\" } config: set shell prompt-multiline { let len = ${pwd_short -> wc -c} - 1 printf \\\"%${$len}s » \\\" $linenum }</code></pre> \",\"Parser updated to better support multiline pipelines where the newline is escaped and a comment exists after issue #379. This only applies to shell scripts, the interactive terminal hasn't yet been updated to reflect this change.\",\"Fixed regression bugs with autocomplete parameters that affected some dynamic blocks.\",\"readline now caches syntax highlighting and hint text to improve the responsiveness of the interactive terminal. This is set to a hard limit of 200 cached items however that will be a configurable metric in a future release. Also planned for the future is caching autocompletion suggestions.\",\"Loading message added for the default profile, ie the one that is compiled into and thus shipped with Murex.\",\"Fixed bug with fid-list and jobs where they were outputting the p.Name struct rather than p.Name.String(). This lead to the process name appearing garbled under some circumstances.\",\"{BG-BLUE} emitted the wrong ANSI escape code, this has been corrected.\",\"Several readline bug fixes.\"]},\"109\":{\"h\":\"Non-User Facing / Maintenance Changes\",\"t\":[\"Thread safe copying of parameters upon fork. The previous code never actually generated any race conditions and I don't think ever could. However it was ambiguous. This new code makes the copy more explicit and appears to have also brought some minor performance improvements in benchmarks too.\",\"Behavioural test framework has been refactored to make it easier to add new behavioural tests.\",\"Lots of new tests added.\",\"Updated documentation.\",\"Published: 09.12.2021 at 08:00\"]},\"110\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"FileRef: How to track what code was loaded and from where\",\"Modules and Packages: An introduction to Murex modules and packages\",\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"config: Query or define Murex runtime settings\",\"datetime: A date and/or time conversion tool (like printf but for date and time values)\",\"fid-list: Lists all running functions within the current Murex session\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"open: Open a file with a preferred handler\",\"openagent: Creates a handler function for `open\",\"runtime: Returns runtime information on the internal state of Murex\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"111\":{\"h\":\"What's new in murex v2.5 - Change Log\",\"t\":[\"This release introduces a number of new builtins, fixes some regression bugs and supercharges the select optional builtin (which I plan to include into the core builtins for non-Windows users in the next release).\",\"Features:\",\"alter now supports --sum where structures are merged and numeric values are added together\",\"New builtin count. This has deprecated len however len will stick around as an alias for backwards compatibility\",\"New operators added to let: +=, -=, /=, *=\",\"New builtin addheading for adding headings to lists\",\"Compiled profile will now always execute even if Murex flags set to ignore the modules/user profile. This is so that aliases like len get set and thus Murex can still move forward with changes to builtins but without breaking backwards compatibility\",\"autocomplete now passes ISMETHOD variable to dynamic completions so those dynamic completions are aware if a command requesting auto-completion suggestions is being invoked as a method (mid-pipeline) or function (start of a pipeline)\",\"Index, [, now supports inlining element, [[, lookups. eg [ a b [/map/c] ]\",\"Dynamic auto-completions that include @IncFiles or @IncDirs will now automatically append files and/or directories to their auto-completion suggestions\",\"New autocomplete directives: IncExeAll (like IncExePath but includes builtins, functions, aliases), IncManPage (include results from the man page parser -- usually suppressed when autocomplete config is set)\",\"Disabled 'Loading default profile' message -- this was always pretty redundant but now that the compiled profile is being loaded all the time (eg murex -c 'command' or when called in a shebang), it's also now ugly too\",\"select now supports passing a file in the FROM syntax. eg select * FROM ./example.csv. The caveat here is this breaks currently auto-complete on column names\",\"select now supports multiple tables using either named pipes (eg select * FROM <table1>, <table2>) or variables (eg select * FROM \\\\$table1, \\\\$table2) passed in the FROM syntax. Variables should be escaped and you cannot mix and match between named pipes, file names nor variables. You can use any number of tables from 1 to 2^63-1 (64bit systems) or 1 to 2^31-1 (32bit systems). Which should be more than enough 😉\",\"config option for select to define default output data type where multiple tables are imported\",\"Lots of new and updated documentation!\",\"Non-user facing changes (internal changes to the Murex code base):\",\"open functions can now be called by other functions to take advantage of auto-typing and auto gunzip etc.\",\"tmp.Close() should return err. This isn't a bug but it might catch future bugs\",\"LazyLogging created to speed up writing tests against data structures\",\"utils/List package created to handle list / array / map functions. Also makes testing more complex routines easier\",\"Bug fixes:\",\"Regression bug fixed where prepend was invoking append\",\"streams.ReadCloser not setting context\",\"parameters.StringArray() should copy values instead of a pointer to ensure the underlying parameters are immutable\",\"Published: 12.02.2022 at 16:16\"]},\"112\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"count: Count items in a map, list or array\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"pipe: Manage Murex named pipes\",\"select: Inlining SQL into shell pipelines\",\"set:\\nDefine a local variable and set it's value\"]},\"113\":{\"h\":\"What's new in murex v2.6 - Change Log\",\"t\":[\"This update has introduced a potential breaking change: variables now need to be defined before usage otherwise the commandline will fail. Read notes to learn how to disable this feature where needed. Also included in this release is the select command as part of the standard build.\",\"Breaking Change:\",\"strict-vars is enabled by default. This means if a variable doesn't exist / hasn't been instantiated then your command will fail. You can disable this by putting config: set proc strict-vars false inside any affected functions and/or in your ~/.murex_profile\",\"Features:\",\"select builtin now added to the default build. This built in will stream tabulated data into an in memory sqlite3 database and take SQL arguments to query that data. Thus allowing you to inline SQL queries as part of your native command line. This addition will add complications for anyone building from source on Windows. If you are a Windows user you are recommended to use WSL or, if you desperately need to use Murex natively on Windows, download the appropriate per-compiled binary from the downloads page\",\"When used in WSL, any Windows mounts included in $PATH will now be subject to the same inclusion rules as Windows file systems when Murex is used in Windows. This means only executables (ie files with .exe, amongst other, extensions are present). This has dramatically cleaned up autocomplete suggestions when running Murex in WSL.\",\"New autocomplete directive: FileRegexp. Use this if you want to return only files where the file name matches a defined pattern (eg only .txt files: \\\\.txt$)\",\"HTTP client (as used by get, getfile, post, open, etc) supports additional logic with dynamically guessing the correct data type to assign to STDOUT where the Content-Type hasn't been mapped. Any Content-Type with a +json suffix will be assumed to be json data type\",\"getfile output has been revamped. If STDOUT is a TTY then you'll now see a progress bar\",\".tfstate (Terraform state files) have been added to supported JSON extensions\",\"~/.ssh/config hosts have been added to SSH (et al)'s autocomplete suggestions\",\"murex-package: reload now only reloads packages, not .murex_preload nor .murex_profile`\",\"website tweaks: updated INSTALL doc, CSS fixes\",\"debug message added to warn when fork FIDs are being killed\",\"Non-user facing changes (internal changes to the Murex code base):\",\"Additional tests\",\"Older function definitions replaced with the newer (correct) way to define functions and methods. This allows for greater discovery in the interactive terminal\",\"Root unit tests finish quicker\",\"Bug fixes:\",\"HTTP client (as used by get, getfile, post, open, etc) wasn't breaking down the Content-Type header correctly. This only affected unknown MIME types where Murex had to guess the correct data type to assign to STDOUT. This is an edge case bug.\",\"while, when used without a separate parameter for the conditional logic, was buffering the STDOUT for each loop and outputting it after that iteration had ended. while now uses a \\\"tee\\\" stdio writer which means it can stream STDOUT while the iteration is in progress Synonyms:\",\"Published: 26.02.2022 at 18:33\"]},\"114\":{\"h\":\"See Also\",\"t\":[\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"select: Inlining SQL into shell pipelines\",\"while:\\nLoop until condition false\"]},\"115\":{\"h\":\"What's new in murex v2.7 - Change Log\",\"t\":[\"This update has introduced another potential breaking change for your safety: zero length arrays now fail by default. Also errors inside subshells will cause the parent command to fail if ran inside a try or trypipe block.\",\"Breaking Changes:\",\"zero length arrays returned from subshells (eg echo @{g this-file-does-not-exist}) should fail by default, like unset variables. This is enabled by default but can be disabled via config: set proc strict-arrays false\",\"autoglob should fail if it doesn't match any results. eg @g echo this-file-does-not-exist.*\",\"Subshells should fail parent command when used inside try and trypipe blocks. eg try { echo ${false} }\",\"Features:\",\"function now supports defining parameters\",\"Added support fro && eg do-something && do-something-else for chaining successful commands\",\"Added support for || eg do-something || do-something-else for chaining unsuccessful commands\",\"Added support for writing to the terminal emulator's titlebar via config: set shell titlebar-func { block }\",\"titlebar-func can also be written to your tmux window title via config: set shell tmux-echo true.\",\"New reserved variable: $HOSTNAME\",\"New reserved variables: $1 (and upwards) which correlates to the scope's parameter index. $1 is the functions first parameter. $2 is the second. $13 is the thirteenth.\",\"New reserved variable: $0 which contains the function name\",\"New event: onCommandCompletion (this is experimental and subject to change in the next release)\",\"Macro variables. eg echo Hello ^$name will prompt the user to enter a name. Macro variables are only support in the REPL\",\"read now supports flags (eg default option, etc) to allow for a better experience in shell scripting\",\"Minor Changes:\",\"You can now overwrite onKeyPress events. This no longer produces an error forcing you to remove the old event before adding the new one\",\"Autocompletion suggestions shouldn't be sorted is results include paths (improves the ordering of autocompletion suggestions)\",\"Autocompletion suggestions for openagent builtin\",\"Autocompletion suggestions for hashtags\",\"Test counts re-added to website\",\"Windows should show file extensions by default in autocompletion results\",\"Bug Fixes:\",\"Fix inverted logic on forceTTY: config: get proc force-tty false set by default, which then proxies STDERR and prints them in red\",\"ctrl+c (^c) now currectly sends SIGTERM rather than just ending the child process\",\"Better handling of SIGTERM\",\"SIGTSTP isn't working. Switched to SIGSTOP when (^z) doesn't\",\"Fix panic in event onFilesystemChange where fileRef is not getting passed correctly\",\"Fix panic in event onFilesystemChange where path is zero length string\",\"Some improvements to variable previews in the REPL\",\"count should check if it is a method\",\"AST cache now checked more regukarly. This is to reduce the risk of memory leaks during fuzz or load testing\",\"murex-docs still referred to len builtin. That should be changed to count\",\"Lots of fuzzing added -- a few edge case bugs discovered\",\"Published: 15.05.2022 at 22:49\"]},\"116\":{\"h\":\"See Also\",\"t\":[\"And (&&) Logical Operator: Continues next operation if previous operation passes\",\"Or (||) Logical Operator: Continues next operation only if previous operation fails\",\"Reserved Variables: Special variables reserved by Murex\",\"@g (autoglob) : Command prefix to expand globbing (deprecated)\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"function: Define a function block\",\"openagent: Creates a handler function for `open\",\"read:\\nread a line of input from the user and store as a variable\"]},\"117\":{\"h\":\"What's new in murex v2.8 - Change Log\",\"t\":[\"This release comes with a number of experimental but stable features that might eventually become standard practice. The features are there to use if you with but adjacent from the older code so there is zero risk in updating to this version.\",\"Breaking Changes:\",\"None\",\"Features:\",\"New data-type jsonc (Concatenated JSON). This is an experimental parser for reading multiple JSON documents in a single file or stream. The expectation is that it will eventually replace jsonl (jsonlines) and possibly even the default json data-type\",\"Autocomplete can now split on =. However this is an experimental feature\",\"New autocomplete directive: Goto. This is an experimental way to add a little more structure to autocomplete definitions without resorting to using dynamic code everywhere\",\"autocomplete directive FlagValues now supports two values: \\\"*\\\" and \\\"\\\". These define default properties regardless of the flag used\",\"Minor Changes:\",\"Unmatched records in index ([) when parsing a table now produces the same configurable behavior (erroring by default but which can be disabled) as when using index against an object\",\"Autocompletion suggestions for yarn\",\"Data-type field in function is now optional\",\"Lots of improvements to the docs\",\"Bug Fixes:\",\"$MyVar[[/path/to/element]] now behaves the same when used infixed as it did when used as a function\",\"Published: 23.05.2022 at 22:23\"]},\"118\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"autocomplete: Set definitions for tab-completion in the command line\",\"function: Define a function block\",\"jsonc:\\nConcatenated JSON\"]},\"119\":{\"h\":\"What's new in murex v2.9 - Change Log\",\"t\":[\"This release focuses on testing and REPL usability improvements but also includes updates several new run modes to make error handling easier in larger scripts.\",\"Breaking Changes:\",\"None\",\"Features:\",\">> redirect (append to file) operator added. This is just syntactic sugar for -> >>. To redirect and overwrite/truncate a file use |> rather than >\",\"Support for automatic globbing in the commandline. This has to be enabled via config: set shell auto-glob true and you will get prompted for each glob. Any globs inside blocks will be ignored and this only works on the interactive prompt (ie not in scripts or background processes) -- these limitations are not a bug but by design\",\"Dynamic autocomplete suggestions are now cached for 5 seconds by default. This cache can be changed via the CacheTTL directive in autocomplete\",\"Additional scoping for try and trypipe. You can define the scope as being an entire function or a module. If set for an entire module then any functions, autocompletions, etc inside that module will inherit that try or trypipe mode automatically. These are set via the new builtin runmode\",\"New reserved variable $PWD (this was just a global variable previously)\",\"Additional flags added to range, @[\",\"New builtin, man-get-flags. This exposes Murex's internal man page parser to the command line scripts\",\"Binaries now produced for ARM64 Windows\",\"Minor Changes:\",\"The order in which namespaces are looked up has been altered since privates should be resolved before functions\",\"Updated autocomplete for homebrew, brew\",\"New autocomplete for AWS CLI, aws\",\"New autocomplete for yarn, yarn\",\"Murex unit tests should report progressively rather than everything upon completion\",\"Minimum recommended version of Go has been raised to 1.15. This is due to some bugs in dependencies when running tests against v1.13 and v1.14. Murex will technically compile and work on them but it not worth my time debugging why the CircleCI tests fail for those versions given their age\",\"Vendor directory removed. This isn't really needed now support is focused on newer versions of Go\",\"Website: New 404 error\",\"Website: search bar added\",\"The start of a massive push towards upping the test coverage\",\"Lots of improvements to the docs\",\"Bug Fixes:\",\"FileRef module string for functions forked from the REPL changed to murex/shell to bring it inline with the naming convention of other modules\",\"Published: 15.07.2022 at 20:35\"]},\"120\":{\"h\":\"See Also\",\"t\":[\"Append Pipe (>>) Token: Redirects STDOUT to a file and append its contents\",\"Reserved Variables: Special variables reserved by Murex\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"function: Define a function block\",\"murex-docs: Displays the man pages for Murex builtins\",\"private: Define a private function block\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"121\":{\"h\":\"What's new in murex v3.0 - Change Log\",\"t\":[\"This is a major release that brings a significant number of changes and improvements, including a complete overhaul of the parser. Backwards compatibility is a high priority however these new features bring greater readability and consistency to shell scripting. So while the older syntax remains for compatibility, it is worth migrating over to the newer syntax for all new code being written\",\"Breaking Changes:\",\"Optional builtin removed: bson. This was disabled by default and likely never used. So it has been removed to reduce Murex's testing footprint. It can easily be re-added if anyone does actually use it\",\"Optional builtin removed: coreutils. This was actually enabled by default for Windows builds. However rewriting Linux/UNIX coreutils for Windows support is a massive project in its own right and with the maturity of WSL there's almost no reason to run Murex on \\\"native Windows\\\". So the coreutils builtin has been dropped to allow us to focus on the responsibilities of the shell\",\"Features:\",\"Support for expressions, eg 5 * 5 or foobar = $foo + \\\"bar\\\", etc. This syntax can be used directly or specified specifically via the expr builtin\",\"New syntax sugar for creating JSON objects: %{ foo: bar }\",\"New syntax sugar for creating JSON arrays: %[ foo bar ]\",\"New syntax sugar for creating strings: %() (this is preferred over the, now deprecated, feature of parenthesis quotes)\",\"Ranges supported in [] (@[ is now deprecated)\",\"Support for multiline comments: /# comment #/. It is unfortunate this differs from C-style comments (/* comment */) but this has to be the case because /* is ambiguous for barewords in shells: is it a path and glob or a comment? Where as /# isn't a common term due to # denoting a comment\",\"If any processes pass null as a data type across the pipe, it will be ignored. This solves the problem where functions that don't write to STDOUT would still define the data type\",\"Config option auto-glob renamed to expand-glob, and now enabled by default\",\"Globbing exclusion list. This allows you to avoid annoying prompts when parameters shouldn't be expanded as globs by the shell (eg when using regular expressions). This can be managed via shell expand-glob-unsafe-commands option in config\",\"@g removed. It is no longer needed with expand-glob enabled by default\",\"New builtin: continue: skip subsequent processes in an iteration block and continue to next iteration\",\"New builtin: break: exit out of a block of code (eg in an iteration loop)\",\"Additional syntax for index ([): *1: 1st row, *A: 1st column\",\"New alias: help -> murex-docs. This brings Murex a little more inline with Bash et al\",\"pre-cache-hint-summaries now enabled by default after testing has demonstrated it doesn't have nearly as expensive footprint as first assumed\",\"Hitting TAB when nothing has been typed in the REPL will suggest past command lines\",\"^ autocompletion added\",\"getfile writes to disk if STDOUT is a TTY\",\"mkarray (eg ja) now writes an integer array if range is integers. eg ja: [1..3]. This change wouldn't affect a since that outputs as list of strings (for streaming performance reasons) rather than a data type aware document\",\"debug (method) output tweaked\",\"Improved error messages in a number places\",\"Revamped README / website landing page\",\"Non-User Facing / Maintenance Changes:\",\"Minimum Go version supported is now 1.17.x\",\"Main parser completely rewritten\",\"ReadArray API now requires a context.Context\",\"egrep references changed to grep -E to work around GNU grep deprecating support for egrep\",\"Added marshallers for boolean, null\",\"Variables.GetValue() now errors instead of returns nil when no variable set\",\"Additional tests. So many new tests added\",\"Lots of code refactoring\",\"Bug Fixes:\",\"regexp wasn't erroring if nothing was matched\",\"readline: fixed deadlock\",\"append and prepend now type aware (no longer converts all arrays into string arrays)\",\"foreach was setting variables as strings rather than honoring their original data type\",\"yarn autocompletion errors should be suppressed\",\"spellcheck missing break causing more occasionally incorrect instances of underlined words\",\"config wasn't passing data type when executing blocks via eval\",\"debug wasn't setting data type when used as a function\",\"macro variables don't re-prompt when the same variable is used multiple times\",\"Published: 31.12.2022 at 08:10\"]},\"122\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"break: terminate execution of a block within your processes scope\",\"config: Query or define Murex runtime settings\",\"continue: terminate process of a block within a caller function\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"foreach: Iterate through an array\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"murex-docs: Displays the man pages for Murex builtins\",\"prepend: Add data to the start of an array\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"123\":{\"h\":\"What's new in murex v3.1 - Change Log\",\"t\":[\"This release includes mostly bug fixes and new experimental features which are opt into. To enable all experimental features, set the environmental variable MUREX_EXPERIMENTAL to any value. Or you can enable specific features individually via `config\",\"Breaking Changes:\",\"None\",\"Features:\",\"default statement added to switch (this will deprecate catch, albeit catch will remain supported for compatibility)\",\"Option to change start directory: config: set shell start-directory $path (where $path is the working directory you wish to start the shell in)\",\"onCommandCompletion event no spawns a pty. This allows capturing of stdout while still presenting a tty to the executing process\",\"EXPERIMENTAL: preview files. This can be enabled via config: set shell preview-enabled true\",\"EXPERIMENTAL: preview images. This can be enabled via config: set shell preview-images true\",\"EXPERIMENTAL: tty buffer. This can be enabled via config: set shell tty-buffer-enabled true\",\"ctrl+r has been tweaked to make it more user friendly\",\"Long overdue SIGWINCH signal handler to reflow after terminal resized\",\"Lots of improvements to documentation\",\"Non-User Facing / Maintenance Changes:\",\"none\",\"Bug Fixes:\",\"re-added columns data-type to fix jobs builtin\",\"added bang alternatives to the glob exception list\",\"added missing support for && tokens in expressions\",\"![] can now produce empty maps\",\"fixed regression bug in file pipe mutex\",\"fixed missing bounds check in statement parser\",\"Published: 12.02.2023 at 21:22\"]},\"124\":{\"h\":\"See Also\",\"t\":[\"Rosetta Stone: A tabulated list of Bashism's and their equivalent Murex syntax\",\"switch:\\nBlocks of cascading conditionals\"]},\"125\":{\"h\":\"What's new in murex v4.0 - Change Log\",\"t\":[\"This release sees significant improvements for use with non-latin characters in both the interactive prompt and shell scripting. It introduces new syntax to make working with structured data even easier than before. As well as new data types and smoother user experience.\"]},\"126\":{\"h\":\"Breaking Changes\",\"t\":[\"$PWD is no longer a str. If you need to parse $PWD as a string then you should out: $PWD or use ${pwd}\",\". is now a valid bareword character for variables. This will break any instances in code that contain something like out $hello. however you can now use out $(hello). syntax for safer string infixing\"]},\"127\":{\"h\":\"Features\",\"t\":[\"dot notation added for variables which allow accessing and writing to object properties. eg $json.array.index\",\"added support variable encapsulation via $() to avoid variable barewords from leaking into other values when infixed. eg $(foobar) is the same as $foobar (read more)\",\"variable names can now be Unicode, eg $(比如) = \\\"举手之劳就可以使办公室更加环保，比如，使用再生纸。\\\" (read more)\",\"Unicode wide characters are properly handled in readline\",\"new data type path that is an object\",\"new data type paths\",\"support for lambdas added to variables: eg @array[{ function }]\",\"readline [ctrl]+[f] now supports word matching as well as regexp (read more)\",\"readline [ctrl]+[f] now supports glob filters (eg *.txt) too (read more)\",\"$ENV and $GLOBAL objects (deprecates the need for global and export)\",\"improved error messages in expressions\",\"scalars can be used as assignees in expressions, eg $foo = \\\"bar\\\"\",\"added -i flag to ssh autocompletion\",\"readline prompts are now buffered to reduce cursor flickering\"]},\"128\":{\"h\":\"Non-User Facing / Maintenance Changes:\",\"t\":[\"backend support added for data types to be dynamic objects\",\"updated autocompletion code for docker and git\"]},\"129\":{\"h\":\"Bug Fixes:\",\"t\":[\"better wide character support in auto completion suggestions\",\"function parameters default and comment fields are no longer order dependent\",\"better string parsing for barewords inside arrays and objects\",\"ahead of time hint caching now done on demand per hint page rather than against every executable upon Murex start up\",\"new lines should be ignored in %{}\",\"bareword true and false should be converted to boolean in %{}\",\"autocomplete suggestions are now dedup'ed when delayed results return similar suggestions to fast results\",\"various preview pane bug fixes\",\"support for ANSI escape sequences in experimental (disabled by default) TTY buffer\",\"correction to count docs\",\"error not handled in regexp expression matches, `=~\",\"Published: 26.03.2023 at 17:50\"]},\"130\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"String ($) Token: Expand values as a string\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"count: Count items in a map, list or array\",\"function: Define a function block\",\"create-object:\",\"path:\",\"paths:\"]},\"131\":{\"h\":\"What's new in murex v4.1.x - Change Log\",\"t\":[\"The previous releases have brought significant advancements to Murex's syntax but at the cost of longer gaps between releases. So the 4.1.x versions will be shorter releases but focusing on bug fixes. The 4.1.x release notes will be appended to murex.rocks changelog and available on Github releases too\"]},\"132\":{\"h\":\"v4.1.7300\"},\"133\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"134\":{\"h\":\"Features\",\"t\":[\"generic * data type marshaller can now marshal maps (#593)\",\"range can count from end when supplied with a negative index (read more)\"]},\"135\":{\"h\":\"Bug Fixes\",\"t\":[\"fexec private should inherit module string from the owners module (#600)\",\"source-ed files should be loaded into a module of a similar name to the parent module\",\"new code blocks, {, should force a new parameter when following a closing block, } (#603)\",\"fixed problem with encapsulated variables, eg $(PWD), not getting parsed correctly by syntax highlighter\"]},\"136\":{\"h\":\"v4.1.6140\"},\"137\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"138\":{\"h\":\"Features\",\"t\":[\"readline: blinking cursor added to fuzzy find. This is just a very minor UI change to make it easier to tell where keyboard input would be updating\",\"git autocomplete now includes git aliases\"]},\"139\":{\"h\":\"Bug Fixes\",\"t\":[\"merge operator (<~) should unmarshal strings\",\"scalars available in all assigns (eg +=, -=, etc)\",\"lazy assigns allowed when strict types is set to false. Meaning merge operations and += (et al) will work even if the left scalar is unset\",\"suppress !!! style warnings upon ^C\",\"strip : colon from command name when command string is passed from the pre-parser (#601)\"]},\"140\":{\"h\":\"v4.1.5200\"},\"141\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"142\":{\"h\":\"Features\",\"t\":[\"Merge into operator added: ~>\",\"f: new flag i -- deprecates ? flag due to ? being a glob pattern. However ? will remain supported\",\"$PREFIX variable passed to Dynamic and DynamicDesc functions in autocomplete -- includes the partial term (read more)\",\"user@ completion support for ssh\",\"Updated autocomplete docs (read more)\",\"command line is included in error message when error running inside another module\",\"errors within other modules now include the command line string to make debugging even easier\",\"lambdas success/fail criteria is now driven by the exitnum rather than stdout data type. This allows it to be much more robust. In addition $. is now mutable\"]},\"143\":{\"h\":\"Bug Fixes\",\"t\":[\"f improved help message (previously some items displayed code numbers instead of descriptions)\",\"readline: hint text flicker removed\"]},\"144\":{\"h\":\"v4.1.4200\"},\"145\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"146\":{\"h\":\"Features\",\"t\":[\"Merge operator added: <~\"]},\"147\":{\"h\":\"Bug Fixes\",\"t\":[\"readline: fixed out of bounds errors when calculating unicode cell positions\",\"readline: fixed panic raised when vim key p is used on an empty buffer\",\"readline: fixed bug where vim mode became unavailable / esc didn't work as expected. This was due to autocompletion find (^f, ^r) being launched before tab completions and state not being handled correctly\"]},\"148\":{\"h\":\"v4.1.3010\"},\"149\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"150\":{\"h\":\"Features\",\"t\":[\"lambda support added to piped indexes, ie example -> [{ lambda }], to mirror existing @example[{ lambda }] functionality\",\"--autocomplete flag added to read\"]},\"151\":{\"h\":\"Bug Fixes\",\"t\":[\"application specific environmental variables (eg <env:FOO=BAR>) were not getting set\",\"cast now checks if it is a method. Previously was piping regardless\",\"fixed by where nested maps would overwrite when altered with --merge. Now they merge as expected\",\"alter panics are caught issue (#536)\",\"remove debugging symbol in deprecated math builtin\"]},\"152\":{\"h\":\"v4.1.1100\"},\"153\":{\"h\":\"Breaking Changes\",\"t\":[\"Any code that expects formap values to be strings despite that value being a different primitive from the originating object. However this type of code would be an anti-pattern so we shouldn't expect much, if any, code written like this\"]},\"154\":{\"h\":\"Features\",\"t\":[\"formap values are now data type aware. You no longer need to cast values. Keys are still string only and the intention is to keep them this way\"]},\"155\":{\"h\":\"Bug Fixes\",\"t\":[\"improved error messages around a few internal APIs\",\"micro optimisations in string parsing (minor order to operations, now converting points at a slightly later stage. This adds zero impact on code complexity and almost zero code refactoring but results in slightly less memory getting copied about)\"]},\"156\":{\"h\":\"v4.1.10\"},\"157\":{\"h\":\"Breaking Changes\",\"t\":[\"None\"]},\"158\":{\"h\":\"Features\",\"t\":[\"No new features\"]},\"159\":{\"h\":\"Bug Fixes\",\"t\":[\"code references in error messages are cropped to terminal width\",\"error handling around multiple chained but incompatible tokens (#566)\",\"Published: 04.06.2023 at 10:44\"]},\"160\":{\"h\":\"What's new in murex v4.2 - Change Log\",\"t\":[\"Murex usage has raised considerably in recent weeks. This release addresses a number of feature requests and bugs raised on Github.\"]},\"161\":{\"h\":\"Breaking Changes\",\"t\":[\"none\"]},\"162\":{\"h\":\"Features\",\"t\":[\"new flag in foreach: --step <int>. This allows the foreach to jump indexes at a time. When used, all the lines jumped are merged into a JSON array and that is passed to the foreach nested code block\",\"new alias builtin => fexec builtin. This was added to bring more familiarity to those coming from Bash et al (#608)\",\"on Darwin, Homebrew defaults are imported, just like you'd expect them to be from any other shell\",\"new hotkeys (#611) (#613):\",\"ctrl+a: jump to beginning of line\",\"ctrl+e: jump to end of line\",\"alt+f: jump forwards a word at a time\",\"alt+b: jump backwards a word at a time\",\"ctrl+k: clear line after cursor position\",\"ctrl+l: clear entire screen\",\"ctrl+g: same as esc\",\"open builtin should fallback to system default if type unknown (#620)\",\"pre-prompt-func added to config. Block runs before the interactive prompt is displayed\",\"post-prompt-func added to config. Block runs after the interactive prompt has been exited but before any command lines have been executed\",\"auto-cd option added to config: config: set shell auto-cd true. This allows you to traverse directories without having to prefix cd. By default it is disabled\",\"Meta values added to foreach, formap, and while. Meta values are a $. variable that holds meta-information about the running block, such as the number of iterations in a loop\",\"command alias for exec (for familiarity with Bash)\",\"builtin alias for fexec builtin (for familiarity with Bash)\"]},\"163\":{\"h\":\"Bug Fixes:\",\"t\":[\"brace encapsulated variables, eg $(foobar), now autocomplete as expected\",\"improvements to inlining images in iTerm2 when shell running on top of tmux. It still doesn't work reliably but this is an issue with tmux rather than Murex\",\"method forwards exceptions rather than errors. This behaviour has been changed to surface issues as errors\",\"profile_preload.mx added to profile defaults. This will be loaded before any of the OS-specific profiles\",\"missing rune length check causing the shell to panic (#617)\",\"fixed deadlock in flag parsing\",\"zero length string title bars should be ignored (#614)\",\"minor improvements to documentation\",\"Published: 19.06.2023 at 23:15\"]},\"164\":{\"h\":\"See Also\",\"t\":[\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"alias: Create an alias for a command\",\"config: Query or define Murex runtime settings\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"method: Define a methods supported data-types\",\"open: Open a file with a preferred handler\",\"while:\\nLoop until condition false\"]},\"165\":{\"h\":\"What's new in murex v4.3 - Change Log\",\"t\":[\"This brings improved support on Windows plus one breaking change from the previous release (v4.2)\"]},\"166\":{\"h\":\"Breaking Changes\",\"t\":[\"pre-prompt-func and post-prompt-func have been replaced with onPrompt events: event onKeyPress example=before { ... }\"]},\"167\":{\"h\":\"Features\",\"t\":[\"New events, onPrompt, triggered when the interactive prompt is at various stages\",\"Dynamic and DynamicDesc autocompletions can have their partial term prefix filter disabled ([read more])(https://murex.rocks/docs/commands/autocomplete.html#ignoreprefix-boolean-false) (discussion)\",\"New autocompletions: gping\"]},\"168\":{\"h\":\"Bug Fixes:\",\"t\":[\"Improved Windows support. Arrow keys and other special keys are now handled correctly (#630)\",\"Fix ctrl+a offset by 1 error (#628)\",\"Published: 02.07.2023 at 09:55\"]},\"169\":{\"h\":\"See Also\",\"t\":[\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"onPrompt:\\nChanges in state of the interactive shell\"]},\"170\":{\"h\":\"v4.4 - Change Log\",\"t\":[\"v4.4 features two new builtins, improvements in testing, and automatic generation of autocompletion suggestions backed by man page parsing. Plus there has been a lot of focus on improving readline responsiveness\"]},\"171\":{\"h\":\"v4.4.8000\"},\"172\":{\"h\":\"Breaking Changes\",\"t\":[\"alt+1..9 hotkeys replaced with shift+f1..f12. Changed because alt+numeric rarely worked (read more)\"]},\"173\":{\"h\":\"Features\",\"t\":[\"None\"]},\"174\":{\"h\":\"Bug Fixes\",\"t\":[\"@IncManPagesautocomplete value for Dynamic directive renamed to @IncManPage, like the IncManPage directive\",\"readline: render glitch fixed with delayed completions racing against hint text updates\",\"readline: render glitches fixed when buffers are not being reset correctly after preview box has, or should have, closed\",\"readline: man page preview now removes backspace characters correctly from UNIX docs\",\"readline: man page preview now more reliably scrolls to the right line when a flag is highlighted in autocompletion\",\"readline: preview now works for list views as well as grid views\"]},\"175\":{\"h\":\"v4.4.7000\"},\"176\":{\"h\":\"Breaking Changes\",\"t\":[\"preview-enabledconfig option removed. This actually doesn't break anything, just produces a warning. The config option was also undocumented and experimental\"]},\"177\":{\"h\":\"Features\",\"t\":[\"Preview is now considered stable. Press f1 while autocomplete is open to use (read more)\"]},\"178\":{\"h\":\"Bug Fixes\",\"t\":[\"readline: render glitch fixed with delayed path completions\",\"readline: excess white spaces removed from man page descriptions\"]},\"179\":{\"h\":\"v4.4.x\"},\"180\":{\"h\":\"Breaking Changes\",\"t\":[\"'Name' field dropped from onCommandCompletion interrupt (this field was never documented)\"]},\"181\":{\"h\":\"Features\",\"t\":[\"New builtin, round, which can perform rounding operations on numerical inputs (#630, read more)\",\"Vastly improved automatic man page parsing. Now descriptions are pulled alongside the flags and results are cached\",\"man-get-flags now includes a -d / --description flag to expose the improved man page parser\",\"New builtin, return, which exits a given function scope (eg function, private, Dynamic block in autocomplete, etc)\",\"Improved git autocompletions\",\"find autocompletions added\",\"builtin profiles are now imported as separate modules. This makes debugging easier\",\"/integrations directory added to Murex source, the aim of which is to make it easier for people to contribute autocompletions and other integrations with common command line tools (Github)\",\"readline: new word jump hotkeys ctrl+left / ctrl+right (PC)\",\"readline: new word jump hotkeys option+left / option+right (Mac)\"]},\"182\":{\"h\":\"Bug Fixes:\",\"t\":[\"test would always run first in any block, regardless of the preferred order of execution. This was because test (unit|state|config) required altering the execution state of the shell. The drawback was that test (run|define|report) would also run unexpectedly. This lead to hacks like try { test run * } to force the correct order of operations. Now the parameters of test are checked to determine when to execute the builtin.\",\"int types couldn't be compared against num types with >, >=, <, <= operators\",\"readline: ^d will not send EOF if line is not empty. The original behaviour was by design however after pressing ^d a few too many times when I intended to press ^f or ^r, I decided the original design was wrong\",\"FileRef wasn't being set in test. This caused some tests to fail if they called private functions\",\"Check ~/.ssh/config exists before trying to parse it in getHostsFile private (used for SSH and similar tools autocompletions)\",\"readline: lots of work done on speeding up redraws and overall responsiveness. eg buffered autocompletion menus\",\"readline: hint text should never be displayed if disabled via config\",\"readline: soft timeout halved (this can be overridden via config)\",\"readline: cropped autocompletion suggestions in gridded layout were one character too short (off by one error)\",\"Published: 18.07.2023 at 22:58\"]},\"183\":{\"h\":\"See Also\",\"t\":[\"FileRef: How to track what code was loaded and from where\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"function: Define a function block\",\"int: Whole number (primitive)\",\"man-get-flags: Parses man page files for command line flags\",\"num (number): Floating point number (primitive)\",\"onCommandCompletion: Trigger an event upon a command's completion\",\"private: Define a private function block\",\"return: Exits current function scope\",\"round: Round a number by a user defined precision\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"184\":{\"h\":\"Guide\"},\"185\":{\"h\":\"Highlight Features\"},\"186\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"187\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"188\":{\"h\":\"\",\"t\":[\"Table of Contents\",\"Download Links\",\"Darwin (macOS)\",\"BSD's\",\"DragonflyBSD\",\"FreeBSD\",\"NetBSD\",\"OpenBSD\",\"Linux\",\"Windows\",\"Solaris\",\"Plan 9\",\"Install Instructions\",\"Linux / UNIX / macOS Instructions\",\"Windows Instructions\"]},\"189\":{\"h\":\"Download Links\",\"t\":[\"Below are the instructions to download a pre-compiled binary via HTTPS. If you wish to install from source or use your preferred package manager, then please refer to the INSTALL page for further instructions.\",\"All files are approximately 6 MB in size (aside the Plan 9 builds which are 3 MB).\"]},\"190\":{\"h\":\"Darwin (macOS)\",\"t\":[\"The arm64 builds support the ARM-based M1 processor. Older Macs will need to run amd64. Murex is also available on Homebrew and MacPorts.\",\"murex-darwin-amd64.gz\",\"murex-darwin-arm64.gz\"]},\"191\":{\"h\":\"BSD's\"},\"192\":{\"h\":\"DragonflyBSD\",\"t\":[\"murex-dragonfly-amd64.gz\"]},\"193\":{\"h\":\"FreeBSD\",\"t\":[\"murex-freebsd-386.gz\",\"murex-freebsd-amd64.gz\",\"murex-freebsd-arm.gz\",\"murex-freebsd-arm64.gz\"]},\"194\":{\"h\":\"NetBSD\",\"t\":[\"murex-netbsd-386.gz\",\"murex-netbsd-amd64.gz\",\"murex-netbsd-arm.gz\",\"murex-netbsd-arm64.gz\"]},\"195\":{\"h\":\"OpenBSD\",\"t\":[\"murex-openbsd-386.gz\",\"murex-openbsd-amd64.gz\",\"murex-openbsd-arm.gz\",\"murex-openbsd-arm64.gz\"]},\"196\":{\"h\":\"Linux\",\"t\":[\"murex-linux-386.gz\",\"murex-linux-amd64.gz\",\"murex-linux-arm.gz\",\"murex-linux-arm64.gz\"]},\"197\":{\"h\":\"Windows\",\"t\":[\"These builds should be treated as experimental. Please use the Linux builds in WSL (Windows Subsystem for Linux) for a more stable experience on Windows.\",\"murex-windows-386.exe.zip\",\"murex-windows-amd64.exe.zip\",\"murex-windows-arm.exe.zip\"]},\"198\":{\"h\":\"Solaris\",\"t\":[\"This build should be treated as experimental however unlike the other experimental builds (Plan 9 and Windows), Solaris is at least POSIX compliant so expect fewer issues than on the non-POSIX platforms.\",\"murex-solaris-amd64.gz\"]},\"199\":{\"h\":\"Plan 9\",\"t\":[\"Plan9 is untested. The code compiles and it is syscall compatible with Plan9 operating systems, however you may experience bugs using Murex on Plan9. If you do encounter any issues then please raise them at: github.com/lmorg/murex/issues\",\"murex-plan9-386.gz\",\"murex-plan9-amd64.gz\",\"murex-plan9-arm.gz\"]},\"200\":{\"h\":\"Install Instructions\"},\"201\":{\"h\":\"Linux / UNIX / macOS Instructions\",\"t\":[\"Please download the appropriate .gz file from the list above, one that matches both your OS and CPU architecture.\",\"For example, to download a 64bit version for Linux:\",\"wget https://murex.rocks/bin/latest/murex-linux-amd64.gz gunzip murex-linux-amd64.gz chmod +x murex-linux-amd64 ./murex-linux-amd64 \",\"macOS builds are listed as darwin as per the name of Apple have given to their underlying OS.\",\"Most of these builds have received some level of user acceptance testing with Linux and macOS builds receiving the most attention, because that's what we use ourselves.\"]},\"202\":{\"h\":\"Windows Instructions\",\"t\":[\"Click the Windows link that matches your CPU architecture. Unzip using your preferred too then launch using your preferred console. Murex cannot be started via double clicking the executable -- it requires a starting from within an existing console session.\",\"Please also note that Windows support is also considered experimental. In part\\ndue to the lack of coreutils (as seen on Linux and UNIX) and in part due to\\nthe different underpinning technologies behind consoles / terminal emulators.\\nIf you do experience some wonky behavior then our recommendation is to run the\\nlinux-amd64 build for Linux on top of WSL. The instructions above will guide\\nyou through installing on Linux, WSL install instructions can be found at the\\nfollowing site: docs.microsoft.com/en-us/windows/wsl/install-win10\"]},\"203\":{\"h\":\"Install\"},\"204\":{\"h\":\"Supported Platforms\",\"t\":[\"Linux, BSD and macOS are fully supported, with other platforms considered experimental and/or having known limitations.\"]},\"205\":{\"h\":\"Pre-Compiled Binaries (HTTPS download)\",\"t\":[\"If you wish to download a pre-compiled binary then head to the DOWNLOAD page to select your platform.\"]},\"206\":{\"h\":\"Installing From A Package Manager\",\"t\":[\"Install Murex from your favorite package manager\"]},\"207\":{\"h\":\"Compiling From Source\",\"t\":[\"Prerequisites:\",\"You will need go (Golang) compiler, gcc (C compiler) and git installed as well as your $GOPATH environmental variable set.\",\"Go 1.18 or higher is required.\",\"These should be easy to install on most operating systems however Windows is a lot more tricky with regards to gcc. Please check with your operating systems package manager first but see further reading below if you get stuck.\",\"Further Reading:\",\"How to install Go\",\"How to install git\",\"How to install gcc\",\"How to set GOPATH\"]},\"208\":{\"h\":\"Installation From Source Steps\",\"t\":[\"The following instructions are assuming you're compiling on a POSIX-compatible system like Linux, BSD or macOS. Compiling from source is untested on Plan 9 (if you run into issues there then please use the pre-compiled binary for that platform) and Windows. In the case of Windows you may run into issues with the gcc installation and some of the commands below will need to be adapted (eg murex.exe used instead of ./murex).\",\"Compiling from source is not recommended unless you already have a strong understanding of compiling Go projects for your specific platform.\",\"Importing the source code:\",\"At present, Murex depends on being in a specific directory hierarchy for the tests to work and packages to import correctly. These instructions will talk you through creating that initial structure ready to import the source into. Experienced users in Go may opt to ignore some of these steps and run go get -u github.com/lmorg/murex instead. While this should work in most cases, it is difficult to run automated tests to ensure any updates doesn't break the go get import tool. And thus that approach is not officially supported. If you are in any doubt, please follow the git clone process below.\",\"First create the directory path and clone the source into the appropriate directory structure.\",\"mkdir -p $GOPATH/src/github.com/lmorg/murex cd $GOPATH/src/github.com/lmorg/murex git clone https://github.com/lmorg/murex . \",\"At this point you can add and remove any optional builtins by following the instructions on this located further down this document. This is entirely optional as Murex attempts to ship with sane defaults.\",\"Compile the code:\",\"go build github.com/lmorg/murex \",\"Test the executable (optional stage):\",\"./murex -c 'g: behavioural/*.mx -> foreach: f { source $f }; try {test: run *}' \",\"Start the shell:\",\"./murex \"]},\"209\":{\"h\":\"Including Optional Builtins\",\"t\":[\"Some optional builtins will be included by default, however there may be others you wish to include which are not part of the default build (such as qr). To add them, copy (or symlink) the applicable include file from builtins/import_src to builtins/import_build.\",\"A tool will be introduced in a later version to automate this.\"]},\"210\":{\"h\":\"External Dependencies (Optional)\",\"t\":[\"Some of Murex's extended features will have additional external dependencies.\",\"aspell: This is used for spellchecking. Murex will automatically enable or disable spellchecking based on whether aspell can be found in your $PATH. http://aspell.net\"]},\"211\":{\"h\":\"Recommended Terminal Typeface\",\"t\":[\"This is obviously just a subjective matter and everyone will have their own\\npersonal preference. However if I was asked what my preference was then that\\nwould be Hasklig. It's a clean typeface\\nbased off Source Code Pro but with a few added ligatures - albeit subtle ones\\ndesigned to make Haskell more readable. Those ligatures also suite Murex\\npretty well. So the overall experience is a clean and readable terminal.\"]},\"212\":{\"c\":[\"Install\"]},\"213\":{\"h\":\"Getting Started\"},\"214\":{\"h\":\"Introduction\",\"t\":[\"Murex is a typed shell. By this we mean it still passes byte streams along POSIX pipes (and thus will work with all your existing command line tools) but in addition will add annotations to describe the type of data that is being written and read. This allows Murex to expand upon your command line tools with some really interesting and advanced features not available in traditional shells.\",\"POSIX is a set of underlying standards that Linux, macOS and various other operating systems support. Most typed shells do not work well with existing commands whereas Murex does.\"]},\"215\":{\"h\":\"Read–Eval–Print Loop\",\"t\":[\"If you want to learn more about the interactive shell then there is a dedicated document detailing Murex's REPL features.\"]},\"216\":{\"h\":\"Barewords\",\"t\":[\"Shells need to balance scripting with an efficient interactive terminal interface. One of the most common approaches to solving that conflict between readability and terseness is to make heavy use of barewords. Barewords are ostensibly just instructions that are not quoted. In our case, command names and command parameters.\",\"Murex also makes heavy use of barewords and so that places requirements on the choice of syntax we can use.\"]},\"217\":{\"h\":\"Expressions and Statements\",\"t\":[\"An expression is an evaluation, operation or assignment, for example:\",\"» 6 > 5 » fruit = %[ apples oranges bananas ] » 5 + 5 \",\"Expressions are type sensitive\",\"Whereas a statement is a shell command to execute:\",\"» echo \\\"Hello Murex\\\" » kill 1234 \",\"All values in a statement are treated as strings\",\"Due to the expectation of shell commands supporting bareword parameters, expressions have to be parsed differently to statements. Thus Murex first parses a command line to see if it is a valid expression, and if it is not, it then assumes it is an statement and parses it as such.\",\"This allow expressions and statements to be used interchangeably in a pipeline:\",\"» 5 + 5 | grep 10 \"]},\"218\":{\"h\":\"Functions and Methods\",\"t\":[\"A function is command that doesn't take data from STDIN whereas a method is any command that does.\",\"echo \\\"Hello Murex\\\" | grep \\\"Murex\\\" ^ a function ^ a method \",\"In practical terms, functions and methods are executed in exactly the same way however some builtins might behave differently depending on whether values are passed via STDIN or as parameters. Thus you will often find references to functions and methods, and sometimes for the same command, within these documents.\"]},\"219\":{\"h\":\"The Bang Prefix\",\"t\":[\"Some Murex builtins support a bang prefix. This prefix alters the behavior of those builtins to perform the conceptual opposite of their primary role.\",\"For example, you could grep a file with regexp 'm/(dogs|cats)/' but then you might want to exclude any matches by using !regexp 'm/(dogs|cats)/' instead.\",\"The details for each supported bang prefix will be in the documents for their respective builtin.\"]},\"220\":{\"h\":\"Rosetta Stone\",\"t\":[\"If you already know Bash and looking for the equivalent syntax in Murex, then our Rosetta Stone reference will help you to translate your Bash code into Murex code.\"]},\"221\":{\"h\":\"Basic Syntax\"},\"222\":{\"h\":\"Quoting Strings\",\"t\":[\"It is important to note that all strings in expressions are quoted whereas strings in statements can be barewords.\",\"There are three ways to quote a string in Murex:\",\"'single quote': use this for string literals (read more)\",\"\\\"double quote\\\": use this for infixing variables (read more)\",\"%(brace quote): use this for nesting quotes (read more)\"]},\"223\":{\"h\":\"Code Comments\",\"t\":[\"You can comment out a single like, or end of a line with #:\",\"# this is a comment echo Hello Murex # this is also a comment \",\"Multiple lines or mid-line comments can be achieved with /# and #/ tokens:\",\"/# This is a multi-line command #/ \",\"...which can also be inlined...\",\"» echo Hello /# comment #/ Murex \",\"(/# was chosen because it is similar to C-style comments however /* is a valid glob so Murex has substituted the asterisks with a hash symbol instead)\"]},\"224\":{\"h\":\"Variables\",\"t\":[\"All variables can be defined as expressions and their data types are inferred:\",\"name = \\\"bob\\\"\",\"age = 20 * 2\",\"fruit = %[ apples oranges bananas ]\",\"If any variables are unset then reading from them will produce an error (under Murex's default behavior):\",\"» echo $foobar Error in `echo` (1,1): variable 'foobar' does not exist \"]},\"225\":{\"h\":\"Global variables\",\"t\":[\"Global variables can be defined using the $GLOBAL namespace:\",\"» $GLOBAL.foo = \\\"bar\\\" \",\"You can also force Murex to read the global assignment of $foo (ignoring any local assignments, should they exist) using the same syntax. eg:\",\"» $GLOBAL.name = \\\"Tom\\\" » out $name Tom » $name = \\\"Sally\\\" » out $GLOBAL.name Tom » out $name Sally \"]},\"226\":{\"h\":\"Environmental Variables\",\"t\":[\"Environmental Variables are like global variables except they are copied to any other programs that are launched from your shell session.\",\"Environmental variables can be assigned using the $ENV namespace:\",\"» $ENV.foo = \\\"bar\\\" \",\"as well as using the export statement like with traditional shells. (read more)\",\"Like with global variables, you can force Murex to read the environmental variable, bypassing and local or global variables of the same name, by also using the $ENV namespace prefix.\"]},\"227\":{\"h\":\"Type Inference\",\"t\":[\"In general, Murex will try to infer the data type of a variable or pipe. It can do this by checking the Content-Type HTTP header, the file name extension or just looking at how that data was constructed (when defined via expressions). However sometimes you may need to annotate your types. Read more\"]},\"228\":{\"h\":\"Scalars\",\"t\":[\"In traditional shells, variables are expanded in a way that results in spaces be parsed as different command parameters. This results in numerous problems where developers need to remember to enclose variables inside quotes.\",\"Murex parses variables as tokens and expands them into the command line arguments intuitively. So, there are no more accidental bugs due to spaces in file names, or other such problems due to developers forgetting to quote variables. For example:\",\"» file = \\\"file name.txt\\\" » touch $file # this would normally need to be quoted » ls 'file name.txt' \"]},\"229\":{\"h\":\"Arrays\",\"t\":[\"Due to variables not being expanded into arrays by default, Murex supports an additional variable construct for arrays. These are @ prefixed:\",\"» files = %[file1.txt, file2.txt, file3.txt] » touch @files » ls file1.txt file2.txt \"]},\"230\":{\"h\":\"Piping and Redirection\"},\"231\":{\"h\":\"Pipes\",\"t\":[\"Murex supports multiple different pipe tokens. The main two being | and ->.\",\"| works exactly the same as in any normal shell (read more)\",\"-> displays all of the supported methods (commands that support the output of the previous command). Think of it a little like object orientated programming where an object will have functions (methods) attached. (read more)\",\"In Murex scripts you can use | and -> interchangeably, so there's no need to remember which commands are methods and which are not. The difference only applies in the interactive shell where -> can be used with tab-autocompletion to display a shortlist of supported functions that can manipulate the data from the previous command. It's purely a clue to the parser to generate different autocompletion suggestions to help with your discovery of different commandline tools.\"]},\"232\":{\"h\":\"Redirection\",\"t\":[\"Redirection of stdout and stderr is very different in Murex. There is no support for the 2> or &1 tokens, instead you name the pipe inside angle brackets, in the first parameter(s).\",\"out is that processes stdout (fd1), err is that processes stderr (fd2), and null is the equivalent of piping to /dev/null.\",\"Any pipes prefixed by a bang means reading from that processes stderr.\",\"So to redirect stderr to stdout you would use <!out>:\",\"err <!out> \\\"error message redirected to stdout\\\" \",\"And to redirect stdout to stderr you would use <err>:\",\"out <err> \\\"output redirected to stderr\\\" \",\"Likewise you can redirect either stdout, or stderr to /dev/null via <null> or <!null> respectively.\",\"command <!null> # ignore stderr command <null> # ignore stdout \",\"You can also create your own pipes that are files, network connections, or any other custom data input or output endpoint. read more\"]},\"233\":{\"h\":\"Redirecting to files\",\"t\":[\"out \\\"message\\\" |> truncate-file.txt out \\\"message\\\" >> append-file.txt \"]},\"234\":{\"h\":\"Type Conversion\",\"t\":[\"Aside from annotating variables upon definition, you can also transform data along the pipeline.\"]},\"235\":{\"h\":\"Cast\",\"t\":[\"Casting doesn't alter the data, it simply changes the meta-information about how that data should be read.\",\"out [1,2,3] | cast json | foreach { ... } \",\"There is also a little syntactic sugar to do the same:\",\"out [1,2,3] | :json: foreach { ... } \"]},\"236\":{\"h\":\"Format\",\"t\":[\"format takes the source data and reformats it into another data format:\",\"» out [1,2,3] | :json: format yaml - 1 - 2 - 3 \"]},\"237\":{\"h\":\"Sub-Shells\",\"t\":[\"There are two types of emendable sub-shells: strings and arrays.\",\"string sub-shells, ${ command }, take the results from the sub-shell and return it as a single parameter. This saves the need to encapsulate the shell inside quotation marks.\",\"array sub-shells, @{ command }, take the results from the sub-shell and expand it as parameters.\",\"Examples:\",\"touch ${ %[1,2,3] } # creates a file named '[1,2,3]' touch @{ %[1,2,3] } # creates three files, named '1', '2' and '3' \",\"The reason Murex breaks from the POSIX tradition of using backticks and parentheses is because Murex works on the principle that everything inside a curly bracket is considered a new block of code.\"]},\"238\":{\"h\":\"Filesystem Wildcards (Globbing)\",\"t\":[\"While glob expansion is supported in the interactive shell, there isn't auto-expansion of globbing in shell scripts. This is to protect against accidental damage. Instead globbing is achieved via sub-shells using either:\",\"g - traditional globbing (read more)\",\"rx - regexp matching in current directory only (read more)\",\"f - file type matching (read more)\",\"Examples:\",\"All text files via globbing:\",\"g *.txt \",\"All text and markdown files via regexp:\",\"rx '\\\\.(txt|md)$' \",\"All directories via type matching:\",\"f +d \",\"You can also chain them together, eg all directories named *.txt:\",\"g *.txt | f +d \",\"To use them in a shell script it could look something a like this:\",\"rm @{g *.txt | f +s} \",\"(this deletes any symlinks called *.txt)\"]},\"239\":{\"h\":\"Brace expansion\",\"t\":[\"In bash you can expand lists using the following syntax: a{1..5}b. In Murex, like with globbing, brace expansion is a function: a: a[1..5]b and supports a much wider range of lists that can be expanded. (read more)\"]},\"240\":{\"h\":\"Executables\"},\"241\":{\"h\":\"Aliases\",\"t\":[\"You can create \\\"aliases\\\" to common commands to save you a few keystrokes. For example:\",\"alias gc=git commit \",\"alias behaves slightly differently to Bash. (read more)\"]},\"242\":{\"h\":\"Public Functions\",\"t\":[\"You can create custom functions in Murex using function. (read more)\",\"function gc (message: str) { # shorthand for `git commit` git commit -m $message } \"]},\"243\":{\"h\":\"Private Functions\",\"t\":[\"private functions are like public functions except they are only available within their own modules namespace. (read more)\"]},\"244\":{\"h\":\"External Executables\",\"t\":[\"External executables (including any programs located in $PATH) are invoked via the exec builtin (read more) however if a command isn't an expression, alias, function nor builtin, then Murex assumes it is an external executable and automatically invokes exec.\",\"For example the two following statements are the same:\",\"exec uname\",\"uname\",\"Thus for normal day to day usage, you shouldn't need to include exec.\"]},\"245\":{\"h\":\"Control Structures\"},\"246\":{\"h\":\"Using if Statements\",\"t\":[\"if can be used in a number of different ways, the most common being:\",\"if { true } then { # do something } else { # do something else } \",\"if supports a flexible variety of incarnation to solve different problems. (read more)\"]},\"247\":{\"h\":\"Using switch Statements\",\"t\":[\"Because if ... else if chains are ugly, Murex supports switch statements:\",\"switch $USER { case \\\"Tom\\\" { out: \\\"Hello Tom\\\" } case \\\"Dick\\\" { out: \\\"Howdie Richard\\\" } case \\\"Sally\\\" { out: \\\"Nice to meet you\\\" } default { out: \\\"I don't know who you are\\\" } } \",\"switch supports a flexible variety of different usages to solve different problems. (read more)\"]},\"248\":{\"h\":\"Using foreach Loops\",\"t\":[\"foreach allows you to easily iterate through an array or list of any type: (read more)\",\"%[ apples bananas oranges ] | foreach fruit { out \\\"I like $fruit\\\" } \"]},\"249\":{\"h\":\"Using formap Loops\",\"t\":[\"formap loops are the equivalent of foreach but against map objects: (read more)\",\"%{ Bob: {age: 10}, Richard: {age: 20}, Sally: {age: 30} } | formap name person { out \\\"$name is $person[age] years old\\\" } \"]},\"250\":{\"h\":\"Stopping Execution\"},\"251\":{\"h\":\"The continue Statement\",\"t\":[\"continue will terminate execution of an inner block in iteration loops like foreach and formap. Thus continuing the loop from the next iteration:\",\"%[1..10] | foreach i { if { $i == 5 } then { continue foreach # ^ jump back to the next iteration } out $i } \",\"continue requires a parameter to define while block to iterate on. This means you can use continue within nested loops and still have readable code. (read more)\"]},\"252\":{\"h\":\"The break Statement\",\"t\":[\"break will terminate execution of a block (eg function, private, if, foreach, etc):\",\"%[1..10] | foreach i { if { $i == 5 } then { break foreach # ^ exit foreach } out $i } \",\"break requires a parameter to define while block to end. Thus break can be considered to exhibit the behavior of return as well as break in other languages:\",\"function example { if { $USER == \\\"root\\\" } then { err \\\"Don't run this as root\\\" break example } # ... do something ... } \",\"break cannot exit anything above it's callers scope. (read more)\"]},\"253\":{\"h\":\"The exit Statement\",\"t\":[\"Terminates Murex. exit is not scope aware; if it is included in a function then the whole shell will still exist and not just that function. (read more)\"]},\"254\":{\"h\":\"Signal: SIGINT\",\"t\":[\"This can be invoked by pressing Ctrl + c.\"]},\"255\":{\"h\":\"Signal: SIGQUIT\",\"t\":[\"This can be invoked by pressing Ctrl + \\\\\",\"Sending SIGQUIT will terminate all running functions in the current Murex session. Which is a handy escape hatch if your shell code starts misbehaving.\"]},\"256\":{\"h\":\"Signal: SIGTSTP\",\"t\":[\"This can be invoked by pressing Ctrl + z\"]},\"257\":{\"c\":[\"Tour\"]},\"258\":{\"h\":\"Marshal() (type) - API Reference\",\"t\":[\"Converts structured memory into a structured file format (eg for stdio)\"]},\"259\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type. The marshal function takes in a Go (golang) type or struct and returns a byte slice of a \\\"string\\\" representation of that format (eg in JSON) or an error.\",\"This marshaller is then registered to Murex inside an init() function and Murex builtins can use that marshaller via the MarshalData() API.\"]},\"260\":{\"h\":\"Usage\",\"t\":[\"Registering Marshal() (for writing builtin data-types)\",\"// To avoid data races, this should only happen inside func init() lang.Marshallers[ /* your type name */ ] = /* your readIndex func */ \",\"Using an existing marshaller (eg inside a builtin command)\",\"// See documentation on lang.MarshalData for more details b, err := lang.MarshalData(p, dataType, data) \"]},\"261\":{\"h\":\"Examples\",\"t\":[\"Defining a marshaller for a murex data-type\",\"package example import ( \\\"encoding/json\\\" \\\"github.com/lmorg/murex/lang\\\" ) func init() { // Register data-type lang.Marshallers[\\\"json\\\"] = marshal } // Describe marshaller func marshal(p *lang.Process, v interface{}) ([]byte, error) { if p.Stdout.IsTTY() { // If STDOUT is a TTY (ie not pipe, text file or other destination other // than a terminal) then output JSON in an indented, human readable, // format.... return json.MarshalIndent(v, \\\"\\\", \\\" \\\") } // ....otherwise we might as well output it in a minified format return json.Marshal(v) } \"]},\"262\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"interface{}: data you wish to marshal\"]},\"263\":{\"h\":\"See Also\",\"t\":[\"apis/Unmarshal() (type): Converts a structured file format into structured memory\",\"apis/lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"apis/lang.UnmarshalData() (system API):\\nConverts a Murex data-type into structured memory\"]},\"264\":{\"h\":\"API Reference\",\"t\":[\"This section is a glossary of APIs.\",\"These APIs are provided for reference for any developers wishing to write their own builtins. However some APIs are still worth being aware of even when just writing Murex scripts because they provide a background into the internal logic of Murex's runtime.\"]},\"265\":{\"h\":\"Pages\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"lang.ArrayWithTypeTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array with data type included\",\"lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"lang.IndexTemplateTable() (template API): Returns element(s) from a table\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API):\\nConverts a Murex data-type into structured memory\"]},\"266\":{\"h\":\"ReadArray() (type) - API Reference\",\"t\":[\"Read from a data type one array element at a time\"]},\"267\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by builtins to allow them to read data structures one array element at a time.\",\"The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.\"]},\"268\":{\"h\":\"Usage\",\"t\":[\"Registering your ReadArray()\",\"// To avoid confusion, this should only happen inside func init() stdio.RegisterReadArray(/* your type name */, /* your readArray func */) \"]},\"269\":{\"h\":\"Examples\",\"t\":[\"Example ReadArray() function:\",\"package string import ( \\\"bufio\\\" \\\"bytes\\\" \\\"context\\\" \\\"fmt\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" ) func readArray(ctx context.Context, read stdio.Io, callback func([]byte)) error { scanner := bufio.NewScanner(read) for scanner.Scan() { select { case <-ctx.Done(): return scanner.Err() default: callback(bytes.TrimSpace(scanner.Bytes())) } } err := scanner.Err() if err != nil { return fmt.Errorf(\\\"error while reading a %s array: %s\\\", types.String, err.Error()) } return nil } \"]},\"270\":{\"h\":\"Detail\",\"t\":[\"If your data type is not a stream-able array, it is then recommended that you pass your array to lang.ArrayTemplate() which is a handler to convert Go structures into Murex arrays. This also makes writing ReadArray() handlers easier since you can just pass lang.ArrayTemplate() your marshaller. For example:\",\"package json import ( \\\"context\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readArray(ctx context.Context, read stdio.Io, callback func([]byte)) error { // Create a marshaller function to pass to ArrayTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.ArrayTemplate(ctx, marshaller, json.Unmarshal, read, callback) } \",\"The downside of this is that you're then unmarshalling the entire file, which could be slow on large files and also breaks the streaming nature of UNIX pipelines.\"]},\"271\":{\"h\":\"Parameters\",\"t\":[\"stdio.Io: stream to read from (eg STDIN)\",\"func([]byte): callback function. Each callback will be a []byte slice containing an array element\"]},\"272\":{\"h\":\"See Also\",\"t\":[\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"apis/lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"apis/lang.ArrayWithTypeTemplate() (template API):\\nUnmarshals a data type into a Go struct and returns the results as an array with data type included\"]},\"273\":{\"h\":\"ReadArrayWithType() (type) - API Reference\",\"t\":[\"Read from a data type one array element at a time and return the elements contents and data type\"]},\"274\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by builtins to allow them to read data structures one array element at a time.\",\"The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.\",\"This differs from ReadArray() because it also returns the data type.\",\"There is a good chance ReadArray() might get deprecated in the medium to long term.\"]},\"275\":{\"h\":\"Usage\",\"t\":[\"Registering your ReadArrayWithType()\",\"// To avoid confusion, this should only happen inside func init() stdio.RegisterReadArrayWithType(/* your type name */, /* your readArray func */) \"]},\"276\":{\"h\":\"Examples\",\"t\":[\"Example ReadArrayWithType() function:\",\"package string import ( \\\"bufio\\\" \\\"context\\\" \\\"fmt\\\" \\\"strings\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" ) func readArrayWithType(ctx context.Context, read stdio.Io, callback func(interface{}, string)) error { scanner := bufio.NewScanner(read) for scanner.Scan() { select { case <-ctx.Done(): return scanner.Err() default: callback(strings.TrimSpace(scanner.Text()), types.String) } } err := scanner.Err() if err != nil { return fmt.Errorf(\\\"error while reading a %s array: %s\\\", types.String, err.Error()) } return nil } \"]},\"277\":{\"h\":\"Detail\",\"t\":[\"If your data type is not a stream-able array, it is then recommended that you pass your array to lang.ArrayWithTypeTemplate() which is a handler to convert Go structures into Murex arrays. This also makes writing ReadArray() handlers easier since you can just pass lang.ArrayTemplate() your marshaller. For example:\",\"package json import ( \\\"context\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readArrayWithType(ctx context.Context, read stdio.Io, callback func(interface{}, string)) error { // Create a marshaller function to pass to ArrayWithTypeTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.ArrayWithTypeTemplate(ctx, types.Json, marshaller, json.Unmarshal, read, callback) } \",\"The downside of this is that you're then unmarshalling the entire file, which could be slow on large files and also breaks the streaming nature of UNIX pipelines.\"]},\"278\":{\"h\":\"Parameters\",\"t\":[\"stdio.Io: stream to read from (eg STDIN)\",\"func(interface{}, string): callback function. Each callback will be the value in its native Go data type (eg string, int, float64, bool) for an array element\"]},\"279\":{\"h\":\"See Also\",\"t\":[\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"apis/lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"apis/lang.ArrayWithTypeTemplate() (template API):\\nUnmarshals a data type into a Go struct and returns the results as an array with data type included\"]},\"280\":{\"h\":\"ReadIndex() (type) - API Reference\",\"t\":[\"Data type handler for the index, [, builtin\"]},\"281\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by the index, [, builtin.\",\"The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for [ (index), thus allowing it to be data-type agnostic.\"]},\"282\":{\"h\":\"Usage\",\"t\":[\"Registering your ReadIndex()\",\"// To avoid data races, this should only happen inside func init() lang.ReadIndexes[ /* your type name */ ] = /* your readIndex func */ \"]},\"283\":{\"h\":\"Examples\",\"t\":[\"Example ReadIndex() function:\",\"package json import ( \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func index(p *lang.Process, params []string) error { var jInterface interface{} b, err := p.Stdin.ReadAll() if err != nil { return err } err = json.Unmarshal(b, &jInterface) if err != nil { return err } marshaller := func(iface interface{}) ([]byte, error) { return json.Marshal(iface, p.Stdout.IsTTY()) } return lang.IndexTemplateObject(p, params, &jInterface, marshaller) } \"]},\"284\":{\"h\":\"Detail\",\"t\":[\"While there is support for a dedicated ReadNotIndex() for instances of ![, the template APIs lang.IndexTemplateObject and lang.IndexTemplateTable are both agnostic to the bang prefix.\"]},\"285\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"[]string: slice of parameters used in [\"]},\"286\":{\"h\":\"See Also\",\"t\":[\"user-guide/Bang Prefix: Bang prefixing to reverse default actions\",\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"commands/[[ (element): Outputs an element from a nested structure\",\"commands/[ (index): Outputs an element from an array, map or table\",\"apis/lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"287\":{\"h\":\"ReadMap() (type) - API Reference\",\"t\":[\"Treat data type as a key/value structure and read its contents\"]},\"288\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by builtins to allow them to read data structures one key/value pair at a time.\",\"The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.\"]},\"289\":{\"h\":\"Usage\",\"t\":[\"Registering your ReadMap()\",\"// To avoid confusion, this should only happen inside func init() stdio.RegisterReadMap(/* your type name */, /* your readMap func */) \"]},\"290\":{\"h\":\"Examples\",\"t\":[\"Example ReadMap() function:\",\"package json import ( \\\"github.com/lmorg/murex/config\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readMap(read stdio.Io, _ *config.Config, callback func(*stdio.Map)) error { // Create a marshaller function to pass to ArrayWithTypeTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.MapTemplate(types.Json, marshaller, json.Unmarshal, read, callback) } \"]},\"291\":{\"h\":\"Detail\",\"t\":[\"There isn't (yet) a template read function for types to call. However that might follow in a future release of Murex.\"]},\"292\":{\"h\":\"Parameters\",\"t\":[\"stdio.Io: stream to read from (eg STDIN)\",\"*config.Config: scoped config (eg your data type might have configurable parsing rules)\",\"func(key, value string, last bool): callback function: key and value of map plus boolean which is true if last element in row (eg reading from tables rather than key/values)\"]},\"293\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type):\\nWrite a data type, one array element at a time\"]},\"294\":{\"h\":\"ReadNotIndex() (type) - API Reference\",\"t\":[\"Data type handler for the bang-prefixed index, ![, builtin\"]},\"295\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by the index, ![, builtin.\",\"The purpose of this function is to allow builtins to support sequential reads (where possible) and also create a standard interface for ![ (index), thus allowing it to be data-type agnostic.\"]},\"296\":{\"h\":\"Usage\",\"t\":[\"Registering your ReadNotIndex()\",\"// To avoid data races, this should only happen inside func init() lang.ReadNotIndexes[ /* your type name */ ] = /* your readIndex func */ \"]},\"297\":{\"h\":\"Examples\",\"t\":[\"Example ReadIndex() function (the code structure is the same for ReadIndex and ReadNotIndex):\",\"package json import ( \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func index(p *lang.Process, params []string) error { var jInterface interface{} b, err := p.Stdin.ReadAll() if err != nil { return err } err = json.Unmarshal(b, &jInterface) if err != nil { return err } marshaller := func(iface interface{}) ([]byte, error) { return json.Marshal(iface, p.Stdout.IsTTY()) } return lang.IndexTemplateObject(p, params, &jInterface, marshaller) } \"]},\"298\":{\"h\":\"Detail\",\"t\":[\"While there is support for a dedicated ReadNotIndex() for instances of ![, the template APIs lang.IndexTemplateObject and lang.IndexTemplateTable are both agnostic to the bang prefix.\"]},\"299\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"[]string: slice of parameters used in ![\"]},\"300\":{\"h\":\"See Also\",\"t\":[\"user-guide/Bang Prefix: Bang prefixing to reverse default actions\",\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"commands/[[ (element): Outputs an element from a nested structure\",\"commands/[ (index): Outputs an element from an array, map or table\",\"apis/lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"301\":{\"h\":\"Unmarshal() (type) - API Reference\",\"t\":[\"Converts a structured file format into structured memory\"]},\"302\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type. The unmarshal function takes in a byte slice and returns a Go (golang) type or struct or an error.\",\"This unmarshaller is then registered to Murex inside an init() function and Murex builtins can use that unmarshaller via the UnmarshalData() API.\"]},\"303\":{\"h\":\"Usage\",\"t\":[\"Registering Unmarshal() (for writing builtin data-types)\",\"// To avoid data races, this should only happen inside func init() lang.Unmarshallers[ /* your type name */ ] = /* your readIndex func */ \",\"Using an existing unmarshaller (eg inside a builtin command)\",\"// See documentation on lang.UnmarshalData for more details v, err := lang.UnmarshalData(p *lang.Process, dataType string) \"]},\"304\":{\"h\":\"Examples\",\"t\":[\"Defining a marshaller for a murex data-type\",\"package example import ( \\\"encoding/json\\\" \\\"github.com/lmorg/murex/lang\\\" ) func init() { // Register data-type lang.Unmarshallers[\\\"example\\\"] = unmarshal } // Describe unmarshaller func unmarshal(p *lang.Process) (interface{}, error) { // Read data from STDIN. Because JSON expects closing tokens, we should // read the entire stream before unmarshalling it. For formats like CSV or // jsonlines which are more line based, we might want to read STDIN line by // line. However given there is just one data return, you still effectively // head to read the entire file before returning the structure. There are // other APIs for iterative returns for streaming data - more akin to the // traditional way UNIX pipes would work. b, err := p.Stdin.ReadAll() if err != nil { return nil, err } var v interface{} err = json.Unmarshal(b, &v) // Return the Go data structure or error return v, err } \"]},\"305\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\"]},\"306\":{\"h\":\"See Also\",\"t\":[\"apis/Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"apis/lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"apis/lang.UnmarshalData() (system API):\\nConverts a Murex data-type into structured memory\"]},\"307\":{\"h\":\"WriteArray() (type) - API Reference\",\"t\":[\"Write a data type, one array element at a time\"]},\"308\":{\"h\":\"Description\",\"t\":[\"This is a function you would write when programming a Murex data-type.\",\"It's called by builtins to allow them to write data structures one array element at a time.\",\"The purpose of this function is to allow builtins to support sequential writes (where possible) and also create a standard interface for builtins, thus allowing them to be data-type agnostic.\"]},\"309\":{\"h\":\"A Collection of Functions\",\"t\":[\"WriteArray() should return a struct that satisfies the following interface{}:\",\"package stdio // ArrayWriter is a simple interface types can adopt for buffered writes of formatted arrays in structured types (eg JSON) type ArrayWriter interface { Write([]byte) error WriteString(string) error Close() error } \"]},\"310\":{\"h\":\"Usage\",\"t\":[\"Registering your WriteArray()\",\"// To avoid confusion, this should only happen inside func init() stdio.RegisterWriteArray(/* your type name */, /* your writeArray func */) \"]},\"311\":{\"h\":\"Examples\",\"t\":[\"Example WriteArray() function:\",\"package string import ( \\\"github.com/lmorg/murex/lang/stdio\\\" ) type arrayWriter struct { writer stdio.Io } func newArrayWriter(writer stdio.Io) (stdio.ArrayWriter, error) { w := &arrayWriter{writer: writer} return w, nil } func (w *arrayWriter) Write(b []byte) error { _, err := w.writer.Writeln(b) return err } func (w *arrayWriter) WriteString(s string) error { _, err := w.writer.Writeln([]byte(s)) return err } func (w *arrayWriter) Close() error { return nil } \"]},\"312\":{\"h\":\"Detail\",\"t\":[\"Since not all data types will be stream-able (for example json), some types may need to cache the array and then to write it once the array writer has been closed.\",\"package json import ( \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) type arrayWriter struct { array []string writer stdio.Io } func newArrayWriter(writer stdio.Io) (stdio.ArrayWriter, error) { w := &arrayWriter{writer: writer} return w, nil } func (w *arrayWriter) Write(b []byte) error { w.array = append(w.array, string(b)) return nil } func (w *arrayWriter) WriteString(s string) error { w.array = append(w.array, s) return nil } func (w *arrayWriter) Close() error { b, err := json.Marshal(w.array, w.writer.IsTTY()) if err != nil { return err } _, err = w.writer.Write(b) return err } \"]},\"313\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type):\\nData type handler for the bang-prefixed index, ![, builtin\"]},\"314\":{\"h\":\"lang.ArrayTemplate() (template API) - API Reference\",\"t\":[\"Unmarshals a data type into a Go struct and returns the results as an array\"]},\"315\":{\"h\":\"Description\",\"t\":[\"This is a template API you can use for your custom data types to wrap around an existing Go marshaller and return a Murex array which is consistent with other structures such as nested JSON or YAML documents.\",\"It should only be called from ReadArray() functions.\",\"Because lang.ArrayTemplate() relies on a marshaller, it means any types that rely on this API are not going to be stream-able.\"]},\"316\":{\"h\":\"Examples\",\"t\":[\"Example calling lang.ArrayTemplate() function:\",\"package json import ( \\\"context\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readArray(ctx context.Context, read stdio.Io, callback func([]byte)) error { // Create a marshaller function to pass to ArrayTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.ArrayTemplate(ctx, marshaller, json.Unmarshal, read, callback) } \"]},\"317\":{\"h\":\"Detail\"},\"318\":{\"h\":\"API Source:\",\"t\":[\"package lang import ( \\\"context\\\" \\\"fmt\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils\\\" ) // ArrayTemplate is a template function for reading arrays from marshalled data func ArrayTemplate(ctx context.Context, marshal func(interface{}) ([]byte, error), unmarshal func([]byte, interface{}) error, read stdio.Io, callback func([]byte)) error { b, err := read.ReadAll() if err != nil { return err } if len(utils.CrLfTrim(b)) == 0 { return nil } var v interface{} err = unmarshal(b, &v) if err != nil { return err } switch v := v.(type) { case string: return readArrayByString(v, callback) case []string: return readArrayBySliceString(ctx, v, callback) case []interface{}: return readArrayBySliceInterface(ctx, marshal, v, callback) case map[string]string: return readArrayByMapStrStr(ctx, v, callback) case map[string]interface{}: return readArrayByMapStrIface(ctx, marshal, v, callback) case map[interface{}]string: return readArrayByMapIfaceStr(ctx, v, callback) case map[interface{}]interface{}: return readArrayByMapIfaceIface(ctx, marshal, v, callback) default: jBytes, err := marshal(v) if err != nil { return err } callback(jBytes) return nil } } func readArrayByString(v string, callback func([]byte)) error { callback([]byte(v)) return nil } func readArrayBySliceString(ctx context.Context, v []string, callback func([]byte)) error { for i := range v { select { case <-ctx.Done(): return nil default: callback([]byte(v[i])) } } return nil } func readArrayBySliceInterface(ctx context.Context, marshal func(interface{}) ([]byte, error), v []interface{}, callback func([]byte)) error { if len(v) == 0 { return nil } for i := range v { select { case <-ctx.Done(): return nil default: switch v := v[i].(type) { case string: callback([]byte(v)) case []byte: callback(v) default: jBytes, err := marshal(v) if err != nil { return err } callback(jBytes) } } } return nil } func readArrayByMapIfaceIface(ctx context.Context, marshal func(interface{}) ([]byte, error), v map[interface{}]interface{}, callback func([]byte)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: bKey := []byte(fmt.Sprint(key) + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) } } return nil } func readArrayByMapStrStr(ctx context.Context, v map[string]string, callback func([]byte)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: callback([]byte(key + \\\": \\\" + val)) } } return nil } func readArrayByMapStrIface(ctx context.Context, marshal func(interface{}) ([]byte, error), v map[string]interface{}, callback func([]byte)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: bKey := []byte(key + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) } } return nil } func readArrayByMapIfaceStr(ctx context.Context, v map[interface{}]string, callback func([]byte)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: callback([]byte(fmt.Sprint(key) + \\\": \\\" + val)) } } return nil } \"]},\"319\":{\"h\":\"Parameters\",\"t\":[\"func(interface{}) ([]byte, error): data type's marshaller\",\"func([]byte, interface{}) error: data type's unmarshaller\",\"stdio.Io: stream to read from (eg STDIN)\",\"func([]byte): callback function to write each array element\"]},\"320\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"apis/lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"321\":{\"h\":\"Murex Shell Docs\"},\"322\":{\"h\":\"API Reference: lang.ArrayTemplateWithType() (template API)\",\"t\":[\"Unmarshals a data type into a Go struct and returns the results as an array with data type included\"]},\"323\":{\"h\":\"Description\",\"t\":[\"This is a template API you can use for your custom data types to wrap around an existing Go marshaller and return a Murex array which is consistent with other structures such as nested JSON or YAML documents.\",\"It should only be called from ReadArrayWithType() functions.\",\"Because lang.ArrayTemplateWithType() relies on a marshaller, it means any types that rely on this API are not going to be stream-able.\"]},\"324\":{\"h\":\"Examples\",\"t\":[\"Example calling lang.ArrayTemplate() function:\",\"package json import ( \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readArray(read stdio.Io, callback func([]byte)) error { // Create a marshaller function to pass to ArrayTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.ArrayTemplate(marshaller, json.Unmarshal, read, callback) } \"]},\"325\":{\"h\":\"Detail\"},\"326\":{\"h\":\"API Source:\",\"t\":[\"package lang import ( \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" ) // ArrayWithTypeTemplate is a template function for reading arrays from marshalled data func ArrayWithTypeTemplate(dataType string, marshal func(interface{}) ([]byte, error), unmarshal func([]byte, interface{}) error, read stdio.Io, callback func([]byte, string)) error { b, err := read.ReadAll() if err != nil { return err } var v interface{} err = unmarshal(b, &v) if err != nil { return err } switch v := v.(type) { case string: return readArrayWithTypeByString(v, callback) case []string: return readArrayWithTypeBySliceString(v, callback) case []interface{}: return readArrayWithTypeBySliceInterface(dataType, marshal, v, callback) /*case map[string]string: return readArrayWithTypeByMapStrStr(v, callback) case map[string]interface{}: return readArrayWithTypeByMapStrIface(marshal, v, callback) case map[interface{}]string: return readArrayWithTypeByMapIfaceStr(v, callback) case map[interface{}]interface{}: return readArrayWithTypeByMapIfaceIface(marshal, v, callback) */ default: jBytes, err := marshal(v) if err != nil { return err } callback(jBytes, dataType) return nil } } func readArrayWithTypeByString(v string, callback func([]byte, string)) error { callback([]byte(v), types.String) return nil } func readArrayWithTypeBySliceString(v []string, callback func([]byte, string)) error { for i := range v { callback([]byte(v[i]), types.String) } return nil } func readArrayWithTypeBySliceInterface(dataType string, marshal func(interface{}) ([]byte, error), v []interface{}, callback func([]byte, string)) error { if len(v) == 0 { return nil } switch v[0].(type) { case string: for i := range v { callback([]byte(v[i].(string)), types.String) } case []byte: for i := range v { callback(v[i].([]byte), types.String) } default: for i := range v { jBytes, err := marshal(v[i]) if err != nil { return err } callback(jBytes, dataType) } } return nil } /*func readArrayWithTypeByMapIfaceIface(marshal func(interface{}) ([]byte, error), v map[interface{}]interface{}, callback func([]byte, string)) error { for key, val := range v { bKey := []byte(fmt.Sprint(key) + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) } return nil } func readArrayWithTypeByMapStrStr(v map[string]string, callback func([]byte, string)) error { for key, val := range v { callback([]byte(key + \\\": \\\" + val)) } return nil } func readArrayWithTypeByMapStrIface(marshal func(interface{}) ([]byte, error), v map[string]interface{}, callback func([]byte, string)) error { for key, val := range v { bKey := []byte(key + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) } return nil } func readArrayWithTypeByMapIfaceStr(v map[interface{}]string, callback func([]byte, string)) error { for key, val := range v { callback([]byte(fmt.Sprint(key) + \\\": \\\" + val)) } return nil } */ \"]},\"327\":{\"h\":\"Parameters\",\"t\":[\"func(interface{}) ([]byte, error): data type's marshaller\",\"func([]byte, interface{}) error: data type's unmarshaller\",\"stdio.Io: stream to read from (eg STDIN)\",\"func([]byte, string): callback function to write each array element\"]},\"328\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"apis/lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"329\":{\"h\":\"lang.ArrayWithTypeTemplate() (template API) - API Reference\",\"t\":[\"Unmarshals a data type into a Go struct and returns the results as an array with data type included\"]},\"330\":{\"h\":\"Description\",\"t\":[\"This is a template API you can use for your custom data types to wrap around an existing Go marshaller and return a Murex array which is consistent with other structures such as nested JSON or YAML documents.\",\"It should only be called from ReadArrayWithType() functions.\",\"Because lang.ArrayTemplateWithType() relies on a marshaller, it means any types that rely on this API are not going to be stream-able.\"]},\"331\":{\"h\":\"Examples\",\"t\":[\"Example calling lang.ArrayTemplate() function:\",\"package json import ( \\\"context\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func readArray(ctx context.Context, read stdio.Io, callback func([]byte)) error { // Create a marshaller function to pass to ArrayTemplate marshaller := func(v interface{}) ([]byte, error) { return json.Marshal(v, read.IsTTY()) } return lang.ArrayTemplate(ctx, marshaller, json.Unmarshal, read, callback) } \"]},\"332\":{\"h\":\"Detail\"},\"333\":{\"h\":\"API Source:\",\"t\":[\"package lang import ( \\\"context\\\" \\\"github.com/lmorg/murex/lang/stdio\\\" \\\"github.com/lmorg/murex/lang/types\\\" \\\"github.com/lmorg/murex/utils\\\" ) // ArrayWithTypeTemplate is a template function for reading arrays from marshalled data func ArrayWithTypeTemplate(ctx context.Context, dataType string, marshal func(interface{}) ([]byte, error), unmarshal func([]byte, interface{}) error, read stdio.Io, callback func(interface{}, string)) error { b, err := read.ReadAll() if err != nil { return err } if len(utils.CrLfTrim(b)) == 0 { return nil } var v interface{} err = unmarshal(b, &v) if err != nil { return err } switch v := v.(type) { case []interface{}: return readArrayWithTypeBySliceInterface(ctx, dataType, marshal, v, callback) case []string: return readArrayWithTypeBySliceString(ctx, v, callback) case []float64: return readArrayWithTypeBySliceFloat(ctx, v, callback) case []int: return readArrayWithTypeBySliceInt(ctx, v, callback) case string: return readArrayWithTypeByString(v, callback) case []byte: return readArrayWithTypeByString(string(v), callback) case []rune: return readArrayWithTypeByString(string(v), callback) case []bool: return readArrayWithTypeBySliceBool(ctx, v, callback) /*case map[string]string: return readArrayWithTypeByMapStrStr(v, callback) case map[string]interface{}: return readArrayWithTypeByMapStrIface(marshal, v, callback) case map[interface{}]string: return readArrayWithTypeByMapIfaceStr(v, callback) case map[interface{}]interface{}: return readArrayWithTypeByMapIfaceIface(marshal, v, callback) */ default: jBytes, err := marshal(v) if err != nil { return err } callback(jBytes, dataType) return nil } } func readArrayWithTypeByString(v string, callback func(interface{}, string)) error { callback(v, types.String) return nil } func readArrayWithTypeBySliceInt(ctx context.Context, v []int, callback func(interface{}, string)) error { for i := range v { select { case <-ctx.Done(): return nil default: callback(v[i], types.Integer) } } return nil } func readArrayWithTypeBySliceFloat(ctx context.Context, v []float64, callback func(interface{}, string)) error { for i := range v { select { case <-ctx.Done(): return nil default: callback(v[i], types.Number) } } return nil } func readArrayWithTypeBySliceBool(ctx context.Context, v []bool, callback func(interface{}, string)) error { for i := range v { select { case <-ctx.Done(): return nil default: callback(v[i], types.Boolean) } } return nil } func readArrayWithTypeBySliceString(ctx context.Context, v []string, callback func(interface{}, string)) error { for i := range v { select { case <-ctx.Done(): return nil default: callback(v[i], types.String) } } return nil } func readArrayWithTypeBySliceInterface(ctx context.Context, dataType string, marshal func(interface{}) ([]byte, error), v []interface{}, callback func(interface{}, string)) error { if len(v) == 0 { return nil } for i := range v { select { case <-ctx.Done(): return nil default: switch v[i].(type) { case string: callback((v[i].(string)), types.String) case float64: callback(v[i].(float64), types.Number) case int: callback(v[i].(int), types.Integer) case bool: if v[i].(bool) { callback(true, types.Boolean) } else { callback(false, types.Boolean) } case []byte: callback(string(v[i].([]byte)), types.String) case nil: callback(nil, types.Null) default: jBytes, err := marshal(v[i]) if err != nil { return err } callback(jBytes, dataType) } } } return nil } /*func readArrayWithTypeByMapIfaceIface(marshal func(interface{}) ([]byte, error), v map[interface{}]interface{}, callback func([]byte, string)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: bKey := []byte(fmt.Sprint(key) + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) }} return nil } func readArrayWithTypeByMapStrStr(v map[string]string, callback func([]byte, string)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: callback([]byte(key + \\\": \\\" + val)) }} return nil } func readArrayWithTypeByMapStrIface(marshal func(interface{}) ([]byte, error), v map[string]interface{}, callback func([]byte, string)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: bKey := []byte(key + \\\": \\\") b, err := marshal(val) if err != nil { return err } callback(append(bKey, b...)) }} return nil } func readArrayWithTypeByMapIfaceStr(v map[interface{}]string, callback func([]byte, string)) error { for key, val := range v { select { case <-ctx.Done(): return nil default: callback([]byte(fmt.Sprint(key) + \\\": \\\" + val)) }} return nil } */ \"]},\"334\":{\"h\":\"Parameters\",\"t\":[\"func(interface{}) ([]byte, error): data type's marshaller\",\"func([]byte, interface{}) error: data type's unmarshaller\",\"stdio.Io: stream to read from (eg STDIN)\",\"func(interface{}, string): callback function to write each array element, with data type\"]},\"335\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"apis/lang.IndexTemplateObject() (template API): Returns element(s) from a data structure\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"336\":{\"h\":\"lang.IndexTemplateObject() (template API) - API Reference\",\"t\":[\"Returns element(s) from a data structure\"]},\"337\":{\"h\":\"Description\",\"t\":[\"This is a template API you can use for your custom data types.\",\"It should only be called from ReadIndex() and ReadNotIndex() functions.\",\"This function ensures consistency with the index, [, builtin when used with different Murex data types. Thus making indexing a data type agnostic capability.\"]},\"338\":{\"h\":\"Examples\",\"t\":[\"Example calling lang.IndexTemplateObject() function:\",\"package json import ( \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/utils/json\\\" ) func index(p *lang.Process, params []string) error { var jInterface interface{} b, err := p.Stdin.ReadAll() if err != nil { return err } err = json.Unmarshal(b, &jInterface) if err != nil { return err } marshaller := func(iface interface{}) ([]byte, error) { return json.Marshal(iface, p.Stdout.IsTTY()) } return lang.IndexTemplateObject(p, params, &jInterface, marshaller) } \"]},\"339\":{\"h\":\"Detail\"},\"340\":{\"h\":\"API Source:\",\"t\":[\"package lang import ( \\\"errors\\\" \\\"fmt\\\" \\\"strconv\\\" \\\"strings\\\" \\\"github.com/lmorg/murex/lang/types\\\" ) // IndexTemplateObject is a handy standard indexer you can use in your custom data types for structured object types. // The point of this is to minimize code rewriting and standardising the behavior of the indexer. func IndexTemplateObject(p *Process, params []string, object *interface{}, marshaller func(interface{}) ([]byte, error)) error { if p.IsNot { return itoNot(p, params, object, marshaller) } return itoIndex(p, params, object, marshaller) } // itoIndex allow func itoIndex(p *Process, params []string, object *interface{}, marshaller func(interface{}) ([]byte, error)) error { var objArray []interface{} switch v := (*object).(type) { case []interface{}: for _, key := range params { i, err := strconv.Atoi(key) if err != nil { return err } if i < 0 { //i = len(v) + i i += len(v) } if i >= len(v) { return errors.New(\\\"key '\\\" + key + \\\"' greater than number of items in array\\\") } if len(params) > 1 { objArray = append(objArray, v[i]) } else { switch v[i].(type) { case nil: p.Stdout.SetDataType(types.Null) case bool: p.Stdout.SetDataType(types.Boolean) if v[i].(bool) { p.Stdout.Write(types.TrueByte) } else { p.Stdout.Write(types.FalseByte) } case int: p.Stdout.SetDataType(types.Integer) s := strconv.Itoa(v[i].(int)) p.Stdout.Write([]byte(s)) case float64: p.Stdout.SetDataType(types.Number) s := types.FloatToString(v[i].(float64)) p.Stdout.Write([]byte(s)) case string: p.Stdout.SetDataType(types.String) p.Stdout.Write([]byte(v[i].(string))) default: b, err := marshaller(v[i]) if err != nil { return err } p.Stdout.Writeln(b) } } } if len(objArray) > 0 { b, err := marshaller(objArray) if err != nil { return err } p.Stdout.Writeln(b) } return nil case map[string]interface{}: var ( obj interface{} err error ) for i := range params { if len(params[i]) > 2 && params[i][0] == '[' && params[i][len(params[i])-1] == ']' { obj, err = ElementLookup(v, params[i][1:len(params[i])-1]) if err != nil { return err } } else { switch { case v[params[i]] != nil: obj = v[params[i]] case v[strings.Title(params[i])] != nil: obj = v[strings.Title(params[i])] case v[strings.ToLower(params[i])] != nil: obj = v[strings.ToLower(params[i])] case v[strings.ToUpper(params[i])] != nil: obj = v[strings.ToUpper(params[i])] default: return errors.New(\\\"key '\\\" + params[i] + \\\"' not found\\\") } } if len(params) > 1 { objArray = append(objArray, obj) } else { switch obj := obj.(type) { case nil: p.Stdout.SetDataType(types.Null) case bool: p.Stdout.SetDataType(types.Boolean) if obj { p.Stdout.Write(types.TrueByte) } else { p.Stdout.Write(types.FalseByte) } case int: p.Stdout.SetDataType(types.Integer) s := strconv.Itoa(obj) p.Stdout.Write([]byte(s)) case float64: p.Stdout.SetDataType(types.Number) s := types.FloatToString(obj) p.Stdout.Write([]byte(s)) case string: p.Stdout.SetDataType(types.String) p.Stdout.Write([]byte(obj)) default: b, err := marshaller(obj) if err != nil { return err } p.Stdout.Writeln(b) } } } if len(objArray) > 0 { b, err := marshaller(objArray) if err != nil { return err } p.Stdout.Writeln(b) } return nil case map[interface{}]interface{}: for i := range params { //if v[key] == nil { // return errors.New(\\\"key '\\\" + key + \\\"' not found.\\\") //} switch { case v[params[i]] != nil: case v[strings.Title(params[i])] != nil: params[i] = strings.Title(params[i]) case v[strings.ToLower(params[i])] != nil: params[i] = strings.ToLower(params[i]) case v[strings.ToUpper(params[i])] != nil: params[i] = strings.ToUpper(params[i]) //case v[strings.ToTitle(params[i])] != nil: // params[i] = strings.ToTitle(params[i]) default: return errors.New(\\\"key '\\\" + params[i] + \\\"' not found\\\") } if len(params) > 1 { objArray = append(objArray, v[params[i]]) } else { switch v[params[i]].(type) { case nil: p.Stdout.SetDataType(types.Null) case bool: p.Stdout.SetDataType(types.Boolean) if v[params[i]].(bool) { p.Stdout.Write(types.TrueByte) } else { p.Stdout.Write(types.FalseByte) } case int: p.Stdout.SetDataType(types.Integer) s := strconv.Itoa(v[params[i]].(int)) p.Stdout.Write([]byte(s)) case float64: p.Stdout.SetDataType(types.Number) s := types.FloatToString(v[params[i]].(float64)) p.Stdout.Write([]byte(s)) case string: p.Stdout.SetDataType(types.String) p.Stdout.Write([]byte(v[params[i]].(string))) default: b, err := marshaller(v[params[i]]) if err != nil { return err } p.Stdout.Writeln(b) } } } if len(objArray) > 0 { b, err := marshaller(objArray) if err != nil { return err } p.Stdout.Writeln(b) } return nil default: return errors.New(\\\"object cannot be indexed\\\") } } // itoNot requires the indexes to be explicit func itoNot(p *Process, params []string, object *interface{}, marshaller func(interface{}) ([]byte, error)) error { switch v := (*object).(type) { case []interface{}: var objArray []interface{} not := make(map[int]bool) for _, key := range params { i, err := strconv.Atoi(key) if err != nil { return err } if i < 0 { return errors.New(\\\"cannot have negative keys in array\\\") } if i >= len(v) { return errors.New(\\\"Key '\\\" + key + \\\"' greater than number of items in array\\\") } not[i] = true } for i := range v { if !not[i] { objArray = append(objArray, v[i]) } } //if len(objArray) > 0 { b, err := marshaller(objArray) if err != nil { return err } _, err = p.Stdout.Writeln(b) //} return err case map[string]interface{}: objMap := make(map[string]interface{}) not := make(map[string]bool) for _, key := range params { not[key] = true not[strings.Title(key)] = true not[strings.ToLower(key)] = true not[strings.ToUpper(key)] = true //not[strings.ToTitle(key)] = true } for s := range v { if !not[s] { objMap[s] = v[s] } } //if len(objMap) > 0 { b, err := marshaller(objMap) if err != nil { return err } p.Stdout.Writeln(b) //} return nil case map[interface{}]interface{}: objMap := make(map[interface{}]interface{}) not := make(map[string]bool) for _, key := range params { not[key] = true not[strings.Title(key)] = true not[strings.ToLower(key)] = true not[strings.ToUpper(key)] = true //not[strings.ToTitle(key)] = true } for iface := range v { s := fmt.Sprint(iface) if !not[s] { objMap[iface] = v[iface] } } //if len(objMap) > 0 { b, err := marshaller(objMap) if err != nil { return err } _, err = p.Stdout.Writeln(b) //} return err default: return errors.New(\\\"object cannot be !indexed\\\") } } \"]},\"341\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"[]string: slice of parameters used in [ / ![\",\"*interface{}: a pointer to the data structure being indexed\",\"func(interface{}) ([]byte, error): data type marshaller function\"]},\"342\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"commands/[ (index): Outputs an element from an array, map or table\",\"apis/lang.IndexTemplateTable() (template API):\\nReturns element(s) from a table\"]},\"343\":{\"h\":\"lang.IndexTemplateTable() (template API) - API Reference\",\"t\":[\"Returns element(s) from a table\"]},\"344\":{\"h\":\"Description\",\"t\":[\"This is a template API you can use for your custom data types.\",\"It should only be called from ReadIndex() and ReadNotIndex() functions.\",\"This function ensures consistency with the index, [, builtin when used with different Murex data types. Thus making indexing a data type agnostic capability.\"]},\"345\":{\"h\":\"Examples\",\"t\":[\"Example calling lang.IndexTemplateTable() function:\",\"package generic import ( \\\"bytes\\\" \\\"strings\\\" \\\"github.com/lmorg/murex/lang\\\" ) func index(p *lang.Process, params []string) error { cRecords := make(chan []string, 1) go func() { err := p.Stdin.ReadLine(func(b []byte) { cRecords <- rxWhitespace.Split(string(bytes.TrimSpace(b)), -1) }) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } close(cRecords) }() marshaller := func(s []string) (b []byte) { b = []byte(strings.Join(s, \\\"\\\\t\\\")) return } return lang.IndexTemplateTable(p, params, cRecords, marshaller) } \"]},\"346\":{\"h\":\"Detail\"},\"347\":{\"h\":\"API Source:\",\"t\":[\"package lang import ( \\\"errors\\\" \\\"fmt\\\" \\\"regexp\\\" \\\"strconv\\\" \\\"strings\\\" \\\"github.com/lmorg/murex/utils\\\" ) const ( byRowNumber = iota + 1 byColumnNumber byColumnName maxReportedUnmatched = 5 ) var ( rxColumnPrefixOld = regexp.MustCompile(`^:[0-9]+$`) rxRowSuffixOld = regexp.MustCompile(`^[0-9]+:$`) rxColumnPrefixNew = regexp.MustCompile(`^\\\\*[a-zA-Z]$`) rxRowSuffixNew = regexp.MustCompile(`^\\\\*[0-9]+$`) errMixAndMatch = errors.New(\\\"you cannot mix and match matching modes\\\") ) // IndexTemplateTable is a handy standard indexer you can use in your custom data types for tabulated / streamed data. // The point of this is to minimize code rewriting and standardising the behavior of the indexer. func IndexTemplateTable(p *Process, params []string, cRecords chan []string, marshaller func([]string) []byte) error { if p.IsNot { return ittNot(p, params, cRecords, marshaller) } return ittIndex(p, params, cRecords, marshaller) } func charToIndex(b byte) int { if b > 96 { return int(b - 97) } return int(b - 65) } func ittIndex(p *Process, params []string, cRecords chan []string, marshaller func([]string) []byte) (err error) { var ( mode int matchStr []string matchInt []int unmatched []string unmatchedCount int ) defer func() { if len(unmatched) != 0 { p.ExitNum = 1 if unmatchedCount > maxReportedUnmatched { unmatched = append(unmatched, fmt.Sprintf(\\\"...plus %d more\\\", unmatchedCount-maxReportedUnmatched)) } err = fmt.Errorf(\\\"some records did not contain all of the requested fields:%s%s\\\", utils.NewLineString, strings.Join(unmatched, utils.NewLineString)) } }() errUnmatched := func(recs []string) { unmatchedCount++ if unmatchedCount > maxReportedUnmatched { return } unmatched = append(unmatched, strings.Join(recs, \\\"\\\\t\\\")) } for i := range params { switch { case rxRowSuffixOld.MatchString(params[i]): if mode != 0 && mode != byRowNumber { return errMixAndMatch } mode = byRowNumber num, _ := strconv.Atoi(params[i][:len(params[i])-1]) matchInt = append(matchInt, num) case rxRowSuffixNew.MatchString(params[i]): if mode != 0 && mode != byRowNumber { return errMixAndMatch } mode = byRowNumber num, _ := strconv.Atoi(params[i][1:]) matchInt = append(matchInt, num-1) // Don't count from zero case rxColumnPrefixOld.MatchString(params[i]): if mode != 0 && mode != byColumnNumber { return errMixAndMatch } mode = byColumnNumber num, _ := strconv.Atoi(params[i][1:]) matchInt = append(matchInt, num) case rxColumnPrefixNew.MatchString(params[i]): if mode != 0 && mode != byColumnNumber { return errMixAndMatch } mode = byColumnNumber num := charToIndex(params[i][1]) matchInt = append(matchInt, num) default: if mode != 0 && mode != byColumnName { return errMixAndMatch } matchStr = append(matchStr, params[i]) mode = byColumnName } } switch mode { case byRowNumber: var ( ordered = true last int max int ) // check order for _, i := range matchInt { if i < last { ordered = false } if i > max { max = i } last = i } if ordered { // ordered matching - for this we can just read in the records we want sequentially. Low memory overhead var i int for { recs, ok := <-cRecords if !ok { return nil } if i == matchInt[0] { _, err = p.Stdout.Writeln(marshaller(recs)) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } if len(matchInt) == 1 { matchInt[0] = -1 return nil } matchInt = matchInt[1:] } i++ } } else { // unordered matching - for this we load the entire data set into memory - up until the maximum value var ( i int lines = make([][]string, max+1) ) for { recs, ok := <-cRecords if !ok { break } if i <= max { lines[i] = recs } i++ } for _, j := range matchInt { _, err = p.Stdout.Writeln(marshaller(lines[j])) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } } return nil } case byColumnNumber: for { recs, ok := <-cRecords if !ok { return nil } var line []string for _, i := range matchInt { if i < len(recs) { line = append(line, recs[i]) } else { if len(recs) == 0 || (len(recs) == 1 && recs[0] == \\\"\\\") { continue } errUnmatched(recs) } } if len(line) != 0 { _, err = p.Stdout.Writeln(marshaller(line)) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } } } case byColumnName: var ( lineNum int headings = make(map[string]int) ) for { var line []string recs, ok := <-cRecords if !ok { return nil } if lineNum == 0 { for i := range recs { headings[recs[i]] = i + 1 } for i := range matchStr { if headings[matchStr[i]] != 0 { line = append(line, matchStr[i]) } } if len(line) != 0 { _, err = p.Stdout.Writeln(marshaller(line)) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } } } else { for i := range matchStr { col := headings[matchStr[i]] if col != 0 && col < len(recs)+1 { line = append(line, recs[col-1]) } else { if len(recs) == 0 || (len(recs) == 1 && recs[0] == \\\"\\\") { continue } errUnmatched(recs) } } if len(line) != 0 { _, err = p.Stdout.Writeln(marshaller(line)) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } } } lineNum++ } default: return errors.New(\\\"you haven't selected any rows / columns\\\") } } func ittNot(p *Process, params []string, cRecords chan []string, marshaller func([]string) []byte) error { var ( mode int matchStr = make(map[string]bool) matchInt = make(map[int]bool) ) for i := range params { switch { case rxRowSuffixOld.MatchString(params[i]): if mode != 0 && mode != byRowNumber { return errMixAndMatch } mode = byRowNumber num, _ := strconv.Atoi(params[i][:len(params[i])-1]) matchInt[num] = true case rxRowSuffixNew.MatchString(params[i]): if mode != 0 && mode != byRowNumber { return errMixAndMatch } mode = byRowNumber num, _ := strconv.Atoi(params[i][1:]) matchInt[num+1] = true // Don't count from zero case rxColumnPrefixOld.MatchString(params[i]): if mode != 0 && mode != byColumnNumber { return errMixAndMatch } mode = byColumnNumber num, _ := strconv.Atoi(params[i][1:]) matchInt[num] = true case rxColumnPrefixNew.MatchString(params[i]): if mode != 0 && mode != byColumnNumber { return errMixAndMatch } mode = byColumnNumber num := charToIndex(params[i][1]) matchInt[num] = true default: if mode != 0 && mode != byColumnName { return errMixAndMatch } matchStr[params[i]] = true mode = byColumnName } } switch mode { case byRowNumber: i := -1 for { recs, ok := <-cRecords if !ok { return nil } if !matchInt[i] { _, err := p.Stdout.Writeln(marshaller(recs)) if err != nil { p.Stderr.Writeln([]byte(err.Error())) } } i++ } case byColumnNumber: for { recs, ok := <-cRecords if !ok { return nil } var line []string for i := range recs { if !matchInt[i] { line = append(line, recs[i]) } } if len(line) != 0 { p.Stdout.Writeln(marshaller(line)) } } case byColumnName: var ( lineNum int headings = make(map[int]string) ) for { var line []string recs, ok := <-cRecords if !ok { return nil } if lineNum == 0 { for i := range recs { headings[i] = recs[i] if !matchStr[headings[i]] { line = append(line, recs[i]) } } if len(line) != 0 { p.Stdout.Writeln(marshaller(line)) } } else { for i := range recs { if !matchStr[headings[i]] { line = append(line, recs[i]) } } if len(line) != 0 { p.Stdout.Writeln(marshaller(line)) } } lineNum++ } default: return errors.New(\\\"you haven't selected any rows / columns\\\") } } \"]},\"348\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"[]string: slice of parameters used in [ / ![\",\"chan []string: a channel for rows (each element in the slice is a column within the row). This allows tables to be stream-able\",\"func(interface{}) ([]byte, error): data type marshaller function\"]},\"349\":{\"h\":\"See Also\",\"t\":[\"apis/ReadArray() (type): Read from a data type one array element at a time\",\"apis/ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"apis/ReadIndex() (type): Data type handler for the index, [, builtin\",\"apis/ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"apis/ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"apis/WriteArray() (type): Write a data type, one array element at a time\",\"commands/[ (index): Outputs an element from an array, map or table\",\"apis/lang.IndexTemplateObject() (template API):\\nReturns element(s) from a data structure\"]},\"350\":{\"h\":\"lang.MarshalData() (system API) - API Reference\",\"t\":[\"Converts structured memory into a Murex data-type (eg for stdio)\"]},\"351\":{\"h\":\"Description\"},\"352\":{\"h\":\"Usage\",\"t\":[\"b, err := lang.MarshalData(p, dataType, data) \"]},\"353\":{\"h\":\"Examples\",\"t\":[\"func exampleCommand(p *lang.Process) error { data := map[string]string { \\\"foo\\\": \\\"hello foo\\\", \\\"bar\\\": \\\"hello bar\\\", } dataType := \\\"json\\\" b, err := lang.MarshalData(p, dataType, data) if err != nil { return err } _, err := p.Stdout.Write(b) return err } \"]},\"354\":{\"h\":\"Detail\",\"t\":[\"Go source file:\",\"package lang import ( \\\"errors\\\" ) // MarshalData is a global marshaller which should be called from within murex // builtin commands (etc). // See docs/apis/marshaldata.md for more details func MarshalData(p *Process, dataType string, data interface{}) (b []byte, err error) { // This is one of the very few maps in Murex which isn't hidden behind a sync // lock of one description or other. The rational is that even mutexes can // add a noticeable overhead on the performance of tight loops and I expect // this function to be called _a lot_ while also only needing to be written // to via code residing in within builtin types init() function (ie while // murex is effectively single threaded). So there shouldn't be any data- // races -- PROVIDING developers strictly follow the pattern of only writing // to this map within init() func's. if Marshallers[dataType] == nil { return nil, errors.New(\\\"I don't know how to marshal `\\\" + dataType + \\\"`.\\\") } b, err = Marshallers[dataType](p, data) if err != nil { return nil, errors.New(\\\"[\\\" + dataType + \\\" marshaller] \\\" + err.Error()) } return } \"]},\"355\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"string: Murex data type\",\"interface{}: data you wish to marshal\"]},\"356\":{\"h\":\"See Also\",\"t\":[\"apis/Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"apis/Unmarshal() (type): Converts a structured file format into structured memory\",\"apis/lang.UnmarshalData() (system API):\\nConverts a Murex data-type into structured memory\"]},\"357\":{\"h\":\"lang.UnmarshalData() (system API) - API Reference\",\"t\":[\"Converts a Murex data-type into structured memory\"]},\"358\":{\"h\":\"Description\"},\"359\":{\"h\":\"Usage\",\"t\":[\"data, err := lang.UnmarshalData(p, dataType) \"]},\"360\":{\"h\":\"Examples\",\"t\":[\"func exampleCommand(p *lang.Process) error { data := string `{ \\\"foo\\\": \\\"hello foo\\\", \\\"bar\\\": \\\"hello bar\\\" }` dataType := \\\"json\\\" v, err := lang.UnmarshalData(p, dataType) if err != nil { return err } s := fmt.Sprint(v) _, err := p.Stdout.Write([]byte(s)) return err } \"]},\"361\":{\"h\":\"Detail\",\"t\":[\"Go source file:\",\"package lang import ( \\\"errors\\\" \\\"fmt\\\" ) // UnmarshalData is a global unmarshaller which should be called from within // murex builtin commands (etc). // See docs/apis/marshaldata.md for more details func UnmarshalData(p *Process, dataType string) (v interface{}, err error) { // This is one of the very few maps in Murex which isn't hidden behind a sync // lock of one description or other. The rational is that even mutexes can // add a noticeable overhead on the performance of tight loops and I expect // this function to be called _a lot_ while also only needing to be written // to via code residing in within builtin types init() function (ie while // murex is effectively single threaded). So there shouldn't be any data- // races -- PROVIDING developers strictly follow the pattern of only writing // to this map within init() func's. if Unmarshallers[dataType] == nil { return nil, errors.New(\\\"I don't know how to unmarshal `\\\" + dataType + \\\"`\\\") } v, err = Unmarshallers[dataType](p) if err != nil { return nil, errors.New(\\\"[\\\" + dataType + \\\" unmarshaller] \\\" + err.Error()) } return v, nil } func UnmarshalDataBuffered(parent *Process, b []byte, dataType string) (interface{}, error) { fork := parent.Fork(F_CREATE_STDIN | F_NO_STDOUT | F_NO_STDERR) _, err := fork.Stdin.Write(b) if err != nil { return nil, fmt.Errorf(\\\"cannot write value to unmarshaller's buffer: %s\\\", err.Error()) } v, err := UnmarshalData(fork.Process, dataType) if err != nil { return nil, fmt.Errorf(\\\"cannot unmarshal buffer: %s\\\", err.Error()) } return v, nil } \"]},\"362\":{\"h\":\"Parameters\",\"t\":[\"*lang.Process: Process's runtime state. Typically expressed as the variable p\",\"string: Murex data type\"]},\"363\":{\"h\":\"See Also\",\"t\":[\"apis/Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"apis/Unmarshal() (type): Converts a structured file format into structured memory\",\"apis/lang.MarshalData() (system API):\\nConverts structured memory into a Murex data-type (eg for stdio)\"]},\"364\":{\"h\":\"2darray - Command Reference\",\"t\":[\"Create a 2D JSON array from multiple input sources\"]},\"365\":{\"h\":\"Description\",\"t\":[\"2darray merges multiple input sources to create a two dimensional array in JSON\"]},\"366\":{\"h\":\"Usage\",\"t\":[\"2darray: { code-block } { code-block } -> `<stdout>` \"]},\"367\":{\"h\":\"Examples\",\"t\":[\"» ps: -fe -> head: -n 10 -> set: ps » 2darray { $ps[UID] } { $ps[PID] } { $ps[TTY] } { $ps[TIME] } [ [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ], [ \\\"UID\\\", \\\"PID\\\", \\\"TTY\\\", \\\"TIME\\\" ], [ \\\"root\\\", \\\"1\\\", \\\"?\\\", \\\"00:00:02\\\" ], [ \\\"root\\\", \\\"2\\\", \\\"?\\\", \\\"00:00:00\\\" ], [ \\\"root\\\", \\\"3\\\", \\\"?\\\", \\\"00:00:00\\\" ], [ \\\"root\\\", \\\"4\\\", \\\"?\\\", \\\"00:00:00\\\" ], [ \\\"root\\\", \\\"6\\\", \\\"?\\\", \\\"00:00:00\\\" ], [ \\\"root\\\", \\\"8\\\", \\\"?\\\", \\\"00:00:00\\\" ], [ \\\"root\\\", \\\"9\\\", \\\"?\\\", \\\"00:00:03\\\" ], [ \\\"root\\\", \\\"10\\\", \\\"?\\\", \\\"00:00:19\\\" ], [ \\\"root\\\", \\\"11\\\", \\\"?\\\", \\\"00:00:01\\\" ] ] \"]},\"368\":{\"h\":\"Detail\",\"t\":[\"2darray can have as many or as few code blocks as you wish.\"]},\"369\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"json: JavaScript Object Notation (JSON)\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"map: Creates a map from two data sources\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"prepend:\\nAdd data to the start of an array\"]},\"370\":{\"h\":\"a (mkarray) - Command Reference\",\"t\":[\"A sophisticated yet simple way to build an array or list\"]},\"371\":{\"h\":\"Description\",\"t\":[\"Pronounced \\\"make array\\\", like mkdir (etc), Murex has a pretty sophisticated builtin for generating arrays. Think like bash's {1..9} syntax:\",\"a: [1..9] \",\"Except Murex also supports other sets of ranges like dates, days of the week, and alternative number bases.\"]},\"372\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"373\":{\"h\":\"Examples\",\"t\":[\"» a: [1..3] 1 2 3 » a: [3..1] 3 2 1 » a: [01..03] 01 02 03 \"]},\"374\":{\"h\":\"Detail\"},\"375\":{\"h\":\"Advanced Array Syntax\",\"t\":[\"The syntax for a is a comma separated list of parameters with expansions stored in square brackets. You can have an expansion embedded inside a parameter or as it's own parameter. Expansions can also have multiple parameters.\",\"» a: 01,02,03,05,06,07 01 02 03 05 06 07 » a: 0[1..3],0[5..7] 01 02 03 05 06 07 » a: 0[1..3,5..7] 01 02 03 05 06 07 » a: b[o,i]b bob bib \",\"You can also have multiple expansion blocks in a single parameter:\",\"» a: a[1..3]b[5..7] a1b5 a1b6 a1b7 a2b5 a2b6 a2b7 a3b5 a3b6 a3b7 \",\"a will cycle through each iteration of the last expansion, moving itself backwards through the string; behaving like an normal counter.\"]},\"376\":{\"h\":\"Creating JSON arrays with ja\",\"t\":[\"As you can see from the previous examples, a returns the array as a list of strings. This is so you can stream excessively long arrays, for example every IPv4 address: a: [0..254].[0..254].[0..254].[0..254] (this kind of array expansion would hang bash).\",\"However if you needed a JSON string then you can use all the same syntax as a but forgo the streaming capability:\",\"» ja: [Monday..Sunday] [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\", \\\"Sunday\\\" ] \",\"This is particularly useful if you are adding formatting that might break under a's formatting (which uses the str data type).\"]},\"377\":{\"h\":\"Smart arrays\",\"t\":[\"Murex supports a number of different formats that can be used to generate arrays. For more details on these please refer to the documents for each format\",\"Calendar Date Ranges: Create arrays of dates\",\"Character arrays: Making character arrays (a to z)\",\"Decimal Ranges: Create arrays of decimal integers\",\"Non-Decimal Ranges: Create arrays of integers from non-decimal number bases\",\"Special Ranges: Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\"]},\"378\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac: Reverse the order of an array\",\"str (string) : string (primitive)\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"379\":{\"h\":\"addheading - Command Reference\",\"t\":[\"Adds headings to a table\"]},\"380\":{\"h\":\"Description\",\"t\":[\"addheading takes a list of parameters and adds them to the start of a table. Where prepend is designed to work with arrays, addheading is designed to prepend to tables.\"]},\"381\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> addheading: value value value ... -> `<stdout>` \"]},\"382\":{\"h\":\"Examples\",\"t\":[\"» tout: jsonl '[\\\"Bob\\\", 23, true]' -> addheading name age active [\\\"name\\\",\\\"age\\\",\\\"active\\\"] [\\\"Bob\\\",\\\"23\\\",\\\"true\\\"] \"]},\"383\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"cast: Alters the data type of the previous function without altering it's output\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"match: Match an exact value in an array\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"prepend: Add data to the start of an array\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"384\":{\"h\":\"alias - Command Reference\",\"t\":[\"Create an alias for a command\"]},\"385\":{\"h\":\"Description\",\"t\":[\"alias defines an alias for global usage\"]},\"386\":{\"h\":\"Usage\",\"t\":[\"alias: alias=command parameter parameter !alias: command \"]},\"387\":{\"h\":\"Examples\",\"t\":[\"Because aliases are parsed into an array of parameters, you cannot put the entire alias within quotes. For example:\",\"# bad :( » alias hw=\\\"out Hello, World!\\\" » hw exec: \\\"out\\\\\\\\ Hello,\\\\\\\\ World!\\\": executable file not found in $PATH # good :) » alias hw=out \\\"Hello, World!\\\" » hw Hello, World! \",\"Notice how only the command out \\\"Hello, World!\\\" is quoted in alias the same way you would have done if you'd run that command \\\"naked\\\" in the command line? This is how alias expects it's parameters and where alias on Murex differs from alias in POSIX shells.\",\"In some ways this makes alias a little less flexible than it might otherwise be. However the design of this is to keep alias focused on it's core objective. For any more advanced requirements you can use a function instead.\"]},\"388\":{\"h\":\"Detail\"},\"389\":{\"h\":\"Allowed characters\",\"t\":[\"Alias names can only include alpha-numeric characters, hyphen and underscore. The following regex is used to validate the alias's parameters: ^([-_a-zA-Z0-9]+)=(.*?)$\"]},\"390\":{\"h\":\"Undefining an alias\",\"t\":[\"Like all other definable states in Murex, you can delete an alias with the bang prefix:\",\"» alias hw=out \\\"Hello, World!\\\" » hw Hello, World! » !alias hw » hw exec: \\\"hw\\\": executable file not found in $PATH \"]},\"391\":{\"h\":\"Order of preference\",\"t\":[\"There is an order of precedence for which commands are looked up:\",\"runmode: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.\",\"test and pipe functions also alter the behavior of the compiler and thus are executed ahead of any scripts.\",\"private functions - defined via private. Private's cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via fexec).\",\"Aliases - defined via alias. All aliases are global.\",\"Murex functions - defined via function. All functions are global.\",\"Variables (dollar prefixed) which are declared via global, set or let. Also environmental variables too, declared via export.\",\"globbing: however this only applies for commands executed in the interactive shell.\",\"Murex builtins.\",\"External executable files\",\"You can override this order of precedence via the fexec and exec builtins.\"]},\"392\":{\"h\":\"Synonyms\",\"t\":[\"alias\",\"!alias\"]},\"393\":{\"h\":\"See Also\",\"t\":[\"exec: Runs an executable\",\"export: Define an environmental variable and set it's value\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"function: Define a function block\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"method: Define a methods supported data-types\",\"private: Define a private function block\",\"set: Define a local variable and set it's value\",\"source:\\nImport Murex code from another file of code block\"]},\"394\":{\"h\":\"alter - Command Reference\",\"t\":[\"Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\"]},\"395\":{\"h\":\"Description\",\"t\":[\"alter a value within a structured data-type.\",\"The path separater is defined by the first character in the path. For example /path/to/key, ,path,to,key, |path|to|key and #path#to#key are all valid however you should remember to quote or escape any special characters (tokens) used by the shell (such as pipe, |, and hash, #).\",\"The value must always be supplied as JSON however\"]},\"396\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> alter: [ -m | --merge | -s | --sum ] /path value -> `<stdout>` \"]},\"397\":{\"h\":\"Examples\",\"t\":[\"» config: -> [ shell ] -> [ prompt ] -> alter: /Value moo { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ out 'murex » ' }\\\", \\\"Description\\\": \\\"Interactive shell prompt.\\\", \\\"Value\\\": \\\"moo\\\" } \",\"alter also accepts JSON as a parameter for adding structured data:\",\"config: -> [ shell ] -> [ prompt ] -> alter: /Example { \\\"Foo\\\": \\\"Bar\\\" } { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ out 'murex » ' }\\\", \\\"Description\\\": \\\"Interactive shell prompt.\\\", \\\"Example\\\": { \\\"Foo\\\": \\\"Bar\\\" }, \\\"Value\\\": \\\"{ out 'murex » ' }\\\" } \",\"However it is also data type aware so if they key you're updating holds a string (for example) then the JSON data a will be stored as a string:\",\"» config: -> [ shell ] -> [ prompt ] -> alter: /Value { \\\"Foo\\\": \\\"Bar\\\" } { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ out 'murex » ' }\\\", \\\"Description\\\": \\\"Interactive shell prompt.\\\", \\\"Value\\\": \\\"{ \\\\\\\"Foo\\\\\\\": \\\\\\\"Bar\\\\\\\" }\\\" } \",\"Numbers will also follow the same transparent conversion treatment:\",\"» tout: json { \\\"one\\\": 1, \\\"two\\\": 2 } -> alter: /two \\\"3\\\" { \\\"one\\\": 1, \\\"two\\\": 3 } \",\"Please note: alter is not changing the value held inside config but instead took the STDOUT from config, altered a value and then passed that new complete structure through it's STDOUT.\",\"If you require modifying a structure inside Murex config (such as http headers) then you can use config alter. Read the config docs for reference.\"]},\"398\":{\"h\":\"-m / --merge\",\"t\":[\"Thus far all the examples have be changing existing keys. However you can also alter a structure by appending to an array or a merging two maps together. You do this with the --merge (or -m) flag.\",\"» out: a\\\\nb\\\\nc -> alter: --merge / ([ \\\"d\\\", \\\"e\\\", \\\"f\\\" ]) a b c d e f \"]},\"399\":{\"h\":\"-s / --sum\",\"t\":[\"This behaves similarly to --merge where structures are blended together. However where a map exists with two keys the same and the values are numeric, those values are added together.\",\"» tout json { \\\"a\\\": 1, \\\"b\\\": 2 } -> alter --sum / { \\\"b\\\": 3, \\\"c\\\": 4 } { \\\"a\\\": 1, \\\"b\\\": 5, \\\"c\\\": 4 } \"]},\"400\":{\"h\":\"Flags\",\"t\":[\"--merge Merge data structures rather than overwrite\",\"--sum Sum values in a map, merge items in an array\",\"-m Alias for `--merge\",\"-s Alias for `--sum\"]},\"401\":{\"h\":\"Detail\"},\"402\":{\"h\":\"Path\",\"t\":[\"The path parameter can take any character as node separators. The separator is assigned via the first character in the path. For example\",\"config -> alter: .shell.prompt.Value moo config -> alter: >shell>prompt>Value moo \",\"Just make sure you quote or escape any characters used as shell tokens. eg\",\"config -> alter: '#shell#prompt#Value' moo config -> alter: ' shell prompt Value' moo \"]},\"403\":{\"h\":\"Supported data-types\",\"t\":[\"The value field must always be supplied as JSON however the STDIN struct can be any data-type supported by murex.\",\"You can check what data-types are available via the runtime command:\",\"runtime --marshallers \",\"Marshallers are enabled at compile time from the builtins/data-types directory.\"]},\"404\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"append: Add data to the end of an array\",\"cast: Alters the data type of the previous function without altering it's output\",\"config: Query or define Murex runtime settings\",\"format: Reformat one data-type into another data-type\",\"prepend: Add data to the start of an array\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"405\":{\"h\":\"and - Command Reference\",\"t\":[\"Returns true or false depending on whether multiple conditions are met\"]},\"406\":{\"h\":\"Description\",\"t\":[\"Returns a boolean results (true or false) depending on whether all of the code-blocks included as parameters are successful or not.\"]},\"407\":{\"h\":\"Usage\",\"t\":[\"and: { code-block } { code-block } -> `<stdout>` !and: { code-block } { code-block } -> `<stdout>` \",\"and supports as many or as few code-blocks as you wish.\"]},\"408\":{\"h\":\"Examples\",\"t\":[\"if { and { = 1+1==2 } { = 2+2==4 } { = 3+3==6 } } then { out: The laws of mathematics still exist in this universe. } \"]},\"409\":{\"h\":\"Detail\",\"t\":[\"and does not set the exit number on failure so it is safe to use inside a try or trypipe block.\",\"If and is prefixed by a bang then it returns true only when all code-blocks are unsuccessful.\"]},\"410\":{\"h\":\"Code-Block Testing\",\"t\":[\"and tests all code-blocks up until one of the code-blocks is unsuccessful, then and exits and returns false.\",\"!and tests all code-blocks up until one of the code-blocks is successful, then !and exits and returns false (ie !and is noting every code-block).\"]},\"411\":{\"h\":\"Synonyms\",\"t\":[\"and\",\"!and\"]},\"412\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"catch: Handles the exception code raised by try or trypipe\",\"false: Returns a false value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"413\":{\"h\":\"append - Command Reference\",\"t\":[\"Add data to the end of an array\"]},\"414\":{\"h\":\"Description\",\"t\":[\"append data to the end of an array.\"]},\"415\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> append: value -> `<stdout>` \"]},\"416\":{\"h\":\"Examples\",\"t\":[\"» a: [Monday..Sunday] -> append: Funday Monday Tuesday Wednesday Thursday Friday Saturday Sunday Funday \"]},\"417\":{\"h\":\"Detail\",\"t\":[\"prepend and append are data type aware:\",\"» tout json [1,2,3] -> append 4 5 6 bob Error in `append` (1,22): cannot convert 'bob' to a floating point number: strconv.ParseFloat: parsing \\\"bob\\\": invalid syntax \"]},\"418\":{\"h\":\"Synonyms\",\"t\":[\"append\",\"list.append\"]},\"419\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"addheading: Adds headings to a table\",\"cast: Alters the data type of the previous function without altering it's output\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"match: Match an exact value in an array\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"prepend: Add data to the start of an array\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"420\":{\"h\":\"args - Command Reference\",\"t\":[\"Command line flag parser for Murex shell scripting\"]},\"421\":{\"h\":\"Description\",\"t\":[\"One of the nuisances of shell scripts is handling flags. More often than not your script will be littered with $1 still variables and not handle flags shifting in placement amongst a group of parameters. args aims to fix that by providing a common tool for parsing flags.\",\"args takes a name of a variable to assign the result of the parsed parameters as well as a JSON structure containing the result. It also returns a non-zero exit number if there is an error when parsing.\"]},\"422\":{\"h\":\"Usage\",\"t\":[\"args var-name { json-block } -> `<stdout>` \"]},\"423\":{\"h\":\"Examples\",\"t\":[\"#!/usr/bin/env murex # First we define what parameters to accept: # Pass the `args` function a JSON string (because JSON objects share the same braces as murex block, you can enter JSON # directly as unescaped values as parameters in murex). # # --str: str == string data type # --num: num == numeric data type # --bool: bool == flag used == true, missing == false # -b: --bool == alias of --bool flag args: args %{ AllowAdditional: true Flags: { --str: str --num: num --bool: bool -b: --bool } } catch { # Lets check for errors in the command line parameters. If they exist then # print the error and then exit. err $args.error exit 1 } out \\\"The structure of \\\\$args is: ${$args->pretty}\\\\n\\\\n\\\" # Some example usage: # ------------------- !if { $(args.Flags.--bool) } { out \\\"Flag `--bool` was not set.\\\" } # `<!null>` redirects the STDERR to a named pipe. In this instance it's the 'null' pipe so equivalent to 2>/dev/null # thus we are just suppressing any error messages. try <!null> { $(args.Flags.--str) -> set fStr $(args.Flags.--num) -> set fNum out \\\"Defined Flags:\\\" out \\\" --str == $(fStr)\\\" out \\\" --num == $(fNum)\\\" } catch { err \\\"Missing `--str` and/or `--num` flags.\\\" } $args[Additional] -> foreach flag { out \\\"Additional argument (ie not assigned to a flag): `$(flag)`.\\\" } \"]},\"424\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables:\\nSpecial variables reserved by Murex\"]},\"425\":{\"h\":\"autocomplete - Command Reference\",\"t\":[\"Set definitions for tab-completion in the command line\"]},\"426\":{\"h\":\"Description\",\"t\":[\"autocomplete digests a JSON schema and uses that to define the tab- completion rules for suggestions in the interactive command line.\"]},\"427\":{\"h\":\"Usage\",\"t\":[\"autocomplete get [ command ] -> `<stdout>` autocomplete set command { mxjson } \"]},\"428\":{\"h\":\"Flags\",\"t\":[\"get output all autocompletion schemas\",\"set define a new autocompletion schema\"]},\"429\":{\"h\":\"Detail\"},\"430\":{\"h\":\"Undefining autocomplete\",\"t\":[\"Currently there is no support for undefining an autocompletion rule however you can overwrite existing rules.\"]},\"431\":{\"h\":\"Directives\",\"t\":[\"The directives are listed below. Headings are formatted as follows:\",\"\\\"DirectiveName\\\": json data-type (default value) \",\"Where \\\"default value\\\" is what will be auto-populated at run time if you don't define an autocomplete schema manually. zls stands for zero-length string (ie: \\\"\\\").\",\"\\\"Alias\\\": string (zls)\",\"\\\"AllowAny\\\": boolean (false)\",\"\\\"AllowMultiple\\\": boolean (false)\",\"\\\"AnyValue\\\": boolean (false)\",\"\\\"AutoBranch\\\": boolean (false)\",\"\\\"CacheTTL\\\": int (5)\",\"\\\"Dynamic\\\": string (zls)\",\"\\\"DynamicDesc\\\": string (zls)\",\"\\\"ExecCmdline\\\": boolean (false)\",\"\\\"FileRegexp\\\": string (zls)\",\"\\\"FlagValues\\\": map of arrays (null)\",\"Defaults for matched flags\",\"Defaults for any flags (including unmatched)\",\"\\\"Flags\\\": array of strings (auto-populated from man pages)\",\"\\\"FlagsDesc\\\": map of strings (null)\",\"\\\"Goto\\\": string (zls)\",\"\\\"IgnorePrefix\\\": boolean (false)\",\"\\\"IncDirs\\\": boolean (false)\",\"\\\"IncExeAll\\\": boolean (false)\",\"\\\"IncExePath\\\": boolean (false)\",\"\\\"IncFiles\\\": boolean (true)\",\"\\\"IncManPage\\\": boolean (false)\",\"\\\"ListView\\\": boolean (false)\",\"\\\"NestedCommand\\\": boolean (false)\",\"\\\"Optional\\\": boolean (false)\"]},\"432\":{\"h\":\"\\\"Alias\\\": string (zls)\",\"t\":[\"Aliases are used inside FlagValues as a way of pointing one flag to another without duplicating code. eg -v and --version might be the same flag. Or -?, -h and --help. With Alias you can write the definitions for one flag and then point all the synonyms as an alias to that definition.\"]},\"433\":{\"h\":\"\\\"AllowAny\\\": boolean (false)\",\"t\":[\"The way autocompletion works in Murex is the suggestion engine looks for matches and if it fines one, it then moves onto the next index in the JSON schema. This means unexpected values typed in the interactive terminal will break the suggestion engine's ability to predict what the next expected parameter should be. Setting AllowAny to true tells the suggestion engine to accept any value as the next parameter thus allowing it to then predict the next parameter afterwards.\",\"This directive isn't usually necessary because such fields are often the last parameter or most parameters can be detectable with a reasonable amount of effort. However AllowAny is often required for more complex command line tools.\"]},\"434\":{\"h\":\"\\\"AllowMultiple\\\": boolean (false)\",\"t\":[\"Set to true to enable multiple parameters following the same rules as defined in this index. For example the following will suggest directories on each tab for multiple parameters:\",\"autocomplete set example { [{ \\\"IncDirs\\\": true, \\\"AllowMultiple\\\": true }] } \"]},\"435\":{\"h\":\"\\\"AnyValue\\\": boolean (false)\",\"t\":[\"Deprecated. Please use AllowAny instead.\"]},\"436\":{\"h\":\"\\\"AutoBranch\\\": boolean (false)\",\"t\":[\"Use this in conjunction with Dynamic. If the return is an array of paths, for example [ \\\"/home/foo\\\", \\\"/home/bar\\\" ] then AutoBranch will return the following patterns in the command line:\",\"» example [tab] # suggests \\\"/home/\\\" » example /home/[tab] # suggests \\\"/home/foo\\\" and \\\"/home/bar\\\" \",\"Please note that AutoBranch's behavior is also dependant on a \\\"shell\\\" config setting, recursive-enabled\\\":\",\"» config get shell recursive-enabled true \"]},\"437\":{\"h\":\"\\\"CacheTTL\\\": int (5)\",\"t\":[\"Dynamic autocompletions (via Dynamic or DynamicDesc) are cached to improve interactivity performance. By default the cache is very small but you can increase that cache or even disable it entirely. Setting this value will define the duration (in seconds) to cache that autocompletion.\",\"If you wish to disable this then set CacheTTL to -1.\",\"This directive needs to live in the very first definition and affects all autocompletes within the rest of the command. For example\",\"autocomplete set foobar { [ { \\\"Flags\\\": [ \\\"--foo\\\", \\\"--bar\\\" ], \\\"CacheTTL\\\": 60 }, { \\\"Dynamic\\\": ({ a: [Monday..Friday] sleep: 3 }) } ] } \",\"Here the days of the week take 3 seconds to show up as autocompletion suggestions the first time and instantly for the next 60 seconds after.\"]},\"438\":{\"h\":\"\\\"Dynamic\\\": string (zls)\",\"t\":[\"This is a Murex block which returns an array of suggestions.\",\"Code inside that block are executed like a function and the parameters will mirror the same as those parameters entered in the interactive terminal.\",\"Two variables are created for each Dynamic function:\",\"ISMETHOD: true if the command being autocompleted is going to run as a pipelined method. false if it isn't.\",\"PREFIX: contains the partial term. For example if you typed hello wor[tab] then $PREFIX would be set to wor for hello's autocompletion.\",\"The expected STDOUT should be an array (list) of any data type. For example:\",\"[ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\" ] \",\"You can additionally include suggestions if any of the array items exactly matches any of the following strings:\",\"@IncFiles (read more)\",\"@IncDirs (read more)\",\"@IncExePath (read more)\",\"@IncExeAll (read more)\",\"@IncManPage (read more)\"]},\"439\":{\"h\":\"\\\"DynamicDesc\\\": string (zls)\",\"t\":[\"This is very similar to Dynamic except your function should return a map instead of an array. Where each key is the suggestion and the value is a description.\",\"The description will appear either in the hint text or alongside the suggestion - depending on which suggestion \\\"popup\\\" you define (see ListView).\",\"Two variables are created for each Dynamic function:\",\"ISMETHOD: true if the command being autocompleted is going to run as a pipelined method. false if it isn't.\",\"PREFIX: contains the partial term. For example if you typed hello wor[tab] then $PREFIX would be set to wor for hello's autocompletion.\",\"The expected STDOUT should be an object (map) of any data type. The key is the autocompletion suggestion, with the value being the description. For example:\",\"{ \\\"Monday\\\": \\\"First day of the week\\\", \\\"Tuesday\\\": \\\"Second day of the week\\\", \\\"Wednesday\\\": \\\"Third day of the week\\\" \\\"Thursday\\\": \\\"Forth day of the week\\\", \\\"Friday\\\": \\\"Fifth day of the week\\\", } \"]},\"440\":{\"h\":\"\\\"ExecCmdline\\\": boolean (false)\",\"t\":[\"Sometimes you'd want your autocomplete suggestions to aware of the output returned from the commands that preceded it. For example the suggestions for [ (index) will depend entirely on what data is piped into it.\",\"ExecCmdline tells Murex to run the commandline up until the command which your cursor is editing and pipe that output to the STDIN of that commands Dynamic or DynamicDesc code block.\",\"This is a dangerous feature to enable so ExecCmdline is only honoured if the commandline is considered \\\"safe\\\". Dynamic / DynamicDesc will still be executed however if the commandline is \\\"unsafe\\\" then your dynamic autocompletion blocks will have no STDIN.\",\"Because this is a dangerous feature, your partial commandline will only execute if the following conditions are met:\",\"the commandline must be one pipeline (eg ; tokens are not allowed)\",\"the commandline must not have any new line characters\",\"there must not be any redirection, including named pipes (eg cmd <namedpipe>) and the STDOUT/STDERR switch token (?)\",\"the commandline doesn't inline any variables ($strings, @arrays) or functions (${subshell}, $[index])\",\"lastly all commands are whitelisted in \\\"safe-commands\\\" (config get shell safe-commands)\",\"If these criteria are met, the commandline is considered \\\"safe\\\"; if any of those conditions fail then the commandline is considered \\\"unsafe\\\".\",\"Murex will come with a number of sane commands already included in its safe-commands whitelist however you can add or remove them using config\",\"» function: foobar { -> match foobar } » config: eval shell safe-commands { -> append foobar } \",\"Remember that ExecCmdline is designed to be included with either Dynamic or DynamicDesc and those code blocks would need to read from STDIN:\",\"autocomplete set \\\"[\\\" { [{ \\\"AnyValue\\\": true, \\\"AllowMultiple\\\": true, \\\"ExecCmdline\\\": true, \\\"Dynamic\\\": ({ switch ${ get-type: stdin } { case * { `<stdin>` -> [ 0: ] -> format json -> [ 0 ] } catch { `<stdin>` -> formap k v { out $k } -> cast str -> append \\\"]\\\" } } }) }] } \"]},\"441\":{\"h\":\"\\\"FileRegexp\\\": string (zls)\",\"t\":[\"When set in conjunction with IncFiles, this directive will filter on files files which match the regexp string. eg to only show \\\".txt\\\" extensions you can use the following:\",\"autocomplete set notepad.exe { [{ \\\"IncFiles\\\": true, \\\"FileRegexp\\\": (\\\\.txt) }] } \",\"Please note that you may need to double escape any regexp strings: escaping the . match and then also escaping the escape character in JSON. It is recommended you use the mxjson method of quoting using parentheses as this will compile that string into JSON, automatically adding additional escaping where required.\"]},\"442\":{\"h\":\"\\\"FlagValues\\\": map of arrays (null)\",\"t\":[\"This is a map of the flags with the values being the same array of directive as the top level.\",\"This allows you to nest operations by flags. eg when a flag might accept multiple parameters.\",\"FlagValues takes a map of arrays, eg\",\"autocomplete set example { [{ \\\"Flags\\\": [ \\\"add\\\", \\\"delete\\\" ], \\\"FlagValues\\\": { \\\"add\\\": [{ \\\"Flags\\\": [ \\\"foo\\\" ] }], \\\"delete\\\": [{ \\\"Flags\\\": [ \\\"bar\\\" ] }] } }] } \",\"...will provide \\\"foo\\\" as a suggestion to example add, and \\\"bar\\\" as a suggestion to example delete.\"]},\"443\":{\"h\":\"Defaults for matched flags\",\"t\":[\"You can set default properties to all matched flags by using * as a FlagValues value. To expand the above example...\",\"autocomplete set example { [{ \\\"Flags\\\": [ \\\"add\\\", \\\"delete\\\" ], \\\"FlagValues\\\": { \\\"add\\\": [{ \\\"Flags\\\": [ \\\"foo\\\" ] }], \\\"delete\\\": [{ \\\"Flags\\\": [ \\\"bar\\\" ] }], \\\"*\\\": [{ \\\"IncFiles\\\" }] } }] } \",\"...in this code we are saying not only does \\\"add\\\" support \\\"foo\\\" and \\\"delete\\\" supports \\\"bar\\\", but both \\\"add\\\" and \\\"delete\\\" also supports any filesystem files.\",\"This default only applies if there is a matched Flags or FlagValues.\"]},\"444\":{\"h\":\"Defaults for any flags (including unmatched)\",\"t\":[\"If you wanted a default which applied to all FlagValues, even when the flag wasn't matched, then you can use a zero length string (\\\"\\\"). For example\",\"autocomplete set example { [{ \\\"Flags\\\": [ \\\"add\\\", \\\"delete\\\" ], \\\"FlagValues\\\": { \\\"add\\\": [{ \\\"Flags\\\": [ \\\"foo\\\" ] }], \\\"delete\\\": [{ \\\"Flags\\\": [ \\\"bar\\\" ] }], \\\"\\\": [{ \\\"IncFiles\\\" }] } }] } \"]},\"445\":{\"h\":\"\\\"Flags\\\": array of strings (auto-populated from man pages)\",\"t\":[\"Setting Flags is the fastest and easiest way to populate suggestions because it is just an array of strings. eg\",\"autocomplete set example { [{ \\\"Flags\\\": [ \\\"foo\\\", \\\"bar\\\" ] }] } \",\"If a command doesn't Flags already defined when you request a completion suggestion but that command does have a man page, then Flags will be automatically populated with any flags identified from an a quick parse of the man page. However because man pages are written to be human readable rather than machine parsable, there may not be a 100% success rate with the automatic man page parsing.\"]},\"446\":{\"h\":\"\\\"FlagsDesc\\\": map of strings (null)\",\"t\":[\"This is the same concept as Flags except it is a map with the suggestion as a key and description as a value. This distinction is the same as the difference between Dynamic and DynamicDesc.\",\"Please note that currently man page parsing cannot provide a description so only Flags get auto-populated.\"]},\"447\":{\"h\":\"\\\"Goto\\\": string (zls)\",\"t\":[\"This is a goto in programming terms. While \\\"ugly\\\" it does allow for quick and easy structural definitions without resorting to writing the entire autocomplete in code.\",\"Goto takes a string which represents the path to jump to from the top level of that autocomplete definition. The path should look something like: /int/string/int/string.... where\",\"the first character is the separator,\",\"the first value is an integer that relates to the index in your autocomplete array,\",\"the second value is a string which points to the flag value map (if you defined FlagValues),\",\"the third value is the integer of the autocomplete array inside that FlagValues map,\",\"...and so on as necessary.\",\"An example of a really simple Goto:\",\"autocomplete set dd { [ { \\\"Flags\\\": [ \\\"if=\\\", \\\"of=\\\", \\\"bs=\\\", \\\"iflag=\\\", \\\"oflag=\\\", \\\"count=\\\", \\\"status=\\\" ], \\\"FlagValues\\\": { \\\"if\\\": [{ \\\"IncFiles\\\": true }], \\\"of\\\": [{ \\\"IncFiles\\\": true }], \\\"*\\\": [{ \\\"AllowAny\\\": true }] } }, { \\\"Goto\\\": \\\"/0\\\" } ] } \",\"Goto is given precedence over any other directive. So ensure it's the only directive in it's group.\"]},\"448\":{\"h\":\"\\\"IgnorePrefix\\\": boolean (false)\",\"t\":[\"When set to true, this allows Dynamic and DynamicDesc functions to return every result and not just those that match the partial term (as would normally be the default).\"]},\"449\":{\"h\":\"\\\"IncDirs\\\": boolean (false)\",\"t\":[\"Enable to include directories.\",\"Not needed if IncFiles is set to true.\",\"Behavior of this directive can be altered with config set shell recursive-enabled\"]},\"450\":{\"h\":\"\\\"IncExeAll\\\": boolean (false)\",\"t\":[\"Enable this to any executables. Suggestions will include aliases, functions builtins and any executables in $PATH. It will not include private functions.\"]},\"451\":{\"h\":\"\\\"IncExePath\\\": boolean (false)\",\"t\":[\"Enable this to include any executables in $PATH. Suggestions will not include aliases, functions nor privates.\"]},\"452\":{\"h\":\"\\\"IncFiles\\\": boolean (true)\",\"t\":[\"Include files and directories. This is enabled by default for any commands that don't have autocomplete defined but you will need to manually enable it in any autocomplete schemas you create and want files as part of the suggestions.\",\"If you want to filter files based on file name then you can set a regexp string to match to using FileRegexp.\"]},\"453\":{\"h\":\"\\\"IncManPage\\\": boolean (false)\",\"t\":[\"The default behavior for commands with no autocomplete defined is to parse the man page and use those results. If a custom autocomplete is defined then that man page parser is disabled by default. You can re-enable it and include its results with other flags and behaviors you define by using this directive.\"]},\"454\":{\"h\":\"\\\"ListView\\\": boolean (false)\",\"t\":[\"This alters the appearance of the autocompletion suggestions \\\"popup\\\". Rather than suggestions being in a grid layout (with descriptions overwriting the hint text) the suggestions are in a list view with the descriptions next to them on the same row (similar to how an IDE might display it's suggestions).\"]},\"455\":{\"h\":\"\\\"NestedCommand\\\": boolean (false)\",\"t\":[\"Only enable this if the command you are autocompleting is a nested parameter of the parent command you have types. For example with sudo, once you've typed the command name you wish to elivate, then you would want suggestions for that command rather than for sudo itself.\"]},\"456\":{\"h\":\"\\\"Optional\\\": boolean (false)\",\"t\":[\"Specifies if a match is required for the index in this schema. ie optional flags.\"]},\"457\":{\"h\":\"See Also\",\"t\":[\"<stdin>: Read the STDIN belonging to the parent code block\",\"[ (index): Outputs an element from an array, map or table\",\"alias: Create an alias for a command\",\"config: Query or define Murex runtime settings\",\"function: Define a function block\",\"get-type: Returns the data-type of a variable or pipe\",\"private: Define a private function block\",\"summary: Defines a summary help text for a command\",\"switch: Blocks of cascading conditionals\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"458\":{\"h\":\"@g (autoglob)  - Command Reference\",\"t\":[\"Command prefix to expand globbing (deprecated)\"]},\"459\":{\"h\":\"Description\",\"t\":[\"This feature is now deprecated and only applies to murex version 2:\",\"By default Murex does not expand globbing (* and ? wildcards) instead encouraging the use of g (and similar) inside a subshell. While the aim of this is to promote correctness, it can be a little annoying while working in the interactive shell. For this reason you can prefix any command with @g to enable Bash-like globbing.\"]},\"460\":{\"h\":\"Usage\",\"t\":[\"@g command ... \"]},\"461\":{\"h\":\"Examples\",\"t\":[\"@g echo * \"]},\"462\":{\"h\":\"Detail\",\"t\":[\"As of Murex 2.9 and above it is possible to enable automatic globbing in the interactive shell without having to prefix the command with @g by enabling the following config option:\",\"config: set shell auto-glob true \",\"It is enabled by default on from version 3.x onwards (and renamed to expand-glob)\"]},\"463\":{\"h\":\"See Also\",\"t\":[\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"config: Query or define Murex runtime settings\",\"f: Lists or filters file system objects (eg files)\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"rx:\\nRegexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\"]},\"464\":{\"h\":\"bexists - Command Reference\",\"t\":[\"Check which builtins exist\"]},\"465\":{\"h\":\"Description\",\"t\":[\"bexists takes an array of parameters and returns which commands have been compiled into Murex. The 'b' in bexists stands for 'builtins'\"]},\"466\":{\"h\":\"Usage\",\"t\":[\"bexists command... -> `<stdout>` \"]},\"467\":{\"h\":\"Examples\",\"t\":[\"» bexists: qr gzip runtime config { \\\"Installed\\\": [ \\\"runtime\\\", \\\"config\\\" ], \\\"Missing\\\": [ \\\"qr\\\", \\\"gzip\\\" ] } \"]},\"468\":{\"h\":\"Detail\",\"t\":[\"This builtin dates back to the start of Murex when all of the builtins were considered optional. This was intended to be a way for scripts to determine which builtins were compiled. Since then runtime has absorbed and centralized a number of similar commands which have since been deprecated. The same fate might also happen to bexists however it is in use by a few modules and for that reason alone it has been spared from the axe.\"]},\"469\":{\"h\":\"See Also\",\"t\":[\"Modules and Packages: An introduction to Murex modules and packages\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"470\":{\"h\":\"bg - Command Reference\",\"t\":[\"Run processes in the background\"]},\"471\":{\"h\":\"Description\",\"t\":[\"bg supports two modes: it can either be run as a function block which will execute in the background, or it can take stopped processes and daemonize them.\"]},\"472\":{\"h\":\"Usage\",\"t\":[\"Any operating system:\",\"bg { code block } `<stdin>` -> bg \",\"POSIX only:\",\"bg { code block } `<stdin>` -> bg bg fid \"]},\"473\":{\"h\":\"Examples\",\"t\":[\"As a function:\",\"bg { sleep 5; out \\\"Morning\\\" } \",\"As a method:\",\"» ({ sleep 5; out \\\"Morning\\\" }) -> bg \"]},\"474\":{\"h\":\"Detail\",\"t\":[\"The examples above will work on any system (Windows included). However the ctrl+z usage of backgrounding a stopped process (like Bash) is only supported on POSIX systems due to the limitation of required signals on non-platforms. This means the usage described in the examples is cross cross platform while bg int currently does not work on Windows nor Plan 9.\"]},\"475\":{\"h\":\"See Also\",\"t\":[\"exec: Runs an executable\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"jobs:\\nLists all running functions within the current Murex session\"]},\"476\":{\"h\":\"( (brace quote) - Command Reference\",\"t\":[\"Write a string to the STDOUT without new line\"]},\"477\":{\"h\":\"Description\",\"t\":[\"Write parameters to STDOUT (does not include a new line)\"]},\"478\":{\"h\":\"Usage\",\"t\":[\"(string to write) -> `<stdout>` \"]},\"479\":{\"h\":\"Examples\",\"t\":[\"» (Hello, World!) Hello, World! » (Hello,\\\\nWorld!) Hello, World! » ((Hello,) (World!)) (Hello,) (World!) # Print \\\"Hello, World!\\\" in red text » {RED}Hello, World!{RESET} Hello, World! \"]},\"480\":{\"h\":\"Detail\",\"t\":[\"The ( function performs exactly like the ( token for quoting so you do not need to escape other tokens (eg single / double quotes, '/\\\", nor curly braces, {}). However the braces are nestable so you will need to escape those characters if you don't want them nested.\"]},\"481\":{\"h\":\"ANSI Constants\",\"t\":[\"( supports ANSI constants.\"]},\"482\":{\"h\":\"Synonyms\",\"t\":[\"(\"]},\"483\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pt: Pipe telemetry. Writes data-types and bytes written\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"484\":{\"h\":\"break - Command Reference\",\"t\":[\"Terminate execution of a block within your processes scope\"]},\"485\":{\"h\":\"Description\",\"t\":[\"break will terminate execution of a block (eg function, private, foreach, if, etc).\",\"break requires a parameter and that parameter is the name of the caller block you wish to break out of. If it is a function or private, then it will be the name of that function or private. If it is an if or foreach loop, then it will be if or foreach (respectively).\"]},\"486\":{\"h\":\"Usage\",\"t\":[\"break block-name \"]},\"487\":{\"h\":\"Examples\",\"t\":[\"Exiting an iteration block:\",\"function foo { %[1..10] -> foreach i { out $i if { $i == 5 } then { out \\\"exit running function\\\" break foo out \\\"ended\\\" } } } \",\"Running the above code would output:\",\"» foo 1 2 3 4 5 exit running function \",\"Exiting a function:\",\"break can be considered to exhibit the behavior of return (from other languages) too\",\"function example { if { $USER == \\\"root\\\" } then { err \\\"Don't run this as root\\\" break example } # ... do something ... } \",\"Though in this particular use case it is recommended that you use return instead, the above code does illustrate how break behaves.\"]},\"488\":{\"h\":\"Detail\",\"t\":[\"break cannot escape the bounds of its scope (typically the function it is running inside). For example, in the following code we are calling break bar (which is a different function) inside of the function foo:\",\"function foo { %[1..10] -> foreach i { out $i if { $i == 5 } then { out \\\"exit running function\\\" break bar out \\\"ended\\\" } } } function bar { foo } \",\"Regardless of whether we run foo or bar, both of those functions will raise the following error:\",\"Error in `break` (7,17): no block found named `bar` within the scope of `foo` \"]},\"489\":{\"h\":\"See Also\",\"t\":[\"continue: Terminate process of a block within a caller function\",\"exit: Exit murex\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"function: Define a function block\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"out: Print a string to the STDOUT with a trailing new line character\",\"private: Define a private function block\",\"return:\\nExits current function scope\"]},\"490\":{\"h\":\"cast - Command Reference\",\"t\":[\"Alters the data type of the previous function without altering it's output\"]},\"491\":{\"h\":\"Description\",\"t\":[\"cast works a little like when you case variables in lower level languages where the value of the variable is unchanged. In Murex the contents in the pipeline are preserved however the reported data type is altered.\"]},\"492\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> cast data-type -> `<stdout>` \"]},\"493\":{\"h\":\"Examples\",\"t\":[\"» out: {\\\"Array\\\":[1,2,3],\\\"Map\\\":{\\\"String\\\": \\\"Foobar\\\",\\\"Number\\\":123.456}} -> cast json {\\\"Array\\\":[1,2,3],\\\"Map\\\":{\\\"String\\\": \\\"Foobar\\\",\\\"Number\\\":123.456}} \"]},\"494\":{\"h\":\"Detail\",\"t\":[\"If you want to reformat the STDIN into the new data type then use format instead.\"]},\"495\":{\"h\":\"See Also\",\"t\":[\"format: Reformat one data-type into another data-type\",\"out: Print a string to the STDOUT with a trailing new line character\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"496\":{\"h\":\"catch - Command Reference\",\"t\":[\"Handles the exception code raised by try or trypipe\"]},\"497\":{\"h\":\"Description\",\"t\":[\"catch is designed to be used in conjunction with try and trypipe as it handles the exceptions raised by the aforementioned.\"]},\"498\":{\"h\":\"Usage\",\"t\":[\"[ try | trypipe ] { code-block } -> `<stdout>` catch { code-block } -> `<stdout>` !catch { code-block } -> `<stdout>` \"]},\"499\":{\"h\":\"Examples\",\"t\":[\"try { out: \\\"Hello, World!\\\" -> grep: \\\"non-existent string\\\" out: \\\"This command will be ignored\\\" } catch { out: \\\"An error was caught\\\" } !catch { out: \\\"No errors were raised\\\" } \"]},\"500\":{\"h\":\"Detail\",\"t\":[\"catch can be used with a bang prefix to check for a lack of errors.\",\"catch forwards on the STDIN and exit number of the calling function.\"]},\"501\":{\"h\":\"Synonyms\",\"t\":[\"catch\",\"!catch\"]},\"502\":{\"h\":\"See Also\",\"t\":[\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"switch: Blocks of cascading conditionals\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"503\":{\"h\":\"cd - Command Reference\",\"t\":[\"Change (working) directory\"]},\"504\":{\"h\":\"Description\",\"t\":[\"Changes current working directory.\"]},\"505\":{\"h\":\"Usage\",\"t\":[\"cd path \"]},\"506\":{\"h\":\"Examples\",\"t\":[\"# Home directory » cd: ~ # Absolute path » cd: /etc/ # Relative path » cd: Documents » cd: ./Documents \"]},\"507\":{\"h\":\"Detail\",\"t\":[\"cd updates an environmental variable, $PWDHIST with an array of paths. You can then use that to change to a previous directory\",\"# View the working directory history » $PWDHIST # Change to a previous directory » cd $PWDHIST[0] \"]},\"508\":{\"h\":\"auto-cd\",\"t\":[\"Some people prefer to omit cd and just write the path, with their shell automatically changing to that directory if the \\\"command\\\" is just a directory. In Murex you can enable this behaviour by turning on \\\"auto-cd\\\":\",\"config: set shell auto-cd true \"]},\"509\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"source:\\nImport Murex code from another file of code block\"]},\"510\":{\"h\":\"config - Command Reference\",\"t\":[\"Query or define Murex runtime settings\"]},\"511\":{\"h\":\"Description\",\"t\":[\"Rather than Murex runtime settings being definable via obscure environmental variables, Murex instead supports a registry of config defined via the config command. This means any preferences and/or runtime config becomes centralised and discoverable.\"]},\"512\":{\"h\":\"Usage\",\"t\":[\"List all settings:\",\"config -> `<stdout>` \",\"Get a setting:\",\"config get app key -> `<stdout>` \",\"Set a setting:\",\"config set app key value `<stdin>` -> config set app key config eval app key { -> code-block } \",\"Define a new config setting:\",\"config define app key { mxjson } \",\"Reset a setting to it's default value:\",\"!config app key config default app key \"]},\"513\":{\"h\":\"Examples\",\"t\":[\"Using eval to append to an array (in this instance, adding a function name to the list of \\\"safe\\\" commands)\",\"» function: foobar { -> match foobar } » config: eval shell safe-commands { -> append foobar } \"]},\"514\":{\"h\":\"Detail\",\"t\":[\"With regards to config, the following terms are applied:\"]},\"515\":{\"h\":\"\\\"app\\\"\",\"t\":[\"This refers to a grouped category of settings. For example the name of a built in.\",\"Other app names include\",\"shell: for \\\"global\\\" (system wide) Murex settings\",\"proc: for scoped Murex settings\",\"http: for settings that are applied to any processes which use the builtin HTTP user agent (eg open, get, getfile, post)\",\"test: settings for Murex's test frameworks\",\"index: settings for [ (index)\"]},\"516\":{\"h\":\"\\\"key\\\"\",\"t\":[\"This refers to the config setting itself. For example the \\\"app\\\" might be http but the \\\"key\\\" might be timeout - where the \\\"key\\\", in this instance, holds the value for how long any HTTP user agents might wait before timing out.\"]},\"517\":{\"h\":\"\\\"value\\\"\",\"t\":[\"Value is the actual value of a setting. So the value for \\\"app\\\": http, \\\"key\\\": timeout might be 10. eg\",\"» config get http timeout 10 \"]},\"518\":{\"h\":\"\\\"scope\\\" / \\\"scoped\\\"\",\"t\":[\"Settings in config, by default, are scoped per function and module. Any functions called will inherit the settings of it's caller parent. However any child functions that then change the settings will only change settings for it's own function and not the parent caller.\",\"Please note that config settings are scoped differently to local variables.\"]},\"519\":{\"h\":\"\\\"global\\\"\",\"t\":[\"Global settings defined inside a function will affect settings queried inside another executing function (same concept as global variables).\"]},\"520\":{\"h\":\"Directives\",\"t\":[\"The directives for config define are listed below. Headings are formatted as follows:\",\"\\\"DirectiveName\\\": json data-type (default value) \",\"Where \\\"default value\\\" is what will be auto-populated if you don't include that directive (or \\\"required\\\" if the directive must be included).\"]},\"521\":{\"h\":\"\\\"DataType\\\": string (required)\",\"t\":[\"This is the Murex data-type for the value.\"]},\"522\":{\"h\":\"\\\"Description\\\": string (required)\",\"t\":[\"Description is a required field to force developers into writing meaning hints enabling the discoverability of settings within Murex.\"]},\"523\":{\"h\":\"\\\"Global\\\": boolean (false)\",\"t\":[\"This defines whether this setting is global or scoped.\",\"All Dynamic settings must also be Global. This is because Dynamic settings rely on a state that likely isn't scoped (eg the contents of a config file).\"]},\"524\":{\"h\":\"\\\"Default\\\": any (required)\",\"t\":[\"This is the initialized and default value.\"]},\"525\":{\"h\":\"\\\"Options\\\": array (nil)\",\"t\":[\"Some suggested options (if known) to provide as autocompletion suggestions in the interactive command line.\"]},\"526\":{\"h\":\"\\\"Dynamic\\\": map of strings (nil)\",\"t\":[\"Only use this if config options need to be more than just static values stored inside Murex's runtime. Using Dynamic means autocomplete get app key and autocomplete set app key value will spawn off a subshell running a code block defined from the Read and Write mapped values. eg\",\"# Create the example config file (this is the default value) -> > example.conf # mxjson format, so we can have comments and block quotes: #, (, ) config define example test ({ \\\"Description\\\": \\\"This is only an example\\\", \\\"DataType\\\": \\\"str\\\", \\\"Global\\\": true, \\\"Dynamic\\\": { \\\"Read\\\": ({ open example.conf }), \\\"Write\\\": ({ -> > example.conf }) }, # read the config file to get the default value \\\"Default\\\": \\\"${open example.conf}\\\" }) \",\"It's also worth noting the different syntax between Read and Default. The Read code block is being executed when the Read directive is being requested, whereas the Default code block is being executed when the JSON is being read.\",\"In technical terms, the Default code block is being executed by Murex when config define is getting executed where as the Read and Write code blocks are getting stored as a JSON string and then executed only when those hooks are getting triggered.\",\"See the mxjson data-type for more details.\"]},\"527\":{\"h\":\"\\\"Dynamic\\\":\",\"t\":[\"This is executed when autocomplete get app key is ran. The STDOUT of the code block is the setting's value.\"]},\"528\":{\"h\":\"\\\"Dynamic\\\":\",\"t\":[\"This is executed when autocomplete is setting a value (eg set, default, eval). is ran. The STDIN of the code block is the new value.\"]},\"529\":{\"h\":\"Synonyms\",\"t\":[\"config\",\"!config\"]},\"530\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"append: Add data to the end of an array\",\"event: Event driven programming for shell scripts\",\"function: Define a function block\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"match: Match an exact value in an array\",\"open: Open a file with a preferred handler\",\"post: HTTP POST request with a JSON-parsable return\",\"runtime: Returns runtime information on the internal state of Murex\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"531\":{\"h\":\"continue - Command Reference\",\"t\":[\"Terminate process of a block within a caller function\"]},\"532\":{\"h\":\"Description\",\"t\":[\"continue will terminate execution of a block (eg function, private, foreach, if, etc) right up until the caller function. In iteration loops like foreach and formap this will result in behavior similar to the continue statement in other programming languages.\"]},\"533\":{\"h\":\"Usage\",\"t\":[\"continue block-name \"]},\"534\":{\"h\":\"Examples\",\"t\":[\"%[1..10] -> foreach i { if { $i == 5 } then { out \\\"continue\\\" continue foreach out \\\"skip this code\\\" } out $i } \",\"Running the above code would output:\",\"» foo 1 2 3 4 continue 6 7 8 9 10 \"]},\"535\":{\"h\":\"Detail\",\"t\":[\"continue cannot escape the bounds of its scope (typically the function it is running inside). For example, in the following code we are calling continue bar (which is a different function) inside of the function foo:\",\"function foo { %[1..10] -> foreach i { out $i if { $i == 5 } then { out \\\"exit running function\\\" continue bar out \\\"ended\\\" } } } function bar { foo } \",\"Regardless of whether we run foo or bar, both of those functions will raise the following error:\",\"Error in `continue` (7,17): no block found named `bar` within the scope of `foo` \"]},\"536\":{\"h\":\"See Also\",\"t\":[\"break: Terminate execution of a block within your processes scope\",\"exit: Exit murex\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"function: Define a function block\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"out: Print a string to the STDOUT with a trailing new line character\",\"private: Define a private function block\",\"return:\\nExits current function scope\"]},\"537\":{\"h\":\"count - Command Reference\",\"t\":[\"Count items in a map, list or array\"]},\"538\":{\"h\":\"Description\"},\"539\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> count: [ --duplications | --unique | --total ] -> `<stdout>` \"]},\"540\":{\"h\":\"Examples\",\"t\":[\"Count number of items in a map, list or array:\",\"» tout: json ([\\\"a\\\", \\\"b\\\", \\\"c\\\"]) -> count 3 \"]},\"541\":{\"h\":\"Flags\",\"t\":[\"--duplications Output a JSON map of items and the number of their occurrences in a list or array\",\"--total Read an array, list or map from STDIN and output the length for that array (default behaviour)\",\"--unique Print the number of unique elements in a list or array\",\"-d Alias for `--duplications\",\"-t Alias for `--total\",\"-u Alias for `--unique\"]},\"542\":{\"h\":\"Detail\"},\"543\":{\"h\":\"Modes\",\"t\":[\"If no flags are set, count will default to using --total.\"]},\"544\":{\"h\":\"Total: --total / -t\",\"t\":[\"This will read an array, list or map from STDIN and output the length for that array.\",\"» a [25-Dec-2020..05-Jan-2021] -> count 12 \",\"This also replaces the older len method.\",\"Please note that this returns the length of the array rather than string. For example out \\\"foobar\\\" -> count would return 1 because an array in the str data type would be new line separated (eg out \\\"foo\\\\nbar\\\" -> count would return 2). If you need to count characters in a string and are running POSIX (eg Linux / BSD / OSX) then it is recommended to use wc instead. But be mindful that wc will also count new line characters.\",\"» out: \\\"foobar\\\" -> count 1 » out: \\\"foo\\\\nbar\\\" -> count 2 » out: \\\"foobar\\\" -> wc: -c 7 » out: \\\"foo\\\\nbar\\\" -> wc: -c 8 » printf: \\\"foobar\\\" -> wc: -c 6 # (printf does not print a trailing new line) \"]},\"545\":{\"h\":\"Duplications: --duplications / -d\",\"t\":[\"This returns a JSON map of items and the number of their occurrences in a list or array.\",\"For example in the quote below, only the word \\\"the\\\" is repeated so that entry will have a value of 2 while ever other entry has a value of 1 because they only appear once in the quote.\",\"» out: \\\"the quick brown fox jumped over the lazy dog\\\" -> jsplit: \\\\s -> count: --duplications { \\\"brown\\\": 1, \\\"dog\\\": 1, \\\"fox\\\": 1, \\\"jumped\\\": 1, \\\"lazy\\\": 1, \\\"over\\\": 1, \\\"quick\\\": 1, \\\"the\\\": 2 } \"]},\"546\":{\"h\":\"Unique: --unique / -u\",\"t\":[\"Returns the number of unique elements in a list or array.\",\"For example in the quote below, only the word \\\"the\\\" is repeated, thus the unique count should be one less than the total count:\",\"» out \\\"the quick brown fox jumped over the lazy dog\\\" -> jsplit \\\\s -> count --unique 8 » out \\\"the quick brown fox jumped over the lazy dog\\\" -> jsplit \\\\s -> count --total 9 \"]},\"547\":{\"h\":\"Synonyms\",\"t\":[\"count\",\"len\"]},\"548\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"map: Creates a map from two data sources\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"prepend: Add data to the start of an array\",\"ta (mkarray): A sophisticated yet simple way to build an array of a user defined data-type\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"549\":{\"h\":\"\",\"t\":[\"f# cpuarch - Command Reference\",\"Output the hosts CPU architecture\"]},\"550\":{\"h\":\"Description\",\"t\":[\"Output the hosts CPU architecture.\"]},\"551\":{\"h\":\"Usage\",\"t\":[\"cpuarch -> `<stdout>` \"]},\"552\":{\"h\":\"Examples\",\"t\":[\"» cpuarch amd64 \"]},\"553\":{\"h\":\"See Also\",\"t\":[\"cpucount: Output the number of CPU cores available on your host\",\"os:\\nOutput the auto-detected OS name\"]},\"554\":{\"h\":\"cpucount - Command Reference\",\"t\":[\"Output the number of CPU cores available on your host\"]},\"555\":{\"h\":\"Description\",\"t\":[\"Output the number of CPU cores available on your host.\"]},\"556\":{\"h\":\"Usage\",\"t\":[\"cpucount -> `<stdout>` \"]},\"557\":{\"h\":\"Examples\",\"t\":[\"» cpucount 4 \"]},\"558\":{\"h\":\"See Also\",\"t\":[\"cpuarch: Output the hosts CPU architecture\",\"os:\\nOutput the auto-detected OS name\"]},\"559\":{\"h\":\"datetime - Command Reference\",\"t\":[\"A date and/or time conversion tool (like printf but for date and time values)\"]},\"560\":{\"h\":\"Description\",\"t\":[\"While date is a standard UNIX tool, it's syntax can vary from Linux to macOS. datetype aims to be a cross platform alternative while also offering a range of saner syntax options too.\",\"The syntax for datetime is modelled from date and time libraries from various popular programming languages.\"]},\"561\":{\"h\":\"Usage\",\"t\":[\"Pass date/time value as a parameter:\",\"datetime --in \\\"format\\\" --out \\\"format\\\" --value \\\"date/time\\\" -> `<stdout>` \",\"Read date/time value from STDIN:\",\"`<stdin>` -> datetime --in \\\"format\\\" --out \\\"format\\\" -> `<stdout>` \"]},\"562\":{\"h\":\"Examples\",\"t\":[\"Output current date and time:\",\"» datetime: --in \\\"{now}\\\" --out \\\"{go}01/02/06 15:04:05\\\" 12/08/21 22:32:30 \",\"Convert STDIN into epoch:\",\"» echo \\\"12/08/21 22:32:30\\\" -> datetime: --in \\\"{go}01/02/06 15:04:05\\\" --out \\\"{unix}\\\" 1639002750 \",\"Convert value passed as a command line argument:\",\"» datetime: --value \\\"12/08/21 22:32:30\\\" --in \\\"{go}01/02/06 15:04:05\\\" --out \\\"{unix}\\\" 1639002750 \"]},\"563\":{\"h\":\"Flags\",\"t\":[\"--in Defines the date/time string is formatted in `--value\",\"--out Defined how the date/time string should be formatted in STDOUT\",\"--value Date/time value to convert (if omitted and the input format is not set to {now} then date/time is read from STDIN)\"]},\"564\":{\"h\":\"Detail\"},\"565\":{\"h\":\"Date Time Format Code Parsers\",\"t\":[\"datetime supports a number of parsers, defined in curly braces.\"]},\"566\":{\"h\":\"{py} : Python strftime / strptime format codes\",\"t\":[\"Murex doesn't support all the language and locale features of Python, instead defaulting to English. However enough support is there to cover most use cases.\",\"Documentation regarding these format codes can be found on docs.python.org.\"]},\"567\":{\"h\":\"{go} : Go (lang) time.Time format codes\",\"t\":[\"Murex has full support for Go's date/time parsing.\",\"Documentation regarding these format codes can be found on pkg.go.dev.\"]},\"568\":{\"h\":\"{now} : Current date and time\",\"t\":[\"This is only supported as an input. When it is used --value flag is not required.\"]},\"569\":{\"h\":\"See Also\",\"t\":[\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray):\\nA sophisticated yet simple way to build an array or list\"]},\"570\":{\"h\":\"debug - Command Reference\",\"t\":[\"Debugging information\"]},\"571\":{\"h\":\"Description\",\"t\":[\"debug has two modes: as a function and as a method.\"]},\"572\":{\"h\":\"Debug Method\",\"t\":[\"This usage will return debug information about the previous function ran.\"]},\"573\":{\"h\":\"Debug Function:\",\"t\":[\"This will enable or disable debugging mode.\"]},\"574\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> debug -> `<stdout>` debug: boolean -> `<stdout>` debug -> `<stdout>` \"]},\"575\":{\"h\":\"Examples\",\"t\":[\"Return debugging information on the previous function:\",\"» echo: \\\"hello, world!\\\" -> debug { \\\"DataType\\\": { \\\"Go\\\": \\\"[]string\\\", \\\"Murex\\\": \\\"str\\\" }, \\\"Process\\\": { \\\"Context\\\": { \\\"Context\\\": 0 }, \\\"Stdin\\\": {}, \\\"Stdout\\\": {}, \\\"Stderr\\\": {}, \\\"Parameters\\\": { \\\"Params\\\": [ \\\"hello, world!\\\" ], \\\"Tokens\\\": [ [ { \\\"Type\\\": 0, \\\"Key\\\": \\\"\\\" } ], [ { \\\"Type\\\": 1, \\\"Key\\\": \\\"hello, world!\\\" } ], [ { \\\"Type\\\": 0, \\\"Key\\\": \\\"\\\" } ] ] }, \\\"ExitNum\\\": 0, \\\"Name\\\": \\\"echo\\\", \\\"Id\\\": 3750, \\\"Exec\\\": { \\\"Pid\\\": 0, \\\"Cmd\\\": null, \\\"PipeR\\\": null, \\\"PipeW\\\": null }, \\\"PromptGoProc\\\": 1, \\\"Path\\\": \\\"\\\", \\\"IsMethod\\\": false, \\\"IsNot\\\": false, \\\"NamedPipeOut\\\": \\\"out\\\", \\\"NamedPipeErr\\\": \\\"err\\\", \\\"NamedPipeTest\\\": \\\"\\\", \\\"State\\\": 7, \\\"IsBackground\\\": false, \\\"LineNumber\\\": 1, \\\"ColNumber\\\": 1, \\\"RunMode\\\": 0, \\\"Config\\\": {}, \\\"Tests\\\": { \\\"Results\\\": null }, \\\"Variables\\\": {}, \\\"FidTree\\\": [ 0, 3750 ], \\\"CreationTime\\\": \\\"2019-01-20T00:00:52.167127131Z\\\", \\\"StartTime\\\": \\\"2019-01-20T00:00:52.167776212Z\\\" } } \",\"Enable or disable debug mode:\",\"» debug: on true » debug: off false \",\"Output whether debug mode is enabled or disabled:\",\"» debug false \"]},\"576\":{\"h\":\"Detail\",\"t\":[\"When enabling or disabling debug mode, because the parameter is a murex boolean type, it means you can use other boolean terms. eg\",\"# enable debugging » debug 1 » debug on » debug yes » debug true # disable debugging » debug 0 » debug off » debug no » debug false \",\"It is also worth noting that the debugging information needs to be written into the Go source code rather than in Murex's shell scripting language. If you require debugging those processes then please use Murex's test framework\"]},\"577\":{\"h\":\"See Also\",\"t\":[\"runtime: Returns runtime information on the internal state of Murex\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"578\":{\"h\":\"null - Command Reference\",\"t\":[\"null function. Similar to /dev/null\"]},\"579\":{\"h\":\"Description\",\"t\":[\"null is a function that acts a little like the null data type and the UNIX /dev/null device.\"]},\"580\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> null \"]},\"581\":{\"h\":\"Examples\",\"t\":[\"» out: \\\"Hello, world!\\\" -> null \"]},\"582\":{\"h\":\"Detail\",\"t\":[\"While this method does exist, a more idiomatic way to suppress STDOUT is to use the named pipe property rather than piping to null:\",\"» out: <null> \\\"Hello, world!\\\" \"]},\"583\":{\"h\":\"Synonyms\",\"t\":[\"null\"]},\"584\":{\"h\":\"See Also\",\"t\":[\"break: Terminate execution of a block within your processes scope\",\"die: Terminate murex with an exit number of 1\",\"exit:\\nExit murex\"]},\"585\":{\"h\":\"die - Command Reference\",\"t\":[\"Terminate murex with an exit number of 1\"]},\"586\":{\"h\":\"Description\",\"t\":[\"Terminate Murex with an exit number of 1.\"]},\"587\":{\"h\":\"Usage\",\"t\":[\"die \"]},\"588\":{\"h\":\"Examples\",\"t\":[\"» die \"]},\"589\":{\"h\":\"See Also\",\"t\":[\"break: Terminate execution of a block within your processes scope\",\"exit: Exit murex\",\"null:\\nnull function. Similar to /dev/null\"]},\"590\":{\"h\":\"[[ (element) - Command Reference\",\"t\":[\"Outputs an element from a nested structure\"]},\"591\":{\"h\":\"Description\",\"t\":[\"Outputs an element from an array, map or table. Unlike index ([), element takes a path parameter which means it can work inside nested structures without pipelining multiple commands together. However this comes with the drawback that you can only return one element.\",\"Element ([[) also doesn't support the bang prefix (unlike) index.\",\"Please note that indexes in Murex are counted from zero.\"]},\"592\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> [[ element ]] -> `<stdout>` $variable[[ element ]] -> `<stdout>` \"]},\"593\":{\"h\":\"Examples\",\"t\":[\"Return the 2nd element in an array\",\"» ja [0..9] -> [[ /1 ]] [ \\\"1\\\", ] \",\"Return the data-type and description of config shell syntax-highlighting\",\"» config -> [[ /shell/syntax-highlighting/Data-Type ]] bool \"]},\"594\":{\"h\":\"Detail\"},\"595\":{\"h\":\"Element counts from zero\",\"t\":[\"Indexes in Murex behave like any other computer array in that all arrays start from zero (0).\"]},\"596\":{\"h\":\"Alternative path separators\",\"t\":[\"Element uses the first character in the path as the separator. So the following are all valid parameters:\",\"» config -> [[ ,shell,syntax-highlighting,Data-Type ]] bool » config -> [[ >shell>syntax-highlighting>Data-Type ]] bool » config -> [[ \\\\|shell\\\\|syntax-highlighting\\\\|Data-Type ]] bool » config -> [[ >shell>syntax-highlighting>Data-Type ]] bool \",\"However there are a few of caveats:\",\"Currently element does not support unicode separators. All separators must be 1 byte characters. This limitation is highlighted as a bug, albeit a low priority one. If this limitation does directly affect you then raise an issue on GitHub to get the priority bumped up.\",\"Any shell tokens (eg pipe |, ;, }, etc) will need to be escaped. For readability reasons it is recommended not to use such characters even though it is technically possible to.\",\" # Would fail because the semi-colon is an unescaped / unquoted shell token config -> [[ ;shell-syntax-highlighting;Data-Type ]] \",\"Please also make sure you don't use a character that is also used inside key names because keys cannot be escaped. For example both of the following would fail:\",\" # Would fail because 'syntax-highlighting' and 'Data-Type' both also contain # the separator character config -> [[ -shell-syntax-highlighting-Data-Type ]] # Would fail because you cannot escape key names (escaping happens at the # shell parser level rather than command parameter level) config -> [[ -shell-syntax\\\\-highlighting-Data\\\\-Type ]] \"]},\"597\":{\"h\":\"Quoting parameters\",\"t\":[\"In Murex, everything is a function. Thus even [[ is a function name and the closing ]] is actually a last parameter. This means the recommended way to quote element parameters is to quote specific key names or the entire path:\",\"» config -> [[ /shell/\\\"syntax-highlighting\\\"/Data-Type ]] bool » config -> [[ \\\"|shell|syntax-highlighting|Data-Type\\\" ]] bool \"]},\"598\":{\"h\":\"Synonyms\",\"t\":[\"[[\",\"element\"]},\"599\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"config: Query or define Murex runtime settings\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac:\\nReverse the order of an array\"]},\"600\":{\"h\":\"= (arithmetic evaluation) - Command Reference\",\"t\":[\"Evaluate a mathematical function (deprecated)\"]},\"601\":{\"h\":\"Description\",\"t\":[\"= evaluates a mathematical function and returns it's output\",\"This is a deprecated feature. Please refer to expr instead.\"]},\"602\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> = evaluation -> `<stdout>` = evaluation -> `<stdout>` \"]},\"603\":{\"h\":\"Examples\",\"t\":[\"As a method:\",\"» let: age=18 » $age -> = < 21 true » $age -> = < 21 -> if { out: \\\"Under 21\\\" } else { out: \\\"Over 21\\\" } Under 21 \",\"As a function:\",\"» let: age=18 » = age < 21 true » = age < 21 -> if { out: \\\"Under 21\\\" } else { out: \\\"Over 21\\\" } Under 21 \",\"Inlining as a function:\",\"» let: age=18 » if { = age < 21 } then { out: \\\"Under 21\\\" } else { out: \\\"Over 21\\\" } Under 21 \"]},\"604\":{\"h\":\"Detail\"},\"605\":{\"h\":\"Variables\",\"t\":[\"There are two ways you can use variables with the math functions. Either by string interpolation like you would normally with any other function, or directly by name.\",\"String interpolation:\",\"» set abc=123 » = $abc==123 true \",\"Directly by name:\",\"» set abc=123 » = abc==123 false \",\"To understand the difference between the two, you must first understand how string interpolation works; which is where the parser tokenised the parameters like so\",\"command line: = $abc==123 token 1: command (name: \\\"=\\\") token 2: parameter 1, string (content: \\\"\\\") token 3: parameter 1, variable (name: \\\"abc\\\") token 4: parameter 1, string (content: \\\"==123\\\") \",\"Then when the command line gets executed, the parameters are compiled on demand similarly to this crude pseudo-code\",\"command: \\\"=\\\" parameters 1: concatenate(\\\"\\\", GetValue(abc), \\\"==123\\\") output: \\\"=\\\" \\\"123==123\\\" \",\"Thus the actual command getting run is literally 123==123 due to the variable being replace before the command executes.\",\"Whereas when you call the variable by name it's up to = or let to do the variable substitution.\",\"command line: = abc==123 token 1: command (name: \\\"=\\\") token 2: parameter 1, string (content: \\\"abc==123\\\") command: \\\"=\\\" parameters 1: concatenate(\\\"abc==123\\\") output: \\\"=\\\" \\\"abc==123\\\" \",\"The main advantage (or disadvantage, depending on your perspective) of using variables this way is that their data-type is preserved.\",\"» set str abc=123 » = abc==123 false » set int abc=123 » = abc==123 true \",\"Unfortunately is one of the biggest areas in Murex where you'd need to be careful. The simple addition or omission of the dollar prefix, $, can change the behavior of = and let.\"]},\"606\":{\"h\":\"Strings\",\"t\":[\"Because the usual Murex tools for encapsulating a string (\\\", ' and ()) are interpreted by the shell language parser, it means we need a new token for handling strings inside = and let. This is where backtick comes to our rescue.\",\"» set str abc=123 » = abc==`123` true \",\"Please be mindful that if you use string interpolation then you will need to instruct = and let that your field is a string\",\"» set str abc=123 » = `$abc`==`123` true \"]},\"607\":{\"h\":\"Best practice recommendation\",\"t\":[\"As you can see from the sections above, string interpolation offers us some conveniences when comparing variables of differing data-types, such as a str type with a number (eg num or int). However it makes for less readable code when just comparing strings. Thus the recommendation is to avoid using string interpolation except only where it really makes sense (ie use it sparingly).\"]},\"608\":{\"h\":\"Non-boolean logic\",\"t\":[\"Thus far the examples given have been focused on comparisons however = and let supports all the usual arithmetic operators:\",\"» = 10+10 20 » = 10/10 1 » = (4 * (3 + 2)) 20 » = `foo`+`bar` foobar \"]},\"609\":{\"h\":\"Read more\",\"t\":[\"Murex uses the govaluate package. More information can be found in it's manual.\"]},\"610\":{\"h\":\"Synonyms\",\"t\":[\"=\"]},\"611\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"( (brace quote): Write a string to the STDOUT without new line\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"global: Define a global variable and set it's value\",\"global: Define a global variable and set it's value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set:\\nDefine a local variable and set it's value\"]},\"612\":{\"h\":\"err - Command Reference\",\"t\":[\"Print a line to the STDERR\"]},\"613\":{\"h\":\"Description\",\"t\":[\"Write parameters to STDERR with a trailing new line character.\"]},\"614\":{\"h\":\"Usage\",\"t\":[\"err: string to write -> <stderr> \"]},\"615\":{\"h\":\"Examples\",\"t\":[\"» err Hello, World! Hello, World! \"]},\"616\":{\"h\":\"Detail\",\"t\":[\"err outputs as string data-type. This can be changed by casting\",\"err { \\\"Code\\\": 404, \\\"Message\\\": \\\"Page not found\\\" } ? cast json \",\"However passing structured data-types along the STDERR stream is not recommended as any other function within your code might also pass error messages along the same stream and thus taint your structured data. This is why Murex does not supply a tout function for STDERR. The recommended solution for passing messages like these which you want separate from your STDOUT stream is to create a new Murex named pipe.\",\"» pipe: --create messages » bg { <messages> -> pretty } » tout: <messages> json { \\\"Code\\\": 404, \\\"Message\\\": \\\"Page not found\\\" } » pipe: --close messages { \\\"Code\\\": 404, \\\"Message\\\": \\\"Page not found\\\" } \"]},\"617\":{\"h\":\"ANSI Constants\",\"t\":[\"err supports ANSI constants.\"]},\"618\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"( (brace quote): Write a string to the STDOUT without new line\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"bg: Run processes in the background\",\"cast: Alters the data type of the previous function without altering it's output\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pipe: Manage Murex named pipes\",\"pretty: Prettifies JSON to make it human readable\",\"pt: Pipe telemetry. Writes data-types and bytes written\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"619\":{\"h\":\"escape - Command Reference\",\"t\":[\"Escape or unescape input\"]},\"620\":{\"h\":\"Description\",\"t\":[\"escape takes input from either STDIN or the parameters and returns the same data, escaped.\",\"!escape does the same process in reverse, where it takes escaped data and returns its unescaped counterpart.\"]},\"621\":{\"h\":\"Usage\",\"t\":[\"Escape\",\"`<stdin>` -> escape -> `<stdout>` escape string to escape -> `<stdout>` \",\"Unescape\",\"`<stdin>` -> !escape -> `<stdout>` !escape string to unescape -> `<stdout>` \"]},\"622\":{\"h\":\"Examples\",\"t\":[\"Escape\",\"» out (multi » line » string) -> escape \\\"multi\\\\nline\\\\nstring\\\\n\\\" \"]},\"623\":{\"h\":\"Synonyms\",\"t\":[\"escape\",\"!escape\"]},\"624\":{\"h\":\"See Also\",\"t\":[\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl:\\nEncode or decodes text for the URL\"]},\"625\":{\"h\":\"esccli - Command Reference\",\"t\":[\"Escapes an array so output is valid shell code\"]},\"626\":{\"h\":\"Description\",\"t\":[\"esccli takes an array and escapes any characters that might cause problems when pasted back into the terminal. Typically you'd want to use this against command parameters.\"]},\"627\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> esccli -> `<stdout>` esccli @array -> `<stdout>` \"]},\"628\":{\"h\":\"Examples\",\"t\":[\"As a method\",\"» alias foobar=out 'foo$b@r' » alias -> [foobar] [ \\\"out\\\", \\\"foo$b@r\\\" ] » alias -> [foobar] -> esccli out foo\\\\$b\\\\@r \",\"As a function\",\"» alias -> [foobar] -> set: fb » $fb [\\\"out\\\",\\\"foo$b@r\\\"] » esccli: @fb out foo\\\\$b\\\\@r \"]},\"629\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"alias: Create an alias for a command\",\"escape: Escape or unescape input\",\"eschtml: Encode or decodes text for HTML\",\"escurl: Encode or decodes text for the URL\",\"out:\\nPrint a string to the STDOUT with a trailing new line character\"]},\"630\":{\"h\":\"eschtml - Command Reference\",\"t\":[\"Encode or decodes text for HTML\"]},\"631\":{\"h\":\"Description\",\"t\":[\"eschtml takes input from either STDIN or the parameters and returns the same data, HTML escaped.\",\"!eschtml does the same process in reverse, where it takes HTML escaped data and returns its unescaped counterpart.\"]},\"632\":{\"h\":\"Usage\",\"t\":[\"Escape\",\"`<stdin>` -> eschtml -> `<stdout>` eschtml string to escape -> `<stdout>` \",\"Unescape\",\"`<stdin>` -> !eschtml -> `<stdout>` !eschtml string to unescape -> `<stdout>` \"]},\"633\":{\"h\":\"Examples\",\"t\":[\"Escape\",\"» out: \\\"<h1>foo & bar</h1>\\\" -> eschtml &lt;h1&gt;foo &amp; bar&lt;/h1&gt; \",\"Unescape\",\"» out: '&lt;h1&gt;foo &amp; bar&lt;/h1&gt;' -> !eschtml <h1>foo & bar</h1> \"]},\"634\":{\"h\":\"Synonyms\",\"t\":[\"eschtml\",\"!eschtml\"]},\"635\":{\"h\":\"See Also\",\"t\":[\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"escurl: Encode or decodes text for the URL\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"636\":{\"h\":\"escurl - Command Reference\",\"t\":[\"Encode or decodes text for the URL\"]},\"637\":{\"h\":\"Description\",\"t\":[\"escurl takes input from either STDIN or the parameters and returns the same data, escaped for the URL.\",\"!eschtml does the same process in reverse, where it takes URL escaped data and returns its unescaped counterpart.\"]},\"638\":{\"h\":\"Usage\",\"t\":[\"Escape\",\"`<stdin>` -> escurl -> `<stdout>` escurl string to escape -> `<stdout>` \",\"Unescape\",\"`<stdin>` -> !escurl -> `<stdout>` !escurl string to unescape -> `<stdout>` \"]},\"639\":{\"h\":\"Examples\",\"t\":[\"Escape\",\"» out: \\\"!? <>\\\" -> escurl %21%3F%20%3C%3E%0A \",\"Unescape\",\"out: '%21%3F%20%3C%3E%0A' -> !escurl !? <> \"]},\"640\":{\"h\":\"Synonyms\",\"t\":[\"escurl\",\"!escurl\"]},\"641\":{\"h\":\"See Also\",\"t\":[\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"642\":{\"h\":\"event - Command Reference\",\"t\":[\"Event driven programming for shell scripts\"]},\"643\":{\"h\":\"Description\",\"t\":[\"Create or destroy an event interrupt,\",\"Each event will have subtilty different behaviour depending on the event itself due to the differing roles of each event system. Therefore it is recommended that you read the docs on each event to understand its behaviour.\",\"However while they might differ, the event API does try to retain a level of external consistency. For example each event in defined via name=interrupt where name is a user defined handle (like a variable or function would have a name) and interrupt is a system state you wish the event to be fired on.\",\"Each event function will have a payload sent via STDIN which would look a little like the following:\",\"{ \\\"Name\\\": \\\"\\\", \\\"Interrupt\\\": {} } \",\"Name will always refer to the name you passed when defining the event. And Interrupt will carry any event specific metadata that might be useful to the event function. Thus the value of Interrupt will vary from one event to another.\"]},\"644\":{\"h\":\"Usage\",\"t\":[\"event: event-type name=interrupt { code block } !event: event-type name \"]},\"645\":{\"h\":\"Examples\",\"t\":[\"Create an event:\",\"event: onSecondsElapsed autoquit=60 { out \\\"You're 60 second timeout has elapsed. Quitting murex\\\" exit 1 } \",\"Destroy an event:\",\"!event onSecondsElapsed autoquit \"]},\"646\":{\"h\":\"Detail\"},\"647\":{\"h\":\"Supported events\",\"t\":[\"onCommandCompletion: Trigger an event upon a command's completion\",\"onFileSystemChange: Add a filesystem watch\",\"onPrompt: Events triggered by changes in state of the interactive shell\",\"onSecondsElapsed: Events triggered by time intervals\"]},\"648\":{\"h\":\"ANSI constants\",\"t\":[\"The interrupt field in the CLI supports ANSI constants. eg\",\"event: onKeyPress f1={F1-VT100} { tout: qs HintText=\\\"Key F1 Pressed\\\" } \"]},\"649\":{\"h\":\"Compiled events\",\"t\":[\"To list compiled event types:\",\"» runtime --events -> formap event ! { out $event } onCommandCompletion onFileSystemChange onKeyPress onPrompt onSecondsElapsed \"]},\"650\":{\"h\":\"Synonyms\",\"t\":[\"event\",\"!event\"]},\"651\":{\"h\":\"See Also\",\"t\":[\"formap: Iterate through a map or other collection of data\",\"function: Define a function block\",\"open: Open a file with a preferred handler\",\"private: Define a private function block\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"652\":{\"h\":\"exec - Command Reference\",\"t\":[\"Runs an executable\"]},\"653\":{\"h\":\"Description\",\"t\":[\"With Murex, like most other shells, you launch a process by calling the name of that executable directly. While this is suitable 99% of the time, occasionally you might run into an edge case where that wouldn't work. The primary reason being if you needed to launch a process from a variable, eg\",\"» set exe=uname » $exe uname \",\"As you can see here, Murex's behavior here is to output the contents of the variable rather then executing the contents of the variable. This is done for safety reasons, however if you wanted to override that behavior then you could prefix the variable with exec:\",\"» set exe=uname » exec $exe Linux \"]},\"654\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> exec `<stdin>` -> exec -> `<stdout>` exec -> `<stdout>` \"]},\"655\":{\"h\":\"Examples\",\"t\":[\"» exec printf \\\"Hello, world!\\\" Hello, world! \",\"Working around aliases:\",\"If you have an alias like alias ls=ls --color=auto and you wanted to run ls but without colour, you might run exec ls.\"]},\"656\":{\"h\":\"Detail\",\"t\":[\"If any command doesn't exist as a builtin, function nor alias, then Murex will default to forking out to any command with this name (subject to an absolute path or the order of precedence in $PATH). Any forked process will show up in both the operating systems process viewer (eg ps) but also Murex's own process viewer, fid-list. However inside fid-list you will notice that all external processes are listed as exec with the process name as part of exec's parameters. That is because exec is handler for programs that aren't native to Murex.\"]},\"657\":{\"h\":\"Compatibility with POSIX\",\"t\":[\"For compatibility with traditional shells like Bash and Zsh, command is an alias for exec.\"]},\"658\":{\"h\":\"Synonyms\",\"t\":[\"exec\",\"command\"]},\"659\":{\"h\":\"See Also\",\"t\":[\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"builtins: Returns runtime information on the internal state of Murex\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"jobs: Lists all running functions within the current Murex session\",\"murex-update-exe-list: Forces Murex to rescan $PATH looking for executables\",\"set:\\nDefine a local variable and set it's value\"]},\"660\":{\"h\":\"exit - Command Reference\",\"t\":[\"Exit murex\"]},\"661\":{\"h\":\"Description\",\"t\":[\"Exit's Murex with either a exit number of 0 (by default if no parameters supplied) or a custom value specified by the first parameter.\",\"exit is not scope aware; if it is included in a function then the whole shell will still exist and not just that function.\"]},\"662\":{\"h\":\"Usage\",\"t\":[\"exit exit number \"]},\"663\":{\"h\":\"Examples\",\"t\":[\"» exit » exit 42 \"]},\"664\":{\"h\":\"See Also\",\"t\":[\"break: Terminate execution of a block within your processes scope\",\"die: Terminate murex with an exit number of 1\",\"null:\\nnull function. Similar to /dev/null\"]},\"665\":{\"h\":\"exitnum - Command Reference\",\"t\":[\"Output the exit number of the previous process\"]},\"666\":{\"h\":\"Description\",\"t\":[\"Output the exit number of the previous process.\"]},\"667\":{\"h\":\"Usage\",\"t\":[\"exitnum -> `<stdout>` \"]},\"668\":{\"h\":\"Examples\",\"t\":[\"» exitnum 0 \"]},\"669\":{\"h\":\"See Also\",\"t\":[\"runtime: Returns runtime information on the internal state of Murex\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"670\":{\"h\":\"export - Command Reference\",\"t\":[\"Define an environmental variable and set it's value\"]},\"671\":{\"h\":\"Description\",\"t\":[\"Defines, updates or deallocates an environmental variable.\"]},\"672\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> export var_name export var_name=data \"]},\"673\":{\"h\":\"Examples\",\"t\":[\"As a method:\",\"» out \\\"Hello, world!\\\" -> export hw » out \\\"$hw\\\" Hello, World! \",\"As a function:\",\"» export hw=\\\"Hello, world!\\\" » out \\\"$hw\\\" Hello, World! \"]},\"674\":{\"h\":\"Detail\"},\"675\":{\"h\":\"Deallocation\",\"t\":[\"You can unset variable names with the bang prefix:\",\"!export var_name \",\"For compatibility with other shells, unset is also supported but it's really not an idiomatic method of deallocation since it's name is misleading and suggests it is a deallocator for local Murex variables defined via set.\"]},\"676\":{\"h\":\"Exporting a local or global variable\",\"t\":[\"You can also export a local or global variable of the same name by specifying that variable name without a following value. For example\",\"# Create a local variable called 'foo': » set: foo=bar » env -> grep: foo # Export that local variable as an environmental variable: » export: foo » env -> grep: foo foo=bar # Changing the value of the local variable doesn't alter the value of the environmental variable: » set: foo=rab » env -> grep: foo foo=bar » out: $foo rab \"]},\"677\":{\"h\":\"Type Annotations\",\"t\":[\"When set or global are used as a function, the parameters are passed as a string which means the variables are defined as a str. If you wish to define them as an alternate data type then you should add type annotations:\",\"» set: int age = 30 (`$age` is an integer, `int`) » global: bool dark_theme = true \",\"($dark_theme is a boolean, bool)\",\"When using set or global as a method, by default they will define the variable as the data type of the pipe:\",\"» open: example.json -> set: file \",\"($file is defined a json type because open wrote to set's pipe with a json type)\",\"You can also annotate set and global when used as a method too:\",\"out: 30 -> set: int age \",\"($age is an integer, int, despite out writing a string, `str, to the pipe)\",\"export does not support type annotations because environmental variables must always be strings. This is a limitation of the current operating systems.\"]},\"678\":{\"h\":\"Scoping\",\"t\":[\"Variable scoping is simplified to three layers:\",\"Local variables (set, !set, let)\",\"Global variables (global, !global)\",\"Environmental variables (export, !export, unset)\",\"Variables are looked up in that order of too. For example a the following code where set overrides both the global and environmental variable:\",\"» set: foobar=1 » global: foobar=2 » export: foobar=3 » out: $foobar 1 \"]},\"679\":{\"h\":\"Local variables\",\"t\":[\"These are defined via set and let. They're variables that are persistent across any blocks within a function. Functions will typically be blocks encapsulated like so:\",\"function example { # variables scoped inside here } \",\"...or...\",\"private example { # variables scoped inside here } \",\"...however dynamic autocompletes, events, unit tests and any blocks defined in config will also be triggered as functions.\",\"Code running inside any control flow or error handing structures will be treated as part of the same part of the same scope as the parent function:\",\"» function example { » try { » # set 'foobar' inside a `try` block » set: foobar=example » } » # 'foobar' exists outside of `try` because it is scoped to `function` » out: $foobar » } example \",\"Where this behavior might catch you out is with iteration blocks which create variables, eg for, foreach and formap. Any variables created inside them are still shared with any code outside of those structures but still inside the function block.\",\"Any local variables are only available to that function. If a variable is defined in a parent function that goes on to call child functions, then those local variables are not inherited but the child functions:\",\"» function parent { » # set a local variable » set: foobar=example » child » } » » function child { » # returns the `global` value, \\\"not set\\\", because the local `set` isn't inherited » out: $foobar » } » » global: $foobar=\\\"not set\\\" » parent not set \",\"It's also worth remembering that any variable defined using set in the shells FID (ie in the interactive shell) is localised to structures running in the interactive, REPL, shell and are not inherited by any called functions.\"]},\"680\":{\"h\":\"Global variables\",\"t\":[\"Where global differs from set is that the variables defined with global will be scoped at the global shell level (please note this is not the same as environmental variables!) so will cascade down through all scoped code-blocks including those running in other threads.\"]},\"681\":{\"h\":\"Environmental variables\",\"t\":[\"Exported variables (defined via export) are system environmental variables. Inside Murex environmental variables behave much like global variables however their real purpose is passing data to external processes. For example env is an external process on Linux (eg /usr/bin/env on ArchLinux):\",\"» export foo=bar » env -> grep foo foo=bar \"]},\"682\":{\"h\":\"Function Names\",\"t\":[\"As a security feature function names cannot include variables. This is done to reduce the risk of code executing by mistake due to executables being hidden behind variable names.\",\"Instead Murex will assume you want the output of the variable printed:\",\"» out \\\"Hello, world!\\\" -> set hw » $hw Hello, world! \",\"On the rare occasions you want to force variables to be expanded inside a function name, then call that function via exec:\",\"» set cmd=grep » ls -> exec: $cmd main.go main.go \",\"This only works for external executables. There is currently no way to call aliases, functions nor builtins from a variable and even the above exec trick is considered bad form because it reduces the readability of your shell scripts.\"]},\"683\":{\"h\":\"Usage Inside Quotation Marks\",\"t\":[\"Like with Bash, Perl and PHP: Murex will expand the variable when it is used inside a double quotes but will escape the variable name when used inside single quotes:\",\"» out \\\"$foo\\\" bar » out '$foo' $foo » out %($foo) bar \"]},\"684\":{\"h\":\"Synonyms\",\"t\":[\"export\",\"!export\",\"unset\"]},\"685\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"( (brace quote): Write a string to the STDOUT without new line\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set:\\nDefine a local variable and set it's value\"]},\"686\":{\"h\":\"expr - Command Reference\",\"t\":[\"Expressions: mathematical, string comparisons, logical operators\"]},\"687\":{\"h\":\"Description\"},\"688\":{\"h\":\"Usage\",\"t\":[\"expr: expression -> `<stdout>` \"]},\"689\":{\"h\":\"Examples\",\"t\":[\"Order of operations:\",\"» 3 * (3 + 1) 12 \",\"JSON array:\",\"» %[apples oranges grapes] [ \\\"apples\\\", \\\"oranges\\\", \\\"grapes\\\" ] \"]},\"690\":{\"h\":\"See Also\",\"t\":[\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set:\\nDefine a local variable and set it's value\"]},\"691\":{\"h\":\"f - Command Reference\",\"t\":[\"Lists or filters file system objects (eg files)\"]},\"692\":{\"h\":\"Description\",\"t\":[\"f lists or filters lists of file system objects, such as files, directories, etc. f provides a quick way to output file system items that confirm to specific criteria.\",\"You define this criteria by using +flags (eg +s for all symlinks) and optionally then restricting that criteria with -flags (eg -x to remove all executable items). All flags supported as + are also supported as a -.\",\"By default f will return no results. You need to include +flags.\",\"Output is a JSON array as this format preserves whitespace in file names.\"]},\"693\":{\"h\":\"Usage\",\"t\":[\"f: options -> `<stdout>` `<stdin>` -> f: options -> `<stdout>` \"]},\"694\":{\"h\":\"Examples\",\"t\":[\"Return only directories:\",\"f: +d \",\"Return file and directories but exclude symlinks:\",\"f: +fd -s \",\"Filter out files in a list (eg created by g) using conditions set by f:\",\"g: '*.go' -> f: +f rx: '\\\\.(txt|md)' -> f: +fw \"]},\"695\":{\"h\":\"Flags\",\"t\":[\"+ include files (pair this with any other flag apart from -)\",\"- exclude files (pair this with any other flag apart from +)\",\"? deprecated -- use i instead\",\"D regular directories\",\"E other read permissions\",\"F regular files (exc symlinks, devices, sockets, named pipes, etc)\",\"Q other write permissions\",\"R user read permissions\",\"S sockets\",\"W user write permissions\",\"X user execute permissions\",\"Z other execute permissions\",\"b block devices\",\"c character devices\",\"d all directories (inc symlinks)\",\"e group read permissions\",\"f all files (inc symlinks, devices, sockets, name pipes, etc)\",\"i irregular files (nothing else is known about these files)\",\"l symlinks\",\"p POSIX named pipes (FIFO)\",\"q group write permissions\",\"r read permissions (user, group, or other)\",\"s symlinks\",\"w write permissions (user, group, or other)\",\"x execute permissions (user, group, or other)\",\"z group execute permissions\"]},\"696\":{\"h\":\"Detail\",\"t\":[\"+ flags are always matched first. Then the - flags are used to filter out any matches from the + flags.\"]},\"697\":{\"h\":\"See Also\",\"t\":[\"g: Glob pattern matching for file system objects (eg *.txt)\",\"json: JavaScript Object Notation (JSON)\",\"rx:\\nRegexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\"]},\"698\":{\"h\":\"false - Command Reference\",\"t\":[\"Returns a false value\"]},\"699\":{\"h\":\"Description\",\"t\":[\"Returns a false value.\"]},\"700\":{\"h\":\"Usage\",\"t\":[\"false -> `<stdout>` \"]},\"701\":{\"h\":\"Examples\",\"t\":[\"By default, false also outputs the term \\\"false\\\":\",\"» false false \",\"However you can suppress that with the silent flag:\",\"» false -s \"]},\"702\":{\"h\":\"Flags\",\"t\":[\"-s silent - don't output the term \\\"false\\\"\"]},\"703\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"true:\\nReturns a true value\"]},\"704\":{\"h\":\"fexec - Command Reference\",\"t\":[\"Execute a command or function, bypassing the usual order of precedence.\"]},\"705\":{\"h\":\"Description\",\"t\":[\"fexec allows you to execute a command or function, bypassing the usual order of precedence.\"]},\"706\":{\"h\":\"Usage\",\"t\":[\"fexec: flag command [ parameters... ] -> `<stdout>` \"]},\"707\":{\"h\":\"Examples\",\"t\":[\"fexec: private /source/builtin/autocomplete.alias \"]},\"708\":{\"h\":\"Flags\",\"t\":[\"builtin Execute a Murex builtin\",\"function Execute a Murex public function\",\"help Display help message\",\"private Execute a Murex private function\"]},\"709\":{\"h\":\"Detail\"},\"710\":{\"h\":\"Order of precedence\",\"t\":[\"There is an order of precedence for which commands are looked up:\",\"runmode: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.\",\"test and pipe functions also alter the behavior of the compiler and thus are executed ahead of any scripts.\",\"private functions - defined via private. Private's cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via fexec).\",\"Aliases - defined via alias. All aliases are global.\",\"Murex functions - defined via function. All functions are global.\",\"Variables (dollar prefixed) which are declared via global, set or let. Also environmental variables too, declared via export.\",\"globbing: however this only applies for commands executed in the interactive shell.\",\"Murex builtins.\",\"External executable files\",\"You can override this order of precedence via the fexec and exec builtins.\"]},\"711\":{\"h\":\"Compatibility with POSIX\",\"t\":[\"For compatibility with traditional shells like Bash and Zsh, builtin is an alias to `fexec builtin\"]},\"712\":{\"h\":\"Synonyms\",\"t\":[\"fexec\",\"builtin\"]},\"713\":{\"h\":\"See Also\",\"t\":[\"alias: Create an alias for a command\",\"autocomplete: Set definitions for tab-completion in the command line\",\"bg: Run processes in the background\",\"builtins: Returns runtime information on the internal state of Murex\",\"event: Event driven programming for shell scripts\",\"exec: Runs an executable\",\"fg: Sends a background process into the foreground\",\"function: Define a function block\",\"jobs: Lists all running functions within the current Murex session\",\"open: Open a file with a preferred handler\",\"private: Define a private function block\",\"source:\\nImport Murex code from another file of code block\"]},\"714\":{\"h\":\"fg - Command Reference\",\"t\":[\"Sends a background process into the foreground\"]},\"715\":{\"h\":\"Description\",\"t\":[\"fg resumes a stopped process and sends it into the foreground.\"]},\"716\":{\"h\":\"Usage\",\"t\":[\"POSIX only:\",\"fg fid \"]},\"717\":{\"h\":\"Detail\",\"t\":[\"This builtin is only supported on POSIX systems. There is no support planned for Windows (due to the kernel not supporting the right signals) nor Plan 9.\"]},\"718\":{\"h\":\"See Also\",\"t\":[\"bg: Run processes in the background\",\"exec: Runs an executable\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"jobs:\\nLists all running functions within the current Murex session\"]},\"719\":{\"h\":\"fid-kill - Command Reference\",\"t\":[\"Terminate a running Murex function\"]},\"720\":{\"h\":\"Description\",\"t\":[\"fid-kill will terminate a running Murex function in a similar way that the POSIX kill (superficially speaking).\"]},\"721\":{\"h\":\"Usage\",\"t\":[\"fid-kill fid \"]},\"722\":{\"h\":\"Detail\",\"t\":[\"fid-kill doesn't send a kernel signal to the process since Murex is a multi-threaded shell with a single signal, fid-kill will send a cancellation context to any builtins executing (which covers builtins, aliases, public and private functions and any external executables running which were launched within the current Murex shell).\",\"The FID (function ID) sent is not the same as a POSIX (eg Linux, macOS, BSD) PID (process ID). You can obtain a FID from fid-list.\"]},\"723\":{\"h\":\"See Also\",\"t\":[\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"builtins: Returns runtime information on the internal state of Murex\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-killall: Terminate all running Murex functions\",\"fid-list: Lists all running functions within the current Murex session\",\"jobs: Lists all running functions within the current Murex session\",\"murex-update-exe-list:\\nForces Murex to rescan $PATH looking for executables\"]},\"724\":{\"h\":\"fid-killall - Command Reference\",\"t\":[\"Terminate all running Murex functions\"]},\"725\":{\"h\":\"Description\",\"t\":[\"fid-killall will terminate all running Murex functions.\"]},\"726\":{\"h\":\"Usage\",\"t\":[\"fid-killall \"]},\"727\":{\"h\":\"Detail\",\"t\":[\"fid-killall works by the same mechanisms as fid-kill, described below:\",\"fid-kill doesn't send a kernel signal to the process since Murex is a multi-threaded shell with a single signal, fid-kill will send a cancellation context to any builtins executing (which covers builtins, aliases, public and private functions and any external executables running which were launched within the current Murex shell).\",\"The FID (function ID) sent is not the same as a POSIX (eg Linux, macOS, BSD) PID (process ID). You can obtain a FID from fid-list.\"]},\"728\":{\"h\":\"See Also\",\"t\":[\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"builtins: Returns runtime information on the internal state of Murex\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-list: Lists all running functions within the current Murex session\",\"jobs: Lists all running functions within the current Murex session\",\"murex-update-exe-list:\\nForces Murex to rescan $PATH looking for executables\"]},\"729\":{\"h\":\"fid-list - Command Reference\",\"t\":[\"Lists all running functions within the current Murex session\"]},\"730\":{\"h\":\"Description\",\"t\":[\"fid-list is a tool for outputting all the functions currently managed by that Murex session. Those functions could be Murex functions, builtins or any external executables launched from Murex.\",\"Conceptually fid-list is a little like ps (on POSIX systems) however fid-list was not written to be POSIX compliant.\",\"Multiple flags cannot be used with each other.\"]},\"731\":{\"h\":\"Usage\",\"t\":[\"fid-list [ flag ] -> `<stdout>` \",\"jobs is an alias for fid-list: --jobs: jobs -> <stdout>\"]},\"732\":{\"h\":\"Flags\",\"t\":[\"--background Returns a json map of background jobs\",\"--csv Output table in a csv format\",\"--help Outputs a list of parameters and a descriptions\",\"--jobs Show background and stopped jobs\",\"--jsonl Output table in a jsonlines (jsonl) format (defaulted to when piped)\",\"--stopped Returns a json map of stopped jobs\",\"--tty Force default TTY output even when piped\"]},\"733\":{\"h\":\"Detail\",\"t\":[\"Because Murex is a multi-threaded shell, builtins are not forked processes like in a traditional / POSIX shell. This means that you cannot use the operating systems default process viewer (eg ps) to list Murex functions. This is where fid-list comes into play. It is used to view all the functions and processes that are managed by the current Murex session. That would include:\",\"any aliases within Murex\",\"public and private Murex functions\",\"builtins (eg fid-list is a builtin command)\",\"any external processes that were launched from within this shell session\",\"any background functions or processes of any of the above\"]},\"734\":{\"h\":\"Synonyms\",\"t\":[\"fid-list\",\"jobs\"]},\"735\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"bexists: Check which builtins exist\",\"bg: Run processes in the background\",\"builtins: Returns runtime information on the internal state of Murex\",\"csv: CSV files (and other character delimited tables)\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"fg: Sends a background process into the foreground\",\"fid-kill: Terminate a running Murex function\",\"fid-killall: Terminate all running Murex functions\",\"jobs: Lists all running functions within the current Murex session\",\"jsonl: JSON Lines\",\"murex-update-exe-list:\\nForces Murex to rescan $PATH looking for executables\"]},\"736\":{\"h\":\"for - Command Reference\",\"t\":[\"A more familiar iteration loop to existing developers\"]},\"737\":{\"h\":\"Description\",\"t\":[\"This for loop is fills a small niche where foreach or formap are inappropiate in your script. It's generally not recommended to use for because it performs slower and doesn't adhere to Murex's design philosophy. However it does offer additional flexibility around recursion.\"]},\"738\":{\"h\":\"Usage\",\"t\":[\"for ( variable; conditional; incrementation ) { code-block } -> `<stdout>` \"]},\"739\":{\"h\":\"Examples\",\"t\":[\" » for ( i=1; i<6; i++ ) { echo $i } 1 2 3 4 5 \"]},\"740\":{\"h\":\"Detail\"},\"741\":{\"h\":\"Syntax\",\"t\":[\"for is a little naughty in terms of breaking Murex's style guidelines due to the first parameter being entered as one string treated as 3 separate code blocks. The syntax is like this for two reasons:\",\"readability (having multiple { blocks } would make scripts unsightly\",\"familiarity (for those using to for loops in other languages\",\"The first parameter is: ( i=1; i<6; i++ ), but it is then converted into the following code:\",\"let i=0 - declare the loop iteration variable\",\"= i<0 - if the condition is true then proceed to run the code in the second parameter - { echo $i }\",\"let i++ - increment the loop iteration variable\",\"The second parameter is the code to execute upon each iteration\"]},\"742\":{\"h\":\"Better for loops\",\"t\":[\"Because each iteration of a for loop reruns the 2nd 2 parts in the first parameter (the conditional and incrementation), for is very slow. Plus the weird, non-idiomatic, way of writing the 3 parts, it's fair to say for is not the recommended method of iteration and in fact there are better functions to achieve the same thing...most of the time at least.\",\"For example:\",\" a: [1..5] -> foreach: i { echo $i } 1 2 3 4 5 \",\"The different in performance can be measured. eg:\",\" » time { a: [1..9999] -> foreach: i { out: <null> $i } } 0.097643108 » time { for ( i=1; i<10000; i=i+1 ) { out: <null> $i } } 0.663812496 \",\"You can also do step ranges with foreach:\",\" » time { for ( i=10; i<10001; i=i+2 ) { out: <null> $i } } 0.346254973 » time { a: [1..999][0,2,4,6,8],10000 -> foreach i { out: <null> $i } } 0.053924326 \",\"...though granted the latter is a little less readable.\",\"The big catch with using a piped into foreach is that values are passed as strings rather than numbers.\"]},\"743\":{\"h\":\"Tips when writing JSON inside for loops\",\"t\":[\"One of the drawbacks (or maybe advantages, depending on your perspective) of JSON is that parsers generally expect a complete file for processing in that the JSON specification requires closing tags for every opening tag. This means it's not always suitable for streaming. For example\",\" » ja [1..3] -> foreach i { out ({ \\\"$i\\\": $i }) } { \\\"1\\\": 1 } { \\\"2\\\": 2 } { \\\"3\\\": 3 } \",\"What does this even mean and how can you build a JSON file up sequentially?\",\"One answer if to write the output in a streaming file format and convert back to JSON\",\" » ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } - \\\"1\\\": 1 - \\\"2\\\": 2 - \\\"3\\\": 3 » ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } -> cast yaml -> format json [ { \\\"1\\\": 1 }, { \\\"2\\\": 2 }, { \\\"3\\\": 3 } ] \",\"What if I'm returning an object rather than writing one?\",\"The problem with building JSON structures from existing structures is that you can quickly end up with invalid JSON due to the specifications strict use of commas.\",\"For example in the code below, each item block is it's own object and there are no [ ... ] encapsulating them to denote it is an array of objects, nor are the objects terminated by a comma.\",\" » config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display the interactive shell's hint text helper. Please note, even when this is disabled, it will still appear when used for regexp searches and other readline-specific functions\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ progress $PID }\\\", \\\"Description\\\": \\\"Murex function to execute when an `exec` process is stopped\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"{ progress $PID }\\\" } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"ANSI escape sequences in Murex builtins to highlight syntax errors, history completions, {SGR} variables, etc\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } ... \",\"Luckily JSON also has it's own streaming format: JSON lines (jsonl). We can cast this output as jsonl then format it back into valid JSON:\",\" » config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } -> cast jsonl -> format json [ { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Write shell history (interactive shell) to disk\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, { \\\"Data-Type\\\": \\\"int\\\", \\\"Default\\\": 4, \\\"Description\\\": \\\"Maximum number of lines with auto-completion suggestions to display\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"6\\\" }, { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display some status information about the stop process when ctrl+z is pressed (conceptually similar to ctrl+t / SIGINFO on some BSDs)\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, ... \"]},\"744\":{\"h\":\"foreach will automatically cast it's output as jsonl if it's STDIN type is json\",\"t\":[\" » ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } Hello Tom Hello Dick Hello Sally » ja [Tom,Dick,Sally] -> foreach name { out Hello $name } -> debug -> [[ /Data-Type/Murex ]] jsonl » ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } -> format: json [ \\\"Hello Tom\\\", \\\"Hello Dick\\\", \\\"Hello Sally\\\" ] \"]},\"745\":{\"h\":\"See Also\",\"t\":[\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"break: Terminate execution of a block within your processes scope\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set: Define a local variable and set it's value\",\"while:\\nLoop until condition false\"]},\"746\":{\"h\":\"foreach - Command Reference\",\"t\":[\"Iterate through an array\"]},\"747\":{\"h\":\"Description\",\"t\":[\"foreach reads an array or map from STDIN and iterates through it, running a code block for each iteration with the value of the iterated element passed to it.\",\"By default foreach's output data type is inherieted from its input data type. For example is STDIN is yaml then so will STDOUT. The only exception to this is if STDIN is json in which case STDOUT will be jsonlines (jsonl), or when additional flags are used such as --jmap.\"]},\"748\":{\"h\":\"Usage\",\"t\":[\"{ code-block } reads from a variable and writes to an array / unbuffered STDOUT:\",\"`<stdin>` -> foreach variable { code-block } -> `<stdout>` \",\"{ code-block } reads from STDIN and writes to an array / unbuffered STDOUT:\",\"`<stdin>` -> foreach { -> code-block } -> `<stdout>` \",\"foreach writes to a buffered JSON map:\",\"`<stdin>` -> foreach --jmap variable { code-block (map key) } { code-block (map value) } -> `<stdout>` \"]},\"749\":{\"h\":\"Examples\",\"t\":[\"There are two basic ways you can write a foreach loop depending on how you want the iterated element passed to the code block.\",\"The first option is to specify a temporary variable which can be read by the code block:\",\" » a [1..3] -> foreach i { out $i } 1 2 3 \",\"Please note that the variable is specified without the dollar prefix, then used in the code block with the dollar prefix.\",\"The second option is for the code block's STDIN to read the element:\",\" » a [1..3] -> foreach { -> cat } 1 2 3 \",\"STDIN can only be read as the first command. If you cannot process the element on the first command then it is recommended you use the first option (passing a variable) instead.\"]},\"750\":{\"h\":\"Writing JSON maps\",\"t\":[\" » ja [Monday..Friday] -> foreach --jmap day { out $day -> left 3 } { $day } { \\\"Fri\\\": \\\"Friday\\\", \\\"Mon\\\": \\\"Monday\\\", \\\"Thu\\\": \\\"Thursday\\\", \\\"Tue\\\": \\\"Tuesday\\\", \\\"Wed\\\": \\\"Wednesday\\\" } \"]},\"751\":{\"h\":\"Using steps to jump iterations by more than 1 (one)\",\"t\":[\"You can step through an array, list or table in jumps of user definable quantities. The value passed in STDIN and $VAR will be an array of all the records within that step range. For example:\",\" » %[1..10] -> foreach --step 3 value { out \\\"Iteration $.i: $value\\\" } Iteration 1: [ 1, 2, 3 ] Iteration 2: [ 4, 5, 6 ] Iteration 3: [ 7, 8, 9 ] Iteration 4: [ 10 ] \"]},\"752\":{\"h\":\"Flags\",\"t\":[\"--jmap Write a json map to STDOUT instead of an array\",\"--step<int> Iterates in steps. Value passed to block is an array of items in the step range. Not (yet) supported with `--jmap\"]},\"753\":{\"h\":\"Detail\"},\"754\":{\"h\":\"Meta values\",\"t\":[\"Meta values are a JSON object stored as the variable $.. The meta variable will get overwritten by any other block which invokes meta values. So if you wish to persist meta values across blocks you will need to reassign $., eg\",\" %[1..3] -> foreach { meta_parent = $. %[7..9] -> foreach { out \\\"$(meta_parent.i): $.i\\\" } } \",\"The following meta values are defined:\",\"i: iteration number\"]},\"755\":{\"h\":\"Preserving the data type (when no flags used)\",\"t\":[\"foreach will preserve the data type read from STDIN in all instances where data is being passed along the pipeline and push that data type out at the other end:\",\"The temporary variable will be created with the same data-type as foreach's STDIN, or the data type of the array element (eg if it is a string or number)\",\"The code block's STDIN will have the same data-type as foreach's STDIN\",\"foreeach's STDOUT will also be the same data-type as it's STDIN (or jsonl (jsonlines) where STDIN was json because jsonl better supports streaming)\",\"This last point means you may need to cast your data if you're writing data in a different format. For example the following is creating a YAML list however the data-type is defined as json:\",\" » ja [1..3] -> foreach i { out \\\"- $i\\\" } - 1 - 2 - 3 » ja [1..3] -> foreach i { out \\\"- $i\\\" } -> debug -> [[ /Data-Type/Murex ]] json \",\"Thus any marshalling or other data-type-aware API's would fail because they are expecting json and receiving an incompatible data format.\",\"This can be resolved via cast:\",\" » ja [1..3] -> foreach i { out \\\"- $i\\\" } -> cast yaml - 1 - 2 - 3 » ja [1..3] -> foreach i { out \\\"- $i\\\" } -> cast yaml -> debug -> [[ /Data-Type/Murex ]] yaml \",\"The output is the same but now it's defined as yaml so any further pipelined processes will now automatically use YAML marshallers when reading that data.\"]},\"756\":{\"h\":\"Tips when writing JSON inside for loops\",\"t\":[\"One of the drawbacks (or maybe advantages, depending on your perspective) of JSON is that parsers generally expect a complete file for processing in that the JSON specification requires closing tags for every opening tag. This means it's not always suitable for streaming. For example\",\" » ja [1..3] -> foreach i { out ({ \\\"$i\\\": $i }) } { \\\"1\\\": 1 } { \\\"2\\\": 2 } { \\\"3\\\": 3 } \",\"What does this even mean and how can you build a JSON file up sequentially?\",\"One answer if to write the output in a streaming file format and convert back to JSON\",\" » ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } - \\\"1\\\": 1 - \\\"2\\\": 2 - \\\"3\\\": 3 » ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } -> cast yaml -> format json [ { \\\"1\\\": 1 }, { \\\"2\\\": 2 }, { \\\"3\\\": 3 } ] \",\"What if I'm returning an object rather than writing one?\",\"The problem with building JSON structures from existing structures is that you can quickly end up with invalid JSON due to the specifications strict use of commas.\",\"For example in the code below, each item block is it's own object and there are no [ ... ] encapsulating them to denote it is an array of objects, nor are the objects terminated by a comma.\",\" » config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display the interactive shell's hint text helper. Please note, even when this is disabled, it will still appear when used for regexp searches and other readline-specific functions\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ progress $PID }\\\", \\\"Description\\\": \\\"Murex function to execute when an `exec` process is stopped\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"{ progress $PID }\\\" } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"ANSI escape sequences in Murex builtins to highlight syntax errors, history completions, {SGR} variables, etc\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } ... \",\"Luckily JSON also has it's own streaming format: JSON lines (jsonl). We can cast this output as jsonl then format it back into valid JSON:\",\" » config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } -> cast jsonl -> format json [ { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Write shell history (interactive shell) to disk\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, { \\\"Data-Type\\\": \\\"int\\\", \\\"Default\\\": 4, \\\"Description\\\": \\\"Maximum number of lines with auto-completion suggestions to display\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"6\\\" }, { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display some status information about the stop process when ctrl+z is pressed (conceptually similar to ctrl+t / SIGINFO on some BSDs)\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, ... \"]},\"757\":{\"h\":\"foreach will automatically cast it's output as jsonl if it's STDIN type is json\",\"t\":[\" » ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } Hello Tom Hello Dick Hello Sally » ja [Tom,Dick,Sally] -> foreach name { out Hello $name } -> debug -> [[ /Data-Type/Murex ]] jsonl » ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } -> format: json [ \\\"Hello Tom\\\", \\\"Hello Dick\\\", \\\"Hello Sally\\\" ] \"]},\"758\":{\"h\":\"See Also\",\"t\":[\"ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"[[ (element): Outputs an element from a nested structure\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"break: Terminate execution of a block within your processes scope\",\"cast: Alters the data type of the previous function without altering it's output\",\"debug: Debugging information\",\"for: A more familiar iteration loop to existing developers\",\"formap: Iterate through a map or other collection of data\",\"format: Reformat one data-type into another data-type\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"json: JavaScript Object Notation (JSON)\",\"jsonl: JSON Lines\",\"left: Left substring every item in a list\",\"out: Print a string to the STDOUT with a trailing new line character\",\"while: Loop until condition false\",\"yaml:\\nYAML Ain't Markup Language (YAML)\"]},\"759\":{\"h\":\"formap - Command Reference\",\"t\":[\"Iterate through a map or other collection of data\"]},\"760\":{\"h\":\"Description\",\"t\":[\"formap is a generic tool for iterating through a map, table or other sequences of data similarly like a foreach. In fact formap can even be used on array too.\",\"Unlike foreach, formap's default output is str, so each new line will be treated as a list item. This behaviour will differ if any additional flags are used with foreach, such as --jmap.\"]},\"761\":{\"h\":\"Usage\",\"t\":[\"formap writes a list:\",\"`<stdin>` -> foreach variable { code-block } -> `<stdout>` \",\"formap writes to a buffered JSON map:\",\"`<stdin>` -> formap --jmap key value { code-block (map key) } { code-block (map value) } -> `<stdout>` \"]},\"762\":{\"h\":\"Examples\",\"t\":[\"First of all lets assume the following dataset:\",\"set json people={ \\\"Tom\\\": { \\\"Age\\\": 32, \\\"Gender\\\": \\\"Male\\\" }, \\\"Dick\\\": { \\\"Age\\\": 43, \\\"Gender\\\": \\\"Male\\\" }, \\\"Sally\\\": { \\\"Age\\\": 54, \\\"Gender\\\": \\\"Female\\\" } } \",\"We can create human output from this:\",\"» $people -> formap key value { out \\\"$key is $value[Age] years old\\\" } Sally is 54 years old Tom is 32 years old Dick is 43 years old \",\"Please note that maps are intentionally unsorted so you cannot guarantee the order of the output produced even if the input has been superficially set in a specific order.\",\"With --jmap we can turn that structure into a new structure:\",\"» $people -> formap --jmap key value { $key } { $value[Age] } { \\\"Dick\\\": \\\"43\\\", \\\"Sally\\\": \\\"54\\\", \\\"Tom\\\": \\\"32\\\" } \"]},\"763\":{\"h\":\"Flags\",\"t\":[\"--jmap Write a json map to STDOUT instead of an array\"]},\"764\":{\"h\":\"Detail\",\"t\":[\"formap can also work against arrays and tables as well. However foreach is a much better tool for ordered lists and tables can look a little funky when when there are more than 2 columns. In those instances you're better off using [ (index) to specify columns and then tabulate for any data transformation.\"]},\"765\":{\"h\":\"Meta values\",\"t\":[\"Meta values are a JSON object stored as the variable $.. The meta variable will get overwritten by any other block which invokes meta values. So if you wish to persist meta values across blocks you will need to reassign $., eg\",\"%[1..3] -> foreach { meta_parent = $. %[7..9] -> foreach { out \\\"$(meta_parent.i): $.i\\\" } } \",\"The following meta values are defined:\",\"i: iteration number\"]},\"766\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"break: Terminate execution of a block within your processes scope\",\"for: A more familiar iteration loop to existing developers\",\"foreach: Iterate through an array\",\"json: JavaScript Object Notation (JSON)\",\"set: Define a local variable and set it's value\",\"tabulate: Table transformation tools\",\"while:\\nLoop until condition false\"]},\"767\":{\"h\":\"format - Command Reference\",\"t\":[\"Reformat one data-type into another data-type\"]},\"768\":{\"h\":\"Description\",\"t\":[\"format takes a data from STDIN and returns that data reformated in another specified data-type\"]},\"769\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> format data-type -> `<stdout>` \"]},\"770\":{\"h\":\"Examples\",\"t\":[\"» tout json { \\\"One\\\": 1, \\\"Two\\\": 2, \\\"Three\\\": 3 } -> format yaml One: 1 Three: 3 Two: 2 \"]},\"771\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"cast: Alters the data type of the previous function without altering it's output\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"772\":{\"h\":\"function - Command Reference\",\"t\":[\"Define a function block\"]},\"773\":{\"h\":\"Description\",\"t\":[\"function defines a block of code as a function\"]},\"774\":{\"h\":\"Usage\",\"t\":[\"Define a function:\",\"function: name { code-block } \",\"Define a function with variable names defined (default value and description are optional parameters):\",\"function: name ( variable1: data-type [default-value] \\\"description\\\", variable2: data-type [default-value] \\\"description\\\" ) { code-block } \",\"Undefine a function:\",\"!function: command \"]},\"775\":{\"h\":\"Examples\",\"t\":[\"» function hw { out \\\"Hello, World!\\\" } » hw Hello, World! » !function hw » hw exec: \\\"hw\\\": executable file not found in $PATH \"]},\"776\":{\"h\":\"Detail\"},\"777\":{\"h\":\"Allowed characters\",\"t\":[\"Function names can only include any characters apart from dollar ($). This is to prevent functions from overwriting variables (see the order of preference below).\"]},\"778\":{\"h\":\"Undefining a function\",\"t\":[\"Like all other definable states in Murex, you can delete a function with the bang prefix (see the example above).\"]},\"779\":{\"h\":\"Using parameterized variable names\",\"t\":[\"By default, if you wanted to query the parameters passed to a Murex function you would have to use either:\",\"the Bash syntax where of $2 style numbered reserved variables,\",\"and/or the Murex convention of $PARAM / $ARGS arrays (see reserved-vars document below),\",\"and/or the older Murex convention of the args builtin for any flags.\",\"Starting from Murex 2.7.x it's been possible to declare parameters from within the function declaration:\",\"function: name ( variable1: data-type [default-value] \\\"description\\\", variable2: data-type [default-value] \\\"description\\\" ) { code-block } \"]},\"780\":{\"h\":\"Syntax\",\"t\":[\"First off, the syntax doesn't have to follow exactly as above:\",\"Variables shouldn't be prefixed with a dollar ($). This is a little like declaring variables via set, etc. However it should be followed by a colon (:) or comma (,). Normal rules apply with regards to allowed characters in variable names: limited to ASCII letters (upper and lower case), numbers, underscore (_), and hyphen (-). Unicode characters as variable names are not currently supported.\",\"data-type is the Murex data type. This is an optional field in version 2.8.x (defaults to str) but is required in 2.7.x.\",\"The default value must be inside square brackets ([...]). Any value is allowed (including Unicode) except for carriage returns / new lines (\\\\r, \\\\n) and a closing square bracket (]) as the latter would indicate the end of this field. You cannot escape these characters either.\",\"This field is optional.\",\"The description must sit inside double quotes (\\\"...\\\"). Any value is allowed (including Unicode) except for carriage returns / new lines (\\\\r, \\\\n) and double quotes (\\\") as the latter would indicate the end of this field. You cannot escape these characters either.\",\"This field is optional.\",\"You do not need a new line between each parameter, however you do need to separate them with a comma (like with JSON, there should not be a trailing comma at the end of the parameters). Thus the following is valid: variable1: data-type, variable2: data-type.\"]},\"781\":{\"h\":\"Variables\",\"t\":[\"Any variable name you declare in your function declaration will be exposed in your function body as a local variable. For example:\",\"function: hello (name: str) { out: \\\"Hello $name, pleased to meet you.\\\" } \",\"If the function isn't called with the complete list of parameters and it is running in the foreground (ie not part of autocomplete, event, bg, etc) then you will be prompted for it's value. That could look something like this:\",\"» function: hello (name: str) { » out: \\\"Hello $name, pleased to meet you.\\\" » } » hello Please enter a value for 'name': Bob Hello Bob, pleased to meet you. \",\"(in this example you typed Bob when prompted)\"]},\"782\":{\"h\":\"Data-Types\",\"t\":[\"This is the Murex data type of the variable. From version 2.8.x this field is optional and will default to str when omitted.\",\"The advantage of setting this field is that values are type checked and the function will fail early if an incorrect value is presented. For example:\",\"» function: age (age: int) { out: \\\"$age is a great age.\\\" } » age Please enter a value for 'age': ten Error in `age` ( 2,1): cannot convert parameter 1 'ten' to data type 'int' » age ten Error in `age` ( 2,1): cannot convert parameter 1 'ten' to data type 'int' \",\"However it will try to automatically convert values if it can:\",\"» age 1.2 1 is a great age. \"]},\"783\":{\"h\":\"Default values\",\"t\":[\"Default values are only relevant when functions are run interactively. It allows the user to press enter without inputting a value:\",\"» function: hello (name: str [John]) { out: \\\"Hello $name, pleased to meet you.\\\" } » hello Please enter a value for 'name' [John]: Hello John, pleased to meet you. \",\"Here no value was entered so $name defaulted to John.\",\"Default values will not auto-populate when the function is run in the background. For example:\",\"» bg {hello} Error in `hello` ( 2,2): cannot prompt for parameters when a function is run in the background: too few parameters \"]},\"784\":{\"h\":\"Description\",\"t\":[\"Descriptions are only relevant when functions are run interactively. It allows you to define a more useful prompt should that function be called without sufficient parameters. For example:\",\"» function hello (name: str \\\"What is your name?\\\") { out \\\"Hello $name\\\" } » hello What is your name?: Sally Hello Sally \"]},\"785\":{\"h\":\"Order of precedence\",\"t\":[\"There is an order of precedence for which commands are looked up:\",\"runmode: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.\",\"test and pipe functions also alter the behavior of the compiler and thus are executed ahead of any scripts.\",\"private functions - defined via private. Private's cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via fexec).\",\"Aliases - defined via alias. All aliases are global.\",\"Murex functions - defined via function. All functions are global.\",\"Variables (dollar prefixed) which are declared via global, set or let. Also environmental variables too, declared via export.\",\"globbing: however this only applies for commands executed in the interactive shell.\",\"Murex builtins.\",\"External executable files\",\"You can override this order of precedence via the fexec and exec builtins.\"]},\"786\":{\"h\":\"Synonyms\",\"t\":[\"function\",\"!function\"]},\"787\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"alias: Create an alias for a command\",\"args: Command line flag parser for Murex shell scripting\",\"break: Terminate execution of a block within your processes scope\",\"exec: Runs an executable\",\"export: Define an environmental variable and set it's value\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"method: Define a methods supported data-types\",\"private: Define a private function block\",\"set: Define a local variable and set it's value\",\"source: Import Murex code from another file of code block\",\"version:\\nGet Murex version\"]},\"788\":{\"h\":\"g - Command Reference\",\"t\":[\"Glob pattern matching for file system objects (eg *.txt)\"]},\"789\":{\"h\":\"Description\",\"t\":[\"Returns a list of files and directories that match a glob pattern.\",\"Output is a JSON list.\"]},\"790\":{\"h\":\"Usage\",\"t\":[\"g: pattern -> `<stdout>` [ `<stdin>` -> ] @g command pattern [ -> `<stdout>` ] !g: pattern -> `<stdout>` `<stdin>` -> g: pattern -> `<stdout>` `<stdin>` -> !g: pattern -> `<stdout>` \"]},\"791\":{\"h\":\"Examples\",\"t\":[\"Inline globbing:\",\"cat: @{ g: *.txt } \",\"Writing a JSON array of files to disk:\",\"g: *.txt |> filelist.json \",\"Writing a list of files to disk:\",\"g: *.txt -> format str |> filelist.txt \",\"Checking if a file exists:\",\"if { g: somefile.txt } then { # file exists } \",\"Checking if a file does not exist:\",\"!if { g: somefile.txt } then { # file does not exist } \",\"Return all files apart from text files:\",\"!g: *.txt \",\"Filtering a file list based on glob matches:\",\"f: +f -> g: *.md \",\"Remove any glob matches from a file list:\",\"f: +f -> !g: *.md \"]},\"792\":{\"h\":\"Detail\"},\"793\":{\"h\":\"Pattern Reference\",\"t\":[\"* matches any number of (including zero) characters\",\"? matches any single character\"]},\"794\":{\"h\":\"Inverse Matches\",\"t\":[\"If you want to exclude any matches based on wildcards, rather than include them, then you can use the bang prefix. eg\",\"» g: READ* [ \\\"README.md\\\" ] » !g: * Error in `!g` (1,1): No data returned. \"]},\"795\":{\"h\":\"When Used As A Method\",\"t\":[\"!g first looks for files that match its pattern, then it reads the file list from STDIN. If STDIN contains contents that are not files then !g might not handle those list items correctly. This shouldn't be an issue with frx in its normal mode because it is only looking for matches however when used as !g any items that are not files will leak through.\",\"This is its designed feature and not a bug. If you wish to remove anything that also isn't a file then you should first pipe into either g: *, rx: .*, or f +f and then pipe that into !g.\",\"The reason for this behavior is to separate this from !regexp and !match.\"]},\"796\":{\"h\":\"Synonyms\",\"t\":[\"g\",\"!g\"]},\"797\":{\"h\":\"See Also\",\"t\":[\"f: Lists or filters file system objects (eg files)\",\"match: Match an exact value in an array\",\"regexp: Regexp tools for arrays / lists of strings\",\"rx:\\nRegexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\"]},\"798\":{\"h\":\"get-type - Command Reference\",\"t\":[\"Returns the data-type of a variable or pipe\"]},\"799\":{\"h\":\"Description\",\"t\":[\"get-type returns the Murex data-type of a variable or pipe without reading the data from it.\"]},\"800\":{\"h\":\"Usage\",\"t\":[\"get-type: \\\\$variable -> `<stdout>` get-type: stdin -> `<stdout>` get-type: pipe -> `<stdout>` \"]},\"801\":{\"h\":\"Examples\",\"t\":[\"Get the data-type of a variable\",\"» set: json example={[1,2,3]} » get-type: \\\\$example json \",\"Please note that you will need to escape the dollar sign. If you don't the value of the variable will be passed to get-type rather than the name.\",\"Get the data-type of a functions STDIN\",\"» function: example { get-type stdin } » tout: json {[1,2,3]} -> example json \",\"Get the data-type of a Murex named pipe\",\"» pipe: example » tout: <example> json {[1,2,3]} » get-type: example » !pipe: example json \"]},\"802\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"debug: Debugging information\",\"function: Define a function block\",\"pipe: Manage Murex named pipes\",\"runtime: Returns runtime information on the internal state of Murex\",\"set: Define a local variable and set it's value\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"803\":{\"h\":\"get - Command Reference\",\"t\":[\"Makes a standard HTTP request and returns the result as a JSON object\"]},\"804\":{\"h\":\"Description\",\"t\":[\"Fetches a page from a URL via HTTP/S GET request\"]},\"805\":{\"h\":\"Usage\",\"t\":[\"get url -> `<stdout>` `<stdin>` -> get url -> `<stdout>` \"]},\"806\":{\"h\":\"Examples\",\"t\":[\"» get google.com -> [ Status ] { \\\"Code\\\": 200, \\\"Message\\\": \\\"OK\\\" } \"]},\"807\":{\"h\":\"Detail\"},\"808\":{\"h\":\"JSON return\",\"t\":[\"get returns a JSON object with the following fields:\",\"{ \\\"Status\\\": { \\\"Code\\\": integer, \\\"Message\\\": string, }, \\\"Headers\\\": { string [ string... ] }, \\\"Body\\\": string } The concept behind this is it provides and easier path for scripting eg pulling specific fields via the index, `[`, function. ### `get` as a method Running `get` as a method will transmit the contents of STDIN as part of the body of the HTTP GET request. When run as a method you have to include a second parameter specifying the Content-Type MIME. ### Configurable options `get` has a number of behavioral options which can be configured via Murex's standard `config` tool: config: -> [ http ] To change a default, for example the user agent string: config: set http user-agent \\\"bob\\\" \",\"get: google.com\",\"This enables sane, repeatable and readable defaults. Read the documents on `config` for more details about it's usage and the rational behind the command. \"]},\"809\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"config: Query or define Murex runtime settings\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"810\":{\"h\":\"getfile - Command Reference\",\"t\":[\"Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\"]},\"811\":{\"h\":\"Description\",\"t\":[\"Fetches a resource from a URL - setting STDOUT data-type\"]},\"812\":{\"h\":\"Usage\",\"t\":[\"getfile url -> `<stdout>` \"]},\"813\":{\"h\":\"Examples\",\"t\":[\"getfile google.com \"]},\"814\":{\"h\":\"Detail\",\"t\":[\"This simply fetches a resource (via HTTP GET request) from a URL and returns the byte stream to STDOUT. It will set STDOUT's data-type based on MIME defined in the Content-Type HTTP header.\",\"It is recommended that you only use this command if you're pipelining the output (eg writing to file or passing on to another function). If you just want to render the output to the terminal then use open which has hooks for smart terminal rendering.\"]},\"815\":{\"h\":\"Configurable options\",\"t\":[\"getfile has a number of behavioral options which can be configured via Murex's standard config tool:\",\"config: -> [ http ] \",\"To change a default, for example the user agent string:\",\"config: set http user-agent \\\"bob\\\" getfile: google.com \",\"This enables sane, repeatable and readable defaults. Read the documents on config for more details about it's usage and the rational behind the command.\"]},\"816\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"open: Open a file with a preferred handler\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"817\":{\"h\":\"global - Command Reference\",\"t\":[\"Define a global variable and set it's value\"]},\"818\":{\"h\":\"Description\",\"t\":[\"Defines, updates or deallocates a global variable.\"]},\"819\":{\"h\":\"Usage\",\"t\":[\"# Assume data type and value from STDIN `<stdin>` -> global var_name # Assume value from STDIN, define the data type manually `<stdin>` -> global datatype var_name # Define value manually (data type defaults to string; `str`) global var_name=data # Define value and data type manually global datatype var_name=data # Define a variable but don't set any value global var_name global datatype var_name \"]},\"820\":{\"h\":\"Examples\",\"t\":[\"As a method:\",\"» out \\\"Hello, world!\\\" -> global hw » out \\\"$hw\\\" Hello, World! \",\"As a function:\",\"» global hw=\\\"Hello, world!\\\" » out \\\"$hw\\\" Hello, World! \"]},\"821\":{\"h\":\"Detail\"},\"822\":{\"h\":\"Deallocation\",\"t\":[\"You can unset variable names with the bang prefix:\",\"!global var_name \"]},\"823\":{\"h\":\"Type Annotations\",\"t\":[\"When set or global are used as a function, the parameters are passed as a string which means the variables are defined as a str. If you wish to define them as an alternate data type then you should add type annotations:\",\"» set: int age = 30 (`$age` is an integer, `int`) » global: bool dark_theme = true \",\"($dark_theme is a boolean, bool)\",\"When using set or global as a method, by default they will define the variable as the data type of the pipe:\",\"» open: example.json -> set: file \",\"($file is defined a json type because open wrote to set's pipe with a json type)\",\"You can also annotate set and global when used as a method too:\",\"out: 30 -> set: int age \",\"($age is an integer, int, despite out writing a string, `str, to the pipe)\",\"export does not support type annotations because environmental variables must always be strings. This is a limitation of the current operating systems.\"]},\"824\":{\"h\":\"Scoping\",\"t\":[\"Variable scoping is simplified to three layers:\",\"Local variables (set, !set, let)\",\"Global variables (global, !global)\",\"Environmental variables (export, !export, unset)\",\"Variables are looked up in that order of too. For example a the following code where set overrides both the global and environmental variable:\",\"» set: foobar=1 » global: foobar=2 » export: foobar=3 » out: $foobar 1 \"]},\"825\":{\"h\":\"Local variables\",\"t\":[\"These are defined via set and let. They're variables that are persistent across any blocks within a function. Functions will typically be blocks encapsulated like so:\",\"function example { # variables scoped inside here } \",\"...or...\",\"private example { # variables scoped inside here } \",\"...however dynamic autocompletes, events, unit tests and any blocks defined in config will also be triggered as functions.\",\"Code running inside any control flow or error handing structures will be treated as part of the same part of the same scope as the parent function:\",\"» function example { » try { » # set 'foobar' inside a `try` block » set: foobar=example » } » # 'foobar' exists outside of `try` because it is scoped to `function` » out: $foobar » } example \",\"Where this behavior might catch you out is with iteration blocks which create variables, eg for, foreach and formap. Any variables created inside them are still shared with any code outside of those structures but still inside the function block.\",\"Any local variables are only available to that function. If a variable is defined in a parent function that goes on to call child functions, then those local variables are not inherited but the child functions:\",\"» function parent { » # set a local variable » set: foobar=example » child » } » » function child { » # returns the `global` value, \\\"not set\\\", because the local `set` isn't inherited » out: $foobar » } » » global: $foobar=\\\"not set\\\" » parent not set \",\"It's also worth remembering that any variable defined using set in the shells FID (ie in the interactive shell) is localised to structures running in the interactive, REPL, shell and are not inherited by any called functions.\"]},\"826\":{\"h\":\"Global variables\",\"t\":[\"Where global differs from set is that the variables defined with global will be scoped at the global shell level (please note this is not the same as environmental variables!) so will cascade down through all scoped code-blocks including those running in other threads.\"]},\"827\":{\"h\":\"Environmental variables\",\"t\":[\"Exported variables (defined via export) are system environmental variables. Inside Murex environmental variables behave much like global variables however their real purpose is passing data to external processes. For example env is an external process on Linux (eg /usr/bin/env on ArchLinux):\",\"» export foo=bar » env -> grep foo foo=bar \"]},\"828\":{\"h\":\"Function Names\",\"t\":[\"As a security feature function names cannot include variables. This is done to reduce the risk of code executing by mistake due to executables being hidden behind variable names.\",\"Instead Murex will assume you want the output of the variable printed:\",\"» out \\\"Hello, world!\\\" -> set hw » $hw Hello, world! \",\"On the rare occasions you want to force variables to be expanded inside a function name, then call that function via exec:\",\"» set cmd=grep » ls -> exec: $cmd main.go main.go \",\"This only works for external executables. There is currently no way to call aliases, functions nor builtins from a variable and even the above exec trick is considered bad form because it reduces the readability of your shell scripts.\"]},\"829\":{\"h\":\"Usage Inside Quotation Marks\",\"t\":[\"Like with Bash, Perl and PHP: Murex will expand the variable when it is used inside a double quotes but will escape the variable name when used inside single quotes:\",\"» out \\\"$foo\\\" bar » out '$foo' $foo » out %($foo) bar \"]},\"830\":{\"h\":\"Synonyms\",\"t\":[\"global\",\"!global\"]},\"831\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"( (brace quote): Write a string to the STDOUT without new line\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set:\\nDefine a local variable and set it's value\"]},\"832\":{\"h\":\">> (append file) - Command Reference\",\"t\":[\"Writes STDIN to disk - appending contents if file already exists\"]},\"833\":{\"h\":\"Description\",\"t\":[\"Redirects output to file.\",\"If a file already exists, the contents will be appended to existing contents. Otherwise a new file is created.\"]},\"834\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` >> filename \"]},\"835\":{\"h\":\"Examples\",\"t\":[\"g * >> files.txt \"]},\"836\":{\"h\":\"Synonyms\",\"t\":[\">>\",\"fappend\"]},\"837\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"pipe: Manage Murex named pipes\",\"tmp:\\nCreate a temporary file and write to it\"]},\"838\":{\"h\":\"> (truncate file) - Command Reference\",\"t\":[\"Writes STDIN to disk - overwriting contents if file already exists\"]},\"839\":{\"h\":\"Description\",\"t\":[\"Redirects output to file.\",\"If a file already exists, the contents will be truncated (overwritten). Otherwise a new file is created.\"]},\"840\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` |> filename \"]},\"841\":{\"h\":\"Examples\",\"t\":[\"g * |> files.txt \"]},\"842\":{\"h\":\"Synonyms\",\"t\":[\">\",\"fwrite\"]},\"843\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"pipe: Manage Murex named pipes\",\"tmp:\\nCreate a temporary file and write to it\"]},\"844\":{\"h\":\"history - Command Reference\",\"t\":[\"Outputs murex's command history\"]},\"845\":{\"h\":\"Description\",\"t\":[\"Outputs mutex's command history.\"]},\"846\":{\"h\":\"Usage\",\"t\":[\"history -> `<stdout>` \"]},\"847\":{\"h\":\"Examples\",\"t\":[\"» history ... { \\\"Index\\\": 16782, \\\"DateTime\\\": \\\"2019-01-19T22:43:21.124273664Z\\\", \\\"Block\\\": \\\"tout: json ([\\\\\\\"a\\\\\\\", \\\\\\\"b\\\\\\\", \\\\\\\"c\\\\\\\"]) -\\\\u003e len\\\" }, { \\\"Index\\\": 16783, \\\"DateTime\\\": \\\"2019-01-19T22:50:42.114986768Z\\\", \\\"Block\\\": \\\"clear\\\" }, { \\\"Index\\\": 16784, \\\"DateTime\\\": \\\"2019-01-19T22:51:39.82077789Z\\\", \\\"Block\\\": \\\"map { tout: json ([\\\\\\\"key 1\\\\\\\", \\\\\\\"key 2\\\\\\\", \\\\\\\"key 3\\\\\\\"]) }\\\" }, ... \"]},\"848\":{\"h\":\"Detail\",\"t\":[\"The history file is typically located on disk in a file called ~/.murex.history.\"]},\"849\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"850\":{\"h\":\"if - Command Reference\",\"t\":[\"Conditional statement to execute different blocks of code depending on the result of the condition\"]},\"851\":{\"h\":\"Description\",\"t\":[\"Conditional control flow\",\"if can be utilized both as a method as well as a standalone function. As a method, the conditional state is derived from the calling function (eg if the previous function succeeds then the condition is true).\"]},\"852\":{\"h\":\"Usage\"},\"853\":{\"h\":\"Function if :\",\"t\":[\"if { code-block } then { # true } else { # false } \"]},\"854\":{\"h\":\"Method if :\",\"t\":[\"command -> if { # true } else { # false } \"]},\"855\":{\"h\":\"Negative Function if :\",\"t\":[\"!if { code-block } then { # false } \"]},\"856\":{\"h\":\"Negative Method if :\",\"t\":[\"command -> !if { # false } \"]},\"857\":{\"h\":\"Please Note:\",\"t\":[\"the then and else statements are optional. So the first usage could also be written as:\",\"if { code-block } { # true } { # false } \",\"However the practice of omitting those statements isn't recommended beyond writing short one liners in the interactive command prompt.\"]},\"858\":{\"h\":\"Examples\",\"t\":[\"Check if a file exists:\",\"if { g somefile.txt } then { out \\\"File exists\\\" } \",\"...or does not exist (both ways are valid):\",\"!if { g somefile.txt } then { out \\\"File does not exist\\\" } if { g somefile.txt } else { out \\\"File does not exist\\\" } \"]},\"859\":{\"h\":\"Detail\",\"t\":[\"The conditional block can contain entire pipelines - even multiple lines of code let alone a single pipeline - as well as solitary commands as demonstrated in the examples above. However the conditional block does not output STDOUT nor STDERR to the rest of the pipeline so you don't have to worry about redirecting the output streams to null.\",\"If you require output from the conditional blocks STDOUT then you will need to use either a Murex named pipe to redirect the output, or test or debug flags (depending on your use case) if you only need to occasionally inspect the conditionals output.\"]},\"860\":{\"h\":\"Synonyms\",\"t\":[\"if\",\"!if\"]},\"861\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"catch: Handles the exception code raised by try or trypipe\",\"debug: Debugging information\",\"false: Returns a false value\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"switch: Blocks of cascading conditionals\",\"test: Murex's test framework - define tests, run tests and debug shell scripts\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"862\":{\"h\":\"[ (index) - Command Reference\",\"t\":[\"Outputs an element from an array, map or table\"]},\"863\":{\"h\":\"Description\",\"t\":[\"Outputs an element or multiple elements from an array, map or table.\",\"Please note that indexes in Murex are counted from zero.\"]},\"864\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> [ element ] -> `<stdout>` $variable[ element ] -> `<stdout>` `<stdin>` -> ![ element ] -> `<stdout>` \"]},\"865\":{\"h\":\"Examples\",\"t\":[\"Return the 2nd (1), 4th (3) and 6th (5) element in an array:\",\"» ja [0..9] -> [ 1 3 5 ] [ \\\"1\\\", \\\"3\\\", \\\"5\\\" ] \",\"Return the data-type and description of config shell syntax-highlighting:\",\"» config -> [[ /shell/syntax-highlighting ]] -> [ Data-Type Description ] [ \\\"bool\\\", \\\"Syntax highlighting of murex code when in the interactive shell\\\" ] \",\"Return all elements except for 1 (2nd), 3 (4th) and 5 (6th):\",\"» a: [0..9]-> ![ 1 3 5 ] 0 2 4 6 7 8 9 \",\"Return all elements except for the data-type and description:\",\"» config -> [[ /shell/syntax-highlighting ]] -> ![ Data-Type Description ] { \\\"Default\\\": true, \\\"Dynamic\\\": false, \\\"Global\\\": true, \\\"Value\\\": true } \",\"Return the top 5 processes from ps, ordered by memory usage:\",\"» ps aux -> [PID %MEM COMMAND] -> sort -nrk2 -> [..5] 915961 14.4 /home/lau/dev/go/bin/gopls 916184 4.4 /opt/visual-studio-code/code 108025 2.9 /usr/lib/firefox/firefox 1036 2.4 /usr/lib/baloo_file 915710 1.9 /opt/visual-studio-code/code \",\"Return the 1st and 30th row:\",\"» ps aux -> [*1 *30] USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 37 0.0 0.0 0 0 ? I< Dec18 0:00 [kworker/3:0H-events_highpri] \",\"Return the 1st and 5th column:\",\"» ps aux -> [*A *E] -> head -n5 USER VSZ root 168284 root 0 root 0 root 0 \"]},\"866\":{\"h\":\"Detail\"},\"867\":{\"h\":\"Index counts from zero\",\"t\":[\"Indexes in Murex behave like any other computer array in that all arrays start from zero (0).\"]},\"868\":{\"h\":\"Include vs exclude\",\"t\":[\"As demonstrated in the examples above, [ specifies elements to include where as ![ specifies elements to exclude.\"]},\"869\":{\"h\":\"Don't error upon missing elements\",\"t\":[\"By default, index generates an error if an element doesn't exist. However you can disable this behavior in config\",\"» config -> [ foobar ] Error in `[` ((builtin) 2,11): Key 'foobar' not found » config set index silent true » config -> [ foobar ] \"]},\"870\":{\"h\":\"Synonyms\",\"t\":[\"[\",\"![\",\"index\"]},\"871\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"config: Query or define Murex runtime settings\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac:\\nReverse the order of an array\"]},\"872\":{\"h\":\"ja (mkarray) - Command Reference\",\"t\":[\"A sophisticated yet simply way to build a JSON array\"]},\"873\":{\"h\":\"Description\",\"t\":[\"Murex has a pretty sophisticated builtin for generating JSON arrays. It works a little bit like Bash's {1..9} syntax but includes a few additional nifty features.\",\"Please note that while this builtin is not marked for deprecation, it has been superseded by the %[] tokens. (read more)\"]},\"874\":{\"h\":\"Usage\",\"t\":[\"ja: [start..end] -> `<stdout>` ja: [start..end.base] -> `<stdout>` ja: [start..end,start..end] -> `<stdout>` ja: [start..end][start..end] -> `<stdout>` \"]},\"875\":{\"h\":\"Examples\",\"t\":[\"» ja: [1..5] [ \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\" ] » ja: [Monday..Sunday] [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\", \\\"Sunday\\\" ] \",\"Please note that as per the first example, all arrays generated by ja are arrays of strings - even if you're command is ranging over integers.\"]},\"876\":{\"h\":\"Detail\",\"t\":[\"Please read the documentation on a for a more detailed breakdown on of ja's supported features.\"]},\"877\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"json: JavaScript Object Notation (JSON)\",\"mtac: Reverse the order of an array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"878\":{\"h\":\"jsplit - Command Reference\",\"t\":[\"Splits STDIN into a JSON array based on a regex parameter\"]},\"879\":{\"h\":\"Description\",\"t\":[\"jsplit will read from STDIN and split it based on a regex parameter. It outputs a JSON array.\"]},\"880\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> jsplit: regex -> `<stdout>` \"]},\"881\":{\"h\":\"Examples\",\"t\":[\"» (hello, world) -> jsplit: l+ [ \\\"he\\\", \\\"o, wor\\\", \\\"d\\\" ] \"]},\"882\":{\"h\":\"Detail\",\"t\":[\"jsplit will trim trailing carriage returns and line feeds from each element as well as any trailing empty elements (zero length strings) in the JSON array. However any empty elements will be retained and any other whitespace characters\",\"or carriage returns and/or line feeds in the middle of an element - will be retained.\",\"This is so that the formatting of (multiline) text is retained as much as possible to ensure the jsplit is accurate while at the same time any commonly unwanted \\\"noise\\\" is stripped from the output.\"]},\"883\":{\"h\":\"Synonyms\",\"t\":[\"jsplit\",\"list.split\"]},\"884\":{\"h\":\"See Also\",\"t\":[\"2darray: Create a 2D JSON array from multiple input sources\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"map: Creates a map from two data sources\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"prepend:\\nAdd data to the start of an array\"]},\"885\":{\"h\":\"left - Command Reference\",\"t\":[\"Left substring every item in a list\"]},\"886\":{\"h\":\"Description\",\"t\":[\"Takes a list from STDIN and returns a left substring of that same list.\",\"One parameter is required and that is the number of characters to return. If the parameter is a negative then left counts from the right.\"]},\"887\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> left int -> `<stdout>` \"]},\"888\":{\"h\":\"Examples\",\"t\":[\"Count from the left\",\"» ja: [Monday..Wednesday] -> left 2 [ \\\"Mo\\\", \\\"Tu\\\", \\\"We\\\" ] \",\"Count from the right\",\"» ja: [Monday..Wednesday] -> left -3 [ \\\"Mon\\\", \\\"Tues\\\", \\\"Wednes\\\" ] \"]},\"889\":{\"h\":\"Detail\",\"t\":[\"Supported data types can queried via runtime\",\"runtime: --marshallers runtime: --unmarshallers \"]},\"890\":{\"h\":\"Synonyms\",\"t\":[\"left\",\"list.left\"]},\"891\":{\"h\":\"See Also\",\"t\":[\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API): Converts a Murex data-type into structured memory\",\"prefix: Prefix a string to every item in a list\",\"right: Right substring every item in a list\",\"runtime: Returns runtime information on the internal state of Murex\",\"suffix:\\nPrefix a string to every item in a list\"]},\"892\":{\"h\":\"Murex Shell Docs\"},\"893\":{\"h\":\"Command Reference: len\",\"t\":[\"Outputs the length of an array\"]},\"894\":{\"h\":\"Description\",\"t\":[\"This will read an array from STDIN and outputs the length for that array\"]},\"895\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> len -> `<stdout>` \"]},\"896\":{\"h\":\"Examples\",\"t\":[\"» tout: json ([\\\"a\\\", \\\"b\\\", \\\"c\\\"]) -> len 3 \"]},\"897\":{\"h\":\"Detail\",\"t\":[\"Please note that this returns the length of the array rather than string. For example out \\\"foobar\\\" -> len would return 1 because an array in the str data type would be new line separated (eg out \\\"foo\\\\nbar\\\" -> len would return 2). If you need to count characters in a string and are running POSIX (eg Linux / BSD / OSX) then it is recommended to use wc instead. But be mindful that wc will also count new line characters\",\"» out: \\\"foobar\\\" -> len 1 » out: \\\"foo\\\\nbar\\\" -> len 2 » out: \\\"foobar\\\" -> wc: -c 7 » out: \\\"foo\\\\nbar\\\" -> wc: -c 8 » printf: \\\"foobar\\\" -> wc: -c 6 # (printf does not print a trailing new line) \"]},\"898\":{\"h\":\"See Also\",\"t\":[\"commands/@[ (range) : Outputs a ranged subset of data from STDIN\",\"commands/[[ (element): Outputs an element from a nested structure\",\"commands/[ (index): Outputs an element from an array, map or table\",\"commands/a (mkarray): A sophisticated yet simple way to build an array or list\",\"commands/append: Add data to the end of an array\",\"commands/ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"commands/jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"commands/map: Creates a map from two data sources\",\"commands/msort: Sorts an array - data type agnostic\",\"commands/mtac: Reverse the order of an array\",\"commands/prepend:\\nAdd data to the start of an array\"]},\"899\":{\"h\":\"let - Command Reference\",\"t\":[\"Evaluate a mathematical function and assign to variable (deprecated)\"]},\"900\":{\"h\":\"Description\",\"t\":[\"let evaluates a mathematical function and then assigns it to a locally scoped variable (like set)\",\"This is a deprecated feature. Please refer to expr instead.\"]},\"901\":{\"h\":\"Usage\",\"t\":[\"let var_name=evaluation let var_name++ let var_name-- \"]},\"902\":{\"h\":\"Examples\",\"t\":[\"» let: age=18 » $age 18 » let: age++ » $age 19 » let: under18=age<18 » $under18 false » let: under21 = age < 21 » $under21 true \"]},\"903\":{\"h\":\"Detail\"},\"904\":{\"h\":\"Other Operators\",\"t\":[\"let also supports the following operators (substitute VAR with your variable name, and NUM with a number):\",\"VAR--, subtract 1 from VAR\",\"VAR++, add 1 to VAR\",\"VAR -= NUM, subtract NUM from VAR\",\"VAR += NUM, add NUM to VAR\",\"VAR /= NUM, divide VAR by NUM\",\"VAR *= NUM, multiply VAR by NUM\",\"eg\",\"» let: i=0 » let: i++ » $i 1 » let: i+=8 » $i 9 » let: i/=3 3 \",\"Please note these operators are not supported by =.\"]},\"905\":{\"h\":\"Variables\",\"t\":[\"There are two ways you can use variables with the math functions. Either by string interpolation like you would normally with any other function, or directly by name.\",\"String interpolation:\",\"» set abc=123 » = $abc==123 true \",\"Directly by name:\",\"» set abc=123 » = abc==123 false \",\"To understand the difference between the two, you must first understand how string interpolation works; which is where the parser tokenised the parameters like so\",\"command line: = $abc==123 token 1: command (name: \\\"=\\\") token 2: parameter 1, string (content: \\\"\\\") token 3: parameter 1, variable (name: \\\"abc\\\") token 4: parameter 1, string (content: \\\"==123\\\") \",\"Then when the command line gets executed, the parameters are compiled on demand similarly to this crude pseudo-code\",\"command: \\\"=\\\" parameters 1: concatenate(\\\"\\\", GetValue(abc), \\\"==123\\\") output: \\\"=\\\" \\\"123==123\\\" \",\"Thus the actual command getting run is literally 123==123 due to the variable being replace before the command executes.\",\"Whereas when you call the variable by name it's up to = or let to do the variable substitution.\",\"command line: = abc==123 token 1: command (name: \\\"=\\\") token 2: parameter 1, string (content: \\\"abc==123\\\") command: \\\"=\\\" parameters 1: concatenate(\\\"abc==123\\\") output: \\\"=\\\" \\\"abc==123\\\" \",\"The main advantage (or disadvantage, depending on your perspective) of using variables this way is that their data-type is preserved.\",\"» set str abc=123 » = abc==123 false » set int abc=123 » = abc==123 true \",\"Unfortunately is one of the biggest areas in Murex where you'd need to be careful. The simple addition or omission of the dollar prefix, $, can change the behavior of = and let.\"]},\"906\":{\"h\":\"Strings\",\"t\":[\"Because the usual Murex tools for encapsulating a string (\\\", ' and ()) are interpreted by the shell language parser, it means we need a new token for handling strings inside = and let. This is where backtick comes to our rescue.\",\"» set str abc=123 » = abc==`123` true \",\"Please be mindful that if you use string interpolation then you will need to instruct = and let that your field is a string\",\"» set str abc=123 » = `$abc`==`123` true \"]},\"907\":{\"h\":\"Best practice recommendation\",\"t\":[\"As you can see from the sections above, string interpolation offers us some conveniences when comparing variables of differing data-types, such as a str type with a number (eg num or int). However it makes for less readable code when just comparing strings. Thus the recommendation is to avoid using string interpolation except only where it really makes sense (ie use it sparingly).\"]},\"908\":{\"h\":\"Non-boolean logic\",\"t\":[\"Thus far the examples given have been focused on comparisons however = and let supports all the usual arithmetic operators:\",\"» = 10+10 20 » = 10/10 1 » = (4 * (3 + 2)) 20 » = `foo`+`bar` foobar \"]},\"909\":{\"h\":\"Read more\",\"t\":[\"Murex uses the govaluate package. More information can be found in it's manual.\"]},\"910\":{\"h\":\"Type Annotations\",\"t\":[\"When set or global are used as a function, the parameters are passed as a string which means the variables are defined as a str. If you wish to define them as an alternate data type then you should add type annotations:\",\"» set: int age = 30 (`$age` is an integer, `int`) » global: bool dark_theme = true \",\"($dark_theme is a boolean, bool)\",\"When using set or global as a method, by default they will define the variable as the data type of the pipe:\",\"» open: example.json -> set: file \",\"($file is defined a json type because open wrote to set's pipe with a json type)\",\"You can also annotate set and global when used as a method too:\",\"out: 30 -> set: int age \",\"($age is an integer, int, despite out writing a string, `str, to the pipe)\",\"export does not support type annotations because environmental variables must always be strings. This is a limitation of the current operating systems.\"]},\"911\":{\"h\":\"Scoping\",\"t\":[\"Variable scoping is simplified to three layers:\",\"Local variables (set, !set, let)\",\"Global variables (global, !global)\",\"Environmental variables (export, !export, unset)\",\"Variables are looked up in that order of too. For example a the following code where set overrides both the global and environmental variable:\",\"» set: foobar=1 » global: foobar=2 » export: foobar=3 » out: $foobar 1 \"]},\"912\":{\"h\":\"Local variables\",\"t\":[\"These are defined via set and let. They're variables that are persistent across any blocks within a function. Functions will typically be blocks encapsulated like so:\",\"function example { # variables scoped inside here } \",\"...or...\",\"private example { # variables scoped inside here } \",\"...however dynamic autocompletes, events, unit tests and any blocks defined in config will also be triggered as functions.\",\"Code running inside any control flow or error handing structures will be treated as part of the same part of the same scope as the parent function:\",\"» function example { » try { » # set 'foobar' inside a `try` block » set: foobar=example » } » # 'foobar' exists outside of `try` because it is scoped to `function` » out: $foobar » } example \",\"Where this behavior might catch you out is with iteration blocks which create variables, eg for, foreach and formap. Any variables created inside them are still shared with any code outside of those structures but still inside the function block.\",\"Any local variables are only available to that function. If a variable is defined in a parent function that goes on to call child functions, then those local variables are not inherited but the child functions:\",\"» function parent { » # set a local variable » set: foobar=example » child » } » » function child { » # returns the `global` value, \\\"not set\\\", because the local `set` isn't inherited » out: $foobar » } » » global: $foobar=\\\"not set\\\" » parent not set \",\"It's also worth remembering that any variable defined using set in the shells FID (ie in the interactive shell) is localised to structures running in the interactive, REPL, shell and are not inherited by any called functions.\"]},\"913\":{\"h\":\"Global variables\",\"t\":[\"Where global differs from set is that the variables defined with global will be scoped at the global shell level (please note this is not the same as environmental variables!) so will cascade down through all scoped code-blocks including those running in other threads.\"]},\"914\":{\"h\":\"Environmental variables\",\"t\":[\"Exported variables (defined via export) are system environmental variables. Inside Murex environmental variables behave much like global variables however their real purpose is passing data to external processes. For example env is an external process on Linux (eg /usr/bin/env on ArchLinux):\",\"» export foo=bar » env -> grep foo foo=bar \"]},\"915\":{\"h\":\"Function Names\",\"t\":[\"As a security feature function names cannot include variables. This is done to reduce the risk of code executing by mistake due to executables being hidden behind variable names.\",\"Instead Murex will assume you want the output of the variable printed:\",\"» out \\\"Hello, world!\\\" -> set hw » $hw Hello, world! \",\"On the rare occasions you want to force variables to be expanded inside a function name, then call that function via exec:\",\"» set cmd=grep » ls -> exec: $cmd main.go main.go \",\"This only works for external executables. There is currently no way to call aliases, functions nor builtins from a variable and even the above exec trick is considered bad form because it reduces the readability of your shell scripts.\"]},\"916\":{\"h\":\"Usage Inside Quotation Marks\",\"t\":[\"Like with Bash, Perl and PHP: Murex will expand the variable when it is used inside a double quotes but will escape the variable name when used inside single quotes:\",\"» out \\\"$foo\\\" bar » out '$foo' $foo » out %($foo) bar \"]},\"917\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"( (brace quote): Write a string to the STDOUT without new line\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"global: Define a global variable and set it's value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"set:\\nDefine a local variable and set it's value\"]},\"918\":{\"h\":\"lockfile - Command Reference\",\"t\":[\"Create and manage lock files\"]},\"919\":{\"h\":\"Description\",\"t\":[\"lockfile is used to create and manage lock files\"]},\"920\":{\"h\":\"Usage\",\"t\":[\"Create a lock file with the name identifier\",\"lockfile: lock identifier \",\"Delete a lock file with the name identifier\",\"lockfile: unlock identifier \",\"Wait until lock file with the name identifier has been deleted\",\"lockfile: wait identifier \",\"Output the the file name and path of a lock file with the name identifier\",\"lockfile: path identifier -> `<stdout>` \"]},\"921\":{\"h\":\"Examples\",\"t\":[\"lockfile: lock example out: \\\"lock file created: ${lockfile path example}\\\" bg { sleep: 10 lockfile: unlock example } out: \\\"waiting for lock file to be deleted (sleep 10 seconds)....\\\" lockfile: wait example out: \\\"lock file gone!\\\" \"]},\"922\":{\"h\":\"See Also\",\"t\":[\"bg: Run processes in the background\",\"out:\\nPrint a string to the STDOUT with a trailing new line character\"]},\"923\":{\"h\":\"man-get-flags - Command Reference\",\"t\":[\"Parses man page files for command line flags\"]},\"924\":{\"h\":\"Description\",\"t\":[\"Sometimes you might want to programmatically search man pages for any supported flag. Particularly if you're writing a dynamic autocompletion. man-get-flags does this and returns a JSON document.\",\"You can either pipe a man page to man-get-flags, or pass the name of the command as a parameter.\",\"man-get-flags returns a JSON document. Either an array or an object, depending on what flags (if any) are passed.\",\"If no flags are passed, man-get-flags will default to just parsing the man page for anything that looks like a flag (ie no descriptions or other detail).\"]},\"925\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> man-get-flags [--descriptions] -> `<stdout>` man-get-flags command [--descriptions] -> `<stdout>` \"]},\"926\":{\"h\":\"Examples\",\"t\":[\"» man-get-flags --descriptions find -> [{$.key =~ 'regex'}] { \\\"-iregex\\\": \\\"eg: pattern -- Like -regex, but the match is case insensitive.\\\", \\\"-regex\\\": \\\"eg: pattern -- True if the whole path of the file matches pattern using regular expression. To match a file named “./foo/xyzzy”, you can use the regular expression “.*/[xyz]*” or “.*/foo/.*”, but not “xyzzy” or “/foo/”.\\\" } \"]},\"927\":{\"h\":\"Flags\",\"t\":[\"--descriptions return a map of flags with their described usage\",\"-d shorthand for `--descriptions\"]},\"928\":{\"h\":\"Detail\"},\"929\":{\"h\":\"Limitations\",\"t\":[\"Due to the freeform nature of man pages - that they're intended to be human readable rather than machine readable - and the flexibility that developers have to parse command line parameters however they wish, there will always be a margin for error with how reliably any parser can autodetect parameters. one requirement is that flags are hyphen prefixed, eg --flag.\"]},\"930\":{\"h\":\"See Also\",\"t\":[\"man-summary: Outputs a man page summary of a command\",\"murex-docs: Displays the man pages for Murex builtins\",\"summary:\\nDefines a summary help text for a command\"]},\"931\":{\"h\":\"man-summary - Command Reference\",\"t\":[\"Outputs a man page summary of a command\"]},\"932\":{\"h\":\"Description\",\"t\":[\"man-summary reads the man pages for a given command and outputs it's summary (if one exists).\"]},\"933\":{\"h\":\"Usage\",\"t\":[\"man-summary command -> `<stdout>` \"]},\"934\":{\"h\":\"Examples\",\"t\":[\"» man-summary: man man - an interface to the on-line reference manuals \"]},\"935\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"man-get-flags: Parses man page files for command line flags\",\"murex-docs: Displays the man pages for Murex builtins\",\"summary:\\nDefines a summary help text for a command\"]},\"936\":{\"h\":\"map - Command Reference\",\"t\":[\"Creates a map from two data sources\"]},\"937\":{\"h\":\"Description\",\"t\":[\"This takes two parameters - which are code blocks - and combines them to output a key/value map in JSON.\",\"The first block is the key and the second is the value.\"]},\"938\":{\"h\":\"Usage\",\"t\":[\"map { code-block } { code-block } -> `<stdout>` \"]},\"939\":{\"h\":\"Examples\",\"t\":[\"» map { tout: json ([\\\"key 1\\\", \\\"key 2\\\", \\\"key 3\\\"]) } { tout: json ([\\\"value 1\\\", \\\"value 2\\\", \\\"value 3\\\"]) } { \\\"key 1\\\": \\\"value 1\\\", \\\"key 2\\\": \\\"value 2\\\", \\\"key 3\\\": \\\"value 3\\\" } \"]},\"940\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"prepend:\\nAdd data to the start of an array\"]},\"941\":{\"h\":\"match - Command Reference\",\"t\":[\"Match an exact value in an array\"]},\"942\":{\"h\":\"Description\",\"t\":[\"match takes input from STDIN and returns any array items / lines which contain an exact match of the parameters supplied.\",\"When multiple parameters are supplied they are concatenated into the search string and white space delimited. eg all three of the below are the same:\",\"match \\\"a b c\\\" match a\\\\sb\\\\sc match a b c match a b c \",\"If you want to return everything except the search string then use `!match\"]},\"943\":{\"h\":\"Usage\",\"t\":[\"Match every occurrence of search string\",\"`<stdin>` -> match search string -> `<stdout>` \",\"Match everything except search string\",\"`<stdin>` -> !match search string -> `<stdout>` \"]},\"944\":{\"h\":\"Examples\",\"t\":[\"Match Wed\",\"» ja: [Monday..Friday] -> match Wed [ \\\"Wednesday\\\" ] \",\"Match everything except Wed\",\"» ja: [Monday..Friday] -> !match Wed [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Thursday\\\", \\\"Friday\\\" ] \"]},\"945\":{\"h\":\"Detail\",\"t\":[\"match is data-type aware so will work against lists or arrays of whichever Murex data-type is passed to it via STDIN and return the output in the same data-type.\"]},\"946\":{\"h\":\"Synonyms\",\"t\":[\"match\",\"!match\",\"list.string\"]},\"947\":{\"h\":\"See Also\",\"t\":[\"2darray: Create a 2D JSON array from multiple input sources\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"map: Creates a map from two data sources\",\"msort: Sorts an array - data type agnostic\",\"prefix: Prefix a string to every item in a list\",\"prepend: Add data to the start of an array\",\"pretty: Prettifies JSON to make it human readable\",\"regexp: Regexp tools for arrays / lists of strings\",\"suffix: Prefix a string to every item in a list\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"948\":{\"h\":\"method - Command Reference\",\"t\":[\"Define a methods supported data-types\"]},\"949\":{\"h\":\"Description\",\"t\":[\"method defines what the typical data type would be for a function's STDIN and STDOUT.\"]},\"950\":{\"h\":\"Usage\",\"t\":[\"method: define name { json } \"]},\"951\":{\"h\":\"Examples\",\"t\":[\"method: define name { \\\"Stdin\\\": \\\"@Any\\\", \\\"Stdout\\\": \\\"json\\\" } \"]},\"952\":{\"h\":\"Detail\"},\"953\":{\"h\":\"Type Groups\",\"t\":[\"You can define a Murex data type or use a type group. The following type groups are available to use:\",\"package types // These are the different supported type groups const ( Any = \\\"@Any\\\" Text = \\\"@Text\\\" Math = \\\"@Math\\\" Unmarshal = \\\"@Unmarshal\\\" Marshal = \\\"@Marshal\\\" ReadArray = \\\"@ReadArray\\\" ReadArrayWithType = \\\"@ReadArrayWithType\\\" WriteArray = \\\"@WriteArray\\\" ReadIndex = \\\"@ReadIndex\\\" ReadNotIndex = \\\"@ReadNotIndex\\\" ReadMap = \\\"@ReadMap\\\" ) // GroupText is an array of the data types that make up the `text` type var GroupText = []string{ Generic, String, `generic`, `string`, } // GroupMath is an array of the data types that make up the `math` type var GroupMath = []string{ Number, Integer, Float, Boolean, } \"]},\"954\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"alias: Create an alias for a command\",\"autocomplete: Set definitions for tab-completion in the command line\",\"function: Define a function block\",\"private: Define a private function block\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"955\":{\"h\":\"msort - Command Reference\",\"t\":[\"Sorts an array - data type agnostic\"]},\"956\":{\"h\":\"Description\",\"t\":[\"This builtin takes input from stdin, sorts it and the outputs it to stdout.\",\"The code behind msort is significantly more lightweight than UNIX sort. It doesn't work with numeric types (eg sorting floating point numbers), reversed order nor multi-column data. It is specifically designed to work with lists of data. For example arrays in data formats like JSON (json), YAML (yaml) or S-Expressions (sexp); or lists of strings (str). The intention is to cover use cases not already covered by UNIX sort while also providing something rudimentary for Murex scripts to function on Windows without having to write lots of ugly platform-specific code. This is also the reason this builtin is called msort rather than conflicting with the existing UNIX name, sort.\"]},\"957\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> msort -> `<stdout>` \"]},\"958\":{\"h\":\"Examples\",\"t\":[\"» tout: json ([\\\"c\\\", \\\"b\\\", \\\"a\\\"]) -> msort [ \\\"a\\\", \\\"b\\\", \\\"c\\\" ] \",\"Since msort does not support reversed order, you will need to pipe the output of msort into another builtin:\",\"» tout: json ([\\\"c\\\", \\\"b\\\", \\\"a\\\"]) -> msort -> mtac [ \\\"c\\\", \\\"b\\\", \\\"a\\\" ] \"]},\"959\":{\"h\":\"Synonyms\",\"t\":[\"msort\",\"list.sort\"]},\"960\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"mtac: Reverse the order of an array\",\"prepend:\\nAdd data to the start of an array\"]},\"961\":{\"h\":\"mtac - Command Reference\",\"t\":[\"Reverse the order of an array\"]},\"962\":{\"h\":\"Description\",\"t\":[\"mtac takes input from STDIN and reverses the order of it.\",\"It's name is derived from a program called tac - a tool that functions like cat but returns the contents in the reverse order. The difference with the mtac builtin is that it is data-type aware. So it doesn't just function as a replacement for tac but it also works on JSON arrays, s-expressions, and any other data-type supporting arrays compiled into Murex.\"]},\"963\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> mtac -> `<stdout>` \"]},\"964\":{\"h\":\"Examples\",\"t\":[\"» ja: [Monday..Friday] -> mtac [ \\\"Friday\\\", \\\"Thursday\\\", \\\"Wednesday\\\", \\\"Tuesday\\\", \\\"Monday\\\" ] # Normal output (without mtac) » ja: [Monday..Friday] [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\" ] \"]},\"965\":{\"h\":\"Detail\",\"t\":[\"Please bare in mind that while Murex is optimised with concurrency and streaming in mind, it's impossible to reverse an incomplete array. Thus all all of STDIN must have been read and that file closed before mtac can output.\",\"In practical terms you shouldn't notice any difference except for when STDIN is a long running process or non-standard stream (eg network pipe).\"]},\"966\":{\"h\":\"Synonyms\",\"t\":[\"mtac\",\"list.reverse\"]},\"967\":{\"h\":\"See Also\",\"t\":[\"2darray: Create a 2D JSON array from multiple input sources\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"map: Creates a map from two data sources\",\"msort: Sorts an array - data type agnostic\",\"prefix: Prefix a string to every item in a list\",\"prepend: Add data to the start of an array\",\"pretty: Prettifies JSON to make it human readable\",\"suffix: Prefix a string to every item in a list\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"968\":{\"h\":\"murex-docs - Command Reference\",\"t\":[\"Displays the man pages for Murex builtins\"]},\"969\":{\"h\":\"Description\",\"t\":[\"Displays the man pages for Murex builtins.\"]},\"970\":{\"h\":\"Usage\",\"t\":[\"murex-docs: [ flag ] command -> `<stdout>` \"]},\"971\":{\"h\":\"Examples\",\"t\":[\"# Output this man page murex-docs: murex-docs \"]},\"972\":{\"h\":\"Flags\",\"t\":[\"--summary Returns an abridged description of the command rather than the entire help page.\"]},\"973\":{\"h\":\"Detail\",\"t\":[\"These man pages are compiled into the Murex executable.\"]},\"974\":{\"h\":\"Synonyms\",\"t\":[\"murex-docs\",\"help\"]},\"975\":{\"h\":\"See Also\",\"t\":[\"( (brace quote): Write a string to the STDOUT without new line\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"man-get-flags: Parses man page files for command line flags\",\"out: Print a string to the STDOUT with a trailing new line character\",\"tout: Print a string to the STDOUT and set it's data-type\",\"tread:\\nread a line of input from the user and store as a user defined typed variable (deprecated)\"]},\"976\":{\"h\":\"murex-package - Command Reference\",\"t\":[\"Murex's package manager\"]},\"977\":{\"h\":\"Description\",\"t\":[\"Murex comes with it's own package manager to make managing plugins easier.\",\"The format of the packages is a directory, typically located at ~/.murex_modules, which contains one or more murex scripts. Each script can be it's own module. ie there are multiple modules that can be grouped together and distributed as a single package.\",\"The way packages and modules are represented is as a path:\",\"package/module \",\"murex-package is a package management tool for administrating murex modules and packages.\"]},\"978\":{\"h\":\"Usage\",\"t\":[\"Install a new package\",\"murex-package: install uri -> `<stdout>` \",\"Update all packages\",\"murex-package: update -> `<stdout>` \",\"Enable a package or module which had been disabled\",\"murex-package: enable package murex-package: enable package/module \",\"Disable a package\",\"murex-package: disable package murex-package: disable package/module \",\"Import packages from another package database\",\"murex-package: import [ uri/ | local/path/ ]packages.json -> `<stdout>` \",\"Check status of murex packages\",\"murex-package: status -> `<stdout>` \"]},\"979\":{\"h\":\"Flags\",\"t\":[\"cd Changes working directory to a package's install location\",\"disable Disables a previously enabled package or module\",\"enable Enables a previously disabled package or module\",\"import Import packages described in a backup package DB from user defined URI or local path\",\"install Installs a package from a user defined URI\",\"list Returns a list of indexed packages/modules (eg what's enabled or disabled)\",\"reload Reloads all enabled modules\",\"status Returns the version status of locally installed packages\",\"update Updates all installed packages\"]},\"980\":{\"h\":\"Detail\"},\"981\":{\"h\":\"murex-package: list ... enabled vs loaded\",\"t\":[\"enabled and disabled reads the package status from disk rather than the package cache in your current Murex session (like runtime reports). This because the typical use for murex-package list enabled|disabled is to view which packages and modules will be loaded with any new murex session.\",\"If you wish to view what modules are loaded in a current session then use murex-package list loaded instead. This is also equivalent to using runtime --modules.\"]},\"982\":{\"h\":\"See Also\",\"t\":[\"Modules and Packages: An introduction to Murex modules and packages\",\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"alias: Create an alias for a command\",\"config: Query or define Murex runtime settings\",\"function: Define a function block\",\"murex-docs: Displays the man pages for Murex builtins\",\"private: Define a private function block\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"983\":{\"h\":\"murex-parser - Command Reference\",\"t\":[\"Runs the Murex parser against a block of code\"]},\"984\":{\"h\":\"Description\",\"t\":[\"summary define help text for a command. This is effectively like a tooltip message that appears, by default, in blue in the interactive shell.\",\"Normally this text is populated from the man pages or murex-docs, however if neither exist or if you wish to override their text, then you can use summary to define that text.\"]},\"985\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> murex-parser -> `<stdout>` murex-parser { code-block } -> `<stdout>` \"]},\"986\":{\"h\":\"Detail\",\"t\":[\"Please note this command is still very much in beta and is likely to change in incompatible ways in the future. If you do happen to like this command and/or have any suggestions on how to improve it, then please leave your feedback on the GitHub repository, https://github.com/lmorg/murex\"]},\"987\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"murex-docs: Displays the man pages for Murex builtins\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"988\":{\"h\":\"murex-update-exe-list - Command Reference\",\"t\":[\"Forces Murex to rescan $PATH looking for executables\"]},\"989\":{\"h\":\"Description\",\"t\":[\"On application launch, Murex scans and caches all the executables found in $PATH on your host. Murex then does regular scans there after. However if you want to force a new scan (for example you've just installed a new program and you want it to appear in tab completion) then you can run murex-update-exe-list.\"]},\"990\":{\"h\":\"Usage\",\"t\":[\"murex-update-exe-list \"]},\"991\":{\"h\":\"Examples\",\"t\":[\"» murex-update-exe-list \"]},\"992\":{\"h\":\"Detail\",\"t\":[\"Murex will automatically update the exe list each time tab completion is invoked for command name completion via the REPL shell.\"]},\"993\":{\"h\":\"See Also\",\"t\":[\"cpuarch: Output the hosts CPU architecture\",\"cpucount: Output the number of CPU cores available on your host\",\"os:\\nOutput the auto-detected OS name\"]},\"994\":{\"h\":\"<> / read-named-pipe - Command Reference\",\"t\":[\"Reads from a Murex named pipe\"]},\"995\":{\"h\":\"Description\",\"t\":[\"Sometimes you will need to start a command line with a Murex named pipe, eg\",\"» <namedpipe> -> match: foobar \",\"See the documentation on pipe for more details about Murex named pipes.\"]},\"996\":{\"h\":\"Usage\",\"t\":[\"Read from pipe\",\"<namedpipe> -> `<stdout>` \",\"Write to pipe\",\"`<stdin>` -> <namedpipe> \"]},\"997\":{\"h\":\"Examples\",\"t\":[\"The follow two examples function the same\",\"» pipe: example » bg { <example> -> match: 2 } » a: <example> [1..3] 2 » !pipe: example \"]},\"998\":{\"h\":\"Detail\"},\"999\":{\"h\":\"What are Murex named pipes?\",\"t\":[\"In POSIX, there is a concept of STDIN, STDOUT and STDERR, these are FIFO files while are \\\"piped\\\" from one executable to another. ie STDOUT for application 'A' would be the same file as STDIN for application 'B' when A is piped to B: A | B. Murex adds a another layer around this to enable support for passing data types and builtins which are agnostic to the data serialization format traversing the pipeline. While this does add overhead the advantage is this new wrapper can be used as a primitive for channelling any data from one point to another.\",\"Murex named pipes are where these pipes are created in a global store, decoupled from any executing functions, named and can then be used to pass data along asynchronously.\",\"For example\",\"pipe: example bg { <example> -> match: Hello } out: \\\"foobar\\\" -> <example> out: \\\"Hello, world!\\\" -> <example> out: \\\"foobar\\\" -> <example> !pipe: example \",\"This returns Hello, world! because out is writing to the example named pipe and match is also reading from it in the background (bg).\",\"Named pipes can also be inlined into the command parameters with <> tags\",\"pipe: example bg { <example> -> match: Hello } out: <example> \\\"foobar\\\" out: <example> \\\"Hello, world!\\\" out: <example> \\\"foobar\\\" !pipe: example \",\"Please note this is also how test works.\",\"Murex named pipes can also represent network sockets, files on a disk or any other read and/or write endpoint. Custom builtins can also be written in Golang to support different abstractions so your Murex code can work with those read or write endpoints transparently.\",\"To see the different supported types run\",\"runtime --pipes \"]},\"1000\":{\"h\":\"Namespaces and usage in modules and packages\",\"t\":[\"Pipes created via pipe are created in the global namespace. This allows pipes to be used across different functions easily however it does pose a risk with name clashes where Murex named pipes are used heavily. Thus is it recommended that pipes created in modules should be prefixed with the name of its package.\"]},\"1001\":{\"h\":\"Synonyms\",\"t\":[\"(murex named pipe)\",\"<>\",\"read-named-pipe\"]},\"1002\":{\"h\":\"See Also\",\"t\":[\"<stdin>: Read the STDIN belonging to the parent code block\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"bg: Run processes in the background\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"pipe: Manage Murex named pipes\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1003\":{\"h\":\"! (not) - Command Reference\",\"t\":[\"Reads the STDIN and exit number from previous process and not's it's condition\"]},\"1004\":{\"h\":\"Description\",\"t\":[\"Reads the STDIN and exit number from previous process and not's it's condition.\"]},\"1005\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> ! -> `<stdout>` \"]},\"1006\":{\"h\":\"Examples\",\"t\":[\"» echo \\\"Hello, world!\\\" -> ! false » false -> ! true \"]},\"1007\":{\"h\":\"Synonyms\",\"t\":[\"!\"]},\"1008\":{\"h\":\"See Also\",\"t\":[\"and: Returns true or false depending on whether multiple conditions are met\",\"false: Returns a false value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"true:\\nReturns a true value\"]},\"1009\":{\"h\":\"open-image - Command Reference\",\"t\":[\"Renders bitmap image data on your terminal\"]},\"1010\":{\"h\":\"Description\",\"t\":[\"open-image is an optional builtin which will render images (JPEG, GIF, PNG, BMP, TIFF and WebP) to the terminal using block characters and ANSI colour sequences.\"]},\"1011\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> open-image -> `<stdout>` open-image file-path -> `<stdout>` \"]},\"1012\":{\"h\":\"Examples\",\"t\":[\"As a method\",\"» cat example.png -> open-image \",\"As a function\",\"» open-image example.png \"]},\"1013\":{\"h\":\"Detail\",\"t\":[\"open-image will fail if STDOUT is not a TTY.\"]},\"1014\":{\"h\":\"See Also\",\"t\":[\"open: Open a file with a preferred handler\",\"qr:\\nCreates a QR code from STDIN\"]},\"1015\":{\"h\":\"open - Command Reference\",\"t\":[\"Open a file with a preferred handler\"]},\"1016\":{\"h\":\"Description\",\"t\":[\"open is a smart tool for reading files:\",\"It will read a file from disk or a HTTP(S) endpoints\",\"Detect the file type via file extension or HTTP header Content-Type\",\"It intelligently writes to STDOUT\",\"If STDOUT is a TTY it will perform any transformations to render to the terminal (eg using inlining images)\",\"If STDOUT is a pipe then it will write a byte stream with the relevant data-type\",\"If there are no open handlers then it will fallback to the systems default. eg open (on macOS, Linux), open-xdg (X11), etc.\"]},\"1017\":{\"h\":\"Usage\",\"t\":[\"open filename[.gz]|uri -> `<stdout>` \"]},\"1018\":{\"h\":\"Examples\",\"t\":[\"» open https://api.github.com/repos/lmorg/murex/issues -> foreach issue { out: \\\"$issue[number]: $issue[title]\\\" } \"]},\"1019\":{\"h\":\"Detail\"},\"1020\":{\"h\":\"File Extensions\",\"t\":[\"Supported file extensions are listed in config under the app and key names of shell, extensions.\",\"Unsupported file extensions are defaulted to generic, *.\",\"Files with a .gz extension are assumed to be gzipped and thus are are automatically expanded.\"]},\"1021\":{\"h\":\"MIME Types\",\"t\":[\"The Content-Type HTTP header is compared against a list of MIME types, which are stored in config under the app and key names of shell, mime-types.\",\"There is a little bit of additional logic to determine the Murex data-type to use should the MIME type not appear in config, as seen in the following code:\",\"package lang import ( \\\"regexp\\\" \\\"strings\\\" \\\"github.com/lmorg/murex/lang/types\\\" ) var rxMimePrefix = regexp.MustCompile(`^([-0-9a-zA-Z]+)/.*$`) // MimeToMurex gets the murex data type for a corresponding MIME func MimeToMurex(mimeType string) string { mime := strings.Split(mimeType, \\\";\\\")[0] mime = strings.TrimSpace(mime) mime = strings.ToLower(mime) // Find a direct match. This is only used to pick up edge cases, eg text files used as images. dt := mimes[mime] if dt != \\\"\\\" { return dt } // No direct match found. Fall back to prefix. prefix := rxMimePrefix.FindStringSubmatch(mime) if len(prefix) != 2 { return types.Generic } switch prefix[1] { case \\\"text\\\", \\\"i-world\\\", \\\"message\\\": return types.String case \\\"audio\\\", \\\"music\\\", \\\"video\\\", \\\"image\\\", \\\"model\\\": return types.Binary case \\\"application\\\": if strings.HasSuffix(mime, \\\"+json\\\") { return types.Json } return types.Generic default: // Mime type not recognized so lets just make it a generic. return types.Generic } } \"]},\"1022\":{\"h\":\"HTTP User Agent\",\"t\":[\"open's user agent is the same as get and post and is configurable via config under they app http\",\"» config -> [http] { \\\"cookies\\\": { \\\"Data-Type\\\": \\\"json\\\", \\\"Default\\\": { \\\"example.com\\\": { \\\"name\\\": \\\"value\\\" }, \\\"www.example.com\\\": { \\\"name\\\": \\\"value\\\" } }, \\\"Description\\\": \\\"Defined cookies to send, ordered by domain.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": { \\\"example.com\\\": { \\\"name\\\": \\\"value\\\" }, \\\"www.example.com\\\": { \\\"name\\\": \\\"value\\\" } } }, \\\"default-https\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": false, \\\"Description\\\": \\\"If true then when no protocol is specified (`http://` nor `https://`) then default to `https://`.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": false }, \\\"headers\\\": { \\\"Data-Type\\\": \\\"json\\\", \\\"Default\\\": { \\\"example.com\\\": { \\\"name\\\": \\\"value\\\" }, \\\"www.example.com\\\": { \\\"name\\\": \\\"value\\\" } }, \\\"Description\\\": \\\"Defined HTTP request headers to send, ordered by domain.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": { \\\"example.com\\\": { \\\"name\\\": \\\"value\\\" }, \\\"www.example.com\\\": { \\\"name\\\": \\\"value\\\" } } }, \\\"insecure\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": false, \\\"Description\\\": \\\"Ignore certificate errors.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": false }, \\\"redirect\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Automatically follow redirects.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": true }, \\\"timeout\\\": { \\\"Data-Type\\\": \\\"int\\\", \\\"Default\\\": 10, \\\"Description\\\": \\\"Timeout in seconds for `get` and `getfile`.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": 10 }, \\\"user-agent\\\": { \\\"Data-Type\\\": \\\"str\\\", \\\"Default\\\": \\\"murex/1.7.0000 BETA\\\", \\\"Description\\\": \\\"User agent string for `get` and `getfile`.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": \\\"murex/1.7.0000 BETA\\\" } } \"]},\"1023\":{\"h\":\"Open Flags\",\"t\":[\"If the open builtin falls back to using the systems default (like open-xdg) then the only thing that gets passed is the path being opened. If the path is stdin then a temporary file will be created. If you want to pass command line flags to open-xdg (for example), then you need to call that command directly. In the case of macOS and some Linux systems, that might look like:\",\"exec open --flags filename \"]},\"1024\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"config: Query or define Murex runtime settings\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"foreach: Iterate through an array\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"openagent: Creates a handler function for `open\",\"out: Print a string to the STDOUT with a trailing new line character\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"1025\":{\"h\":\"openagent - Command Reference\",\"t\":[\"Creates a handler function for `open\"]},\"1026\":{\"h\":\"Description\",\"t\":[\"openagent creates and destroys handler functions for writing data to the terminal when accessed via open and STDOUT is a TTY.\"]},\"1027\":{\"h\":\"Usage\",\"t\":[\"Display code block for an associated data-type:\",\"openagent get data-type \",\"Define an open handler function:\",\"openagent set data-type { code-block } \",\"Undefine an open handler:\",\"!openagent data-type \"]},\"1028\":{\"h\":\"Detail\"},\"1029\":{\"h\":\"FileRef\",\"t\":[\"It is possible to track which shell script or module installed what open handler by checking runtime --open-agents and checking it's FileRef.\"]},\"1030\":{\"h\":\"Synonyms\",\"t\":[\"openagent\",\"!openagent\"]},\"1031\":{\"h\":\"See Also\",\"t\":[\"FileRef: How to track what code was loaded and from where\",\"Modules and Packages: An introduction to Murex modules and packages\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"open: Open a file with a preferred handler\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1032\":{\"h\":\"or - Command Reference\",\"t\":[\"Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\"]},\"1033\":{\"h\":\"Description\",\"t\":[\"Returns a boolean results (true or false) depending on whether any of the code-blocks included as parameters are successful or not.\"]},\"1034\":{\"h\":\"Usage\",\"t\":[\"or: { code-block } { code-block } -> `<stdout>` !or: { code-block } { code-block } -> `<stdout>` \",\"or supports as many or as few code-blocks as you wish.\"]},\"1035\":{\"h\":\"Examples\",\"t\":[\"if { or { = 1+1==2 } { = 2+2==5 } { = 3+3==6 } } then { out: At least one of those equations are correct } \"]},\"1036\":{\"h\":\"Detail\",\"t\":[\"or does not set the exit number on failure so it is safe to use inside a try or trypipe block.\",\"If or is prefixed by a bang (!or) then it returns true when one or more code-blocks are unsuccessful (ie the opposite of or).\"]},\"1037\":{\"h\":\"Code-Block Testing\",\"t\":[\"or only executes code-blocks up until one of the code-blocks is successful then it exits the function and returns true.\",\"!or only executes code-blocks while the code-blocks are successful. Once one is unsuccessful !or exits and returns true (ie it nots every code-block).\"]},\"1038\":{\"h\":\"Synonyms\",\"t\":[\"or\",\"!or\"]},\"1039\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"catch: Handles the exception code raised by try or trypipe\",\"false: Returns a false value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1040\":{\"h\":\"os - Command Reference\",\"t\":[\"Output the auto-detected OS name\"]},\"1041\":{\"h\":\"Description\",\"t\":[\"Output the auto-detected OS name.\"]},\"1042\":{\"h\":\"Usage\",\"t\":[\"os -> `<stdout>` os string -> `<stdout>` ``` \"]},\"1043\":{\"h\":\"Examples\",\"t\":[\"» os linux \",\"Or if you want to check if the host is one of a number of platforms:\",\"# When run on Linux or FreeBSD » os linux freebsd true # When run on another platform, eg Windows or Darwin (OSX) # (exit number would also be `1`) » os linux freebsd false \",\"posix is also supported:\",\"# When run on Linux, FreeBSD or Darwin (for example) » os posix true # When run on Windows or Plan 9 # (exit number would also be `1`) » os posix false \",\"Please note that although Plan 9 shares similarities with POSIX, it is not POSIX-compliant. For that reason, os returns false with the posix parameter when run on Plan 9. If you want to include Plan 9 in the check then please write it as os posix plan9.\"]},\"1044\":{\"h\":\"See Also\",\"t\":[\"cpuarch: Output the hosts CPU architecture\",\"cpucount:\\nOutput the number of CPU cores available on your host\"]},\"1045\":{\"h\":\"out - Command Reference\",\"t\":[\"Print a string to the STDOUT with a trailing new line character\"]},\"1046\":{\"h\":\"Description\",\"t\":[\"Write parameters to STDOUT with a trailing new line character.\"]},\"1047\":{\"h\":\"Usage\",\"t\":[\"out: string to write -> `<stdout>` \"]},\"1048\":{\"h\":\"Examples\",\"t\":[\"» out Hello, World! Hello, World! \",\"For compatibility with other shells, echo is also supported:\",\"» echo Hello, World! Hello, World! \"]},\"1049\":{\"h\":\"Detail\",\"t\":[\"out / echo output as string data-type. This can be changed by casting (cast) or using the tout function.\"]},\"1050\":{\"h\":\"ANSI Constants\",\"t\":[\"out supports ANSI constants.\"]},\"1051\":{\"h\":\"Synonyms\",\"t\":[\"out\",\"echo\"]},\"1052\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"( (brace quote): Write a string to the STDOUT without new line\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"pt: Pipe telemetry. Writes data-types and bytes written\",\"read: read a line of input from the user and store as a variable\",\"tout: Print a string to the STDOUT and set it's data-type\",\"tread:\\nread a line of input from the user and store as a user defined typed variable (deprecated)\"]},\"1053\":{\"h\":\"pipe - Command Reference\",\"t\":[\"Manage Murex named pipes\"]},\"1054\":{\"h\":\"Description\",\"t\":[\"pipe creates and destroys Murex named pipes.\"]},\"1055\":{\"h\":\"Usage\",\"t\":[\"Create pipe\",\"pipe: name [ pipe-type ] \",\"Destroy pipe\",\"!pipe: name \"]},\"1056\":{\"h\":\"Examples\",\"t\":[\"Create a standard pipe:\",\"pipe: example \",\"Delete a pipe:\",\"!pipe: example \",\"Create a TCP pipe (deleting a pipe is the same regardless of the type of pipe):\",\"pipe example --tcp-dial google.com:80 bg { <example> } out: \\\"GET /\\\" -> <example> \"]},\"1057\":{\"h\":\"Detail\"},\"1058\":{\"h\":\"What are Murex named pipes?\",\"t\":[\"In POSIX, there is a concept of STDIN, STDOUT and STDERR, these are FIFO files while are \\\"piped\\\" from one executable to another. ie STDOUT for application 'A' would be the same file as STDIN for application 'B' when A is piped to B: A | B. Murex adds a another layer around this to enable support for passing data types and builtins which are agnostic to the data serialization format traversing the pipeline. While this does add overhead the advantage is this new wrapper can be used as a primitive for channelling any data from one point to another.\",\"Murex named pipes are where these pipes are created in a global store, decoupled from any executing functions, named and can then be used to pass data along asynchronously.\",\"For example\",\"pipe: example bg { <example> -> match: Hello } out: \\\"foobar\\\" -> <example> out: \\\"Hello, world!\\\" -> <example> out: \\\"foobar\\\" -> <example> !pipe: example \",\"This returns Hello, world! because out is writing to the example named pipe and match is also reading from it in the background (bg).\",\"Named pipes can also be inlined into the command parameters with <> tags\",\"pipe: example bg { <example> -> match: Hello } out: <example> \\\"foobar\\\" out: <example> \\\"Hello, world!\\\" out: <example> \\\"foobar\\\" !pipe: example \",\"Please note this is also how test works.\",\"Murex named pipes can also represent network sockets, files on a disk or any other read and/or write endpoint. Custom builtins can also be written in Golang to support different abstractions so your Murex code can work with those read or write endpoints transparently.\",\"To see the different supported types run\",\"runtime --pipes \"]},\"1059\":{\"h\":\"Namespaces and usage in modules and packages\",\"t\":[\"Pipes created via pipe are created in the global namespace. This allows pipes to be used across different functions easily however it does pose a risk with name clashes where Murex named pipes are used heavily. Thus is it recommended that pipes created in modules should be prefixed with the name of its package.\"]},\"1060\":{\"h\":\"Synonyms\",\"t\":[\"pipe\",\"!pipe\"]},\"1061\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"<stdin>: Read the STDIN belonging to the parent code block\",\"bg: Run processes in the background\",\"match: Match an exact value in an array\",\"out: Print a string to the STDOUT with a trailing new line character\",\"runtime: Returns runtime information on the internal state of Murex\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"1062\":{\"h\":\"post - Command Reference\",\"t\":[\"HTTP POST request with a JSON-parsable return\"]},\"1063\":{\"h\":\"Description\",\"t\":[\"Fetches a page from a URL via HTTP/S POST request.\"]},\"1064\":{\"h\":\"Usage\",\"t\":[\"post url -> `<stdout>` `<stdin>` -> post url content-type -> `<stdout>` \"]},\"1065\":{\"h\":\"Examples\",\"t\":[\"» post google.com -> [ Status ] { \\\"Code\\\": 405, \\\"Message\\\": \\\"Method Not Allowed\\\" } \"]},\"1066\":{\"h\":\"Detail\"},\"1067\":{\"h\":\"JSON return\",\"t\":[\"POST returns a JSON object with the following fields:\",\"{ \\\"Status\\\": { \\\"Code\\\": integer, \\\"Message\\\": string, }, \\\"Headers\\\": { string [ string... ] }, \\\"Body\\\": string } \",\"The concept behind this is it provides and easier path for scripting eg pulling specific fields via the index, [, function.\"]},\"1068\":{\"h\":\"post as a method\",\"t\":[\"Running post as a method will transmit the contents of STDIN as part of the body of the HTTP POST request. When run as a method you have to include a second parameter specifying the Content-Type MIME.\"]},\"1069\":{\"h\":\"Configurable options\",\"t\":[\"post has a number of behavioral options which can be configured via Murex's standard config tool:\",\"config: -> [ http ] \",\"To change a default, for example the user agent string:\",\"config: set http user-agent \\\"bob\\\" post: google.com \",\"This enables sane, repeatable and readable defaults. Read the documents on config for more details about it's usage and the rational behind the command.\"]},\"1070\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"config: Query or define Murex runtime settings\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile:\\nMakes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\"]},\"1071\":{\"h\":\"prefix - Command Reference\",\"t\":[\"Prefix a string to every item in a list\"]},\"1072\":{\"h\":\"Description\",\"t\":[\"Takes a list from STDIN and returns that same list with each element prefixed.\"]},\"1073\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> prefix str -> `<stdout>` \"]},\"1074\":{\"h\":\"Examples\",\"t\":[\"» ja: [Monday..Wednesday] -> prefix foobar [ \\\"foobarMonday\\\", \\\"foobarTuesday\\\", \\\"foobarWednesday\\\" ] \"]},\"1075\":{\"h\":\"Detail\",\"t\":[\"Supported data types can queried via runtime\",\"runtime: --marshallers runtime: --unmarshallers \"]},\"1076\":{\"h\":\"Synonyms\",\"t\":[\"prefix\",\"list.prefix\"]},\"1077\":{\"h\":\"See Also\",\"t\":[\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API): Converts a Murex data-type into structured memory\",\"left: Left substring every item in a list\",\"right: Right substring every item in a list\",\"runtime: Returns runtime information on the internal state of Murex\",\"suffix:\\nPrefix a string to every item in a list\"]},\"1078\":{\"h\":\"prepend - Command Reference\",\"t\":[\"Add data to the start of an array\"]},\"1079\":{\"h\":\"Description\",\"t\":[\"prepend a data to the start of an array.\"]},\"1080\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> prepend: value -> `<stdout>` \"]},\"1081\":{\"h\":\"Examples\",\"t\":[\"» a: [January..December] -> prepend: 'New Year' New Year January February March April May June July August September October November December \"]},\"1082\":{\"h\":\"Detail\",\"t\":[\"prepend and append are data type aware:\",\"» tout json [1,2,3] -> append 4 5 6 bob Error in `append` (1,22): cannot convert 'bob' to a floating point number: strconv.ParseFloat: parsing \\\"bob\\\": invalid syntax \"]},\"1083\":{\"h\":\"Synonyms\",\"t\":[\"prepend\",\"list.prepend\"]},\"1084\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"addheading: Adds headings to a table\",\"append: Add data to the end of an array\",\"cast: Alters the data type of the previous function without altering it's output\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"match: Match an exact value in an array\",\"msort: Sorts an array - data type agnostic\",\"mtac: Reverse the order of an array\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"1085\":{\"h\":\"pretty - Command Reference\",\"t\":[\"Prettifies JSON to make it human readable\"]},\"1086\":{\"h\":\"Description\",\"t\":[\"Takes JSON from the STDIN and reformats it to make it human readable, then outputs that to STDOUT.\"]},\"1087\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> pretty -> `<stdout>` \"]},\"1088\":{\"h\":\"Examples\",\"t\":[\"» tout: json {\\\"Array\\\":[1,2,3],\\\"Map\\\":{\\\"String\\\": \\\"Foobar\\\",\\\"Number\\\":123.456}} -> pretty { \\\"Array\\\": [ 1, 2, 3 ], \\\"Map\\\": { \\\"String\\\": \\\"Foobar\\\", \\\"Number\\\": 123.456 } } \"]},\"1089\":{\"h\":\"See Also\",\"t\":[\"format: Reformat one data-type into another data-type\",\"out: Print a string to the STDOUT with a trailing new line character\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"1090\":{\"h\":\"private - Command Reference\",\"t\":[\"Define a private function block\"]},\"1091\":{\"h\":\"Description\",\"t\":[\"private defines a function who's scope is limited to that module or source file.\",\"Privates cannot be called from one module to another (unless they're wrapped around a global function) and nor can they be called from the interactive command line. The purpose of a private is to reduce repeated code inside a module or source file without cluttering up the global namespace.\"]},\"1092\":{\"h\":\"Usage\",\"t\":[\"private: name { code-block } \"]},\"1093\":{\"h\":\"Examples\",\"t\":[\"# The following cannot be entered via the command line. You need to write # it to a file and execute it from there. private hw { out \\\"Hello, World!\\\" } function tom { hw out \\\"My name is Tom.\\\" } function dick { hw out \\\"My name is Dick.\\\" } function harry { hw out \\\"My name is Harry.\\\" } \"]},\"1094\":{\"h\":\"Detail\"},\"1095\":{\"h\":\"Allowed characters\",\"t\":[\"Private names can only include any characters apart from dollar ($). This is to prevent functions from overwriting variables (see the order of preference below).\"]},\"1096\":{\"h\":\"Undefining a private\",\"t\":[\"Because private functions are fixed to the source file that declares them, there isn't much point in undefining them. Thus at this point in time, it is not possible to do so.\"]},\"1097\":{\"h\":\"Order of preference\",\"t\":[\"There is an order of precedence for which commands are looked up:\",\"runmode: this is executed before the rest of the script. It is invoked by the pre-compiler forking process and is required to sit at the top of any scripts.\",\"test and pipe functions also alter the behavior of the compiler and thus are executed ahead of any scripts.\",\"private functions - defined via private. Private's cannot be global and are scoped only to the module or source that defined them. For example, You cannot call a private function directly from the interactive command line (however you can force an indirect call via fexec).\",\"Aliases - defined via alias. All aliases are global.\",\"Murex functions - defined via function. All functions are global.\",\"Variables (dollar prefixed) which are declared via global, set or let. Also environmental variables too, declared via export.\",\"globbing: however this only applies for commands executed in the interactive shell.\",\"Murex builtins.\",\"External executable files\",\"You can override this order of precedence via the fexec and exec builtins.\"]},\"1098\":{\"h\":\"See Also\",\"t\":[\"alias: Create an alias for a command\",\"break: Terminate execution of a block within your processes scope\",\"exec: Runs an executable\",\"export: Define an environmental variable and set it's value\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"function: Define a function block\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"method: Define a methods supported data-types\",\"set: Define a local variable and set it's value\",\"source:\\nImport Murex code from another file of code block\"]},\"1099\":{\"h\":\"pt - Command Reference\",\"t\":[\"Pipe telemetry. Writes data-types and bytes written\"]},\"1100\":{\"h\":\"Description\",\"t\":[\"Pipe telemetry, pt, writes statistics about the pipeline. The telemetry is written directly to the OS's STDERR so to preserved the pipeline.\"]},\"1101\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> pt -> `<stdout>` \"]},\"1102\":{\"h\":\"Examples\",\"t\":[\"curl -s https://example.com/bigfile.bin -> pt -> > bigfile.bin \",\"(though Murex does also have it's own HTTP clients, get, post and getfile)\"]},\"1103\":{\"h\":\"See Also\",\"t\":[\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"get: Makes a standard HTTP request and returns the result as a JSON object\",\"getfile: Makes a standard HTTP request and return the contents as Murex-aware data type for passing along Murex pipelines.\",\"post:\\nHTTP POST request with a JSON-parsable return\"]},\"1104\":{\"h\":\"rand - Command Reference\",\"t\":[\"Random field generator\"]},\"1105\":{\"h\":\"Description\",\"t\":[\"rand can generate random numbers, strings and other data types.\"]},\"1106\":{\"h\":\"Usage\",\"t\":[\"rand data-type [ max-value ] \"]},\"1107\":{\"h\":\"Examples\",\"t\":[\"Random integer: 64-bit on 64-bit machines\",\"rand int \",\"Random integer between 0 and 9\",\"rand int 9 \",\"Random floating point number between 0 and 1\",\"rand float \",\"Random string, fixed to 5 characters long\",\"rand str 5 \"]},\"1108\":{\"h\":\"Flags\",\"t\":[\"* Alias for str (string)\",\"float Random floating point number between 0 and 1. max-value not supported\",\"int Random integer, max-value specifies highest value for integer\",\"num Alias for int in this builtin\",\"str Random string of printable ASCII characters. max-value specifies the fixed length of the string\"]},\"1109\":{\"h\":\"Detail\"},\"1110\":{\"h\":\"Security\",\"t\":[\"WARNING: is should be noted that while rand can produce random numbers and strings which might be useful for password generation, neither the RNG nor the the random string generator (which is ostensibly the same RNG but applied to an array of bytes within the range of printable ASCII characters) are considered cryptographically secure.\"]},\"1111\":{\"h\":\"See Also\",\"t\":[\"format: Reformat one data-type into another data-type\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"set:\\nDefine a local variable and set it's value\"]},\"1112\":{\"h\":\"[ (range) - Command Reference\",\"t\":[\"Outputs a ranged subset of data from STDIN\"]},\"1113\":{\"h\":\"Description\",\"t\":[\"This will read from STDIN and output a subset of data in a defined range.\",\"The range can be defined as a number of different range types - such as the content of the array or it's index / row number. You can also omit either the start or the end of the search criteria to cover all items before or after the remaining search criteria.\",\"Please note that @[ syntax has been deprecated in favour of [ syntax instead\"]},\"1114\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> [start..end]flags -> `<stdout>` \"]},\"1115\":{\"h\":\"Examples\",\"t\":[\"Range over all months after March:\",\"» a: [January..December] -> [March..]se April May June July August September October November December \",\"Range from the 6th to the 10th month:\",\"By default, ranges start from one, 1\",\"» a: [January..December] -> [5..9] May June July August September \",\"Return the first 3 months:\",\"This usage is similar to head -n3\",\"» a: [January..December] -> [..3] October November December \",\"Return the last 3 months:\",\"This usage is similar to tail -n3\",\"» a: [January..December] -> [-3..] October November December \"]},\"1116\":{\"h\":\"Flags\",\"t\":[\"8 handles backspace characters (char 8) instead of treating it like a printable character\",\"b removes blank (empty) lines from source\",\"e exclude the start and end search criteria from the range\",\"n numeric offset (indexed from 0)\",\"r regexp match\",\"s exact string match\",\"t trims whitespace from source\"]},\"1117\":{\"h\":\"Synonyms\",\"t\":[\"@[\"]},\"1118\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"prepend:\\nAdd data to the start of an array\"]},\"1119\":{\"h\":\"read - Command Reference\",\"t\":[\"read a line of input from the user and store as a variable\"]},\"1120\":{\"h\":\"Description\",\"t\":[\"A readline function to allow a line of data inputed from the terminal.\"]},\"1121\":{\"h\":\"Usage\",\"t\":[\"Classic usage:\",\"read: \\\"prompt\\\" var_name `<stdin>` -> read: var_name \",\"Script usage:\",\"read: [ --prompt \\\"prompt\\\" ] [ --variable var_name ] [ --default \\\"default value\\\" ] [ --datatype data-type ] [ --autocomplete { json } ] [ --mask character ] \"]},\"1122\":{\"h\":\"Examples\",\"t\":[\"Classic usage:\",\"read: \\\"What is your name? \\\" name out: \\\"Hello $name\\\" out: What is your name? -> read: name out: \\\"Hello $name\\\" \",\"Script usage:\",\"read: --prompt \\\"Are you sure? [Y/n]\\\" \\\\ --variable yn \\\\ --default Y \",\"Secrets:\",\"read: --prompt \\\"Password: \\\" --variable pw --mask * \"]},\"1123\":{\"h\":\"Flags\",\"t\":[\"--autocomplete Autocompletion suggestions. Can be either a JSON array or a JSON object\",\"--datatype Murex data-type for the read data (default: str)\",\"--default If a zero length string is returned but neither ctrl+c nor ctrl+d were pressed, then the default value defined here will be returned\",\"--mask Optional password mask, for reading secrets\",\"--prompt User notification to display\",\"--variable Variable name to store the read data (default: read)\"]},\"1124\":{\"h\":\"Detail\"},\"1125\":{\"h\":\"Classic Usage\",\"t\":[\"If read is called as a method then the prompt string is taken from STDIN. Otherwise the prompt string will be the first parameter. However if no prompt string is given then read will not write a prompt.\",\"The last parameter will be the variable name to store the string read by read. This variable cannot be prefixed by dollar, $, otherwise the shell will write the output of that variable as the last parameter rather than the name of the variable.\",\"The data type the read line will be stored as is str (string). If you require this to be different then please use tread (typed read) or call read with the --datatype flag as per the script usage.\"]},\"1126\":{\"h\":\"See Also\",\"t\":[\"( (brace quote): Write a string to the STDOUT without new line\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"tout: Print a string to the STDOUT and set it's data-type\",\"tread:\\nread a line of input from the user and store as a user defined typed variable (deprecated)\"]},\"1127\":{\"h\":\"regexp - Command Reference\",\"t\":[\"Regexp tools for arrays / lists of strings\"]},\"1128\":{\"h\":\"Description\",\"t\":[\"regexp provides a few tools for text matching and manipulation against an array or list of strings - thus regexp is Murex data-type aware.\"]},\"1129\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> regexp expression -> `<stdout>` \"]},\"1130\":{\"h\":\"Examples\"},\"1131\":{\"h\":\"Find elements\",\"t\":[\"» ja: [monday..sunday] -> regexp 'f/^([a-z]{3})day/' [ \\\"mon\\\", \\\"fri\\\", \\\"sun\\\" ] \",\"This returns only 3 days because only 3 days match the expression (where the days have to be 6 characters long) and then it only returns the first 3 characters because those are inside the parenthesis.\"]},\"1132\":{\"h\":\"Match elements\",\"t\":[\"Elements containing\",\"» ja: [monday..sunday] -> regexp 'm/(mon|fri|sun)day/' [ \\\"monday\\\", \\\"friday\\\", \\\"sunday\\\" ] \",\"Elements excluding\",\"» ja: [monday..sunday] -> !regexp 'm/(mon|fri|sun)day/' [ \\\"tuesday\\\", \\\"wednesday\\\", \\\"thursday\\\", \\\"saturday\\\" ] \"]},\"1133\":{\"h\":\"Substitute expression\",\"t\":[\"» ja: [monday..sunday] -> regexp 's/day/night/' [ \\\"monnight\\\", \\\"tuesnight\\\", \\\"wednesnight\\\", \\\"thursnight\\\", \\\"frinight\\\", \\\"saturnight\\\", \\\"sunnight\\\" ] \"]},\"1134\":{\"h\":\"Flags\",\"t\":[\"f output found expressions (doesn't support bang prefix)\",\"m output elements that match expression (supports bang prefix)\",\"s output all elements - substituting elements that match expression (doesn't support bang prefix)\"]},\"1135\":{\"h\":\"Detail\",\"t\":[\"regexp is data-type aware so will work against lists or arrays of whichever Murex data-type is passed to it via STDIN and return the output in the same data-type.\"]},\"1136\":{\"h\":\"Synonyms\",\"t\":[\"regexp\",\"!regexp\",\"list.regex\"]},\"1137\":{\"h\":\"See Also\",\"t\":[\"2darray: Create a 2D JSON array from multiple input sources\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"append: Add data to the end of an array\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"map: Creates a map from two data sources\",\"match: Match an exact value in an array\",\"msort: Sorts an array - data type agnostic\",\"prefix: Prefix a string to every item in a list\",\"prepend: Add data to the start of an array\",\"pretty: Prettifies JSON to make it human readable\",\"suffix: Prefix a string to every item in a list\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1138\":{\"h\":\"return - Command Reference\",\"t\":[\"Exits current function scope\"]},\"1139\":{\"h\":\"Description\",\"t\":[\"return will terminate execution of a block at the scope level (eg function, private, etc)\",\"Conceptually it is the same as break except it doesn't require the scope name as a parameter and you can specify the exit number rather than defaulting to 0.\"]},\"1140\":{\"h\":\"Usage\",\"t\":[\"return [ exit-number ] \"]},\"1141\":{\"h\":\"Examples\",\"t\":[\"Setting an exit number:\",\"function example { out foo return 13 out bar } example exitnum \",\"Running the above code would output:\",\"foo 13 \",\"Returning withing an exit number:\",\"If we were to run the same code as above but with return written without any parameters (ie instead of return 13 it would be just return), then you would see the following output:\",\"foo 0 \"]},\"1142\":{\"h\":\"Detail\",\"t\":[\"Any process that has been initialised within a returned scope will have their exit number updated to the value specified in return (or 0 if no parameter was passed).\"]},\"1143\":{\"h\":\"See Also\",\"t\":[\"break: Terminate execution of a block within your processes scope\",\"continue: Terminate process of a block within a caller function\",\"exit: Exit murex\",\"exitnum: Output the exit number of the previous process\",\"function: Define a function block\",\"out: Print a string to the STDOUT with a trailing new line character\",\"private:\\nDefine a private function block\"]},\"1144\":{\"h\":\"right - Command Reference\",\"t\":[\"Right substring every item in a list\"]},\"1145\":{\"h\":\"Description\",\"t\":[\"Takes a list from STDIN and returns a right substring of that same list.\",\"One parameter is required and that is the number of characters to return. If the parameter is a negative then right counts from the left.\"]},\"1146\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> right int -> `<stdout>` \"]},\"1147\":{\"h\":\"Examples\",\"t\":[\"Count from the right\",\"» ja: [Monday..Wednesday] -> right 4 [ \\\"nday\\\", \\\"sday\\\", \\\"sday\\\" ] \",\"Count from the left\",\"» ja: [Monday..Wednesday] -> left -3 [ \\\"day\\\", \\\"sday\\\", \\\"nesday\\\" ] \"]},\"1148\":{\"h\":\"Detail\",\"t\":[\"Supported data types can queried via runtime\",\"runtime: --marshallers runtime: --unmarshallers \"]},\"1149\":{\"h\":\"Synonyms\",\"t\":[\"right\",\"list.right\"]},\"1150\":{\"h\":\"See Also\",\"t\":[\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API): Converts a Murex data-type into structured memory\",\"prefix: Prefix a string to every item in a list\",\"right: Right substring every item in a list\",\"runtime: Returns runtime information on the internal state of Murex\",\"suffix:\\nPrefix a string to every item in a list\"]},\"1151\":{\"h\":\"round - Command Reference\",\"t\":[\"Round a number by a user defined precision\"]},\"1152\":{\"h\":\"Description\",\"t\":[\"round supports a few different levels of precision:\"]},\"1153\":{\"h\":\"Nearest decimal place\",\"t\":[\"Syntax: 0.12345 (any numbers can be used)\",\"If a decimal place is supplied then round will round your number to however many decimal places you specify. It doesn't matter what digits you include in your precision value as the only thing which is used to drive the result is the position of the decimal point. Thus a precision value of 0.000 would perform the same rounding as 9.999.\",\"Decimal places are always rounded to the nearest. --down and --up flags are not supported.\"]},\"1154\":{\"h\":\"Nearest integer\",\"t\":[\"Syntax: either 0 or 1 (either behaves the same)\",\"This will round your value to the nearest whole number. For example 3.33 would be rounded to 3.\",\"If --down flag is supplied then the remainder is dropped. For example 9.99 would then be rounded to 9 instead of 10.\",\"If --up flag is is supplied then the the input value would always be rounded up to the nearest whole number. For example 3.33 would be rounded to 4 instead of 3.\"]},\"1155\":{\"h\":\"Nearest Multiple\",\"t\":[\"Syntax: 50 (any integer greater than `1)\",\"This will round your input value to the nearest multiple of your precision.\",\"Like with nearest integer (see above), --down and --up will specify to round whether to always round down or up rather than returning the nearest match in either direction.\"]},\"1156\":{\"h\":\"Usage\",\"t\":[\"round value precision -> `<stdout>` \"]},\"1157\":{\"h\":\"Examples\",\"t\":[\"Rounding to the nearest multiple of 20:\",\"» round 15 20 20 \"]},\"1158\":{\"h\":\"Flags\",\"t\":[\"--down Rounds down to the nearest multiple (not supported when precision is to decimal places)\",\"--up Rounds up to the nearest multiple (not supported when precision is to decimal places)\",\"-d shorthand for `--down\",\"-u shorthand for `--up\"]},\"1159\":{\"h\":\"See Also\",\"t\":[\"expr:\\nExpressions: mathematical, string comparisons, logical operators\"]},\"1160\":{\"h\":\"runmode - Command Reference\",\"t\":[\"Alter the scheduler's behaviour at higher scoping level\"]},\"1161\":{\"h\":\"Description\",\"t\":[\"Due to dynamic nature in which blocks are compiled on demand, traditional try and trypipe blocks cannot affect the runtime behaviour of schedulers already invoked (eg for function blocks and modules which try et al would sit inside). To solve this we need an additional command that is executed by the compiler prior to the block being executed which can define the runmode of the scheduler. This is the purpose of runmode.\",\"The caveat of being a compiler command rather than a builtin is that runmode needs be the first command in a block.\"]},\"1162\":{\"h\":\"Usage\",\"t\":[\"runmode try|trypipe function|module \"]},\"1163\":{\"h\":\"Examples\",\"t\":[\"function hello { # Short conversation, exit on error runmode: try function read: name \\\"What is your name? \\\" out: \\\"Hello $name, pleased to meet you\\\" read: mood \\\"How are you feeling? \\\" out: \\\"I'm feeling $mood too\\\" } \"]},\"1164\":{\"h\":\"Detail\",\"t\":[\"runmode's parameters are ordered:\"]},\"1165\":{\"h\":\"1st parameter\"},\"1166\":{\"h\":\"try\",\"t\":[\"Checks only the last command in the pipeline for errors. However still allows commands in a pipeline to run in parallel.\"]},\"1167\":{\"h\":\"trypipe\",\"t\":[\"Checks every command in the pipeline before executing the next. However this blocks pipelines from running every command in parallel.\"]},\"1168\":{\"h\":\"2nd parameter\"},\"1169\":{\"h\":\"function\",\"t\":[\"Sets the runmode for all blocks within the function when runmode is placed at the start of the function. This includes privates, autocompletes, events, etc.\"]},\"1170\":{\"h\":\"module\",\"t\":[\"Sets the runmode for all blocks within that module when placed at the start of the module. This include any functions, privates, autocompletes, events, etc that are inside that module. The do not need a separate runmode ... function if runmode ... module is set.\"]},\"1171\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"autocomplete: Set definitions for tab-completion in the command line\",\"catch: Handles the exception code raised by try or trypipe\",\"event: Event driven programming for shell scripts\",\"fid-list: Lists all running functions within the current Murex session\",\"function: Define a function block\",\"out: Print a string to the STDOUT with a trailing new line character\",\"private: Define a private function block\",\"read: read a line of input from the user and store as a variable\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1172\":{\"h\":\"runtime - Command Reference\",\"t\":[\"Returns runtime information on the internal state of Murex\"]},\"1173\":{\"h\":\"Description\",\"t\":[\"runtime is a tool for querying the internal state of Murex. It's output will be JSON dumps.\"]},\"1174\":{\"h\":\"Usage\",\"t\":[\"runtime: flags -> `<stdout>` \",\"builtins is an alias for runtime: --builtins:\",\"builtins -> `<stdout>` \"]},\"1175\":{\"h\":\"Examples\",\"t\":[\"List all the builtin data-types that support WriteArray()\",\"» runtime: --writearray [ \\\"*\\\", \\\"commonlog\\\", \\\"csexp\\\", \\\"hcl\\\", \\\"json\\\", \\\"jsonl\\\", \\\"qs\\\", \\\"sexp\\\", \\\"str\\\", \\\"toml\\\", \\\"yaml\\\" ] \",\"List all the functions\",\"» runtime: --functions -> [ agent aliases ] [ { \\\"Block\\\": \\\"\\\\n # Launch ssh-agent\\\\n ssh-agent -\\\\u003e head -n2 -\\\\u003e [ :0 ] -\\\\u003e prefix \\\\\\\"export \\\\\\\" -\\\\u003e source\\\\n ssh-add: @{g \\\\u003c!null\\\\u003e ~/.ssh/*.key} @{g \\\\u003c!null\\\\u003e ~/.ssh/*.pem}\\\\n\\\", \\\"FileRef\\\": { \\\"Column\\\": 1, \\\"Line\\\": 149, \\\"Source\\\": { \\\"DateTime\\\": \\\"2019-07-07T14:06:11.05581+01:00\\\", \\\"Filename\\\": \\\"/home/lau/.murex_profile\\\", \\\"Module\\\": \\\"profile/.murex_profile\\\" } }, \\\"Summary\\\": \\\"Launch ssh-agent\\\" }, { \\\"Block\\\": \\\"\\\\n\\\\t# Output the aliases in human readable format\\\\n\\\\truntime: --aliases -\\\\u003e formap name alias {\\\\n $name -\\\\u003e sprintf: \\\\\\\"%10s =\\\\u003e ${esccli @alias}\\\\\\\\n\\\\\\\"\\\\n\\\\t} -\\\\u003e cast str\\\\n\\\", \\\"FileRef\\\": { \\\"Column\\\": 1, \\\"Line\\\": 6, \\\"Source\\\": { \\\"DateTime\\\": \\\"2019-07-07T14:06:10.886706796+01:00\\\", \\\"Filename\\\": \\\"(builtin)\\\", \\\"Module\\\": \\\"source/builtin\\\" } }, \\\"Summary\\\": \\\"Output the aliases in human readable format\\\" } ] \",\"To get a list of every flag supported by runtime\",\"» runtime: --help [ \\\"--aliases\\\", \\\"--astcache\\\", \\\"--config\\\", \\\"--debug\\\", \\\"--events\\\", \\\"--fids\\\", \\\"--flags\\\", \\\"--functions\\\", \\\"--help\\\", \\\"--indexes\\\", \\\"--marshallers\\\", \\\"--memstats\\\", \\\"--modules\\\", \\\"--named-pipes\\\", \\\"--open-agents\\\", \\\"--pipes\\\", \\\"--privates\\\", \\\"--readarray\\\", \\\"--readmap\\\", \\\"--sources\\\", \\\"--test-results\\\", \\\"--tests\\\", \\\"--unmarshallers\\\", \\\"--variables\\\", \\\"--writearray\\\" ] \",\"Please also note that you can supply more than one flag. However when you do use multiple flags the top level of the JSON output will be a map of the flag names. eg\",\"» runtime: --pipes --tests { \\\"pipes\\\": [ \\\"file\\\", \\\"std\\\", \\\"tcp-dial\\\", \\\"tcp-listen\\\", \\\"udp-dial\\\", \\\"udp-listen\\\" ], \\\"tests\\\": { \\\"state\\\": {}, \\\"test\\\": [] } } » runtime: --pipes [ \\\"file\\\", \\\"std\\\", \\\"tcp-dial\\\", \\\"tcp-listen\\\", \\\"udp-dial\\\", \\\"udp-listen\\\" ] » runtime: --tests { \\\"state\\\": {}, \\\"test\\\": [] } \"]},\"1176\":{\"h\":\"Flags\",\"t\":[\"--aliases Lists all aliases\",\"--astcache Lists some data about cached ASTs\",\"--autocomplete Lists all autocomplete schemas - both user defined and automatically generated one\",\"--builtins Lists all builtin commands, compiled into Murex\",\"--config Lists all properties available to `config\",\"--debug Outputs the state of debug and inspect mode\",\"--events Lists all builtin event types and any defined events\",\"--exports Outputs environmental variables. For Murex variables (global and set/let) use `--variables\",\"--fids Lists all running processes / functions\",\"--functions Lists all Murex global functions\",\"--globals Lists all global variables\",\"--help Outputs a list of runtimes's flags\",\"--indexes Lists all builtin data-types which are supported by index ([)\",\"--marshallers Lists all builtin data-types with marshallers (eg required for format)\",\"--memstats Outputs the running state of Go's runtime\",\"--methods Lists all commands with a defined STDOUT and STDIN data type. This is used to generate smarter autocompletion suggestions with `->\",\"--modules Lists all installed modules\",\"--named-pipes Lists all named pipes defined\",\"--not-indexes Lists all builtin data-types which are supported by index (![)\",\"--open-agents Lists all registered open handlers\",\"--pipes Lists builtin pipes compiled into Murex. These can be then be defined as named-pipes\",\"--privates Lists all Murex private functions\",\"--readarray Lists all builtin data-types which support ReadArray()\",\"--readarraywithtype Lists all builtin data-types which support ReadArrayWithType()\",\"--readmap Lists all builtin data-types which support ReadMap()\",\"--sources Lists all loaded murex sources\",\"--summaries Outputs all the override summaries\",\"--test-results A dump of any unreported test results\",\"--tests Lists defined tests\",\"--unmarshallers Lists all builtin data-types with unmarshallers (eg required for format)\",\"--variables Lists all local Murex variables which doesn't include environmental nor global variables\",\"--writearray Lists all builtin data-types which support WriteArray()\"]},\"1177\":{\"h\":\"Detail\"},\"1178\":{\"h\":\"Usage in scripts\",\"t\":[\"runtime should not be used in scripts because the output of runtime may be subject to change as and when the internal mechanics of Murex change. The purpose behind runtime is not to provide an API but rather to provide a verbose \\\"dump\\\" of the internal running state of Murex.\",\"If you require a stable API to script against then please use the respective command line tool. For example fid-list instead of runtime --fids. Some tools will provide a human readable output when STDOUT is a TTY but output a script parsable version when STDOUT is not a terminal.\",\"» fid-list FID Parent Scope State Run Mode BG Out Pipe Err Pipe Command Parameters 0 0 0 Executing Shell no -murex 265499 0 0 Executing Normal no out err fid-list » fid-list -> pretty [ { \\\"FID\\\": 0, \\\"Parent\\\": 0, \\\"Scope\\\": 0, \\\"State\\\": \\\"Executing\\\", \\\"Run Mode\\\": \\\"Shell\\\", \\\"BG\\\": false, \\\"Out Pipe\\\": \\\"\\\", \\\"Err Pipe\\\": \\\"\\\", \\\"Command\\\": \\\"-murex\\\", \\\"Parameters\\\": \\\"\\\" }, { \\\"FID\\\": 265540, \\\"Parent\\\": 0, \\\"Scope\\\": 0, \\\"State\\\": \\\"Executing\\\", \\\"Run Mode\\\": \\\"Normal\\\", \\\"BG\\\": false, \\\"Out Pipe\\\": \\\"out\\\", \\\"Err Pipe\\\": \\\"err\\\", \\\"Command\\\": \\\"fid-list\\\", \\\"Parameters\\\": \\\"\\\" }, { \\\"FID\\\": 265541, \\\"Parent\\\": 0, \\\"Scope\\\": 0, \\\"State\\\": \\\"Executing\\\", \\\"Run Mode\\\": \\\"Normal\\\", \\\"BG\\\": false, \\\"Out Pipe\\\": \\\"out\\\", \\\"Err Pipe\\\": \\\"err\\\", \\\"Command\\\": \\\"pretty\\\", \\\"Parameters\\\": \\\"\\\" } ] \"]},\"1179\":{\"h\":\"File reference\",\"t\":[\"Some of the JSON dumps produced from runtime will include a map called FileRef. This is a trace of the source file that defined it. It is used by Murex to help provide meaningful errors (eg with line and character positions) however it is also useful for manually debugging user-defined properties such as which module or script defined an autocomplete schema.\"]},\"1180\":{\"h\":\"Debug mode\",\"t\":[\"When debug is enabled garbage collection is disabled for variables and FIDs. This means the output of runtime --variables and runtime --fids will contain more than just the currently defined variables and running functions.\"]},\"1181\":{\"h\":\"Synonyms\",\"t\":[\"runtime\",\"builtins\"]},\"1182\":{\"h\":\"See Also\",\"t\":[\"[ (index): Outputs an element from an array, map or table\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"debug: Debugging information\",\"event: Event driven programming for shell scripts\",\"export: Define an environmental variable and set it's value\",\"fid-list: Lists all running functions within the current Murex session\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"format: Reformat one data-type into another data-type\",\"function: Define a function block\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"method: Define a methods supported data-types\",\"open: Open a file with a preferred handler\",\"openagent: Creates a handler function for `open\",\"pipe: Manage Murex named pipes\",\"pretty: Prettifies JSON to make it human readable\",\"private: Define a private function block\",\"set: Define a local variable and set it's value\",\"source: Import Murex code from another file of code block\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"1183\":{\"h\":\"rx - Command Reference\",\"t\":[\"Regexp pattern matching for file system objects (eg .*\\\\\\\\.txt)\"]},\"1184\":{\"h\":\"Description\",\"t\":[\"Returns a list of files and directories that match a regexp pattern.\",\"Output is a JSON list.\"]},\"1185\":{\"h\":\"Usage\",\"t\":[\"rx: pattern -> `<stdout>` !rx: pattern -> `<stdout>` `<stdin>` -> rx: pattern -> `<stdout>` `<stdin>` -> !rx: pattern -> `<stdout>` \"]},\"1186\":{\"h\":\"Examples\",\"t\":[\"Inline regex file matching:\",\"cat: @{ rx: '.*\\\\.txt' } \",\"Writing a list of files to disk:\",\"rx: '.*\\\\.go' |> filelist.txt \",\"Checking if files exist:\",\"if { rx: somefiles.* } then { # files exist } \",\"Checking if files do not exist:\",\"!if { rx: somefiles.* } then { # files do not exist } \",\"Return all files apart from text files:\",\"!g: '\\\\.txt$' \",\"Filtering a file list based on regexp matches file:\",\"f: +f -> rx: '.*\\\\.txt' \",\"Remove any regexp file matches from a file list:\",\"f: +f -> !rx: '.*\\\\.txt' \"]},\"1187\":{\"h\":\"Detail\"},\"1188\":{\"h\":\"Traversing Directories\",\"t\":[\"Unlike globbing (g) which can traverse directories (eg g: /path/*), rx is only designed to match file system objects in the current working directory.\",\"rx uses Go (lang)'s standard regexp engine.\"]},\"1189\":{\"h\":\"Inverse Matches\",\"t\":[\"If you want to exclude any matches based on wildcards, rather than include them, then you can use the bang prefix. eg\",\"» rx: READ* [ \\\"README.md\\\" ] murex-dev» !rx: .* Error in `!rx` (1,1): No data returned. \"]},\"1190\":{\"h\":\"When Used As A Method\",\"t\":[\"!rx first looks for files that match its pattern, then it reads the file list from STDIN. If STDIN contains contents that are not files then !rx might not handle those list items correctly. This shouldn't be an issue with rx in its normal mode because it is only looking for matches however when used as !rx any items that are not files will leak through.\",\"This is its designed feature and not a bug. If you wish to remove anything that also isn't a file then you should first pipe into either g: *, rx: .*, or f +f and then pipe that into !rx.\",\"The reason for this behavior is to separate this from !regexp and !match.\"]},\"1191\":{\"h\":\"Synonyms\",\"t\":[\"rx\",\"!rx\"]},\"1192\":{\"h\":\"See Also\",\"t\":[\"f: Lists or filters file system objects (eg files)\",\"g: Glob pattern matching for file system objects (eg *.txt)\",\"match: Match an exact value in an array\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"1193\":{\"h\":\"set - Command Reference\",\"t\":[\"Define a local variable and set it's value\"]},\"1194\":{\"h\":\"Description\",\"t\":[\"Defines, updates or deallocates a local variable.\"]},\"1195\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> set var_name # Assume value from STDIN, define the data type manually `<stdin>` -> set datatype var_name # Define value manually (data type defaults to string; `str`) set var_name=data # Define value and data type manually set datatype var_name=data # Define a variable but don't set any value set var_name set datatype var_name \"]},\"1196\":{\"h\":\"Examples\",\"t\":[\"As a method:\",\"» out \\\"Hello, world!\\\" -> set hw » out \\\"$hw\\\" Hello, World! \",\"As a function:\",\"» set hw=\\\"Hello, world!\\\" » out \\\"$hw\\\" Hello, World! \"]},\"1197\":{\"h\":\"Detail\"},\"1198\":{\"h\":\"Deallocation\",\"t\":[\"You can unset variable names with the bang prefix:\",\"!set var_name \"]},\"1199\":{\"h\":\"Type Annotations\",\"t\":[\"When set or global are used as a function, the parameters are passed as a string which means the variables are defined as a str. If you wish to define them as an alternate data type then you should add type annotations:\",\"» set: int age = 30 (`$age` is an integer, `int`) » global: bool dark_theme = true \",\"($dark_theme is a boolean, bool)\",\"When using set or global as a method, by default they will define the variable as the data type of the pipe:\",\"» open: example.json -> set: file \",\"($file is defined a json type because open wrote to set's pipe with a json type)\",\"You can also annotate set and global when used as a method too:\",\"out: 30 -> set: int age \",\"($age is an integer, int, despite out writing a string, `str, to the pipe)\",\"export does not support type annotations because environmental variables must always be strings. This is a limitation of the current operating systems.\"]},\"1200\":{\"h\":\"Scoping\",\"t\":[\"Variable scoping is simplified to three layers:\",\"Local variables (set, !set, let)\",\"Global variables (global, !global)\",\"Environmental variables (export, !export, unset)\",\"Variables are looked up in that order of too. For example a the following code where set overrides both the global and environmental variable:\",\"» set: foobar=1 » global: foobar=2 » export: foobar=3 » out: $foobar 1 \"]},\"1201\":{\"h\":\"Local variables\",\"t\":[\"These are defined via set and let. They're variables that are persistent across any blocks within a function. Functions will typically be blocks encapsulated like so:\",\"function example { # variables scoped inside here } \",\"...or...\",\"private example { # variables scoped inside here } \",\"...however dynamic autocompletes, events, unit tests and any blocks defined in config will also be triggered as functions.\",\"Code running inside any control flow or error handing structures will be treated as part of the same part of the same scope as the parent function:\",\"» function example { » try { » # set 'foobar' inside a `try` block » set: foobar=example » } » # 'foobar' exists outside of `try` because it is scoped to `function` » out: $foobar » } example \",\"Where this behavior might catch you out is with iteration blocks which create variables, eg for, foreach and formap. Any variables created inside them are still shared with any code outside of those structures but still inside the function block.\",\"Any local variables are only available to that function. If a variable is defined in a parent function that goes on to call child functions, then those local variables are not inherited but the child functions:\",\"» function parent { » # set a local variable » set: foobar=example » child » } » » function child { » # returns the `global` value, \\\"not set\\\", because the local `set` isn't inherited » out: $foobar » } » » global: $foobar=\\\"not set\\\" » parent not set \",\"It's also worth remembering that any variable defined using set in the shells FID (ie in the interactive shell) is localised to structures running in the interactive, REPL, shell and are not inherited by any called functions.\"]},\"1202\":{\"h\":\"Global variables\",\"t\":[\"Where global differs from set is that the variables defined with global will be scoped at the global shell level (please note this is not the same as environmental variables!) so will cascade down through all scoped code-blocks including those running in other threads.\"]},\"1203\":{\"h\":\"Environmental variables\",\"t\":[\"Exported variables (defined via export) are system environmental variables. Inside Murex environmental variables behave much like global variables however their real purpose is passing data to external processes. For example env is an external process on Linux (eg /usr/bin/env on ArchLinux):\",\"» export foo=bar » env -> grep foo foo=bar \"]},\"1204\":{\"h\":\"Function Names\",\"t\":[\"As a security feature function names cannot include variables. This is done to reduce the risk of code executing by mistake due to executables being hidden behind variable names.\",\"Instead Murex will assume you want the output of the variable printed:\",\"» out \\\"Hello, world!\\\" -> set hw » $hw Hello, world! \",\"On the rare occasions you want to force variables to be expanded inside a function name, then call that function via exec:\",\"» set cmd=grep » ls -> exec: $cmd main.go main.go \",\"This only works for external executables. There is currently no way to call aliases, functions nor builtins from a variable and even the above exec trick is considered bad form because it reduces the readability of your shell scripts.\"]},\"1205\":{\"h\":\"Usage Inside Quotation Marks\",\"t\":[\"Like with Bash, Perl and PHP: Murex will expand the variable when it is used inside a double quotes but will escape the variable name when used inside single quotes:\",\"» out \\\"$foo\\\" bar » out '$foo' $foo » out %($foo) bar \"]},\"1206\":{\"h\":\"Synonyms\",\"t\":[\"set\",\"!set\"]},\"1207\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"Variable and Config Scoping: How scoping works within Murex\",\"( (brace quote): Write a string to the STDOUT without new line\",\"= (arithmetic evaluation): Evaluate a mathematical function (deprecated)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"exec: Runs an executable\",\"export: Define an environmental variable and set it's value\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"global: Define a global variable and set it's value\",\"let:\\nEvaluate a mathematical function and assign to variable (deprecated)\"]},\"1208\":{\"h\":\"source - Command Reference\",\"t\":[\"Import Murex code from another file of code block\"]},\"1209\":{\"h\":\"Description\",\"t\":[\"source imports code from another file or code block. It can be used as either an \\\"import\\\" / \\\"include\\\" directive (eg Python, Go, C, etc) or an \\\"eval\\\" (eg Python, Perl, etc).\"]},\"1210\":{\"h\":\"Usage\",\"t\":[\"Execute source from STDIN\",\"`<stdin>` -> source \",\"Execute source from a file\",\"source: filename.mx \",\"Execute a code block from parameter\",\"source: { code-block } \"]},\"1211\":{\"h\":\"Examples\",\"t\":[\"Execute source from stdin:\",\"» tout: block { out: \\\"Hello, world!\\\" } -> source Hello, world! \",\"Execute source from file:\",\"» tout: block { out: \\\"Hello, world!\\\" } |> example.mx » source: example.mx Hello, world! \",\"Execute a code block from parameter\",\"» source { out: \\\"Hello, world!\\\" } Hello, world! \"]},\"1212\":{\"h\":\"Synonyms\",\"t\":[\"source\",\".\"]},\"1213\":{\"h\":\"See Also\",\"t\":[\"args: Command line flag parser for Murex shell scripting\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"exec: Runs an executable\",\"fexec: Execute a command or function, bypassing the usual order of precedence.\",\"function: Define a function block\",\"murex-parser: Runs the Murex parser against a block of code\",\"private: Define a private function block\",\"runtime: Returns runtime information on the internal state of Murex\",\"version:\\nGet Murex version\"]},\"1214\":{\"h\":\"<stdin> - Command Reference\",\"t\":[\"Read the STDIN belonging to the parent code block\"]},\"1215\":{\"h\":\"Description\",\"t\":[\"This is used inside functions and other code blocks to pass that block's STDIN down a pipeline\"]},\"1216\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> `<stdout>` \"]},\"1217\":{\"h\":\"Examples\",\"t\":[\"When writing more complex scripts, you cannot always invoke your read as the first command in a code block. For example a simple pipeline might be:\",\"» function: example { -> match: 2 } \",\"But this only works if -> is the very first command. The following would fail:\",\"# Incorrect code function: example { out: \\\"only match 2\\\" -> match 2 } \",\"This is where <stdin> comes to our rescue:\",\"function: example { out: \\\"only match 2\\\" `<stdin>` -> match 2 } \",\"This could also be written as:\",\"function: example { out: \\\"only match 2\\\"; `<stdin>` -> match 2 } \"]},\"1218\":{\"h\":\"Detail\",\"t\":[\"<stdin> makes use of a feature called named pipes, which are a way of piping data between processes without chaining them together as a single command pipeline (eg commands delimited with |, ->, =>, ? tokens).\"]},\"1219\":{\"h\":\"What are Murex named pipes?\",\"t\":[\"In POSIX, there is a concept of STDIN, STDOUT and STDERR, these are FIFO files while are \\\"piped\\\" from one executable to another. ie STDOUT for application 'A' would be the same file as STDIN for application 'B' when A is piped to B: A | B. Murex adds a another layer around this to enable support for passing data types and builtins which are agnostic to the data serialization format traversing the pipeline. While this does add overhead the advantage is this new wrapper can be used as a primitive for channelling any data from one point to another.\",\"Murex named pipes are where these pipes are created in a global store, decoupled from any executing functions, named and can then be used to pass data along asynchronously.\",\"For example\",\"pipe: example bg { <example> -> match: Hello } out: \\\"foobar\\\" -> <example> out: \\\"Hello, world!\\\" -> <example> out: \\\"foobar\\\" -> <example> !pipe: example \",\"This returns Hello, world! because out is writing to the example named pipe and match is also reading from it in the background (bg).\",\"Named pipes can also be inlined into the command parameters with <> tags\",\"pipe: example bg { <example> -> match: Hello } out: <example> \\\"foobar\\\" out: <example> \\\"Hello, world!\\\" out: <example> \\\"foobar\\\" !pipe: example \",\"Please note this is also how test works.\",\"Murex named pipes can also represent network sockets, files on a disk or any other read and/or write endpoint. Custom builtins can also be written in Golang to support different abstractions so your Murex code can work with those read or write endpoints transparently.\",\"To see the different supported types run\",\"runtime --pipes \"]},\"1220\":{\"h\":\"Namespaces and usage in modules and packages\",\"t\":[\"Pipes created via pipe are created in the global namespace. This allows pipes to be used across different functions easily however it does pose a risk with name clashes where Murex named pipes are used heavily. Thus is it recommended that pipes created in modules should be prefixed with the name of its package.\"]},\"1221\":{\"h\":\"Synonyms\",\"t\":[\"<stdin>\"]},\"1222\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"function: Define a function block\",\"match: Match an exact value in an array\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pipe: Manage Murex named pipes\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1223\":{\"h\":\"struct-keys - Command Reference\",\"t\":[\"Outputs all the keys in a structure as a file path\"]},\"1224\":{\"h\":\"Description\",\"t\":[\"struct-keys outputs all of the keys in a structured data-type eg JSON, YAML, TOML, etc.\",\"The output is a JSON array of the keys with each value being a file path representation of the input structure's node.\"]},\"1225\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> struct-keys [ depth ] -> `<stdout>` `<stdin>` -> struct-keys [ flags ] -> `<stdout>` \"]},\"1226\":{\"h\":\"Examples\",\"t\":[\"The source for these examples will be defined in the variable $example:\",\"» set: json example={ \\\"firstName\\\": \\\"John\\\", \\\"lastName\\\": \\\"Smith\\\", \\\"isAlive\\\": true, \\\"age\\\": 27, \\\"address\\\": { \\\"streetAddress\\\": \\\"21 2nd Street\\\", \\\"city\\\": \\\"New York\\\", \\\"state\\\": \\\"NY\\\", \\\"postalCode\\\": \\\"10021-3100\\\" }, \\\"phoneNumbers\\\": [ { \\\"type\\\": \\\"home\\\", \\\"number\\\": \\\"212 555-1234\\\" }, { \\\"type\\\": \\\"office\\\", \\\"number\\\": \\\"646 555-4567\\\" }, { \\\"type\\\": \\\"mobile\\\", \\\"number\\\": \\\"123 456-7890\\\" } ], \\\"children\\\": [], \\\"spouse\\\": null } \",\"Without any flags set:\",\"» $example -> struct-keys [ \\\"/lastName\\\", \\\"/isAlive\\\", \\\"/age\\\", \\\"/address\\\", \\\"/address/state\\\", \\\"/address/postalCode\\\", \\\"/address/streetAddress\\\", \\\"/address/city\\\", \\\"/phoneNumbers\\\", \\\"/phoneNumbers/0\\\", \\\"/phoneNumbers/0/type\\\", \\\"/phoneNumbers/0/number\\\", \\\"/phoneNumbers/1\\\", \\\"/phoneNumbers/1/number\\\", \\\"/phoneNumbers/1/type\\\", \\\"/phoneNumbers/2\\\", \\\"/phoneNumbers/2/type\\\", \\\"/phoneNumbers/2/number\\\", \\\"/children\\\", \\\"/spouse\\\", \\\"/firstName\\\" ] \",\"Defining max depth and changing the separator string:\",\"» $example -> struct-keys --depth 1 --separator '.' [ \\\".children\\\", \\\".spouse\\\", \\\".firstName\\\", \\\".lastName\\\", \\\".isAlive\\\", \\\".age\\\", \\\".address\\\", \\\".phoneNumbers\\\" ] \",\"An example of a unicode character being used as a separator:\",\"» $example -> struct-keys --depth 2 --separator ☺ [ \\\"☺age\\\", \\\"☺address\\\", \\\"☺address☺streetAddress\\\", \\\"☺address☺city\\\", \\\"☺address☺state\\\", \\\"☺address☺postalCode\\\", \\\"☺phoneNumbers\\\", \\\"☺phoneNumbers☺0\\\", \\\"☺phoneNumbers☺1\\\", \\\"☺phoneNumbers☺2\\\", \\\"☺children\\\", \\\"☺spouse\\\", \\\"☺firstName\\\", \\\"☺lastName\\\", \\\"☺isAlive\\\" ] \",\"Separator can also be multiple characters:\",\"» $example -> struct-keys --depth 1 --separator '|||' [ \\\"|||firstName\\\", \\\"|||lastName\\\", \\\"|||isAlive\\\", \\\"|||age\\\", \\\"|||address\\\", \\\"|||phoneNumbers\\\", \\\"|||children\\\", \\\"|||spouse\\\" ] \"]},\"1227\":{\"h\":\"Flags\",\"t\":[\"--depth How far to traverse inside the nested structure\",\"--separator String to use as a separator between fields (defaults to /)\",\"-d Alias for `--depth\",\"-s Alias for `--separator\"]},\"1228\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"formap: Iterate through a map or other collection of data\",\"set:\\nDefine a local variable and set it's value\"]},\"1229\":{\"h\":\"suffix - Command Reference\",\"t\":[\"Prefix a string to every item in a list\"]},\"1230\":{\"h\":\"Description\",\"t\":[\"Takes a list from STDIN and returns that same list with each element suffixed.\"]},\"1231\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> suffix str -> `<stdout>` \"]},\"1232\":{\"h\":\"Examples\",\"t\":[\"» ja: [Monday..Wednesday] -> suffix foobar [ \\\"Mondayfoobar\\\", \\\"Tuesdayfoobar\\\", \\\"Wednesdayfoobar\\\" ] \"]},\"1233\":{\"h\":\"Detail\",\"t\":[\"Supported data types can queried via runtime\",\"runtime: --marshallers runtime: --unmarshallers \"]},\"1234\":{\"h\":\"Synonyms\",\"t\":[\"suffix\",\"list.suffix\"]},\"1235\":{\"h\":\"See Also\",\"t\":[\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"lang.MarshalData() (system API): Converts structured memory into a Murex data-type (eg for stdio)\",\"lang.UnmarshalData() (system API): Converts a Murex data-type into structured memory\",\"left: Left substring every item in a list\",\"prefix: Prefix a string to every item in a list\",\"right: Right substring every item in a list\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1236\":{\"h\":\"summary  - Command Reference\",\"t\":[\"Defines a summary help text for a command\"]},\"1237\":{\"h\":\"Description\",\"t\":[\"summary define help text for a command. This is effectively like a tooltip message that appears, by default, in blue in the interactive shell.\",\"Normally this text is populated from the man pages or murex-docs, however if neither exist or if you wish to override their text, then you can use summary to define that text.\"]},\"1238\":{\"h\":\"Usage\",\"t\":[\"Define a commands summary\",\"summary command description \",\"Undefine a summary\",\"!summary command \"]},\"1239\":{\"h\":\"Examples\",\"t\":[\"Define a commands summary\",\"» summary: foobar \\\"Hello, world!\\\" » runtime: --summaries -> [ foobar ] Hello, world! \",\"Undefine a summary\",\"» !summary: foobar \"]},\"1240\":{\"h\":\"Synonyms\",\"t\":[\"summary\",\"!summary\"]},\"1241\":{\"h\":\"See Also\",\"t\":[\"bexists: Check which builtins exist\",\"builtins: Returns runtime information on the internal state of Murex\",\"config: Query or define Murex runtime settings\",\"exec: Runs an executable\",\"fid-list: Lists all running functions within the current Murex session\",\"murex-docs: Displays the man pages for Murex builtins\",\"murex-update-exe-list: Forces Murex to rescan $PATH looking for executables\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1242\":{\"h\":\"switch - Command Reference\",\"t\":[\"Blocks of cascading conditionals\"]},\"1243\":{\"h\":\"Description\",\"t\":[\"switch is a large block for simplifying cascades of conditional statements.\"]},\"1244\":{\"h\":\"Usage\",\"t\":[\"switch [value] { case | if { conditional } [then] { code-block } case | if { conditional } [then] { code-block } ... [ default { code-block } ] } -> `<stdout>` \",\"The first parameter should be either case or if -- the statements are subtly different and thus alter the behavior of switch.\",\"then is optional ('then' is assumed even if not explicitly present).\"]},\"1245\":{\"h\":\"Examples\",\"t\":[\"Output an array of editors installed:\",\"switch { if { which: vi } { out: vi } if { which: vim } { out: vim } if { which: nano } { out: nano } if { which: emacs } { out: emacs } } -> format: json \",\"A higher/lower game written using switch:\",\"function higherlower { try { rand: int 100 -> set rand while { $rand } { read: guess \\\"Guess a number between 1 and 100: \\\" switch { case: { = $guess < $rand } then { out: \\\"Too low\\\" } case: { = $guess > $rand } then { out: \\\"Too high\\\" } default: { out: \\\"Correct\\\" let: rand=0 } } } } } \",\"String matching with switch:\",\"read: name \\\"What is your name? \\\" switch $name { case \\\"Tom\\\" { out: \\\"I have a brother called Tom\\\" } case \\\"Dick\\\" { out: \\\"I have an uncle called Dick\\\" } case \\\"Sally\\\" { out: \\\"I have a sister called Sally\\\" } default { err: \\\"That is an odd name\\\" } } \"]},\"1246\":{\"h\":\"Detail\"},\"1247\":{\"h\":\"Comparing Values vs Boolean State\"},\"1248\":{\"h\":\"By Values\",\"t\":[\"If you supply a value with switch...\",\"switch value { ... } \",\"...then all the conditionals are compared against that value. For example:\",\"switch foo { case bar { # not executed because foo != bar } case foo { # executed because foo != foo } } \",\"You can use code blocks to return strings too\",\"switch foo { case {out: bar} then { # not executed because foo != bar } case {out: foo} then { # executed because foo != foo } } \"]},\"1249\":{\"h\":\"By Boolean State\",\"t\":[\"This style of syntax could be argued as a prettier counterpart to if/else if. Only code blocks are support and each block is checked for its boolean state rather than string matching.\",\"This is simply written as:\",\"switch { ... } \"]},\"1250\":{\"h\":\"When To Use case , if and default ?\",\"t\":[\"A switch command may contain multiple case and if blocks. These statements subtly alter the behavior of switch. You can mix and match if and case statements within the same switch block.\"]},\"1251\":{\"h\":\"case\",\"t\":[\"A case statement will only move on to the next statement if the result of the case statement is false. If a case statement is true then switch will exit with an exit number of 0.\",\"switch { case { false } then { # ignored because case == false } case { true } then { # executed because case == true } case { true } then { # ignored because a previous case was true } } \"]},\"1252\":{\"h\":\"if\",\"t\":[\"An if statement will proceed to the next statement even if the result of the if statement is true.\",\"switch { if { false } then { # ignored because if == false } if { true } then { # executed because if == true } if { true } then { # executed because if == true } } \"]},\"1253\":{\"h\":\"default\",\"t\":[\"default statements are only run if allcaseandif statements are false.\",\"switch { if { false } then { # ignored because if == false } if { true } then { # executed because if == true } if { true } then { # executed because if == true } if { false } then { # ignored because if == false } default { # ignored because one or more previous if's were true } } \",\"default was added in Murex version 3.1\"]},\"1254\":{\"h\":\"catch\",\"t\":[\"catch has been deprecated in version 3.1 and replaced with default.\"]},\"1255\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"break: Terminate execution of a block within your processes scope\",\"catch: Handles the exception code raised by try or trypipe\",\"false: Returns a false value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"set: Define a local variable and set it's value\",\"true: Returns a true value\",\"try: Handles errors inside a block of code\",\"trypipe: Checks state of each function in a pipeline and exits block on error\",\"while:\\nLoop until condition false\"]},\"1256\":{\"h\":\"Murex Shell Docs\"},\"1257\":{\"h\":\"Command Reference: swivel-datatype\",\"t\":[\"Converts tabulated data into a map of values for serialised data-types such as JSON and YAML\"]},\"1258\":{\"h\":\"Description\",\"t\":[\"swivel-datatype rotates a table by 90 degrees then exports the output as a series of maps to be marshalled by a serialised datatype such as JSON or YAML.\"]},\"1259\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> swivel-datatype: data-type -> `<stdout>` \"]},\"1260\":{\"h\":\"Examples\",\"t\":[\"Lets take the first 5 entries from ps:\",\"» ps: aux -> head: -n5 -> format: csv \\\"USER\\\",\\\"PID\\\",\\\"%CPU\\\",\\\"%MEM\\\",\\\"VSZ\\\",\\\"RSS\\\",\\\"TTY\\\",\\\"STAT\\\",\\\"START\\\",\\\"TIME\\\",\\\"COMMAND\\\" \\\"root\\\",\\\"1\\\",\\\"0.0\\\",\\\"0.1\\\",\\\"233996\\\",\\\"8736\\\",\\\"?\\\",\\\"Ss\\\",\\\"Feb19\\\",\\\"0:02\\\",\\\"/sbin/init\\\" \\\"root\\\",\\\"2\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"S\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[kthreadd]\\\" \\\"root\\\",\\\"4\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"I<\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[kworker/0:0H]\\\" \\\"root\\\",\\\"6\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"I<\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[mm_percpu_wq]\\\" \",\"That data swivelled would look like the following:\",\"» ps: aux -> head: -n5 -> format: csv -> swivel-datatype: yaml '%CPU': - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" '%MEM': - \\\"0.1\\\" - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" COMMAND: - /sbin/init - '[kthreadd]' - '[kworker/0:0H]' - '[mm_percpu_wq]' PID: - \\\"1\\\" - \\\"2\\\" - \\\"4\\\" - \\\"6\\\" RSS: - \\\"8736\\\" - \\\"0\\\" - \\\"0\\\" - \\\"0\\\" START: - Feb19 - Feb19 - Feb19 - Feb19 STAT: - Ss - S - I< - I< TIME: - \\\"0:02\\\" - \\\"0:00\\\" - \\\"0:00\\\" - \\\"0:00\\\" TTY: - '?' - '?' - '?' - '?' USER: - root - root - root - root VSZ: - \\\"233996\\\" - \\\"0\\\" - \\\"0\\\" - \\\"0\\\" \",\"Please note that for input data-types whose table doesn't define titles (such as the generic datatype), the map keys are defaulted to column numbers:\",\"» ps: aux -> head: -n5 -> swivel-datatype: yaml \\\"0\\\": - USER - root - root - root - root \\\"1\\\": - PID - \\\"1\\\" - \\\"2\\\" - \\\"4\\\" - \\\"6\\\" \\\"2\\\": - '%CPU' - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" \\\"3\\\": - '%MEM' - \\\"0.1\\\" - \\\"0.0\\\" - \\\"0.0\\\" - \\\"0.0\\\" ... \"]},\"1261\":{\"h\":\"Detail\",\"t\":[\"You can check what output data-types are available via the runtime command:\",\"runtime --marshallers \",\"Marshallers are enabled at compile time from the builtins/data-types directory.\"]},\"1262\":{\"h\":\"See Also\",\"t\":[\"commands/[[ (element): Outputs an element from a nested structure\",\"commands/[ (index): Outputs an element from an array, map or table\",\"commands/alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"commands/append: Add data to the end of an array\",\"commands/cast: Alters the data type of the previous function without altering it's output\",\"commands/format: Reformat one data-type into another data-type\",\"commands/prepend: Add data to the start of an array\",\"commands/runtime: Returns runtime information on the internal state of Murex\",\"commands/swivel-table:\\nRotates a table by 90 degrees\"]},\"1263\":{\"h\":\"Murex Shell Docs\"},\"1264\":{\"h\":\"Command Reference: swivel-table\",\"t\":[\"Rotates a table by 90 degrees\"]},\"1265\":{\"h\":\"Description\",\"t\":[\"swivel-table rotates a table by 90 degrees so the x axis becomes the y.\"]},\"1266\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> swivel-table -> `<stdout>` \"]},\"1267\":{\"h\":\"Examples\",\"t\":[\"» ps: aux -> head: -n5 USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.1 233996 8736 ? Ss Feb19 0:02 /sbin/init root 2 0.0 0.0 0 0 ? S Feb19 0:00 [kthreadd] root 4 0.0 0.0 0 0 ? I< Feb19 0:00 [kworker/0:0H] root 6 0.0 0.0 0 0 ? I< Feb19 0:00 [mm_percpu_wq] \",\"That data swivelled would look like the following:\",\"» ps: aux -> head: -n5 -> swivel-table 0 USER root root root root 1 PID 1 2 4 6 2 %CPU 0.0 0.0 0.0 0.0 3 %MEM 0.1 0.0 0.0 0.0 4 VSZ 233996 0 0 0 5 RSS 8736 0 0 0 6 TTY ? ? ? ? 7 STAT Ss S I< I< 8 START Feb19 Feb19 Feb19 Feb19 9 TIME 0:02 0:00 0:00 0:00 10 COMMAND /sbin/init [kthreadd] [kworker/0:0H] [mm_percpu_wq] \",\"Please note that column one is numbered because by default Murex couldn't guess whether the first line of generic output is a title or data. However if we format that as a CSV, which by default does have a title row (configurable via config), then you would see titles as column one:\",\"» ps: aux -> head: -n5 -> format: csv \\\"USER\\\",\\\"PID\\\",\\\"%CPU\\\",\\\"%MEM\\\",\\\"VSZ\\\",\\\"RSS\\\",\\\"TTY\\\",\\\"STAT\\\",\\\"START\\\",\\\"TIME\\\",\\\"COMMAND\\\" \\\"root\\\",\\\"1\\\",\\\"0.0\\\",\\\"0.1\\\",\\\"233996\\\",\\\"8736\\\",\\\"?\\\",\\\"Ss\\\",\\\"Feb19\\\",\\\"0:02\\\",\\\"/sbin/init\\\" \\\"root\\\",\\\"2\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"S\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[kthreadd]\\\" \\\"root\\\",\\\"4\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"I<\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[kworker/0:0H]\\\" \\\"root\\\",\\\"6\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0\\\",\\\"0\\\",\\\"?\\\",\\\"I<\\\",\\\"Feb19\\\",\\\"0:00\\\",\\\"[mm_percpu_wq]\\\" » ps: aux -> head: -n5 -> format: csv -> swivel-table \\\"USER\\\",\\\"root\\\",\\\"root\\\",\\\"root\\\",\\\"root\\\" \\\"PID\\\",\\\"1\\\",\\\"2\\\",\\\"4\\\",\\\"6\\\" \\\"%CPU\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0.0\\\" \\\"%MEM\\\",\\\"0.1\\\",\\\"0.0\\\",\\\"0.0\\\",\\\"0.0\\\" \\\"VSZ\\\",\\\"233996\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\" \\\"RSS\\\",\\\"8736\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\" \\\"TTY\\\",\\\"?\\\",\\\"?\\\",\\\"?\\\",\\\"?\\\" \\\"STAT\\\",\\\"Ss\\\",\\\"S\\\",\\\"I<\\\",\\\"I<\\\" \\\"START\\\",\\\"Feb19\\\",\\\"Feb19\\\",\\\"Feb19\\\",\\\"Feb19\\\" \\\"TIME\\\",\\\"0:02\\\",\\\"0:00\\\",\\\"0:00\\\",\\\"0:00\\\" \\\"COMMAND\\\",\\\"/sbin/init\\\",\\\"[kthreadd]\\\",\\\"[kworker/0:0H]\\\",\\\"[mm_percpu_wq]\\\" \"]},\"1268\":{\"h\":\"See Also\",\"t\":[\"commands/[[ (element): Outputs an element from a nested structure\",\"commands/[ (index): Outputs an element from an array, map or table\",\"commands/alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"commands/append: Add data to the end of an array\",\"commands/cast: Alters the data type of the previous function without altering it's output\",\"commands/format: Reformat one data-type into another data-type\",\"commands/prepend: Add data to the start of an array\",\"commands/swivel-datatype:\\nConverts tabulated data into a map of values for serialised data-types such as JSON and YAML\"]},\"1269\":{\"h\":\"ta (mkarray) - Command Reference\",\"t\":[\"A sophisticated yet simple way to build an array of a user defined data-type\"]},\"1270\":{\"h\":\"Description\",\"t\":[\"Murex has a pretty sophisticated builtin for generating arrays. It works a little bit like Bash's {1..9} syntax but includes a few additional nifty features and the output format is user defined.\"]},\"1271\":{\"h\":\"Usage\",\"t\":[\"ta: data-type [start..end] -> `<stdout>` ta: data-type [start..end.base] -> `<stdout>` ta: data-type [start..end,start..end] -> `<stdout>` ta: data-type [start..end][start..end] -> `<stdout>` \"]},\"1272\":{\"h\":\"Examples\",\"t\":[\"» ta: json [1..5] [ \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\" ] » ta: json [Monday..Sunday] [ \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\", \\\"Sunday\\\" ] \",\"Please note that as per the first example, all arrays generated by ta are arrays of strings - even if you're command is ranging over integers. Also if you are only creating arrays in JSON then you could use ja instead.\"]},\"1273\":{\"h\":\"Detail\",\"t\":[\"Please read the documentation on a for a more detailed breakdown on of ta's supported features.\"]},\"1274\":{\"h\":\"See Also\",\"t\":[\"Create array (%[]) constructor: Quickly generate arrays\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac:\\nReverse the order of an array\"]},\"1275\":{\"h\":\"tabulate - Command Reference\",\"t\":[\"Table transformation tools\"]},\"1276\":{\"h\":\"Description\",\"t\":[\"tabluate is a swiss army knife for table transforming human readable tables into machine readable data structure.\",\"Please note that this builtin is still in active development and the default behavior will continue to change and evolve. Any features marked with a flag (see below) will be stable, have numerous tests written against them, and thus safe to use.\"]},\"1277\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> tabulate [ flags ] -> `<stdout>` \"]},\"1278\":{\"h\":\"Flags\",\"t\":[\"--column-wraps Boolean, used with --map or --key-value to merge trailing lines if the text wraps within the same column\",\"--help Boolean, displays a list of flags\",\"--joiner String, used with --map to concatenate any trailing records in a given field\",\"--key-inc-hint Boolean, used with --map to split any space or equal delimited hints/examples (eg parsing flags)\",\"--key-value Boolean, discard any records that don't appear key value pairs (auto-enabled when --map used)\",\"--map Boolean, return JSON map instead of table\",\"--separator 'String, custom regex pattern for spliting fields (default: (\\\\t|\\\\s[\\\\s]+)+)'\",\"--split-comma Boolean, split first field and duplicate the line if comma found in first field (eg parsing flags in help pages)\",\"--split-space Boolean, split first field and duplicate the line if white space found in first field (eg parsing flags in help pages)\"]},\"1279\":{\"h\":\"Detail\"},\"1280\":{\"h\":\"Dynamic Autocompletion\",\"t\":[\"Because tabulate is designed to parse human readable tables, it is used a lot for dynamically turning command like program help output into JSON maps for autocomplete's DynamicDesc blocks:\",\"rsync --help -> @[^Options$..--help]re -> tabulate: --map --split-comma --column-wraps --key-inc-hint \"]},\"1281\":{\"h\":\"See Also\",\"t\":[\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"autocomplete: Set definitions for tab-completion in the command line\",\"formap: Iterate through a map or other collection of data\",\"format:\\nReformat one data-type into another data-type\"]},\"1282\":{\"h\":\"test - Command Reference\",\"t\":[\"Murex's test framework - define tests, run tests and debug shell scripts\"]},\"1283\":{\"h\":\"Description\",\"t\":[\"test is used to define tests, run tests and debug Murex shell scripts.\"]},\"1284\":{\"h\":\"Usage\",\"t\":[\"Define an inlined test\",\"test: define test-name { json-properties } \",\"Define a state report\",\"test: state name { code block } \",\"Define a unit test\",\"test: unit function|private|open|event test-name { json-properties } \",\"Enable or disable boolean test states (more options available in config)\",\"test: config [ enable|!enable ] [ verbose|!verbose ] [ auto-report|!auto-report ] \",\"Disable test mode\",\"!test \",\"Execute a function with testing enabled\",\"test: run { code-block } \",\"Execute unit test(s)\",\"test: run package/module/test-name|* \",\"Write report\",\"test: report \"]},\"1285\":{\"h\":\"Examples\",\"t\":[\"Inlined test\",\"function: hello-world { test: define example { \\\"StdoutRegex\\\": (^Hello World$) } out: <test_example> \\\"Hello Earth\\\" } test: run { hello-world } \",\"Unit test\",\"test: unit function aliases { \\\"PreBlock\\\": ({ alias ALIAS_UNIT_TEST=example param1 param2 param3 }), \\\"StdoutRegex\\\": \\\"([- _0-9a-zA-Z]+ => .*?\\\\n)+\\\", \\\"StdoutType\\\": \\\"str\\\", \\\"PostBlock\\\": ({ !alias ALIAS_UNIT_TEST }) } function: aliases { # Output the aliases in human readable format runtime: --aliases -> formap: name alias { $name -> sprintf: \\\"%10s => ${esccli @alias}\\\\n\\\" } -> cast: str } test: run aliases \"]},\"1286\":{\"h\":\"Detail\"},\"1287\":{\"h\":\"Report\",\"t\":[\"test: report is only needed if config: test auto-report is set false. However test: run automatically enables auto-report.\",\"When the report is generated, be it automatically or manually triggered, it flushes the table of pending reports.\"]},\"1288\":{\"h\":\"Synonyms\",\"t\":[\"test\",\"!test\"]},\"1289\":{\"h\":\"See Also\",\"t\":[\"<> / read-named-pipe: Reads from a Murex named pipe\",\"config:\\nQuery or define Murex runtime settings\"]},\"1290\":{\"h\":\"time  - Command Reference\",\"t\":[\"Returns the execution run time of a command or block\"]},\"1291\":{\"h\":\"Description\",\"t\":[\"time is an optional builtin which runs a command or block of code and returns it's running time.\"]},\"1292\":{\"h\":\"Usage\",\"t\":[\"time: command parameters -> <stderr> time: { code-block } -> <stderr> \"]},\"1293\":{\"h\":\"Examples\",\"t\":[\"» time: sleep 5 5.000151513 » time { out \\\"Going to sleep\\\"; sleep 5; out \\\"Waking up\\\" } Going to sleep Waking up 5.000240977 \"]},\"1294\":{\"h\":\"Detail\",\"t\":[\"time's output is written to STDERR. However any output and errors written by the commands executed by time will also be written to time's STDOUT and STDERR as usual.\"]},\"1295\":{\"h\":\"See Also\",\"t\":[\"exec: Runs an executable\",\"sleep: Suspends the shell for a number of seconds\",\"source:\\nImport Murex code from another file of code block\"]},\"1296\":{\"h\":\"tmp - Command Reference\",\"t\":[\"Create a temporary file and write to it\"]},\"1297\":{\"h\":\"Description\",\"t\":[\"tmp creates a temporary file, writes the contents of STDIN to it then returns its filename to STDOUT.\",\"You can optionally specify a file extension, for example if the temporary file needs to be read by open or an editor which uses extensions to define syntax highlighting.\"]},\"1298\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> tmp [ file-extension ] -> `<stdout>` \"]},\"1299\":{\"h\":\"Examples\",\"t\":[\"» out: \\\"Hello, world!\\\" -> set: tmp » out: $tmp /var/folders/3t/267q_b0j27d29bnf6pf7m7vm0000gn/T/murex838290600/8ec6936c1ac1c347bf85675eab4a0877-13893 » open: $tmp Hello, world! \"]},\"1300\":{\"h\":\"Detail\",\"t\":[\"The temporary file name is a base64 encoded md5 hash of the time plus Murex function ID with Murex process ID appended:\",\"package io import ( \\\"crypto/md5\\\" \\\"encoding/hex\\\" \\\"io\\\" \\\"os\\\" \\\"strconv\\\" \\\"time\\\" \\\"github.com/lmorg/murex/lang\\\" \\\"github.com/lmorg/murex/lang/types\\\" \\\"github.com/lmorg/murex/utils/consts\\\" ) func init() { lang.DefineMethod(\\\"tmp\\\", cmdTempFile, types.Any, types.String) } func cmdTempFile(p *lang.Process) error { p.Stdout.SetDataType(types.String) ext, _ := p.Parameters.String(0) if ext != \\\"\\\" { ext = \\\".\\\" + ext } fileId := time.Now().String() + \\\":\\\" + strconv.Itoa(int(p.Id)) h := md5.New() _, err := h.Write([]byte(fileId)) if err != nil { return err } name := consts.TempDir + hex.EncodeToString(h.Sum(nil)) + \\\"-\\\" + strconv.Itoa(os.Getpid()) + ext file, err := os.Create(name) if err != nil { return err } defer file.Close() _, err = io.Copy(file, p.Stdin) if err != nil { return err } _, err = p.Stdout.Write([]byte(name)) return err } \",\"This should should provide enough distance to run tmp in parallel....should you ever want to.\",\"tmp files are also located inside a unique per-process Murex temp directory which itself is located in the appropriate temp directory for the host OS (eg $TMPDIR on macOS).\"]},\"1301\":{\"h\":\"See Also\",\"t\":[\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"open: Open a file with a preferred handler\",\"pipe:\\nManage Murex named pipes\"]},\"1302\":{\"h\":\"tout - Command Reference\",\"t\":[\"Print a string to the STDOUT and set it's data-type\"]},\"1303\":{\"h\":\"Description\",\"t\":[\"Write parameters to STDOUT without a trailing new line character. Cast the output's data-type to the value of the first parameter.\"]},\"1304\":{\"h\":\"Usage\",\"t\":[\"tout: data-type \\\"string to write\\\" -> `<stdout>` \"]},\"1305\":{\"h\":\"Examples\",\"t\":[\"» tout: json { \\\"Code\\\": 404, \\\"Message\\\": \\\"Page not found\\\" } -> pretty { \\\"Code\\\": 404, \\\"Message\\\": \\\"Page not found\\\" } \"]},\"1306\":{\"h\":\"Detail\",\"t\":[\"tout supports ANSI constants.\",\"Unlike out, tout does not append a carriage return / line feed.\"]},\"1307\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"( (brace quote): Write a string to the STDOUT without new line\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"format: Reformat one data-type into another data-type\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pretty:\\nPrettifies JSON to make it human readable\"]},\"1308\":{\"h\":\"tread - Command Reference\",\"t\":[\"read a line of input from the user and store as a user defined typed variable (deprecated)\"]},\"1309\":{\"h\":\"Description\",\"t\":[\"A readline function to allow a line of data inputted from the terminal and then store that as a typed variable.\",\"This builtin is now deprecated. Please use read --datatype ... instead\"]},\"1310\":{\"h\":\"Usage\",\"t\":[\"tread: data-type \\\"prompt\\\" var_name `<stdin>` -> tread: data-type var_name \"]},\"1311\":{\"h\":\"Examples\",\"t\":[\"tread: qs \\\"Please paste a URL: \\\" url out: \\\"The query string values included were:\\\" $url -> format json out: Please paste a URL: -> tread: qs url out: \\\"The query string values included were:\\\" $url -> format json \"]},\"1312\":{\"h\":\"Detail\",\"t\":[\"If tread is called as a method then the prompt string is taken from STDIN. Otherwise the prompt string will be the first parameter. However if no prompt string is given then tread will not write a prompt.\",\"The last parameter will be the variable name to store the string read by tread. This variable cannot be prefixed by dollar, $, otherwise the shell will write the output of that variable as the last parameter rather than the name of the variable.\"]},\"1313\":{\"h\":\"See Also\",\"t\":[\"( (brace quote): Write a string to the STDOUT without new line\",\"cast: Alters the data type of the previous function without altering it's output\",\"err: Print a line to the STDERR\",\"format: Reformat one data-type into another data-type\",\"out: Print a string to the STDOUT with a trailing new line character\",\"pretty: Prettifies JSON to make it human readable\",\"read: read a line of input from the user and store as a variable\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"1314\":{\"h\":\"true - Command Reference\",\"t\":[\"Returns a true value\"]},\"1315\":{\"h\":\"Description\",\"t\":[\"Returns a true value.\"]},\"1316\":{\"h\":\"Usage\",\"t\":[\"true -> `<stdout>` \"]},\"1317\":{\"h\":\"Examples\",\"t\":[\"By default, true also outputs the term \\\"true\\\":\",\"» true true \",\"However you can suppress that with the silent flag:\",\"» true -s \"]},\"1318\":{\"h\":\"Flags\",\"t\":[\"-s silent - don't output the term \\\"true\\\"\"]},\"1319\":{\"h\":\"See Also\",\"t\":[\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"false: Returns a false value\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"or:\\nReturns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\"]},\"1320\":{\"h\":\"try - Command Reference\",\"t\":[\"Handles errors inside a block of code\"]},\"1321\":{\"h\":\"Description\",\"t\":[\"try forces a different execution behavior where a failed process at the end of a pipeline will cause the block to terminate regardless of any functions that might follow.\",\"It's usage is similar to try blocks in other languages (eg Java) but a closer functional example would be set -e in Bash.\",\"To maintain concurrency within the pipeline, try will only check the last function in any given pipeline (ie series of functions joined via |, ->, or similar operators). If you need the entire pipeline checked then use trypipe.\"]},\"1322\":{\"h\":\"Usage\",\"t\":[\"try { code-block } -> `<stdout>` `<stdin>` -> try { -> code-block } -> `<stdout>` \"]},\"1323\":{\"h\":\"Examples\",\"t\":[\"try { out: \\\"Hello, World!\\\" -> grep: \\\"non-existent string\\\" out: \\\"This command will be ignored\\\" } \"]},\"1324\":{\"h\":\"Detail\",\"t\":[\"A failure is determined by:\",\"Any process that returns a non-zero exit number\",\"Any process that returns more output via STDERR than it does via STDOUT\",\"You can see which run mode your functions are executing under via the fid-list command.\"]},\"1325\":{\"h\":\"See Also\",\"t\":[\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"catch: Handles the exception code raised by try or trypipe\",\"fid-list: Lists all running functions within the current Murex session\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"switch: Blocks of cascading conditionals\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1326\":{\"h\":\"trypipe - Command Reference\",\"t\":[\"Checks state of each function in a pipeline and exits block on error\"]},\"1327\":{\"h\":\"Description\",\"t\":[\"trypipe checks the state of each function and exits the block if any of them fail. Where trypipe differs from regular try blocks is trypipe will check every process along the pipeline as well as the terminating function (which try only validates against). The downside to this is that piped functions can no longer run in parallel.\"]},\"1328\":{\"h\":\"Usage\",\"t\":[\"trypipe { code-block } -> `<stdout>` `<stdin>` -> trypipe { -> code-block } -> `<stdout>` \"]},\"1329\":{\"h\":\"Examples\",\"t\":[\"trypipe { out: \\\"Hello, World!\\\" -> grep: \\\"non-existent string\\\" -> cat out: \\\"This command will be ignored\\\" } \",\"Formated pager (less) where the pager isn't called if the formatter (pretty) fails (eg input isn't valid JSON):\",\"func pless { -> trypipe { -> pretty -> less } } \"]},\"1330\":{\"h\":\"Detail\",\"t\":[\"A failure is determined by:\",\"Any process that returns a non-zero exit number\",\"Any process that returns more output via STDERR than it does via STDOUT\",\"You can see which run mode your functions are executing under via the fid-list command.\"]},\"1331\":{\"h\":\"See Also\",\"t\":[\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"catch: Handles the exception code raised by try or trypipe\",\"fid-list: Lists all running functions within the current Murex session\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"switch: Blocks of cascading conditionals\",\"try:\\nHandles errors inside a block of code\"]},\"1332\":{\"h\":\"version - Command Reference\",\"t\":[\"Get Murex version\"]},\"1333\":{\"h\":\"Description\",\"t\":[\"Returns Murex version number\"]},\"1334\":{\"h\":\"Usage\",\"t\":[\"version [ flags ] -> `<stdout>` \"]},\"1335\":{\"h\":\"Examples\",\"t\":[\"Ran without any parameters\",\"» version murex: 0.51.1200 BETA \",\"Ran with the --no-app-name parameter\",\"» version --no-app-name 0.51.1200 BETA \",\"Ran with the --short parameter\",\"» version --short 0.51 \"]},\"1336\":{\"h\":\"Flags\",\"t\":[\"--no-app-name Returns full version string minus app name\",\"--short Returns only the major and minor version as a num data-type\"]},\"1337\":{\"h\":\"See Also\",\"t\":[\"args: Command line flag parser for Murex shell scripting\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"function: Define a function block\",\"murex-parser: Runs the Murex parser against a block of code\",\"private: Define a private function block\",\"runtime: Returns runtime information on the internal state of Murex\",\"source:\\nImport Murex code from another file of code block\"]},\"1338\":{\"h\":\"while - Command Reference\",\"t\":[\"Loop until condition false\"]},\"1339\":{\"h\":\"Description\",\"t\":[\"while loops until loops until condition is false.\",\"Normally the conditional and executed code block are 2 separate parameters however you can call while with just 1 parameter where the code block acts as both the conditional and the code to be ran.\"]},\"1340\":{\"h\":\"Usage\",\"t\":[\"Until true\",\"while { condition } { code-block } -> `<stdout>` while { code-block } -> `<stdout>` \",\"Until false\",\"!while { condition } { code-block } -> `<stdout>` \",\"`` !while { code-block } -> <std\"]},\"1341\":{\"h\":\"Examples\",\"t\":[\"while$i is less then 5\",\"» let i=0; while { =i<5 } { let i=i+1; out $i } 1 2 3 4 5 » let i=0; while { let i=i+1; = i<5; out } true true true true false \",\"while$i is NOT greater than or equal to 5\",\"» let i=0; !while { =i>=5 } { let i=i+1; out $i } 1 2 3 4 5 » let i=0; while { let i=i+1; = i>=5; out } true true true true false \"]},\"1342\":{\"h\":\"Detail\"},\"1343\":{\"h\":\"Meta values\",\"t\":[\"Meta values are a JSON object stored as the variable $.. The meta variable will get overwritten by any other block which invokes meta values. So if you wish to persist meta values across blocks you will need to reassign $., eg\",\"%[1..3] -> foreach { meta_parent = $. %[7..9] -> foreach { out \\\"$(meta_parent.i): $.i\\\" } } \",\"The following meta values are defined:\",\"i: iteration number\"]},\"1344\":{\"h\":\"Synonyms\",\"t\":[\"while\",\"!while\"]},\"1345\":{\"h\":\"See Also\",\"t\":[\"err: Print a line to the STDERR\",\"for: A more familiar iteration loop to existing developers\",\"foreach: Iterate through an array\",\"formap: Iterate through a map or other collection of data\",\"global: Define a global variable and set it's value\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1346\":{\"h\":\"onCommandCompletion - events\",\"t\":[\"Trigger an event upon a command's completion\"]},\"1347\":{\"h\":\"Description\",\"t\":[\"onCommandCompletion events are triggered after a command has finished executing in the interactive terminal.\",\"Background processes or commands ran from inside aliases, functions, nested blocks or from shell scripts cannot trigger this event. This is to protect against accidental race conditions, infinite loops and breaking expected behaviour / the portability of Murex scripts. On those processes directly ran from the prompt can trigger this event.\"]},\"1348\":{\"h\":\"Usage\",\"t\":[\"event: onCommandCompletion name=command { code block } !event: onCommandCompletion name \"]},\"1349\":{\"h\":\"Valid Interrupts\",\"t\":[\"<command> Name of command that triggers this event\"]},\"1350\":{\"h\":\"Examples\",\"t\":[\"Read STDERR:\",\"In this example we check the output from pacman, which is ArchLinux's package management tool, to see if you have accidentally ran it as a non-root user. If the STDERR contains a message saying you are no root, then this event function will re-run pacman with sudo.\",\"event: onCommandCompletion sudo-pacman=pacman { `<stdin>` -> set event read-named-pipe: $event.Interrupt.Stderr \\\\ -> regexp 'm/error: you cannot perform this operation unless you are root/' \\\\ -> if { sudo pacman @event.Interrupt.Parameters } } \"]},\"1351\":{\"h\":\"Detail\"},\"1352\":{\"h\":\"Payload\",\"t\":[\"The following payload is passed to the function via STDIN:\",\"{ \\\"Name\\\": \\\"\\\", \\\"Interrupt\\\": { \\\"Command\\\": \\\"\\\", \\\"Parameters\\\": [], \\\"Stdout\\\": \\\"\\\", \\\"Stderr\\\": \\\"\\\", \\\"ExitNum\\\": 0 } } \"]},\"1353\":{\"h\":\"Name\",\"t\":[\"This is the name you specified when defining the event.\"]},\"1354\":{\"h\":\"Command\",\"t\":[\"Name of command executed prior to this event being triggered\"]},\"1355\":{\"h\":\"Operation\",\"t\":[\"The commandline parameters of the aforementioned command\"]},\"1356\":{\"h\":\"Stdout\",\"t\":[\"This is the name of the Murex named pipe which contains a copy of the STDOUT from the command which executed prior to this event.\",\"You can read this with read-named-pipe. eg\",\"» `<stdin>` -> set: event » read-named-pipe: $event.Interrupt.Stdout -> ... \"]},\"1357\":{\"h\":\"Stderr\",\"t\":[\"This is the name of the Murex named pipe which contains a copy of the STDERR from the command which executed prior to this event.\",\"You can read this with read-named-pipe. eg\",\"» `<stdin>` -> set: event » read-named-pipe: $event.Interrupt.Stderr -> ... \"]},\"1358\":{\"h\":\"ExitNum\",\"t\":[\"This is the exit number returned from the executed command.\"]},\"1359\":{\"h\":\"Stdout\",\"t\":[\"Stdout is written to the terminal. So this can be used to provide multiple additional lines to the prompt since readline only supports one line for the prompt itself and three extra lines for the hint text.\"]},\"1360\":{\"h\":\"See Also\",\"t\":[\"Murex Named Pipes: A detailed breakdown of named pipes in Murex\",\"<stdin>: Read the STDIN belonging to the parent code block\",\"alias: Create an alias for a command\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"function: Define a function block\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"onPrompt: Events triggered by changes in state of the interactive shell\",\"regexp: Regexp tools for arrays / lists of strings\",\"read-named-pipe:\\nReads from a Murex named pipe\"]},\"1361\":{\"h\":\"onFileSystemChange - events\",\"t\":[\"Add a filesystem watch\"]},\"1362\":{\"h\":\"Description\",\"t\":[\"onFileSystemChange events are triggered whenever there is a change to a watched path or file.\"]},\"1363\":{\"h\":\"Payload\",\"t\":[\"The following payload is passed to the function via STDIN:\",\"{ \\\"Name\\\": \\\"\\\", \\\"Interrupt\\\": { \\\"Path\\\": \\\"\\\", \\\"Operation\\\": \\\"\\\" } } \"]},\"1364\":{\"h\":\"Name\",\"t\":[\"This is the name you specified when defining the event\"]},\"1365\":{\"h\":\"Path\",\"t\":[\"The path of the file that has triggered the event\"]},\"1366\":{\"h\":\"Operation\",\"t\":[\"This is the filesystem operation that triggered the event. The following strings could be present in the Operation field:\",\"create: filesystem object created\",\"remove: filesystem object deleted\",\"write: filesystem object has been written to\",\"rename: filesystem object has been renamed\",\"chmod: filesystem object has had its POSIX permissions updated\",\"Sometimes you might see more than one operation per interrupt. If that happens the operation will be pipe delimited. For example `create|chmod\"]},\"1367\":{\"h\":\"Usage\",\"t\":[\"event: onFileSystemChange name=path { code block } !event: onFileSystemChange name \"]},\"1368\":{\"h\":\"Valid Interrupts\",\"t\":[\"<path> Path of directory or file to watch for filesystem events\"]},\"1369\":{\"h\":\"Examples\",\"t\":[\"This will automatically add any new files in your current working directory to git upon file creation:\",\"event: onFileSystemChange example=. { -> set event if { $event.Interrupt.Operation =~ \\\"create\\\" } then { git add $event.Interrupt.Path } } \"]},\"1370\":{\"h\":\"Detail\"},\"1371\":{\"h\":\"Stdout\",\"t\":[\"Stdout is written to the terminal.\"]},\"1372\":{\"h\":\"POSIX only\",\"t\":[\"At this stage, this event isn't available for Windows nor Plan 9. This is chiefly down to a lack of testers on either platform so rather than release untested and potentially broken code, the decision was made to restrict this event to Linux, macOS and UNIX systems instead.\"]},\"1373\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"event:\\nEvent driven programming for shell scripts\"]},\"1374\":{\"h\":\"onPrompt - events\",\"t\":[\"Events triggered by changes in state of the interactive shell\"]},\"1375\":{\"h\":\"Description\",\"t\":[\"onPrompt events are triggered by changes in state of the interactive shell (often referred to as readline). Those states are defined in the interrupts section below.\"]},\"1376\":{\"h\":\"Usage\",\"t\":[\"event: onPrompt name=[before|after|abort|eof] { code block } !event: onPrompt [before_|after_|abort_|eof_]name \"]},\"1377\":{\"h\":\"Valid Interrupts\",\"t\":[\"abort Triggered if ctrl+c pressed while in the interactive prompt\",\"after Triggered after user has written a command into the interactive prompt and then hit `enter\",\"before Triggered before readline displays the interactive prompt\",\"eof Triggered if ctrl+d pressed while in the interactive prompt\"]},\"1378\":{\"h\":\"Examples\",\"t\":[\"Interrupt 'before':\",\"event: onPrompt example=before { out: \\\"This will appear before your command prompt\\\" } \",\"Interrupt 'after':\",\"event: onPrompt example=after { out: \\\"This will appear after you've hit [enter] on your command prompt\\\" out: \\\"...but before the command executes\\\" } \",\"Echo the command line:\",\"» event: onPrompt echo=after { -> set event; out $event.Interrupt.CmdLine } » echo hello world echo hello world hello world \"]},\"1379\":{\"h\":\"Detail\"},\"1380\":{\"h\":\"Payload\",\"t\":[\"The following payload is passed to the function via STDIN:\",\"{ \\\"Name\\\": \\\"\\\", \\\"Interrupt\\\": { \\\"Name\\\": \\\"\\\", \\\"Operation\\\": \\\"\\\", \\\"CmdLine\\\": \\\"\\\" } } \"]},\"1381\":{\"h\":\"Name\",\"t\":[\"This is the namespaced name -- ie the name and operation.\"]},\"1382\":{\"h\":\"Interrupt/Name\",\"t\":[\"This is the name you specified when defining the event.\"]},\"1383\":{\"h\":\"Operation\",\"t\":[\"This is the interrupt you specified when defining the event.\",\"Valid interrupt operation values are specified below.\"]},\"1384\":{\"h\":\"CmdLine\",\"t\":[\"This is the commandline you typed in the prompt.\",\"Please note this is only populated if the interrupt is after.\"]},\"1385\":{\"h\":\"Stdout\",\"t\":[\"Stdout is written to the terminal. So this can be used to provide multiple additional lines to the prompt since readline only supports one line for the prompt itself and three extra lines for the hint text.\"]},\"1386\":{\"h\":\"Order of execution\",\"t\":[\"Interrupts are run in alphabetical order. So an event named \\\"alfa\\\" would run before an event named \\\"zulu\\\". If you are writing multiple events and the order of execution matters, then you can prefix the names with a number, eg 10_jump\"]},\"1387\":{\"h\":\"Namespacing\",\"t\":[\"The onPrompt event differs a little from other events when it comes to the namespacing of interrupts. Typically you cannot have multiple interrupts with the same name for an event. However with onPrompt their names are further namespaced by the interrupt name. In layman's terms this means example=before wouldn't overwrite example=after.\",\"The reason for this namespacing is because, unlike other events, you might legitimately want the same name for different interrupts (eg a smart prompt that has elements triggered from different interrupts).\"]},\"1388\":{\"h\":\"See Also\",\"t\":[\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"onCommandCompletion: Trigger an event upon a command's completion\",\"onkeypress:\"]},\"1389\":{\"h\":\"onSecondsElapsed - events\",\"t\":[\"Events triggered by time intervals\"]},\"1390\":{\"h\":\"Description\",\"t\":[\"onSecondsElapsed events are triggered every n seconds.\"]},\"1391\":{\"h\":\"Usage\",\"t\":[\"event: onSecondsElapsed name=seconds { code block } !event: onSecondsElapsed name \"]},\"1392\":{\"h\":\"Valid Interrupts\",\"t\":[\"<seconds> Duration in seconds. eg 60 would be 60 seconds / 1 minute\"]},\"1393\":{\"h\":\"Examples\",\"t\":[\"event: onSecondsElapsed example=60 { out: \\\"60 seconds has passed\\\" } \"]},\"1394\":{\"h\":\"Detail\"},\"1395\":{\"h\":\"Payload\",\"t\":[\"The following payload is passed to the function via STDIN:\",\"{ \\\"Name\\\": \\\"\\\", \\\"Interrupt\\\": 0 } \"]},\"1396\":{\"h\":\"Name\",\"t\":[\"This is the name you specified when defining the event.\"]},\"1397\":{\"h\":\"Interrupt\",\"t\":[\"This is the duration you defined the event to wait for.\"]},\"1398\":{\"h\":\"See Also\",\"t\":[\"config: Query or define Murex runtime settings\",\"event:\\nEvent driven programming for shell scripts\"]},\"1399\":{\"h\":\"Language Guide: Arrays And Maps\"},\"1400\":{\"h\":\"Working with structured data\",\"t\":[\"Firstly this shell doesn't have support for arrays as a native data type however since Murex is aware of the structure of various data formats it is possible to use these formats to maintain complex structured data natively within Murex. For example a days.json file might look like\",\"[ \\\"monday\\\", \\\"tuesday\\\", \\\"wednesday\\\", \\\"thursday\\\", \\\"friday\\\", \\\"saturday\\\", \\\"sunday\\\" ] \",\"...which can be queried directly within Murex via a variety of builtins.\",\"To iterate through the array and print each element and print the value:\",\"» open: days.json -> foreach: day { $day } monday tuesday wednesday thursday friday saturday sunday \",\"To iterate through the map or array and print each index and its value:\",\"» open: days.json -> formap: key value { echo: \\\"$key: $value\\\" } 0: \\\"monday\\\" 1: \\\"tuesday\\\" 2: \\\"wednesday\\\" 3: \\\"thursday\\\" 4: \\\"friday\\\" 5: \\\"saturday\\\" 6: \\\"sunday\\\" \",\"To return a specific element within an array or map you can query it directly by its key using the index builtin:\",\"» open: days.json -> [ 0 ] monday \",\"Or multiple elements in the data set:\",\"» open: days.json -> [ 0 2 5 6 ] [\\\"monday\\\",\\\"wednesday\\\",\\\"saturday\\\",\\\"sunday\\\"] \",\"The index builtin returned the values in JSON format because the input format was JSON. If the input format was a CSV then it would return the selected columns of that CSV. Or if it's just a new line separated list of strings then it would return a the rows in the list.\"]},\"1401\":{\"h\":\"The array builtin\",\"t\":[\"Murex has a pretty sophisticated builtin for generating arrays. Think like bash's {1..9} syntax:\",\"a: [1..9] \",\"You can also specify an alternative number base by using an x or . in the end range:\",\"a: [00..ffx16] a: [00..ff.16] \",\"All number bases from 2 (binary) to 36 (0-9 plus a-z) are supported. Please note that the start and end range are written in the target base while the base identifier is written in decimal: [hex..hex.dec]\",\"Also note that the additional zeros denotes padding (ie the results will start at 00, 01, etc rather than 0, 1...\"]},\"1402\":{\"h\":\"Character arrays\",\"t\":[\"You can select a range of letters (a to z):\",\"a: [a..z] a: [z..a] a: [A..Z] a: [Z..A] \",\"...or any characters within that range.\"]},\"1403\":{\"h\":\"Special ranges\",\"t\":[\"Unlike bash, Murex also supports some special ranges:\",\"a: [mon..sun] a: [monday..sunday] a: [jan..dec] a: [janurary..december] a: [spring..winter] \",\"It is also case aware. If the ranges are uppercase then the return will be uppercase. If the ranges are title case (capital first letter) then the return will be in title case:\",\"» a: [Monday..Sunday] Monday Tuesday Wednesday Thursday Friday Saturday Sunday \",\"Where the special ranges differ from a regular range is they cannot cannot down. eg a: [3..1] would output\",\"3 2 1 \",\"however a negative range in special ranges will cycle through to the end of the range and then loop back from the start:\",\"» a: [Thursday..Wednesday] Thursday Friday Saturday Sunday Monday Tuesday Wednesday \",\"This decision was made because generally with ranges of this type, you would more often prefer to cycle through values rather than iterate backwards through the list.\",\"If you did want to reverse then just pipe the output into another UNIX tool:\",\"» a: [Monday..Friday] -> tac # Linux » a: [Monday..Friday] -> tail -r # BSD / OS X » a: [Monday..Friday] -> perl -e \\\"print reverse <>\\\" # Multiplaform Friday Thurday Wednesday Tuesday Monday \",\"(I may build a reverse builtin to standardise this and make Murex more accessible to Windows users)\"]},\"1404\":{\"h\":\"Advanced array syntax\",\"t\":[\"The syntax for array is a comma separated list of parameters with expansions stored in square brackets. You can have an expansion embedded inside a parameter or as it's own parameter. Expansions can also have multiple parameters.\",\"» a: 01,02,03,05,06,07 01 02 03 05 06 07 » a: 0[1..3],0[5..7] 01 02 03 05 06 07 » a: 0[1..3,5..7] 01 02 03 05 06 07 » a: b[o,i]b bob bib \",\"You can also have multiple expansion blocks in a single parameter:\",\"» a: a[1..3]b[5..7] a1b5 a1b6 a1b7 a2b5 a2b6 a2b7 a3b5 a3b6 a3b7 \",\"array will cycle through each iteration of the last expansion, moving itself backwards through the string; behaving like an normal counter:\",\"» ja: [0..2][0..9] -> format: str \\\",\\\" 00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29 \",\"(format used here for readability)\"]},\"1405\":{\"h\":\"Creating JSON arrays with ja\",\"t\":[\"As you can see from the previous examples, a returns the array as a list of strings. This is so you can stream excessively long arrays, for example every IPv4 address: a: [0..254].[0..254].[0..254].[0..254] (this kind of array expansion would hang bash).\",\"However if you needed a JSON string then you can use all the same syntax as a but forgo the streaming capability:\",\"» ja: [Monday..Sunday]\\n\\n[\\n        \\\"Monday\\\",\\n        \\\"Tuesday\\\",\\n        \\\"Wednesday\\\",\\n        \\\"Thursday\\\",\\n        \\\"Friday\\\",\\n        \\\"Saturday\\\",\\n        \\\"Sunday\\\"\\n]\\n\"]},\"1406\":{\"h\":\"Character arrays - mkarray\",\"t\":[\"Making character arrays (a to z)\"]},\"1407\":{\"h\":\"Description\",\"t\":[\"You can create arrays from a range of letters (a to z):\",\"» a: [a..z] » a: [z..a] » a: [A..Z] » a: [Z..A] \",\"...or any characters within that range.\",\"Please refer to a (mkarray) for more detailed usage of mkarray.\"]},\"1408\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"1409\":{\"h\":\"Examples\",\"t\":[\"» a: [a..c] a b c » a: [c..a] c b a \"]},\"1410\":{\"h\":\"See Also\",\"t\":[\"Decimal Ranges: Create arrays of decimal integers\",\"Non-Decimal Ranges: Create arrays of integers from non-decimal number bases\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1411\":{\"h\":\"Calendar Date Ranges - mkarray\",\"t\":[\"Create arrays of dates\"]},\"1412\":{\"h\":\"Description\",\"t\":[\"Unlike bash, Murex also supports date ranges:\",\"» a: [25-dec-2020..05-jan-2021] » a: [..25-dec-2020] » a: [25-dec-2020..] \",\"Please refer to a (mkarray) for more detailed usage of mkarray.\"]},\"1413\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"1414\":{\"h\":\"Examples\",\"t\":[\"» a: [25-Dec-2020..01-Jan-2021] 25-Dec-2020 26-Dec-2020 27-Dec-2020 28-Dec-2020 29-Dec-2020 30-Dec-2020 31-Dec-2020 01-Jan-2021 » a: [31-Dec..25-Dec] 31-Dec 30-Dec 29-Dec 28-Dec 27-Dec 26-Dec 25-Dec \"]},\"1415\":{\"h\":\"Detail\"},\"1416\":{\"h\":\"Current Date\",\"t\":[\"If the start value is missing (eg [..01-Jan-2020]) then mkarray (a et al) will start the range from the current date and count up or down to the end.\",\"If the end value is missing (eg [01-Jan-2020..]) then mkarray will start at the start value, as usual, and count up or down to the current date.\",\"For example, if today was 25th December 2020:\",\"» a: [23-December-2020..] 23-December-2020 24-December-2020 25-December-2020 » a: [..23-December-2020] 25-December-2020 24-December-2020 23-December-2020 \",\"This can lead so some fun like countdowns:\",\"» out: \\\"${a: [..01-January-2021] -> len -> =-1} days until the new year!\\\" 7 days until the new year! \"]},\"1417\":{\"h\":\"Case Sensitivity\",\"t\":[\"Date ranges are case aware. If the ranges are uppercase then the return will be uppercase. If the ranges are title case (capital first letter) then the return will be in title case.\"]},\"1418\":{\"h\":\"lower case\",\"t\":[\"» a: [01-jan..03-jan] 01-jan 02-jan 03-jan \"]},\"1419\":{\"h\":\"Title Case\",\"t\":[\"» a: [01-Jan..03-Jan] 01-Jan 02-Jan 03-Jan \"]},\"1420\":{\"h\":\"UPPER CASE\",\"t\":[\"» a: [01-JAN..03-JAN] 01-JAN 02-JAN 03-JAN \"]},\"1421\":{\"h\":\"Supported Date Formatting\",\"t\":[\"Below is the source for the supported formatting options for date ranges:\",\"package mkarray var dateFormat = []string{ // dd mm yy \\\"02-Jan-06\\\", \\\"02-January-06\\\", \\\"02-Jan-2006\\\", \\\"02-January-2006\\\", \\\"02 Jan 06\\\", \\\"02 January 06\\\", \\\"02 Jan 2006\\\", \\\"02 January 2006\\\", \\\"02/Jan/06\\\", \\\"02/January/06\\\", \\\"02/Jan/2006\\\", \\\"02/January/2006\\\", // mm dd yy \\\"Jan-02-06\\\", \\\"January-02-06\\\", \\\"Jan-02-2006\\\", \\\"January-02-2006\\\", \\\"Jan 02 06\\\", \\\"January 02 06\\\", \\\"Jan 02 2006\\\", \\\"January 02 2006\\\", \\\"Jan/02/06\\\", \\\"January/02/06\\\", \\\"Jan/02/2006\\\", \\\"January/02/2006\\\", // dd mm \\\"02-Jan\\\", \\\"02-January\\\", \\\"02 Jan\\\", \\\"02 January\\\", \\\"02/Jan\\\", \\\"02/January\\\", } \",\"If you do need any other formatting options not supported there, you can use datetime to convert the output of a. eg:\",\"» a: [01-Jan-2020..03-Jan-2020] -> foreach { -> datetime --in \\\"{go}02-Jan-2006\\\" --out \\\"{py}%A, %d %B\\\"; echo } Wednesday, 01 January Thursday, 02 January Friday, 03 January \"]},\"1422\":{\"h\":\"See Also\",\"t\":[\"Special Ranges: Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"datetime: A date and/or time conversion tool (like printf but for date and time values)\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac: Reverse the order of an array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1423\":{\"h\":\"Decimal Ranges - mkarray\",\"t\":[\"Create arrays of decimal integers\"]},\"1424\":{\"h\":\"Description\",\"t\":[\"This document describes how to create arrays of decimals using mkarray (a et al).\",\"Please refer to a (mkarray) for more detailed usage of mkarray.\"]},\"1425\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"1426\":{\"h\":\"Examples\",\"t\":[\"» a: [1..3] 1 2 3 » a: [3..1] 3 2 1 » a: [01..03] 01 02 03 \"]},\"1427\":{\"h\":\"Detail\"},\"1428\":{\"h\":\"Floating Point Numbers\",\"t\":[\"If you do need a range of fixed floating point numbers generated then you can do so by merging two decimal integer ranges together. For example\",\"» a [0..5].[0..9] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 ... 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 \"]},\"1429\":{\"h\":\"Everything Is A String\",\"t\":[\"Please note that all arrays are created as strings. Even when using typed arrays such as JSON (ja).\",\"» ja [0..5] [ \\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\" ] \"]},\"1430\":{\"h\":\"See Also\",\"t\":[\"Character arrays: Making character arrays (a to z)\",\"Non-Decimal Ranges: Create arrays of integers from non-decimal number bases\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1431\":{\"h\":\"Non-Decimal Ranges - mkarray\",\"t\":[\"Create arrays of integers from non-decimal number bases\"]},\"1432\":{\"h\":\"Description\",\"t\":[\"When making arrays you can specify ranges of an alternative number base by using an x or . in the end range:\",\"a: [00..ffx16] a: [00..ff.16] \",\"All number bases from 2 (binary) to 36 (0-9 plus a-z) are supported. Please note that the start and end range are written in the target base while the base identifier is written in decimal: [hex..hex.dec]\",\"Also note that the additional zeros denotes padding (ie the results will start at 00, 01, etc rather than 0, 1...)\",\"Please refer to a (mkarray) for more detailed usage of mkarray.\"]},\"1433\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"1434\":{\"h\":\"Examples\",\"t\":[\"» a: [08..10x16] 08 09 0a 0b 0c 0d 0e 0f 10 » a: [10..08x16] 10 f e d c b a 9 8 \"]},\"1435\":{\"h\":\"Detail\"},\"1436\":{\"h\":\"Floating Point Numbers\",\"t\":[\"If you do need a range of fixed floating point numbers generated then you can do so by merging two decimal integer ranges together. For example\",\"» a: [05..10x8].[0..7] 05.0 05.1 05.2 05.3 05.4 05.5 05.6 05.7 06.0 06.1 06.2 ... 07.5 07.6 07.7 10.0 10.1 10.2 10.3 10.4 10.5 10.6 10.7 \"]},\"1437\":{\"h\":\"Everything Is A String\",\"t\":[\"Please note that all arrays are created as strings. Even when using typed arrays such as JSON (ja).\",\"» ja [0..5] [ \\\"0\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\" ] \"]},\"1438\":{\"h\":\"See Also\",\"t\":[\"Character arrays: Making character arrays (a to z)\",\"Decimal Ranges: Create arrays of decimal integers\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1439\":{\"h\":\"Special Ranges - mkarray\",\"t\":[\"Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\"]},\"1440\":{\"h\":\"Description\",\"t\":[\"Unlike bash, Murex also supports some special ranges:\",\"» a: [mon..sun] » a: [monday..sunday] » a: [jan..dec] » a: [january..december] » a: [spring..winter] \",\"Please refer to a (mkarray) for more detailed usage of mkarray.\"]},\"1441\":{\"h\":\"Usage\",\"t\":[\"a: [start..end] -> `<stdout>` a: [start..end,start..end] -> `<stdout>` a: [start..end][start..end] -> `<stdout>` \",\"All usages also work with ja and ta as well, eg:\",\"ja: [start..end] -> `<stdout>` ta: data-type [start..end] -> `<stdout>` \",\"You can also inline arrays with the %[] syntax, eg:\",\"%[start..end] \"]},\"1442\":{\"h\":\"Examples\",\"t\":[\"» a: [summer..winter] summer autumn winter \"]},\"1443\":{\"h\":\"Detail\"},\"1444\":{\"h\":\"Case Sensitivity\",\"t\":[\"Special ranges are case aware. If the ranges are uppercase then the return will be uppercase. If the ranges are title case (capital first letter) then the return will be in title case.\"]},\"1445\":{\"h\":\"lower case\",\"t\":[\"» a: [monday..wednesday] monday tuesday wednesday \"]},\"1446\":{\"h\":\"Title Case\",\"t\":[\"» a: [Monday..Wednesday] Monday Tuesday Wednesday \"]},\"1447\":{\"h\":\"UPPER CASE\",\"t\":[\"» a: [MONDAY..WEDNESDAY] MONDAY TUESDAY WEDNESDAY \"]},\"1448\":{\"h\":\"Looping vs Negative Ranges\",\"t\":[\"Where the special ranges differ from a regular range is they cannot cannot down. eg a: [3..1] would output\",\"» a: [3..1] 3 2 1 \",\"however a negative range in special ranges will cycle through to the end of the range and then loop back from the start:\",\"» a: [Thursday..Wednesday] Thursday Friday Saturday Sunday Monday Tuesday Wednesday \",\"This decision was made because generally with ranges of this type, you would more often prefer to cycle through values rather than iterate backwards through the list.\",\"If you did want to reverse then pipe the output into another tool:\",\"» a: [Monday..Friday] -> mtac Friday Thursday Wednesday Tuesday Monday \",\"There are other UNIX tools which aren't data type aware but would work in this specific scenario:\",\"tac (Linux),\",\"tail -r (BSD / OS X)\",\"perl -e \\\"print reverse <>\\\" (Multi-platform but requires Perl installed)\"]},\"1449\":{\"h\":\"Supported Dictionary Terms\",\"t\":[\"Below is the source for the supported dictionary terms:\",\"package mkarray var mapRanges = []map[string]int{ rangeWeekdayLong, rangeWeekdayShort, rangeMonthLong, rangeMonthShort, rangeSeason, rangeMoon, } var rangeWeekdayLong = map[string]int{ \\\"monday\\\": 1, \\\"tuesday\\\": 2, \\\"wednesday\\\": 3, \\\"thursday\\\": 4, \\\"friday\\\": 5, \\\"saturday\\\": 6, \\\"sunday\\\": 7, } var rangeWeekdayShort = map[string]int{ \\\"mon\\\": 1, \\\"tue\\\": 2, \\\"wed\\\": 3, \\\"thu\\\": 4, \\\"fri\\\": 5, \\\"sat\\\": 6, \\\"sun\\\": 7, } var rangeMonthLong = map[string]int{ \\\"january\\\": 1, \\\"february\\\": 2, \\\"march\\\": 3, \\\"april\\\": 4, \\\"may\\\": 5, \\\"june\\\": 6, \\\"july\\\": 7, \\\"august\\\": 8, \\\"september\\\": 9, \\\"october\\\": 10, \\\"november\\\": 11, \\\"december\\\": 12, } var rangeMonthShort = map[string]int{ \\\"jan\\\": 1, \\\"feb\\\": 2, \\\"mar\\\": 3, \\\"apr\\\": 4, \\\"may\\\": 5, \\\"jun\\\": 6, \\\"jul\\\": 7, \\\"aug\\\": 8, \\\"sep\\\": 9, \\\"oct\\\": 10, \\\"nov\\\": 11, \\\"dec\\\": 12, } var rangeSeason = map[string]int{ \\\"spring\\\": 1, \\\"summer\\\": 2, \\\"autumn\\\": 3, \\\"winter\\\": 4, } var rangeMoon = map[string]int{ \\\"new moon\\\": 1, \\\"waxing crescent\\\": 2, \\\"first quarter\\\": 3, \\\"waxing gibbous\\\": 4, \\\"full moon\\\": 5, \\\"waning gibbous\\\": 6, \\\"third quarter\\\": 7, \\\"waning crescent\\\": 8, } \"]},\"1450\":{\"h\":\"See Also\",\"t\":[\"Calendar Date Ranges: Create arrays of dates\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"count: Count items in a map, list or array\",\"datetime: A date and/or time conversion tool (like printf but for date and time values)\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"mtac: Reverse the order of an array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1451\":{\"h\":\"Optional Command Reference\",\"t\":[\"This section is a glossary of Murex optional builtins.\",\"These builtins likely wont be compiled with Murex unless you specifically request them to be. This might be because they duplicate functionality already available on POSIX systems or introduce more complex dependencies. It might also be because that specific builtin is in an alpha stage and thus not ready to ship with Murex.\"]},\"1452\":{\"h\":\"Other Reference Material\"},\"1453\":{\"h\":\"Language Guides\",\"t\":[\"Core Builtins, for docs on the core builtins.\",\"Language Tour, which is an introduction into the Murex language.\",\"Rosetta Stone, which is a reference table comparing Bash syntax to Murex's.\"]},\"1454\":{\"h\":\"Murex's Source Code\",\"t\":[\"The source for each of these builtins can be found on Github.\"]},\"1455\":{\"h\":\"Shell Commands For Querying Builtins\",\"t\":[\"From the shell itself: run builtins to list the builtin command.\",\"If you require a manual on any of those commands, you can run murex-docs to return the same markdown-formatted document as those listed below. eg\",\"murex-docs trypipe \"]},\"1456\":{\"h\":\"Pages\",\"t\":[\"!bz2: Decompress a bz2 file\",\"base64: Encode or decode a base64 string\",\"gz: Compress or decompress a gzip file\",\"qr: Creates a QR code from STDIN\",\"select: Inlining SQL into shell pipelines\",\"sleep:\\nSuspends the shell for a number of seconds\"]},\"1457\":{\"h\":\"base64 - Optional Command Reference\",\"t\":[\"Encode or decode a base64 string\"]},\"1458\":{\"h\":\"Description\",\"t\":[\"An optional builtin to encode or decode a base64 string.\"]},\"1459\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> base64 -> `<stdout>` `<stdin>` -> !base64 -> `<stdout>` \"]},\"1460\":{\"h\":\"Examples\",\"t\":[\"Encode base64 string\",\"» out: \\\"Hello, World!\\\" -> base64 SGVsbG8sIFdvcmxkIQo= \",\"Decode base64 string\",\"» out: \\\"SGVsbG8sIFdvcmxkIQo=\\\" -> !base64 Hello, World! \"]},\"1461\":{\"h\":\"Detail\",\"t\":[\"base64 is very simplistic - particularly when compared to its GNU coreutil (for example) counterpart. If you want to use the base64 binary on Linux or similar platforms then you will need to launch with the exec builtin:\",\"» out: \\\"Hello, World!\\\" -> exec: base64 SGVsbG8sIFdvcmxkIQo= » out: \\\"SGVsbG8sIFdvcmxkIQo=\\\" -> exec: base64 -d Hello, World! \",\"However for simple tasks this builtin will out perform external tools because it doesn't require the OS fork processes.\"]},\"1462\":{\"h\":\"Synonyms\",\"t\":[\"base64\",\"!base64\"]},\"1463\":{\"h\":\"See Also\",\"t\":[\"!bz2: Decompress a bz2 file\",\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl: Encode or decodes text for the URL\",\"gz:\\nCompress or decompress a gzip file\"]},\"1464\":{\"h\":\"!bz2 - Optional Command Reference\",\"t\":[\"Decompress a bz2 file\"]},\"1465\":{\"h\":\"Description\",\"t\":[\"!bz2 is an optional builtin for decompressing a bz2 stream from STDIN.\"]},\"1466\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> !bz2 -> `<stdout>` \"]},\"1467\":{\"h\":\"Detail\",\"t\":[\"Currently there is no support for compressing a stream using bz2.\"]},\"1468\":{\"h\":\"Synonyms\",\"t\":[\"!bz2\"]},\"1469\":{\"h\":\"See Also\",\"t\":[\"base64: Encode or decode a base64 string\",\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl: Encode or decodes text for the URL\",\"gz:\\nCompress or decompress a gzip file\"]},\"1470\":{\"h\":\"gz - Optional Command Reference\",\"t\":[\"Compress or decompress a gzip file\"]},\"1471\":{\"h\":\"Description\",\"t\":[\"An optional builtin for compressing or decompressing a gzip stream from STDIN.\"]},\"1472\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> gz -> `<stdout>` `<stdin>` -> !gz -> `<stdout>` \"]},\"1473\":{\"h\":\"Synonyms\",\"t\":[\"gz\",\"!gz\"]},\"1474\":{\"h\":\"See Also\",\"t\":[\"!bz2: Decompress a bz2 file\",\"base64: Encode or decode a base64 string\",\"escape: Escape or unescape input\",\"esccli: Escapes an array so output is valid shell code\",\"eschtml: Encode or decodes text for HTML\",\"escurl:\\nEncode or decodes text for the URL\"]},\"1475\":{\"h\":\"qr - Optional Command Reference\",\"t\":[\"Creates a QR code from STDIN\"]},\"1476\":{\"h\":\"Description\",\"t\":[\"qr is an optional builtin which generates a PNG format image based on the input from STDIN. qr must be run as a method.\"]},\"1477\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> qr -> `<stdout>` \"]},\"1478\":{\"h\":\"Examples\",\"t\":[\"Write the PNG to disk\",\"» out \\\"Hello, World!\\\" -> qr -> > qr.png \",\"Display PNG in the terminal\",\"» out \\\"Hello, World!\\\" -> qr -> open-image \"]},\"1479\":{\"h\":\"Detail\",\"t\":[\"qr sets stdout's data-type to be \\\"image\\\", which is defined in with the open-image optional builtin. So if you have that disabled then you may have to cast the output in some circumstances.\"]},\"1480\":{\"h\":\"See Also\",\"t\":[\"cast: Alters the data type of the previous function without altering it's output\",\"open-image:\\nRenders bitmap image data on your terminal\"]},\"1481\":{\"h\":\"select - Optional Command Reference\",\"t\":[\"Inlining SQL into shell pipelines\"]},\"1482\":{\"h\":\"Description\",\"t\":[\"select imports tabulated data into an in memory sqlite3 database and executes SQL queries against the data. It returns a table of the same data type as the input type\"]},\"1483\":{\"h\":\"Usage\",\"t\":[\"`<stdin>` -> select * | ... WHERE ... -> `<stdout>` select * | ... FROM file[.gz] WHERE ... -> `<stdout>` \"]},\"1484\":{\"h\":\"Examples\",\"t\":[\"List a count of all the processes running against each user ID:\",\"» ps aux -> select count(*), user GROUP BY user ORDER BY 1 count(*) USER 1 _analyticsd 1 _applepay 1 _atsserver 1 _captiveagent 1 _cmiodalassistants 1 _ctkd 1 _datadetectors 1 _displaypolicyd 1 _distnote 1 _gamecontrollerd 1 _hidd 1 _iconservices 1 _installcoordinationd 1 _mdnsresponder 1 _netbios 1 _networkd 1 _reportmemoryexception 1 _timed 1 _usbmuxd 2 _appleevents 3 _assetcache 3 _fpsd 3 _nsurlsessiond 3 _softwareupdate 4 _windowserver 5 _coreaudiod 6 _spotlight 7 _locationd 144 root 308 foobar select count(*) \"]},\"1485\":{\"h\":\"Detail\"},\"1486\":{\"h\":\"Default Table Name\",\"t\":[\"The table created is called main, however you do not need to include a FROM condition in your SQL as Murex will inject FROM main into your SQL if it is missing. In fact, it is recommended that you exclude FROM from your SQL queries for the sake of brevity.\"]},\"1487\":{\"h\":\"config Options\",\"t\":[\"select's behavior is configurable:\",\"» config -> [ select ] { \\\"fail-irregular-columns\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": false, \\\"Description\\\": \\\"When importing a table into sqlite3, fail if there is an irregular number of columns\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": false }, \\\"merge-trailing-columns\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"When importing a table into sqlite3, if `fail-irregular-columns` is set to `false` and there are more columns than headings, then any additional columns are concatenated into the last column (space delimitated). If `merge-trailing-columns` is set to `false` then any trailing columns are ignored\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": true }, \\\"print-headings\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Print headings when writing results\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": true }, \\\"table-includes-headings\\\": { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"When importing a table into sqlite3, treat the first row as headings (if `false`, headings are Excel style column references starting at `A`)\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": true } } \",\"(See below for how to use config)\"]},\"1488\":{\"h\":\"Read All vs Sequential Reads\",\"t\":[\"At present, select only supports reading the entire table from STDIN before importing that data into sqlite3. There is some prototype code being written to support sequential imports but this is hugely experimental and not yet enabled.\",\"This might make select unsuitable for large datasets.\"]},\"1489\":{\"h\":\"Early Release\",\"t\":[\"This is a very early release so there almost certainly will be bugs hiding. Which is another reason why this is currently only an optional builtin.\",\"If you do run into any issues then please raise them on Github.\"]},\"1490\":{\"h\":\"Synonyms\",\"t\":[\"select\"]},\"1491\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"config: Query or define Murex runtime settings\",\"csv: CSV files (and other character delimited tables)\",\"jsonl: JSON Lines\",\"v2.1:\\nThis release comes with support for inlining SQL and some major bug fixes plus a breaking change for config. Please read for details.\"]},\"1492\":{\"h\":\"sleep  - Optional Command Reference\",\"t\":[\"Suspends the shell for a number of seconds\"]},\"1493\":{\"h\":\"Description\",\"t\":[\"sleep is an optional builtin which suspends the shell for a defined number of seconds.\"]},\"1494\":{\"h\":\"Usage\",\"t\":[\"sleep: integer \"]},\"1495\":{\"h\":\"Examples\",\"t\":[\"» sleep 5 # murex sleeps for 5 seconds \"]},\"1496\":{\"h\":\"Detail\",\"t\":[\"sleep is very simplistic - particularly when compared to its GNU coreutil (for example) counterpart. If you want to use the sleep binary on Linux or similar platforms then you will need to launch with the exec builtin:\",\"» exec: sleep 5 \"]},\"1497\":{\"h\":\"See Also\",\"t\":[\"exec: Runs an executable\",\"source: Import Murex code from another file of code block\",\"time:\\nReturns the execution run time of a command or block\"]},\"1498\":{\"h\":\"Parser Reference\",\"t\":[\"This section is a glossary of Murex tokens and parser behavior.\"]},\"1499\":{\"h\":\"Other Reference Material\"},\"1500\":{\"h\":\"Language Guides\",\"t\":[\"Language Tour, which is an introduction into the Murex language.\",\"Rosetta Stone, which is a reference table comparing Bash syntax to Murex's.\",\"Builtins, for docs on the core builtins.\"]},\"1501\":{\"h\":\"Murex's Source Code\",\"t\":[\"The parser is located Murex's source under the lang/ path of the project files.\"]},\"1502\":{\"h\":\"Pages\",\"t\":[\"And (&&) Logical Operator: Continues next operation if previous operation passes\",\"Append Pipe (>>) Token: Redirects STDOUT to a file and append its contents\",\"Array (@) Token: Expand values as an array\",\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Create array (%[]) constructor: Quickly generate arrays\",\"Create object (%{}) constructor: Quickly generate objects and maps\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"Or (||) Logical Operator: Continues next operation only if previous operation fails\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token:\\nHome directory path variable\"]},\"1503\":{\"h\":\"Array (@) Token - Parser Reference\",\"t\":[\"Expand values as an array\"]},\"1504\":{\"h\":\"Description\",\"t\":[\"The array token is used to tell Murex to expand the string as multiple parameters (an array) rather than as a single parameter string.\"]},\"1505\":{\"h\":\"Examples\",\"t\":[\"ASCII variable names:\",\"» $example = \\\"foobar\\\" » out $example foobar \",\"Unicode variable names:\",\"Variable names can be non-ASCII however they have to be surrounded by parenthesis. eg\",\"» $(比如) = \\\"举手之劳就可以使办公室更加环保，比如，使用再生纸。\\\" » out $(比如) 举手之劳就可以使办公室更加环保，比如，使用再生纸。 \",\"Infixing inside text:\",\"Sometimes you need to denote the end of a variable and have text follow on.\",\"» $partial_word = \\\"orl\\\" » out \\\"Hello w$(partial_word)d!\\\" Hello world! \",\"Variables are tokens:\",\"Please note the new line (\\\\n) character. This is not split using $:\",\"» $example = \\\"foo\\\\nbar\\\" \",\"Output as a string:\",\"» out $example foo bar \",\"Output as an array:\",\"» out @example foo bar \",\"The string and array tokens also works for subshells:\",\"» out ${ %[Mon..Fri] } [\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\",\\\"Thu\\\",\\\"Fri\\\"] » out @{ %[Mon..Fri] } Mon Tue Wed Thu Fri \",\"out will take an array and output each element, space delimited. Exactly the same how echo would in Bash.\",\"Variable as a command:\",\"If a variable is used as a commend then Murex will just print the content of that variable.\",\"» $example = \\\"Hello World!\\\" » $example Hello World! \"]},\"1506\":{\"h\":\"Detail\",\"t\":[\"Since arrays are expanded over multiple parameters, you cannot expand an array inside quoted strings like you can with a string variable:\",\"» out: \\\"foo ${ ja: [1..5] } bar\\\" foo [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\"] bar » out: \\\"foo @{ ja: [1..5] } bar\\\" foo 1 2 3 4 5 bar » %(${ ja: [1..5] }) [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\"] » %(@{ ja: [1..5] }) @{ ja: [1..5] } \"]},\"1507\":{\"h\":\"See Also\",\"t\":[\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1508\":{\"h\":\"Brace Quote (%(, )) Tokens - Parser Reference\",\"t\":[\"Initiates or terminates a string (variables expanded)\"]},\"1509\":{\"h\":\"Description\",\"t\":[\"Brace quote is used to initiate and terminate strict strings where variables can be expanded.\",\"While brace quotes are untraditional compared to your typical string quotations in POSIX shells, brace quotes have one advantage in that the open and close grapheme differ (ie ( is a different character to )). This brings benefits when nesting quotes as it saves the developer from having to carefully escape the nested quotation marks just the right number of times.\",\"Commands cannot be quoted using brace quotes because %( is recognized as its own function.\"]},\"1510\":{\"h\":\"Examples\"},\"1511\":{\"h\":\"As a parameter:\",\"t\":[\"name = %(Bob) \"]},\"1512\":{\"h\":\"As a function:\",\"t\":[\"» %(hello world) hello world \"]},\"1513\":{\"h\":\"Nested quotes:\",\"t\":[\"» murex -c %(out: %(Hello \\\"${murex -c %(out: %(Bob))}\\\")) Hello \\\"Bob\\\" \",\"In this example we are calling Murex to execute code as a command line parameter (the -c flag). That code outputs Hello \\\"...\\\" but inside the double quotes is a name that is generated from a sub-shell. That sub-shell itself runs another murex instance which also executes another command line parameter, this time outputting the name Bob.\",\"The example is contrived but it does demonstrate how you can heavily nest quotes and even mix and match that with other quotation marks if desired.\",\"This is something that is extremely difficult to write in traditional shells because it would require lots of escaping, and even escaping the escape characters (and so on) the further deep you get in your nest.\"]},\"1514\":{\"h\":\"Detail\"},\"1515\":{\"h\":\"Multi-Line Quotes\",\"t\":[\"Quotes can also work over multiple lines\",\"» out: %(foo » bar) foo bar \"]},\"1516\":{\"h\":\"Legacy Support\",\"t\":[\"Version 3.x of Murex introduced support for the % token, before that brace quotes worked without it. However to retain backwards compatibility, the older syntax is still supported...albeit officially classed as \\\"deprecated\\\" and may be removed from a future release.\",\"Below is a little detail about how the legacy syntax worked:\"]},\"1517\":{\"h\":\"Deprecated Syntax\",\"t\":[\"The open brace character is only recognized as a brace quote token if it is the start of a parameter.\",\"» set: example=(World!) » out: (Hello $example) Hello (World!) \"]},\"1518\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1519\":{\"h\":\"Create array (%[]) constructor - Parser Reference\",\"t\":[\"Quickly generate arrays\"]},\"1520\":{\"h\":\"Description\",\"t\":[\"%[] is a way of defining arrays in expressions and statements. Whenever a %[] array is outputted as a string, it will be converted to minified JSON.\",\"Array elements inside %[] can be whitespace and/or comma delimited. This allows for compatibility with both Bash muscle memory, and people more familiar with JSON.\",\"Additionally you can also embed a style parameters inside %[] arrays too.\",\"Like with YAML, strings in %[] do not need to be quoted unless you need to force numeric or boolean looking values to be stored as strings.\"]},\"1521\":{\"h\":\"Examples\"},\"1522\":{\"h\":\"Arrays passed as a JSON string:\",\"t\":[\"» echo %[1..3] [1,2,3] » %[1..3] -> cat [1,2,3] \"]},\"1523\":{\"h\":\"Different supported syntax for creating a numeric array:\"},\"1524\":{\"h\":\"As a range\",\"t\":[\"» %[1..3] [ 1, 2, 3 ] \"]},\"1525\":{\"h\":\"JSON formatted\",\"t\":[\"» %[1,2,3] [ 1, 2, 3 ] \"]},\"1526\":{\"h\":\"Whitespace separated\",\"t\":[\"» %[1 2 3] [ 1, 2, 3 ] \"]},\"1527\":{\"h\":\"Values and ranges\",\"t\":[\"» %[1,2..3] [ 1, 2, 3 ] \"]},\"1528\":{\"h\":\"Strings:\"},\"1529\":{\"h\":\"barewords and whitespace separated\",\"t\":[\"This will allow you to copy/paste lists from traditional shells like Bash\",\"» %[foo bar] [ \\\"foo\\\", \\\"bar\\\" ] \"]},\"1530\":{\"h\":\"JSON formatted\",\"t\":[\"» %[\\\"foo\\\", \\\"bar\\\"] [ \\\"foo\\\", \\\"bar\\\" ] \"]},\"1531\":{\"h\":\"Special ranges\",\"t\":[\"» %[June..August] [ \\\"June\\\", \\\"July\\\", \\\"August\\\" ] \",\"A full list of special ranges are available at docs/mkarray/special\"]},\"1532\":{\"h\":\"Multiple expansion blocks:\",\"t\":[\"» %[[A,B]:[1..4]] [ \\\"A:1\\\", \\\"A:2\\\", \\\"A:3\\\", \\\"A:4\\\", \\\"B:1\\\", \\\"B:2\\\", \\\"B:3\\\", \\\"B:4\\\" ] \"]},\"1533\":{\"h\":\"Nested arrays:\",\"t\":[\"» %[foo [bar]] [ \\\"foo\\\", [ \\\"bar\\\" ] ] \",\"The % prefix for the nested array is optional.\"]},\"1534\":{\"h\":\"JSON objects within arrays\",\"t\":[\"» %[foo {bar: baz}] [ \\\"foo\\\", { \\\"bar\\\": \\\"baz\\\" } ] \",\"The % prefix for the nested object is optional.\"]},\"1535\":{\"h\":\"Detail\",\"t\":[\"Murex supports a number of different formats that can be used to generate arrays. For more details on these please refer to the documents for each format\",\"Calendar Date Ranges: Create arrays of dates\",\"Character arrays: Making character arrays (a to z)\",\"Decimal Ranges: Create arrays of decimal integers\",\"Non-Decimal Ranges: Create arrays of integers from non-decimal number bases\",\"Special Ranges: Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\"]},\"1536\":{\"h\":\"See Also\",\"t\":[\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Create object (%{}) constructor: Quickly generate objects and maps\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"Special Ranges: Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\",\"a (mkarray): A sophisticated yet simple way to build an array or list\",\"expr: Expressions: mathematical, string comparisons, logical operators\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"ta (mkarray):\\nA sophisticated yet simple way to build an array of a user defined data-type\"]},\"1537\":{\"h\":\"Create object (%{}) constructor - Parser Reference\",\"t\":[\"Quickly generate objects and maps\"]},\"1538\":{\"h\":\"Description\",\"t\":[\"%{} is a way of defining objects in expressions and statements. Whenever an %{} object is outputted as a string, it will be converted to minified JSON.\",\"Object elements inside %{} can be new line and/or comma delimited. This allows for compatibility with JSON but without the pain of accidentally invalid comma management breaking JSON parsers. However a colon is still required to separate keys from values.\",\"Like with YAML, strings in %[] do not need to be quoted unless you need to force numeric or boolean looking values to be stored as strings.\"]},\"1539\":{\"h\":\"Examples\",\"t\":[\"Object passed as a JSON string:\",\"» echo %{foo: bar} {\\\"foo\\\":\\\"bar\\\"} \",\"The % prefix for the nested object is optional:\",\"» %{foo: bar, baz: [1 2 3]} { \\\"baz\\\": [ 1, 2, 3 ], \\\"foo\\\": \\\"bar\\\" } \"]},\"1540\":{\"h\":\"See Also\",\"t\":[\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Create array (%[]) constructor: Quickly generate arrays\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"Special Ranges: Create arrays from ranges of dictionary terms (eg weekdays, months, seasons, etc)\",\"expr:\\nExpressions: mathematical, string comparisons, logical operators\"]},\"1541\":{\"h\":\"Curly Brace ({, }) Tokens - Parser Reference\",\"t\":[\"Initiates or terminates a code block\"]},\"1542\":{\"h\":\"Description\",\"t\":[\"Curly braces are used to denote the start and end of a code block. Like with the single quotation marks ('), any code inside a curly brace is not parsed. Also unlike any other quotation tokens, the curly brace is included as part of the parsed string.\",\"» out: {example} {example} \",\"Also like the brace quote ((, )), the curly brace character is only recognized as a curly brace token if it is the start of a parameter.\",\"Curly braces are also used for other fields besides code blocks. For example inlining JSON.\"]},\"1543\":{\"h\":\"Detail\"},\"1544\":{\"h\":\"Multiline Blocks\",\"t\":[\"Curly braces can work over multiple lines\",\"» out: {foo » bar} {foo bar} \"]},\"1545\":{\"h\":\"Code Golfing\",\"t\":[\"Curly braces can be used to terminate the parsing of the command name / start the parsing of the first parameter however each new parameter would still need to be separated by whitespace:\",\"# Valid if{true} {out: \\\"Yipee\\\"} # Invalid if{true}{out: \\\"Yipee\\\"} \"]},\"1546\":{\"h\":\"ANSI Constants\",\"t\":[\"Some builtins (like out) also support infixing using the curly brace. eg\",\"out: \\\"{GREEN}PASSED{RESET}\\\" \",\"This is a separate layer of parsing and happens at the parameter level for specific builtins which opt to support ANSI constants. See the ANSI Constant user guide (link below) for more information on supporting builtins and which constants are available.\"]},\"1547\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"Array (@) Token: Expand values as an array\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set: Define a local variable and set it's value\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"1548\":{\"h\":\"Double Quote (\\\") Token - Parser Reference\",\"t\":[\"Initiates or terminates a string (variables expanded)\"]},\"1549\":{\"h\":\"Description\",\"t\":[\"Double quote is used to initiate and terminate strict strings where variables can be expanded.\",\"Commands can also be quoted using double quotes (eg where a command might contain a space character in it's name) however variables cannot be used as part of a command name.\"]},\"1550\":{\"h\":\"Examples\",\"t\":[\"» set: example=\\\"World!\\\" » out: \\\"Hello $example\\\" Hello World! \"]},\"1551\":{\"h\":\"Detail\",\"t\":[\"Quotes can also work over multiple lines\",\"» out: \\\"foo » bar\\\" foo bar \"]},\"1552\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1553\":{\"h\":\"And (&&) Logical Operator - Parser Reference\",\"t\":[\"Continues next operation if previous operation passes\"]},\"1554\":{\"h\":\"Description\",\"t\":[\"When in the normal run mode (see \\\"schedulers\\\" link below) this will only run the command on the right hand side if the command on the left hand side does not error. Neither STDOUT nor STDERR are piped.\",\"This has no effect in try nor trypipe run modes because they automatically apply stricter error handling.\"]},\"1555\":{\"h\":\"Examples\",\"t\":[\"Second command runs because the first command doesn't error:\",\"» out: one && out: two one two \",\"Second command does not run because the first command produces an error:\",\"» err: one && out: two one \"]},\"1556\":{\"h\":\"Detail\",\"t\":[\"This is equivelent to a try block:\",\"try { err: one out: two } \"]},\"1557\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1558\":{\"h\":\"Or (||) Logical Operator - Parser Reference\",\"t\":[\"Continues next operation only if previous operation fails\"]},\"1559\":{\"h\":\"Description\",\"t\":[\"When in the normal run mode (see \\\"schedulers\\\" link below) this will only run the command on the right hand side if the command on the left hand side does not error. Neither STDOUT nor STDERR are piped.\",\"This has no effect in try nor trypipe run modes because they automatically apply stricter error handling. See detail below.\"]},\"1560\":{\"h\":\"Examples\",\"t\":[\"Second command does not run because the first command doesn't error:\",\"» out: one || out: two one \",\"Second command does run because the first command produces an error:\",\"» err: one || out: two one two \"]},\"1561\":{\"h\":\"Detail\",\"t\":[\"This has no effect in try nor trypipe run modes because they automatically apply stricter error handling. You can achive a similiar behavior in try with the following code:\",\"try { err: one -> !if { out: two } } \",\"There is no workaround for trypipe.\"]},\"1562\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1563\":{\"h\":\"Append Pipe (>>) Token - Parser Reference\",\"t\":[\"Redirects STDOUT to a file and append its contents\"]},\"1564\":{\"h\":\"Description\",\"t\":[\"This is used to redirect the STDOUT of a command and append it to a file. If that file does not exist, then the file is created.\",\"This behaves similarly to the Bash (et al) token except it doesn't support adding alternative file descriptor numbers. Instead you will need to use named pipes to achieve the same effect in Murex.\"]},\"1565\":{\"h\":\"Examples\",\"t\":[\"» out: \\\"Hello\\\" >> example.txt » out: \\\"World!\\\" >> example.txt » open: example.txt Hello World! \"]},\"1566\":{\"h\":\"Detail\",\"t\":[\"This is just syntactic sugar for -> >>. Thus when the parser reads code like the following:\",\"echo \\\"foobar\\\" >> example.txt \",\"it will compile an abstract syntax tree which would reflect the following code instead:\",\"echo \\\"foobar\\\" | >> example.txt \"]},\"1567\":{\"h\":\"Truncating a file\",\"t\":[\"To truncate a file (ie overwrite its contents) use |> instead.\"]},\"1568\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"ja (mkarray):\\nA sophisticated yet simply way to build a JSON array\"]},\"1569\":{\"h\":\"Arrow Pipe (->) Token - Parser Reference\",\"t\":[\"Pipes STDOUT from the left hand command to STDIN of the right hand command\"]},\"1570\":{\"h\":\"Description\",\"t\":[\"This token behaves much like pipe would in Bash or similar shells. It passes STDOUT along the pipeline while merging STDERR stream with the parents STDERR stream.\",\"-> differs from | in the interactive terminal where it produces different autocompletion suggestion. It returns a list of \\\"methods\\\". That is, commands that are known to support the output type of the previous command. -> helps with the discovery of commandline tools.\",\"In shell scripts, -> and | can be used interchangeably.\"]},\"1571\":{\"h\":\"Examples\",\"t\":[\"» out: Hello, world! -> regexp: s/world/Earth/ Hello, Earth! » out: Hello, world!->regexp: s/world/Earth/ Hello, Earth! \",\"In following example the first command is writing to STDERR rather than STDOUT so Hello, world! doesn't get pipelined and thus isn't affected by regexp:\",\"» err: Hello, world! -> regexp: s/world/Earth/ Hello, world! \"]},\"1572\":{\"h\":\"See Also\",\"t\":[\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"1573\":{\"h\":\"STDERR Pipe (?) Token - Parser Reference\",\"t\":[\"Pipes STDERR from the left hand command to STDIN of the right hand command\"]},\"1574\":{\"h\":\"Description\",\"t\":[\"This token swaps the STDOUT and STDERR streams of the left hand command.\",\"Please note that this token is only effective when it is prefixed by white space.\"]},\"1575\":{\"h\":\"Examples\",\"t\":[\"» err Hello, world! ? regexp s/world/Earth/ Hello, Earth! \",\"In following example the first command is writing to STDOUT rather than STDERR so Hello, world! doesn't get pipelined and thus isn't affected by regexp:\",\"» out Hello, world! ? regexp s/world/Earth/ Hello, world! \",\"In following example the STDERR token isn't whitespace padded so is treated like any ordinary printable character:\",\"» err Hello, world!? regexp s/world/Earth/ Hello, world!? regexp s/world/Earth/ \"]},\"1576\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"1577\":{\"h\":\"Generic Pipe (=>) Token - Parser Reference\",\"t\":[\"Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\"]},\"1578\":{\"h\":\"Description\",\"t\":[\"This token behaves much like the | pipe would except it injects format generic into the pipeline. The purpose of a formatted pipe is to support piping out to external commands which don't support Murex data types. For example they might expect arrays as lists rather than JSON objects).\"]},\"1579\":{\"h\":\"Examples\",\"t\":[\"» ja: [Mon..Wed] => cat Mon Tue Wed \",\"The above is literally the same as typing:\",\"» ja: [Mon..Wed] -> format generic -> cat Mon Tue Wed \",\"To demonstrate how the previous pipeline might look without a formatted pipe:\",\"» ja: [Mon..Wed] -> cat [\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\"] » ja: [Mon..Wed] | cat [\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\"] » ja: [Mon..Wed] [ \\\"Mon\\\", \\\"Tue\\\", \\\"Wed\\\" ] \"]},\"1580\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"format: Reformat one data-type into another data-type\",\"ja (mkarray):\\nA sophisticated yet simply way to build a JSON array\"]},\"1581\":{\"h\":\"POSIX Pipe (|) Token - Parser Reference\",\"t\":[\"Pipes STDOUT from the left hand command to STDIN of the right hand command\"]},\"1582\":{\"h\":\"Description\",\"t\":[\"This token behaves much like pipe would in Bash or similar shells. It passes STDOUT along the pipeline while merging STDERR stream with the parents STDERR stream.\",\"It can be used interchangeably with the arrow pipe, ->, in shell scripts.\"]},\"1583\":{\"h\":\"Examples\",\"t\":[\"» out: Hello, world! | regexp: s/world/Earth/ Hello, Earth! » out: Hello, world!|regexp: s/world/Earth/ Hello, Earth! \",\"In this example the first command is writing to STDERR rather than STDOUT so Hello, world! doesn't get pipelined and thus isn't affected by regexp:\",\"» err: Hello, world! | regexp: s/world/Earth/ Hello, world! \"]},\"1584\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"<> / read-named-pipe: Reads from a Murex named pipe\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"regexp:\\nRegexp tools for arrays / lists of strings\"]},\"1585\":{\"h\":\"Single Quote (') Token - Parser Reference\",\"t\":[\"Initiates or terminates a string (variables not expanded)\"]},\"1586\":{\"h\":\"Description\",\"t\":[\"Single quote is used to initiate and terminate strict strings where variables cannot be expanded.\",\"Commands can also be quoted using single quotes (eg where a command might contain a space character in it's name)\"]},\"1587\":{\"h\":\"Examples\",\"t\":[\"» set: example='World!' » out: 'Hello $example' Hello $example \"]},\"1588\":{\"h\":\"Detail\",\"t\":[\"Quotes can also work over multiple lines\",\"» out: 'foo » bar' foo bar \"]},\"1589\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"String ($) Token: Expand values as a string\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1590\":{\"h\":\"String ($) Token - Parser Reference\",\"t\":[\"Expand values as a string\"]},\"1591\":{\"h\":\"Description\",\"t\":[\"The string token is used to tell Murex to expand variables and subshells as a string (ie one single parameter) irrespective of the data that is stored in the string. One handy common use case is file names where traditional POSIX shells would treat spaces as a new file, whereas Murex treats spaces as a printable character unless explicitly told to do otherwise.\",\"The string token must be followed with one of the following characters: alpha, numeric, underscore (_) or a full stop / period (.).\"]},\"1592\":{\"h\":\"Examples\",\"t\":[\"ASCII variable names:\",\"» $example = \\\"foobar\\\" » out $example foobar \",\"Unicode variable names:\",\"Variable names can be non-ASCII however they have to be surrounded by parenthesis. eg\",\"» $(比如) = \\\"举手之劳就可以使办公室更加环保，比如，使用再生纸。\\\" » out $(比如) 举手之劳就可以使办公室更加环保，比如，使用再生纸。 \",\"Infixing inside text:\",\"Sometimes you need to denote the end of a variable and have text follow on.\",\"» $partial_word = \\\"orl\\\" » out \\\"Hello w$(partial_word)d!\\\" Hello world! \",\"Variables are tokens:\",\"Please note the new line (\\\\n) character. This is not split using $:\",\"» $example = \\\"foo\\\\nbar\\\" \",\"Output as a string:\",\"» out $example foo bar \",\"Output as an array:\",\"» out @example foo bar \",\"The string and array tokens also works for subshells:\",\"» out ${ %[Mon..Fri] } [\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\",\\\"Thu\\\",\\\"Fri\\\"] » out @{ %[Mon..Fri] } Mon Tue Wed Thu Fri \",\"out will take an array and output each element, space delimited. Exactly the same how echo would in Bash.\",\"Variable as a command:\",\"If a variable is used as a commend then Murex will just print the content of that variable.\",\"» $example = \\\"Hello World!\\\" » $example Hello World! \"]},\"1593\":{\"h\":\"Detail\",\"t\":[\"Strings and subshells can be expanded inside double quotes, brace quotes as well as used as barewords. But they cannot be expanded inside single quotes.\",\"» set: example=\\\"World!\\\" » out: Hello $example Hello World! » out: 'Hello $example' Hello $example » out: \\\"Hello $example\\\" Hello World! » out: %(Hello $example) Hello World! \",\"However you cannot expand arrays (@) inside any form of quotation since it wouldn't be clear how that value should be expanded relative to the other values inside the quote. This is why array and object builders (%[] and %{} respectively) support array variables but string builders (%()) do not.\"]},\"1594\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Reserved Variables: Special variables reserved by Murex\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"Tilde (~) Token: Home directory path variable\",\"( (brace quote): Write a string to the STDOUT without new line\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1595\":{\"h\":\"Tilde (~) Token - Parser Reference\",\"t\":[\"Home directory path variable\"]},\"1596\":{\"h\":\"Description\",\"t\":[\"The tilde token is used as a lazy reference to the users home directory.\"]},\"1597\":{\"h\":\"Examples\",\"t\":[\"» out: ~ /home/bob » out: ~joe /home/joe \"]},\"1598\":{\"h\":\"Detail\",\"t\":[\"Tilde can be expanded inside double quotes, brace quotes as well as used naked. But it cannot be expanded inside single quotes.\",\"» out: ~ /home/bob » out: '~' ~ » out: \\\"~\\\" /home/bob » out: %(~) /home/bob \"]},\"1599\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Double Quote (\\\") Token: Initiates or terminates a string (variables expanded)\",\"Single Quote (') Token: Initiates or terminates a string (variables not expanded)\",\"String ($) Token: Expand values as a string\",\"( (brace quote): Write a string to the STDOUT without new line\",\"ja (mkarray): A sophisticated yet simply way to build a JSON array\",\"out: Print a string to the STDOUT with a trailing new line character\",\"set:\\nDefine a local variable and set it's value\"]},\"1600\":{\"h\":\"Data-Type Reference\",\"t\":[\"This section is a glossary of data-types which Murex is natively aware.\",\"Most of the time you will not need to worry about typing in Murex as the shell is designed around productivity as opposed to strictness despite generally following a strictly typed design.\",\"Read the Language Tour for more detail on this topic.\"]},\"1601\":{\"h\":\"Definitions\",\"t\":[\"For clarity, it is worth explaining a couple of terms:\",\"\\\"Data-types\\\" in Murex are a description of the format of data. This means that while any stdio stream in UNIX will by \\\"bytes\\\", Murex might label that data as being a JSON string or CSV file (for example) which means any builtins that parse that stdio stream, for example to return the first 8 items, would need to parse those types differently. Thus a \\\"data-type\\\" in Murex is actually more than just a description of a data structure; it is a series of APIs to marshall and unmarshall data from complex file formats. This enables you to use the same command line tools to query any type of output.\",\"\\\"Primitive\\\" data-types refer to types that are the required by Murex to function. These will be int, float / number, bool, string, generic, and null.\"]},\"1602\":{\"h\":\"Feature Sets\",\"t\":[\"Since not all data formats are equal (for example the TOML file format doesn't support naked arrays where as JSON does), you may find some features missing in some data-types which are present in others. If in doubt then refer to the manual here or check the API manual for more details about specific hooks.\"]},\"1603\":{\"h\":\"Pages\",\"t\":[\"* (generic) : generic (primitive)\",\"bool: Boolean (primitive)\",\"commonlog: Apache httpd \\\"common\\\" log format\",\"csv: CSV files (and other character delimited tables)\",\"float (floating point number): Floating point number (primitive)\",\"hcl: HashiCorp Configuration Language (HCL)\",\"int: Whole number (primitive)\",\"json: JavaScript Object Notation (JSON)\",\"jsonc: Concatenated JSON\",\"jsonl: JSON Lines\",\"num (number): Floating point number (primitive)\",\"str (string) : string (primitive)\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"1604\":{\"h\":\"bool  - Data-Type Reference\",\"t\":[\"Boolean (primitive)\"]},\"1605\":{\"h\":\"Description\",\"t\":[\"A true or false value.\"]},\"1606\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"Unmarshal() Supported\"]},\"1607\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"num (number): Floating point number (primitive)\",\"str (string) :\\nstring (primitive)\"]},\"1608\":{\"h\":\"commonlog  - Data-Type Reference\",\"t\":[\"Apache httpd \\\"common\\\" log format\"]},\"1609\":{\"h\":\"Description\",\"t\":[\"Apache httpd supports a few different log formats. This Murex type is for parsing the \\\"common\\\" log format.\"]},\"1610\":{\"h\":\"Detail\",\"t\":[\"The code here is very rudimentary. If you have large log files or need more complex data querying then this data-type is probably not the right tool. Maybe try one of the following:\",\"Firesword - for command line analysis\",\"Plasmasword - exports fields to an sqlite3 or mysql database\"]},\"1611\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported though no unmarshalling is currently supported\",\"ReadArray() Supported. Each line is considered an index (like with str data type)\",\"ReadArrayWithType() Supported. Each line is considered an index with commonlog data type\",\"ReadIndex() Entire log file is read and then the indexes are derived from there\",\"ReadMap() Not supported, currently a work in progress\",\"ReadNotIndex() Entire log file is read and then the indexes are derived from there\"]},\"1612\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"str (string) :\\nstring (primitive)\"]},\"1613\":{\"h\":\"csv  - Data-Type Reference\",\"t\":[\"CSV files (and other character delimited tables)\"]},\"1614\":{\"h\":\"Description\",\"t\":[\"This data type can be used for not only CSV files but also TSV (tab separated) or any other exotic characters used as a delimiter.\"]},\"1615\":{\"h\":\"Detail\",\"t\":[\"The CSV parser is configurable via config (see link below for docs on how to use config)\",\"» config: -> [csv] { \\\"comment\\\": { \\\"Data-Type\\\": \\\"str\\\", \\\"Default\\\": \\\"#\\\", \\\"Description\\\": \\\"The prefix token for comments in a CSV table.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": \\\"#\\\" }, \\\"separator\\\": { \\\"Data-Type\\\": \\\"str\\\", \\\"Default\\\": \\\",\\\", \\\"Description\\\": \\\"The delimiter for records in a CSV file.\\\", \\\"Dynamic\\\": false, \\\"Global\\\": false, \\\"Value\\\": \\\",\\\" } } \"]},\"1616\":{\"h\":\"Default Associations\",\"t\":[\"Extension: csv\",\"MIME: application/csv\",\"MIME: application/x-csv\",\"MIME: text/csv\",\"MIME: text/x-csv\"]},\"1617\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Treats each new line as a new array element\",\"ReadArrayWithType() Treats each new line as a new array element, each element is mini csv file\",\"ReadIndex() Indexes treated as table coordinates\",\"ReadMap() Works against tables such as the output from ps -fe\",\"ReadNotIndex() Indexes treated as table coordinates\",\"Unmarshal() Supported\",\"WriteArray() Writes a new line per array element\"]},\"1618\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"config: Query or define Murex runtime settings\",\"format: Reformat one data-type into another data-type\",\"int: Whole number (primitive)\",\"jsonl: JSON Lines\",\"select: Inlining SQL into shell pipelines\",\"str (string) :\\nstring (primitive)\"]},\"1619\":{\"h\":\"float (floating point number) - Data-Type Reference\",\"t\":[\"Floating point number (primitive)\"]},\"1620\":{\"h\":\"Description\",\"t\":[\"Any number. To be precise, a full set of all IEEE-754 64-bit floating-point numbers.\",\"This data-type is going to be deprecated in favour of num (since it is literally the same underlying data-type anyway). Please do not use `float\"]},\"1621\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"Unmarshal() Supported\"]},\"1622\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"int: Whole number (primitive)\",\"num (number):\\nFloating point number (primitive)\"]},\"1623\":{\"h\":\"* (generic)  - Data-Type Reference\",\"t\":[\"generic (primitive)\"]},\"1624\":{\"h\":\"Description\",\"t\":[\"This is the default data type used when STDOUT is returned from any external executables.\"]},\"1625\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported. Tables columns are aligned\",\"ReadArray() Treats each new line as a new array element\",\"ReadArrayWithType() Treats each new line as a new array element, each element is *\",\"ReadIndex() Indexes treated as table coordinates\",\"ReadMap() Works against tables such as the output from ps -fe\",\"ReadNotIndex() Indexes treated as table coordinates\",\"Unmarshal() Supported\",\"WriteArray() Writes a new line per array element - tabs are treated as columns\"]},\"1626\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"int: Whole number (primitive)\",\"num (number): Floating point number (primitive)\",\"open: Open a file with a preferred handler\",\"runtime: Returns runtime information on the internal state of Murex\",\"str (string) :\\nstring (primitive)\"]},\"1627\":{\"h\":\"hcl  - Data-Type Reference\",\"t\":[\"HashiCorp Configuration Language (HCL)\"]},\"1628\":{\"h\":\"Description\",\"t\":[\"The description below is taken from the HCL git repository's README:\",\"HCL (HashiCorp Configuration Language) is a configuration language built by HashiCorp. The goal of HCL is to build a structured configuration language that is both human and machine friendly for use with command-line tools, but specifically targeted towards DevOps tools, servers, etc.\",\"HCL is also fully JSON compatible. That is, JSON can be used as completely valid input to a system expecting HCL. This helps makes systems interoperable with other systems.\",\"HCL support within Murex is pretty mature however it is not considered a primitive. Which means, while it is a recommended builtin which you should expect in most deployments of Murex, it's still an optional package and thus may not be present in some edge cases. This is because it relies on external source packages for the shell to compile.\"]},\"1629\":{\"h\":\"Examples\",\"t\":[\"terraform { required_version = \\\"~> 0.11.5\\\" } data \\\"aws_availability_zones\\\" \\\"available\\\" {} data \\\"aws_vpc\\\" \\\"vpc\\\" { id = \\\"${var.vpc_id}\\\" } data \\\"aws_route53_zone\\\" \\\"external\\\" { zone_id = \\\"${var.external_hosted_zone_id}\\\" } data \\\"aws_iam_policy_document\\\" \\\"assume_role_policy\\\" { statement { actions = [\\\"sts:AssumeRole\\\"] effect = \\\"Allow\\\" principals { identifiers = [\\\"ec2.amazonaws.com\\\"] type = \\\"Service\\\" } } } \",\"See the HashiCorp's documentation for HCL syntax.\"]},\"1630\":{\"h\":\"Default Associations\",\"t\":[\"Extension: hcl\",\"Extension: tf\",\"Extension: tfvars\",\"MIME: application/hcl\",\"MIME: application/x-hcl\",\"MIME: text/hcl\",\"MIME: text/x-hcl\"]},\"1631\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported via a JSON marshaller because HCL is designed to be written by humans but \\\"compiled\\\" into JSON\",\"ReadArray() Works with HCL arrays. Maps are converted into arrays\",\"ReadArrayWithType() Works with HCL arrays. Maps are converted into arrays. Elements data-type in Murex mirrors the HCL type of the element\",\"ReadIndex() Works against all properties in HCL\",\"ReadMap() Works with HCL maps\",\"ReadNotIndex() Works against all properties in HCL\",\"Unmarshal() Supported\",\"WriteArray() Works with HCL arrays\"]},\"1632\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"json: JavaScript Object Notation (JSON)\",\"jsonl: JSON Lines\",\"open: Open a file with a preferred handler\",\"pretty: Prettifies JSON to make it human readable\",\"runtime: Returns runtime information on the internal state of Murex\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"1633\":{\"h\":\"int  - Data-Type Reference\",\"t\":[\"Whole number (primitive)\"]},\"1634\":{\"h\":\"Description\",\"t\":[\"An integer is a whole number (eg 1, 2, 3, 4) rather than one with a decimal point (such as 1.1).\",\"Integers in Murex are sized based on the bit (or word) size of the target CPU.\",\"A 386, ARMv6 or other 32bit build of Murex would see the range of from -2147483648 (negative) through 2147483647 (positive).\",\"AMD64 or other 64bit built of Murex would see the range from -9223372036854775808 (negative) through 9223372036854775807 (positive).\",\"Unless you specifically know you only want whole numbers, it is recommended that you use the default numeric data-type: num.\"]},\"1635\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"Unmarshal() Supported\"]},\"1636\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"num (number): Floating point number (primitive)\",\"open: Open a file with a preferred handler\",\"runtime: Returns runtime information on the internal state of Murex\",\"str (string) :\\nstring (primitive)\"]},\"1637\":{\"h\":\"json  - Data-Type Reference\",\"t\":[\"JavaScript Object Notation (JSON)\"]},\"1638\":{\"h\":\"Description\",\"t\":[\"JSON is a structured data-type within Murex. It is the standard format for all structured data within Murex however other formats such as YAML, TOML and CSV are equally first class citizens.\"]},\"1639\":{\"h\":\"Examples\",\"t\":[\"Example JSON document taken from Wikipedia\",\"{ \\\"firstName\\\": \\\"John\\\", \\\"lastName\\\": \\\"Smith\\\", \\\"isAlive\\\": true, \\\"age\\\": 27, \\\"address\\\": { \\\"streetAddress\\\": \\\"21 2nd Street\\\", \\\"city\\\": \\\"New York\\\", \\\"state\\\": \\\"NY\\\", \\\"postalCode\\\": \\\"10021-3100\\\" }, \\\"phoneNumbers\\\": [ { \\\"type\\\": \\\"home\\\", \\\"number\\\": \\\"212 555-1234\\\" }, { \\\"type\\\": \\\"office\\\", \\\"number\\\": \\\"646 555-4567\\\" }, { \\\"type\\\": \\\"mobile\\\", \\\"number\\\": \\\"123 456-7890\\\" } ], \\\"children\\\": [], \\\"spouse\\\": null } \"]},\"1640\":{\"h\":\"Detail\"},\"1641\":{\"h\":\"Tips when writing JSON inside for loops\",\"t\":[\"One of the drawbacks (or maybe advantages, depending on your perspective) of JSON is that parsers generally expect a complete file for processing in that the JSON specification requires closing tags for every opening tag. This means it's not always suitable for streaming. For example\",\"» ja [1..3] -> foreach i { out ({ \\\"$i\\\": $i }) } { \\\"1\\\": 1 } { \\\"2\\\": 2 } { \\\"3\\\": 3 } \",\"What does this even mean and how can you build a JSON file up sequentially?\",\"One answer if to write the output in a streaming file format and convert back to JSON\",\"» ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } - \\\"1\\\": 1 - \\\"2\\\": 2 - \\\"3\\\": 3 » ja [1..3] -> foreach i { out (- \\\"$i\\\": $i) } -> cast yaml -> format json [ { \\\"1\\\": 1 }, { \\\"2\\\": 2 }, { \\\"3\\\": 3 } ] \",\"What if I'm returning an object rather than writing one?\",\"The problem with building JSON structures from existing structures is that you can quickly end up with invalid JSON due to the specifications strict use of commas.\",\"For example in the code below, each item block is it's own object and there are no [ ... ] encapsulating them to denote it is an array of objects, nor are the objects terminated by a comma.\",\"» config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display the interactive shell's hint text helper. Please note, even when this is disabled, it will still appear when used for regexp searches and other readline-specific functions\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } { \\\"Data-Type\\\": \\\"block\\\", \\\"Default\\\": \\\"{ progress $PID }\\\", \\\"Description\\\": \\\"Murex function to execute when an `exec` process is stopped\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"{ progress $PID }\\\" } { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"ANSI escape sequences in Murex builtins to highlight syntax errors, history completions, {SGR} variables, etc\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true } ... \",\"Luckily JSON also has it's own streaming format: JSON lines (jsonl). We can cast this output as jsonl then format it back into valid JSON:\",\"» config -> [ shell ] -> formap k v { $v -> alter /Foo Bar } -> cast jsonl -> format json [ { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Write shell history (interactive shell) to disk\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, { \\\"Data-Type\\\": \\\"int\\\", \\\"Default\\\": 4, \\\"Description\\\": \\\"Maximum number of lines with auto-completion suggestions to display\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": \\\"6\\\" }, { \\\"Data-Type\\\": \\\"bool\\\", \\\"Default\\\": true, \\\"Description\\\": \\\"Display some status information about the stop process when ctrl+z is pressed (conceptually similar to ctrl+t / SIGINFO on some BSDs)\\\", \\\"Dynamic\\\": false, \\\"Foo\\\": \\\"Bar\\\", \\\"Global\\\": true, \\\"Value\\\": true }, ... \"]},\"1642\":{\"h\":\"foreach will automatically cast it's output as jsonl if it's STDIN type is json\",\"t\":[\"» ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } Hello Tom Hello Dick Hello Sally » ja [Tom,Dick,Sally] -> foreach name { out Hello $name } -> debug -> [[ /Data-Type/Murex ]] jsonl » ja: [Tom,Dick,Sally] -> foreach: name { out Hello $name } -> format: json [ \\\"Hello Tom\\\", \\\"Hello Dick\\\", \\\"Hello Sally\\\" ] \"]},\"1643\":{\"h\":\"Default Associations\",\"t\":[\"Extension: json\",\"MIME: application/json\",\"MIME: application/x-json\",\"MIME: text/json\",\"MIME: text/x-json\"]},\"1644\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Writes minified JSON when no TTY detected and human readable JSON when stdout is a TTY\",\"ReadArray() Works with JSON arrays. Maps are converted into arrays\",\"ReadArrayWithType() Works with JSON arrays. Maps are converted into arrays. Elements data-type in Murex mirrors the JSON type of the element\",\"ReadIndex() Works against all properties in JSON\",\"ReadMap() Works with JSON maps\",\"ReadNotIndex() Works against all properties in JSON\",\"Unmarshal() Supported\",\"WriteArray() Works with JSON arrays\"]},\"1645\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadArrayWithType() (type): Read from a data type one array element at a time and return the elements contents and data type\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"hcl: HashiCorp Configuration Language (HCL)\",\"jsonc: Concatenated JSON\",\"jsonl: JSON Lines\",\"lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"lang.ArrayWithTypeTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array with data type included\",\"open: Open a file with a preferred handler\",\"pretty: Prettifies JSON to make it human readable\",\"runtime: Returns runtime information on the internal state of Murex\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"1646\":{\"h\":\"jsonc  - Data-Type Reference\",\"t\":[\"Concatenated JSON\"]},\"1647\":{\"h\":\"Description\",\"t\":[\"The following description is taken from Wikipedia:\",\"Concatenated JSON streaming allows the sender to simply write each JSON object into the stream with no delimiters. It relies on the receiver using a parser that can recognize and emit each JSON object as the terminating character is parsed. Concatenated JSON isn't a new format, it's simply a name for streaming multiple JSON objects without any delimiters.\",\"The advantage of this format is that it can handle JSON objects that have been formatted with embedded newline characters, e.g., pretty-printed for human readability. For example, these two inputs are both valid and produce the same output:\"]},\"1648\":{\"h\":\"Single line concatenated JSON\",\"t\":[\"{\\\"some\\\":\\\"thing\\\\n\\\"}{\\\"may\\\":{\\\"include\\\":\\\"nested\\\",\\\"objects\\\":[\\\"and\\\",\\\"arrays\\\"]}} \"]},\"1649\":{\"h\":\"Multi-line concatenated JSON\",\"t\":[\"{ \\\"some\\\": \\\"thing\\\\n\\\" } { \\\"may\\\": { \\\"include\\\": \\\"nested\\\", \\\"objects\\\": [ \\\"and\\\", \\\"arrays\\\" ] } } \"]},\"1650\":{\"h\":\"Examples\",\"t\":[\"Because of the similiaries with jsonlines (jsonl), the examples here will focus on jsonlines examples. However concatenated JSON doesn't need a new line separator. So the examples below could all be concatenated into one long line.\",\"Example JSON lines documents taken from jsonlines.org\"]},\"1651\":{\"h\":\"Tabulated data\",\"t\":[\"[\\\"Name\\\", \\\"Session\\\", \\\"Score\\\", \\\"Completed\\\"] [\\\"Gilbert\\\", \\\"2013\\\", 24, true] [\\\"Alexa\\\", \\\"2013\\\", 29, true] [\\\"May\\\", \\\"2012B\\\", 14, false] [\\\"Deloise\\\", \\\"2012A\\\", 19, true] \",\"This format is equatable to generic and csv.\"]},\"1652\":{\"h\":\"Nested objects\",\"t\":[\"{\\\"name\\\": \\\"Gilbert\\\", \\\"wins\\\": [[\\\"straight\\\", \\\"7♣\\\"], [\\\"one pair\\\", \\\"10♥\\\"]]} {\\\"name\\\": \\\"Alexa\\\", \\\"wins\\\": [[\\\"two pair\\\", \\\"4♠\\\"], [\\\"two pair\\\", \\\"9♠\\\"]]} {\\\"name\\\": \\\"May\\\", \\\"wins\\\": []} {\\\"name\\\": \\\"Deloise\\\", \\\"wins\\\": [[\\\"three of a kind\\\", \\\"5♣\\\"]]} \"]},\"1653\":{\"h\":\"Detail\"},\"1654\":{\"h\":\"Similarities with jsonl\",\"t\":[\"The advantage of concatenated JSON is that it supports everything jsonlines supports but without the dependency of a new line as a separator.\",\"Eventually it is planned that this Murex data-type will replace jsonlines and possibly even the regular JSON parser. However this concatenated JSON parser currently requires reading the entire file first before parsing whereas jsonlines can read one line at a time. Which makes jsonlines a better data- type for pipelining super large documents. For this reason (and that this parser is still in beta), it is shipped as an additional data-type.\"]},\"1655\":{\"h\":\"Default Associations\",\"t\":[\"Extension: concatenated-json\",\"Extension: json-seq\",\"Extension: jsonc\",\"Extension: jsonconcat\",\"Extension: jsons\",\"Extension: jsonseq\",\"MIME: application/concatenated-json\",\"MIME: application/json-seq\",\"MIME: application/jsonc\",\"MIME: application/jsonconcat\",\"MIME: application/jsonseq\",\"MIME: application/x-concatenated-json\",\"MIME: application/x-json-seq\",\"MIME: application/x-jsonc\",\"MIME: application/x-jsonconcat\",\"MIME: application/x-jsonseq\",\"MIME: text/concatenated-json\",\"MIME: text/concatenated-json\",\"MIME: text/json-seq\",\"MIME: text/jsonc\",\"MIME: text/jsonconcat\",\"MIME: text/jsonseq\",\"MIME: text/x-json-seq\",\"MIME: text/x-jsonc\",\"MIME: text/x-jsonconcat\",\"MIME: text/x-jsonseq\"]},\"1656\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Works with JSON arrays. Maps are converted into arrays\",\"ReadArrayWithType() Works with JSON arrays. Maps are converted into arrays. Element data type is json\",\"ReadIndex() Works against all properties in JSON\",\"ReadMap() Not currently supported.\",\"ReadNotIndex() Works against all properties in JSON\",\"Unmarshal() Supported\",\"WriteArray() Supported\"]},\"1657\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"csv: CSV files (and other character delimited tables)\",\"foreach: Iterate through an array\",\"format: Reformat one data-type into another data-type\",\"hcl: HashiCorp Configuration Language (HCL)\",\"json: JavaScript Object Notation (JSON)\",\"jsonl: JSON Lines\",\"open: Open a file with a preferred handler\",\"pretty: Prettifies JSON to make it human readable\",\"runtime: Returns runtime information on the internal state of Murex\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"1658\":{\"h\":\"jsonl  - Data-Type Reference\",\"t\":[\"JSON Lines\"]},\"1659\":{\"h\":\"Description\",\"t\":[\"The following description is taken from jsonlines.org:\",\"JSON Lines is a convenient format for storing structured data that may be processed one record at a time. It works well with unix-style text processing tools and shell pipelines. It's a great format for log files. It's also a flexible format for passing messages between cooperating processes.\"]},\"1660\":{\"h\":\"Examples\",\"t\":[\"Example JSON lines documents taken from jsonlines.org\"]},\"1661\":{\"h\":\"Tabulated data\",\"t\":[\"[\\\"Name\\\", \\\"Session\\\", \\\"Score\\\", \\\"Completed\\\"] [\\\"Gilbert\\\", \\\"2013\\\", 24, true] [\\\"Alexa\\\", \\\"2013\\\", 29, true] [\\\"May\\\", \\\"2012B\\\", 14, false] [\\\"Deloise\\\", \\\"2012A\\\", 19, true] \",\"This format is equatable to generic and csv.\"]},\"1662\":{\"h\":\"Nested objects\",\"t\":[\"{\\\"name\\\": \\\"Gilbert\\\", \\\"wins\\\": [[\\\"straight\\\", \\\"7♣\\\"], [\\\"one pair\\\", \\\"10♥\\\"]]} {\\\"name\\\": \\\"Alexa\\\", \\\"wins\\\": [[\\\"two pair\\\", \\\"4♠\\\"], [\\\"two pair\\\", \\\"9♠\\\"]]} {\\\"name\\\": \\\"May\\\", \\\"wins\\\": []} {\\\"name\\\": \\\"Deloise\\\", \\\"wins\\\": [[\\\"three of a kind\\\", \\\"5♣\\\"]]} \"]},\"1663\":{\"h\":\"Detail\"},\"1664\":{\"h\":\"Concatenated JSON\",\"t\":[\"Technically the jsonl Unmarshal() method supports Concatenated JSON, as described on Wikipedia:\",\"Concatenated JSON streaming allows the sender to simply write each JSON object into the stream with no delimiters. It relies on the receiver using a parser that can recognize and emit each JSON object as the terminating character is parsed. Concatenated JSON isn't a new format, it's simply a name for streaming multiple JSON objects without any delimiters.\",\"The advantage of this format is that it can handle JSON objects that have been formatted with embedded newline characters, e.g., pretty-printed for human readability. For example, these two inputs are both valid and produce the same output:\"]},\"1665\":{\"h\":\"Single line concatenated JSON\",\"t\":[\"{\\\"some\\\":\\\"thing\\\\n\\\"}{\\\"may\\\":{\\\"include\\\":\\\"nested\\\",\\\"objects\\\":[\\\"and\\\",\\\"arrays\\\"]}} \"]},\"1666\":{\"h\":\"Multi-line concatenated JSON\",\"t\":[\"{ \\\"some\\\": \\\"thing\\\\n\\\" } { \\\"may\\\": { \\\"include\\\": \\\"nested\\\", \\\"objects\\\": [ \\\"and\\\", \\\"arrays\\\" ] } } \",\"...however in Murex's case, only single line concatenated JSON files (example 1) are supported; and that is only supported to cover some edge cases when writing JSON lines and a new line character isn't included. The primary example might be when generating JSON lines from inside a for loop.\",\"This is resolved in the new data-type parser jsonc (Concatenated JSON). See line below.\"]},\"1667\":{\"h\":\"More information\",\"t\":[\"This format is sometimes also referred to as LDJSON and NDJSON, as described on Wikipedia.\",\"Murex's json data-type document also describes some use cases for JSON lines.\"]},\"1668\":{\"h\":\"Default Associations\",\"t\":[\"Extension: json-lines\",\"Extension: jsonl\",\"Extension: jsonlines\",\"Extension: ldjson\",\"Extension: murex_history\",\"Extension: ndjson\",\"MIME: application/json-lines\",\"MIME: application/jsonl\",\"MIME: application/jsonlines\",\"MIME: application/ldjson\",\"MIME: application/ndjson\",\"MIME: application/x-json-lines\",\"MIME: application/x-jsonl\",\"MIME: application/x-jsonlines\",\"MIME: application/x-ldjson\",\"MIME: application/x-ndjson\",\"MIME: text/json-lines\",\"MIME: text/jsonl\",\"MIME: text/jsonlines\",\"MIME: text/ldjson\",\"MIME: text/ndjson\",\"MIME: text/x-json-lines\",\"MIME: text/x-jsonl\",\"MIME: text/x-jsonlines\",\"MIME: text/x-ldjson\",\"MIME: text/x-ndjson\"]},\"1669\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Works with JSON arrays. Maps are converted into arrays\",\"ReadArrayWithType() Works with JSON arrays. Maps are converted into arrays. Element data type is json\",\"ReadIndex() Works against all properties in JSON\",\"ReadMap() Not currently supported.\",\"ReadNotIndex() Works against all properties in JSON\",\"Unmarshal() Supported\",\"WriteArray() Supported\"]},\"1670\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"csv: CSV files (and other character delimited tables)\",\"foreach: Iterate through an array\",\"format: Reformat one data-type into another data-type\",\"hcl: HashiCorp Configuration Language (HCL)\",\"json: JavaScript Object Notation (JSON)\",\"jsonc: Concatenated JSON\",\"open: Open a file with a preferred handler\",\"pretty: Prettifies JSON to make it human readable\",\"runtime: Returns runtime information on the internal state of Murex\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"mxjson:\\nMurex-flavoured JSON (deprecated)\"]},\"1671\":{\"h\":\"mxjson - Data-Type Reference\",\"t\":[\"Murex-flavoured JSON (deprecated)\"]},\"1672\":{\"h\":\"Description\",\"t\":[\"This format has been deprecated in favour of %{} constructors.\",\"mxjson is an extension to JSON designed to integrate more seamlessly when use as a configuration file. Thus mxjson supports comments and Murex code blocks embedded into the JSON schema.\",\"mxjson is a format that is pre-parsed into a valid JSON format.\",\"mxjson isn't a Murex data-type in that you cannot marshal and unmarshal mxjson files. Currently it is a format that is only supported by a small subset of Murex builtins (eg config and autocomplete) where config might embed Murex code blocks.\",\"mxjson features the following enhancements:\"]},\"1673\":{\"h\":\"Line Comments\",\"t\":[\"Line comments are prefixed with a 'hash', #, just like with regular Murex code.\"]},\"1674\":{\"h\":\"Block Quotation\",\"t\":[\"Code blocks are quoted with (, ). For example, below \\\"ExampleFunction\\\" uses the ({ block quote }) method.\",\"{ \\\"ExampleFunction\\\": ({ out: \\\"This is an example Murex function\\\" if { =1==2 } then { err: \\\"The laws of the universe are broken\\\" } }) } \",\"Any block quoted by this method will be converted to the following valid JSON:\",\"{ \\\"ExampleFunction\\\": \\\"\\\\n out: \\\\\\\"This is an example Murex function\\\\\\\"\\\\n if { =1==2 } then {\\\\n err: \\\\\\\"The laws of the universe are broken\\\\\\\"\\\\n }\\\" } \"]},\"1675\":{\"h\":\"See Also\",\"t\":[\"Brace Quote (%(, )) Tokens: Initiates or terminates a string (variables expanded)\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"Create array (%[]) constructor: Quickly generate arrays\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"autocomplete: Set definitions for tab-completion in the command line\",\"cast: Alters the data type of the previous function without altering it's output\",\"config: Query or define Murex runtime settings\",\"format: Reformat one data-type into another data-type\",\"hcl: HashiCorp Configuration Language (HCL)\",\"json: JavaScript Object Notation (JSON)\",\"jsonc: Concatenated JSON\",\"jsonl: JSON Lines\",\"open: Open a file with a preferred handler\",\"pretty: Prettifies JSON to make it human readable\",\"runtime: Returns runtime information on the internal state of Murex\",\"toml: Tom's Obvious, Minimal Language (TOML)\",\"yaml: YAML Ain't Markup Language (YAML)\",\"create-objects:\"]},\"1676\":{\"h\":\"num (number) - Data-Type Reference\",\"t\":[\"Floating point number (primitive)\"]},\"1677\":{\"h\":\"Description\",\"t\":[\"Any number. To be precise, a full set of all IEEE-754 64-bit floating-point numbers.\",\"Unless you specifically know you only want whole numbers, it is recommended that you use this as your default numeric data-type as opposed to int.\"]},\"1678\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"Unmashal() Supported\"]},\"1679\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"int: Whole number (primitive)\",\"open: Open a file with a preferred handler\",\"runtime: Returns runtime information on the internal state of Murex\",\"str (string) :\\nstring (primitive)\"]},\"1680\":{\"h\":\"Murex Shell Docs\"},\"1681\":{\"h\":\"Data-Type Reference: path (string)\",\"t\":[\"path data type\"]},\"1682\":{\"h\":\"Description\",\"t\":[\"This type is modelled closely on generic but is more tailored for textual (non-tabulated) data.\"]},\"1683\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Treats each new directory as a new array element\",\"ReadArrayWithType() Treats each directory as a new array element, each array element is str\",\"ReadIndex() Indexes treated as a path separated list\",\"ReadMap() Treats each new directory as a numbered map element\",\"Unmarshal() Supported\",\"WriteArray() Writes a new path, each array element as a directory\"]},\"1684\":{\"h\":\"See Also\",\"t\":[\"str (string) :\\nstring (primitive)\"]},\"1685\":{\"h\":\"str (string)  - Data-Type Reference\",\"t\":[\"string (primitive)\"]},\"1686\":{\"h\":\"Description\",\"t\":[\"This type is modelled closely on generic but is more tailored for textual (non-tabulated) data.\"]},\"1687\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Treats each new line as a new array element\",\"ReadArrayWithType() Treats each new line as a new array element, each array element is str\",\"ReadIndex() Indexes treated as a new line separated list\",\"ReadMap() Treats each new line as a numbered map element\",\"ReadNotIndex() Indexes treated as a new line separated list\",\"Unmarshal() Supported\",\"WriteArray() Writes a new line per array element\"]},\"1688\":{\"h\":\"See Also\",\"t\":[\"* (generic) : generic (primitive)\",\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"int: Whole number (primitive)\",\"num (number): Floating point number (primitive)\",\"open: Open a file with a preferred handler\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1689\":{\"h\":\"toml  - Data-Type Reference\",\"t\":[\"Tom's Obvious, Minimal Language (TOML)\"]},\"1690\":{\"h\":\"Description\",\"t\":[\"TOML support within Murex is pretty mature however it is not considered a primitive. Which means, while it is a recommended builtin which you should expect in most deployments of Murex, it's still an optional package and thus may not be present in some edge cases. This is because it relies on external source packages for the shell to compile.\"]},\"1691\":{\"h\":\"Examples\",\"t\":[\"Example TOML document taken from Wikipedia\",\"# This is a TOML document. title = \\\"TOML Example\\\" [owner] name = \\\"Tom Preston-Werner\\\" dob = 1979-05-27T07:32:00-08:00 # First class dates [database] server = \\\"192.168.1.1\\\" ports = [ 8001, 8001, 8002 ] connection_max = 5000 enabled = true [servers] # Indentation (tabs and/or spaces) is allowed but not required [servers.alpha] ip = \\\"10.0.0.1\\\" dc = \\\"eqdc10\\\" [servers.beta] ip = \\\"10.0.0.2\\\" dc = \\\"eqdc10\\\" [clients] data = [ [\\\"gamma\\\", \\\"delta\\\"], [1, 2] ] # Line breaks are OK when inside arrays hosts = [ \\\"alpha\\\", \\\"omega\\\" ] \"]},\"1692\":{\"h\":\"Default Associations\",\"t\":[\"Extension: toml\",\"MIME: application/toml\",\"MIME: application/x-toml\",\"MIME: text/toml\",\"MIME: text/x-toml\"]},\"1693\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Hook supported albeit TOML doesn't support naked arrays\",\"ReadArrayWithType() Hook supported albeit TOML doesn't support naked arrays\",\"ReadIndex() Works against all properties in TOML\",\"ReadNotIndex() Works against all properties in TOML\",\"Unmarshal() Supported\"]},\"1694\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"json: JavaScript Object Notation (JSON)\",\"jsonl: JSON Lines\",\"open: Open a file with a preferred handler\",\"runtime: Returns runtime information on the internal state of Murex\",\"yaml:\\nYAML Ain't Markup Language (YAML)\"]},\"1695\":{\"h\":\"yaml  - Data-Type Reference\",\"t\":[\"YAML Ain't Markup Language (YAML)\"]},\"1696\":{\"h\":\"Description\",\"t\":[\"YAML support within Murex is pretty mature however it is not considered a primitive. Which means, while it is a recommended builtin which you should expect in most deployments of Murex, it's still an optional package and thus may not be present in some edge cases. This is because it relies on external source packages for the shell to compile.\"]},\"1697\":{\"h\":\"Default Associations\",\"t\":[\"Extension: yaml\",\"Extension: yml\",\"MIME: application/x-yaml\",\"MIME: application/yaml\",\"MIME: text/x-yaml\",\"MIME: text/yaml\"]},\"1698\":{\"h\":\"Supported Hooks\",\"t\":[\"Marshal() Supported\",\"ReadArray() Works with YAML arrays. Maps are converted into arrays\",\"ReadArrayWithType() Works with YAML arrays. Maps are converted into arrays. Element type returned in Murex should match element type in YAML\",\"ReadIndex() Works against all properties in YAML\",\"ReadMap() Works with YAML maps\",\"ReadNotIndex() Works against all properties in YAML\",\"Unmarshal() Supported\",\"WriteArray() Works with YAML arrays\"]},\"1699\":{\"h\":\"See Also\",\"t\":[\"Marshal() (type): Converts structured memory into a structured file format (eg for stdio)\",\"ReadArray() (type): Read from a data type one array element at a time\",\"ReadIndex() (type): Data type handler for the index, [, builtin\",\"ReadMap() (type): Treat data type as a key/value structure and read its contents\",\"ReadNotIndex() (type): Data type handler for the bang-prefixed index, ![, builtin\",\"Unmarshal() (type): Converts a structured file format into structured memory\",\"WriteArray() (type): Write a data type, one array element at a time\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"cast: Alters the data type of the previous function without altering it's output\",\"format: Reformat one data-type into another data-type\",\"json: JavaScript Object Notation (JSON)\",\"jsonl: JSON Lines\",\"lang.ArrayTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array\",\"lang.ArrayWithTypeTemplate() (template API): Unmarshals a data type into a Go struct and returns the results as an array with data type included\",\"open: Open a file with a preferred handler\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1700\":{\"h\":\"ANSI Constants - User Guide\",\"t\":[\"Infixed constants that return ANSI escape sequences\",\"ANSI Constants is a Murex convention of passing ANSI escape sequences into strings. It uses the {} notation with the constant name placed in between two curly braces. eg {GREEN}.\"]},\"1701\":{\"h\":\"Constants\",\"t\":[\"Rather than duplicate the constants from source, and risk the documentation and implementation drifting, this document will embed the source directly below.\",\"package ansi var constants = map[string][]byte{ // ascii control codes \\\"^@\\\": {0}, \\\"^A\\\": {1}, \\\"^B\\\": {2}, \\\"^C\\\": {3}, \\\"^D\\\": {4}, \\\"^E\\\": {5}, \\\"^F\\\": {6}, \\\"^G\\\": {7}, \\\"^H\\\": {8}, \\\"^I\\\": {9}, \\\"^J\\\": {10}, \\\"^K\\\": {11}, \\\"^L\\\": {12}, \\\"^M\\\": {13}, \\\"^N\\\": {14}, \\\"^O\\\": {15}, \\\"^P\\\": {16}, \\\"^Q\\\": {17}, \\\"^R\\\": {18}, \\\"^S\\\": {19}, \\\"^T\\\": {20}, \\\"^U\\\": {21}, \\\"^V\\\": {22}, \\\"^W\\\": {23}, \\\"^X\\\": {24}, \\\"^Y\\\": {25}, \\\"^Z\\\": {26}, \\\"^[\\\": {27}, `^/`: {28}, \\\"^]\\\": {29}, \\\"^^\\\": {30}, \\\"^_\\\": {31}, \\\"^?\\\": {127}, // ascii human readable \\\"EOF\\\": {4}, \\\"EOT\\\": {4}, \\\"BELL\\\": {7}, \\\"BS-ISO\\\": {8}, \\\"LF\\\": {10}, \\\"CR\\\": {13}, \\\"CRLF\\\": {13, 10}, \\\"ESC\\\": {27}, \\\"ESCAPE\\\": {27}, \\\"BS-ASCII\\\": {127}, // ansi escape sequences \\\"CURSOR-UP\\\": {27, 91, 65}, \\\"CURSOR-DOWN\\\": {27, 91, 66}, \\\"CURSOR-FORWARDS\\\": {27, 91, 67}, \\\"CURSOR-BACKWARDS\\\": {27, 91, 68}, \\\"CURSOR-HOME\\\": {27, 91, 72}, \\\"CURSOR-HOME-VT100\\\": {27, 91, 49, 126}, \\\"CURSOR-END\\\": {27, 91, 70}, \\\"CURSOR-END-VT100\\\": {27, 91, 52, 126}, \\\"INS\\\": {27, 91, 50, 126}, \\\"INSERT\\\": {27, 91, 50, 126}, \\\"DEL\\\": {27, 91, 51, 126}, \\\"DELETE\\\": {27, 91, 51, 126}, // function keys \\\"F1-VT100\\\": {27, 79, 80}, \\\"F2-VT100\\\": {27, 79, 81}, \\\"F3-VT100\\\": {27, 79, 82}, \\\"F4-VT100\\\": {27, 79, 83}, \\\"F1\\\": {27, 91, 49, 49, 126}, \\\"F2\\\": {27, 91, 49, 50, 126}, \\\"F3\\\": {27, 91, 49, 51, 126}, \\\"F4\\\": {27, 91, 49, 52, 126}, \\\"F5\\\": {27, 91, 49, 53, 126}, \\\"F6\\\": {27, 91, 49, 55, 126}, \\\"F7\\\": {27, 91, 49, 56, 126}, \\\"F8\\\": {27, 91, 49, 57, 126}, \\\"F9\\\": {27, 91, 50, 48, 126}, \\\"F10\\\": {27, 91, 50, 49, 126}, \\\"F11\\\": {27, 91, 50, 51, 126}, \\\"F12\\\": {27, 91, 50, 52, 126}, // alt-num \\\"ALT-0\\\": {27, 48}, \\\"ALT-1\\\": {27, 49}, \\\"ALT-2\\\": {27, 50}, \\\"ALT-3\\\": {27, 51}, \\\"ALT-4\\\": {27, 52}, \\\"ALT-5\\\": {27, 53}, \\\"ALT-6\\\": {27, 54}, \\\"ALT-7\\\": {27, 55}, \\\"ALT-8\\\": {27, 56}, \\\"ALT-9\\\": {27, 57}, } var sgr = map[string][]byte{ // text effects \\\"RESET\\\": {27, 91, 48, 109}, \\\"BOLD\\\": {27, 91, 49, 109}, \\\"ITALIC\\\": {27, 91, 51, 109}, // Not commonly supported in terminals \\\"UNDERSCORE\\\": {27, 91, 52, 109}, \\\"UNDERLINE\\\": {27, 91, 52, 109}, \\\"UNDEROFF\\\": {27, 91, '2', '4', 109}, \\\"BLINK\\\": {27, 91, 53, 109}, \\\"INVERT\\\": {27, 91, 55, 109}, \\\"ALT-FONT-1\\\": {27, 91, 49, 49, 109}, // Not commonly supported in terminals \\\"ALT-FONT-2\\\": {27, 91, 49, 50, 109}, // Not commonly supported in terminals \\\"ALT-FONT-3\\\": {27, 91, 49, 51, 109}, // Not commonly supported in terminals \\\"ALT-FONT-4\\\": {27, 91, 49, 52, 109}, // Not commonly supported in terminals \\\"ALT-FONT-5\\\": {27, 91, 49, 53, 109}, // Not commonly supported in terminals \\\"ALT-FONT-6\\\": {27, 91, 49, 54, 109}, // Not commonly supported in terminals \\\"ALT-FONT-7\\\": {27, 91, 49, 55, 109}, // Not commonly supported in terminals \\\"ALT-FONT-8\\\": {27, 91, 49, 56, 109}, // Not commonly supported in terminals \\\"ALT-FONT-9\\\": {27, 91, 49, 57, 109}, // Not commonly supported in terminals \\\"FRAKTUR\\\": {27, 91, 50, 48, 109}, // Not commonly supported in terminals // text colours \\\"BLACK\\\": {27, 91, 51, 48, 109}, \\\"RED\\\": {27, 91, 51, 49, 109}, \\\"GREEN\\\": {27, 91, 51, 50, 109}, \\\"YELLOW\\\": {27, 91, 51, 51, 109}, \\\"BLUE\\\": {27, 91, 51, 52, 109}, \\\"MAGENTA\\\": {27, 91, 51, 53, 109}, \\\"CYAN\\\": {27, 91, 51, 54, 109}, \\\"WHITE\\\": {27, 91, 51, 55, 109}, \\\"BLACK-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"RED-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"GREEN-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"YELLOW-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"BLUE-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"MAGENTA-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"CYAN-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, \\\"WHITE-BRIGHT\\\": {27, 91, 49, 59, 51, 48, 109}, // background colours \\\"BG-BLACK\\\": {27, 91, 52, 48, 109}, \\\"BG-RED\\\": {27, 91, 52, 49, 109}, \\\"BG-GREEN\\\": {27, 91, 52, 50, 109}, \\\"BG-YELLOW\\\": {27, 91, 52, 51, 109}, \\\"BG-BLUE\\\": {27, 91, 52, 52, 109}, \\\"BG-MAGENTA\\\": {27, 91, 52, 53, 109}, \\\"BG-CYAN\\\": {27, 91, 52, 54, 109}, \\\"BG-WHITE\\\": {27, 91, 52, 55, 109}, \\\"BG-BLACK-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-RED-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-GREEN-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-YELLOW-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-BLUE-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-MAGENTA-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-CYAN-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, \\\"BG-WHITE-BRIGHT\\\": {27, 91, 49, 59, 52, 48, 109}, } \"]},\"1702\":{\"h\":\"How To Read The Code Above\",\"t\":[\"Each line will look something a little like\",\"\\\"GREEN\\\": {27, 91, 51, 50, 109}, \",\"The part within quotes is the constant name, and the part that follows is the sequence of bytes that are infixed.\",\"So the example above will replace {GREEN} from within a string with the byte values of 27, 91, 51, 50 and 109 (in that order).\"]},\"1703\":{\"h\":\"Unsupported Constants\",\"t\":[\"If a constant does not exist in the above code, then the infix string is left unedited.\",\"# Green spelt correctly » out: \\\"{GREEN}PASSED{RESET}\\\" PASSED # Green spelt incorrectly (ie so that it doesn't exist as a valid constant) » out: \\\"{GREEEEN}PASSED{RESET}\\\" {GREEEEN}PASSED \"]},\"1704\":{\"h\":\"Enabling / Disabling ANSI Escape Sequences\",\"t\":[\"These sequences are enabled by default. To disable run the following:\",\"» config: set shell color false \",\"You will need to add this to your Murex profile, ~/.murex_profile to make it persistent.\"]},\"1705\":{\"h\":\"See Also\",\"t\":[\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"( (brace quote): Write a string to the STDOUT without new line\",\"err: Print a line to the STDERR\",\"out: Print a string to the STDOUT with a trailing new line character\",\"tout:\\nPrint a string to the STDOUT and set it's data-type\"]},\"1706\":{\"h\":\"Bang Prefix - User Guide\",\"t\":[\"Bang prefixing to reverse default actions\",\"Some builtins support a bang prefix, !, which provides a shorthand negative action to default behavior. For example, set defines a variable where as !set will undefine a variable.\",\"Sometimes the shortcut will be logical, like a not operator, as is the case with and where typically each result has to equal true normally or false if used in !and.\",\"Sometimes the shortcut will be more philosophical, such as with config where normal operations is to query or set configuration but !config resets the configuration to defaults (thus operating the same as config default).\",\"Please read the respecting commands doc for details on whether it supports a bang prefix and what the behavior of that prefix is.\"]},\"1707\":{\"h\":\"See Also\",\"t\":[\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"Reserved Variables: Special variables reserved by Murex\",\"! (not): Reads the STDIN and exit number from previous process and not's it's condition\",\"and: Returns true or false depending on whether multiple conditions are met\",\"config: Query or define Murex runtime settings\",\"or: Returns true or false depending on whether one code-block out of multiple ones supplied is successful or unsuccessful.\",\"set:\\nDefine a local variable and set it's value\"]},\"1708\":{\"h\":\"Code Block Parsing - User Guide\",\"t\":[\"Overview of how code blocks are parsed\",\"The murex parser creates ASTs ahead of interpreting each block of code. However the AST is only generated for a block at a time. Take this sample code:\",\"function example { # An example function if { $ENVVAR } then { out: 'foobar' } out: 'Finished!' } \",\"When that code is run function is executed with the parameters example and { ... } but the contents of { ... } isn't converted into ASTs until someone calls example elsewhere in the shell.\",\"When example (the Murex function defined above) is executed the parser will then generate AST of the commands inside said function but not any blocks that are associated with those functions. eg the AST would look something like this:\",\"[ { \\\"Command\\\": \\\"if\\\", \\\"Parameters\\\": [ \\\"{ $ENVVAR }\\\", \\\"then\\\", \\\"{\\\\n out: 'foobar'\\\\n }\\\" ] }, { \\\"Command\\\": \\\"out\\\", \\\"Parameters\\\": [ \\\"Finished!\\\" ] } ] \",\"Please note this is a mock JSON structure rather than a representation of the actual AST that would be created. Parameters are stored differently to allow infixing of variables; and there also needs to be data shared about how pipelining (eg STDOUT et al) is chained. What is being captured above is only the command name and parameters.\",\"So when if executes, the conditional (the first parameter) is then parsed and turned into ASTs and executed. Then the last parameter (the then block) is parsed and turned into ASTs, if the first conditional is true.\",\"This sequence of parsing is defined within the if builtin rather than Murex's parser. That means any code blocks are parsed only when a builtin specifically requests that they are executed.\",\"With murex, there's no distinction between text and code. It's up to commands to determine if they want to execute a parameter as code or not (eg a curly brace block might be JSON).\"]},\"1709\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"Schedulers:\\nOverview of the different schedulers (or 'run modes') in Murex\"]},\"1710\":{\"h\":\"FileRef - User Guide\",\"t\":[\"How to track what code was loaded and from where\",\"Every function, event, autocompletion and even variable is stored with which file it was sourced, when it was loaded and what module it was loaded from. This makes it trivial to identify buggy 3rd party code, malicious libraries, or even just bugs in your own profiles and/or modules.\",\"» runtime: --functions -> [[ /agent/FileRef/ ]] { \\\"Column\\\": 5, \\\"Line\\\": 5, \\\"Source\\\": { \\\"DateTime\\\": \\\"2021-03-28T09:10:53.572197+01:00\\\", \\\"Filename\\\": \\\"/home/lmorg/.murex_modules/murex-dev/murex-dev.mx\\\", \\\"Module\\\": \\\"murex-dev/murex-dev\\\" } } » runtime --globals -> [[ /DEVOPSBIN/FileRef ]] { \\\"Column\\\": 1, \\\"Line\\\": 0, \\\"Source\\\": { \\\"DateTime\\\": \\\"2021-03-28T09:10:53.541952+01:00\\\", \\\"Filename\\\": \\\"/home/lmorg/.murex_modules/devops/global.mx\\\", \\\"Module\\\": \\\"devops/global\\\" } } \"]},\"1711\":{\"h\":\"Module Strings For Non-Module Code\"},\"1712\":{\"h\":\"Source\",\"t\":[\"A common shell idiom is to load shell script files via source / .. When this is done the module string (as seen in the FileRef structures described above) will be source/hash where hash will be a unique hash of the file path and load time.\",\"Thus no two sourced files will share the same module string. Even the same file but modified and sourced twice (before and after the edit) will have different module strings due to the load time being part of the hashed data.\"]},\"1713\":{\"h\":\"REPL\",\"t\":[\"Any functions, variables, events, auto-completions, etc created manually, directly, in the interactive shell will have a module string of murex and an empty Filename string.\"]},\"1714\":{\"h\":\"See Also\",\"t\":[\"Modules and Packages: An introduction to Murex modules and packages\",\"[[ (element): Outputs an element from a nested structure\",\"murex-package: Murex's package manager\",\"runtime: Returns runtime information on the internal state of Murex\",\"source:\\nImport Murex code from another file of code block\"]},\"1715\":{\"h\":\"Murex's Interactive Shell - User Guide\",\"t\":[\"What's different about Murex's interactive shell?\",\"Table of Contents\",\"Overview\",\"readline\",\"Hotkeys\",\"Autocompletion\",\"Syntax Completion\",\"Syntax Highlighting\",\"Spellchecker\",\"Hint Text\",\"Configuring Hint Text Colour\",\"Custom Hint Text Statuses\",\"Disabling Hint Text\"]},\"1716\":{\"h\":\"Overview\",\"t\":[\"Aside from Murex being carefully designed with scripting in mind, the interactive shell itself is also built around productivity. To achieve this we wrote our own readline library. Below is an example of that library in use:\",\"The above demo includes the following features of Murex's bespoke readline library:\",\"hint text - blue status text below the prompt (the colour is configurable)\",\"syntax highlighting (albeit there isn’t much syntax to highlight in the example). This can also be turned off if your preference is to have colours disabled\",\"tab-completion in gridded mode (seen when typing cd)\",\"tab-completion in list view (seen when selecting a process name to kill where the process ID was substituted when selected)\",\"searching through the tab-completion suggestions (seen in both cd and kill - enabled by pressing [ctrl]+[f])\",\"line editing using $EDITOR (vi in the example - enabled by pressing [esc] followed by [v])\",\"readline’s warning before pasting multiple lines of data into the buffer and the preview option that’s available as part of the aforementioned warning\",\"and VIM keys (enabled by pressing [esc])\"]},\"1717\":{\"h\":\"readline\",\"t\":[\"Murex uses a custom readline library to enable support for new features on in addition to the existing uses you'd normally expect from a shell. It is because of this Murex provides one of the best user experiences of any of the shells available today.\"]},\"1718\":{\"h\":\"Hotkeys\",\"t\":[\"A full breakdown of supported hotkeys is available at terminal-keys.md.\"]},\"1719\":{\"h\":\"Autocompletion\",\"t\":[\"Autocompletion happen when you press [tab] and will differ slightly depending on what is defined in autocomplete and whether you use the traditional POSIX pipe token, |, or the arrow pipe, ->.\",\"The | token will behave much like any other shell however -> will offer suggestions with matching data types (as seen in runtime --methods). This is a way of helping highlight commands that naturally follow after another in a pipeline. Which is particularly important in Murex as it introduces data types and dozens of new builtins specifically for working with data structures in an intelligent and readable yet succinct way.\",\"You can add your own commands and functions to Murex as methods by defining them with method. For example if we were to add jq as a method:\",\"method: define jq { \\\"Stdin\\\": \\\"json\\\", \\\"Stdout\\\": \\\"@Any\\\" } \"]},\"1720\":{\"h\":\"Syntax Completion\",\"t\":[\"Like with most IDEs, Murex will auto close brackets et al.\"]},\"1721\":{\"h\":\"Syntax Highlighting\",\"t\":[\"Pipelines in the interactive terminal are syntax highlighted. This is similar to what one expects from an IDE.\",\"Syntax highlighting can be disabled by running:\",\"config: set shell syntax-highlighting off \"]},\"1722\":{\"h\":\"Spellchecker\",\"t\":[\"Murex supports inline spellchecking, where errors are underlined. For example\",\"This might require some manual steps to enable, please see the spellcheck user guide for more details.\"]},\"1723\":{\"h\":\"Hint Text\",\"t\":[\"The hint text is a (typically) blue status line that appears directly below your prompt. The idea behind the hint text is to provide clues to you as type instructions into the prompt; but without adding distractions. It is there to be used if you want it while keeping out of the way when you don't want it.\"]},\"1724\":{\"h\":\"Configuring Hint Text Colour\",\"t\":[\"By default the hint text will appear blue. This is also customizable:\",\"» config get shell hint-text-formatting {BLUE} \",\"The formatting config takes a string and supports ANSI constants.\",\"It is also worth noting that if colour is disabled then the hint text will not be coloured even if hint-text-formatting includes colour codes:\",\"» config: set shell color false \",\"(please note that syntax highlighting is unaffected by the above config)\"]},\"1725\":{\"h\":\"Custom Hint Text Statuses\",\"t\":[\"There is a lot of behavior hardcoded into Murex like displaying the full path to executables and the values of variables. However if there is no status to be displayed then Murex can fallback to a default hint text status. This default is a user defined function. At time of writing this document the author has the following function defined:\",\"config: set shell hint-text-func { trypipe <!null> { git status --porcelain -b -> set gitstatus $gitstatus -> head -n1 -> regexp 's/^## //' -> regexp 's/\\\\.\\\\.\\\\./ => /' } catch { out \\\"Not a git repository.\\\" } } \",\"...which produces a colorized status that looks something like the following:\",\"develop => origin/develop \"]},\"1726\":{\"h\":\"Disabling Hint Text\",\"t\":[\"It is enabled by default but can be disabled if you prefer a more minimal prompt:\",\"» config: set shell hint-text-enabled false \"]},\"1727\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Spellcheck: How to enable inline spellchecking\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"method: Define a methods supported data-types\",\"runtime:\\nReturns runtime information on the internal state of Murex\"]},\"1728\":{\"h\":\"Modules and Packages - User Guide\",\"t\":[\"An introduction to Murex modules and packages\",\"Murex has it's own module system with namespacing and a package manager. But why should a shell need all this?\",\"The answer comes from years of me using Bash and wishing my Bash environment could be consistent across multiple machines. So this document is authored from the perspective of my personal usage (\\\"me\\\" being Laurence Morgan, the original author of Murex).\",\"What Murex's package system provides is:\",\"A way to ensure consistency across multiple platforms\",\"An easy way to extend Murex\",\"An easy way to share what you've extended with others\",\"An easy way to ensure your extensions are kept up-to-date\",\"An easy way to track what code is running in your shell and from where it was loaded\",\"Before I address those points in more detail, a bit of background into what modules and packages are:\"]},\"1729\":{\"h\":\"What Are Packages And Modules?\",\"t\":[\"Murex comes with it's own package manager to make managing plugins easier.\",\"The format of the packages is a directory, typically located at ~/.murex_modules, which contains one or more murex scripts. Each script can be it's own module. ie there are multiple modules that can be grouped together and distributed as a single package.\",\"The way packages and modules are represented is as a path:\",\"package/module \",\"murex-package is a package management tool for administrating murex modules and packages.\"]},\"1730\":{\"h\":\"Using Packages And Modules\"},\"1731\":{\"h\":\"Consistency\",\"t\":[\"Package database are stored locally at ~/.murex_modules/packages.json. This file is portable so any new machine can have packages.json imported. The easiest way of doing this is using murex-package which can import from a local path or HTTP(S) URI and automatically download any packages described in the database.\",\"For example the command I run on any new dev machine to import all of my DevOps tools and terminal preferences is the following:\",\"murex-package: import https://gist.githubusercontent.com/lmorg/770c71786935b44ba6667eaa9d470888/raw/fb7b79d592672d90ecb733944e144d722f77fdee/packages.json \"]},\"1732\":{\"h\":\"Extendability\",\"t\":[\"Namespacing allows for private functions which allows you to write smaller functions. Smaller functions are easier to write tests against (Murex also has an inbuilt testing and debugging tools).\"]},\"1733\":{\"h\":\"Sharing Code\",\"t\":[\"Packages can be hosted via HTTP(S) or git. Anyone can import anyone elses packages using murex-package.\",\"murex-package: install https://github.com/lmorg/murex-module-murex-dev.git \"]},\"1734\":{\"h\":\"Updating Packages\",\"t\":[\"Updating packages is easy:\",\"murex-package: update \"]},\"1735\":{\"h\":\"Tracking Code\",\"t\":[\"All code loaded in Murex, every function, variable and event (etc) is stored in memory with metadata about where it was loaded from; which package, file and at what time. This is called FileRef.\",\"For more information on FileRef see the link below.\"]},\"1736\":{\"h\":\"Module Strings For Non-Module Code\"},\"1737\":{\"h\":\"Source\",\"t\":[\"A common shell idiom is to load shell script files via source / .. When this is done the module string (as seen in the FileRef structures described above) will be source/hash where hash will be a unique hash of the file path and load time.\",\"Thus no two sourced files will share the same module string. Even the same file but modified and sourced twice (before and after the edit) will have different module strings due to the load time being part of the hashed data.\"]},\"1738\":{\"h\":\"REPL\",\"t\":[\"Any functions, variables, events, auto-completions, etc created manually, directly, in the interactive shell will have a module string of murex and an empty Filename string.\"]},\"1739\":{\"h\":\"See Also\",\"t\":[\"FileRef: How to track what code was loaded and from where\",\"murex-package: Murex's package manager\",\"private: Define a private function block\",\"source: Import Murex code from another file of code block\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"1740\":{\"h\":\"Murex Named Pipes - User Guide\",\"t\":[\"A detailed breakdown of named pipes in Murex\"]},\"1741\":{\"h\":\"Background\",\"t\":[\"Wikipedia describes a named pipe as the following:\",\"In computing, a named pipe (also known as a FIFO for its behavior) is an extension to the traditional pipe concept on Unix and Unix-like systems, and is one of the methods of inter-process communication (IPC). The concept is also found in OS/2 and Microsoft Windows, although the semantics differ substantially. A traditional pipe is \\\"unnamed\\\" and lasts only as long as the process. A named pipe, however, can last as long as the system is up, beyond the life of the process. It can be deleted if no longer used. Usually a named pipe appears as a file, and generally processes attach to it for IPC.\",\"Where Murex differs from standard Linux/UNIX is that named pipes are not special files but rather an object or construct within the shell runtime. This allows for more user friendly tooling and syntactic sugar to implemented around it while largely still having the same functionality as a more traditional file based named pipe.\"]},\"1742\":{\"h\":\"In Murex\",\"t\":[\"In Murex, named pipes are described in code as a value inside angle brackets. There are four named pipes pre-configured: <in> (STDIN), <out> (STDOUT), <err> (STDERR), and <null> (/dev/null equivalent).\",\"You can call a named pipe as either a method, function, or parameter.\",\"As a method:\",\"<in> -> command parameter1 parameter2 parameter3 \",\"As a function:\",\"command parameter1 parameter2 parameter3 -> <out> \",\"As a parameter:\",\"command <out> <!err> parameter1 parameter2 parameter3 \"]},\"1743\":{\"h\":\"See Also\",\"t\":[\"<> / read-named-pipe: Reads from a Murex named pipe\",\"<stdin>: Read the STDIN belonging to the parent code block\",\"test:\\nMurex's test framework - define tests, run tests and debug shell scripts\"]},\"1744\":{\"h\":\"Pipeline - User Guide\",\"t\":[\"Overview of what a \\\"pipeline\\\" is\",\"In the Murex docs you'll often see the term \\\"pipeline\\\". This refers to any commands sequenced together.\",\"A pipeline can be joined via any pipe token (eg |, ->, =>, ?). But, for the sake of documentation, a pipeline might even be a solitary command.\"]},\"1745\":{\"h\":\"Examples\",\"t\":[\"Typical Murex pipeline:\",\"open: example.json -> [[ /node/0 ]] \",\"Example of a single command pipeline:\",\"top \",\"Pipeline you might see in Bash / Zsh (this is also valid in Murex):\",\"cat names.txt | sort | uniq \",\"Pipeline filtering out a specific error from example-cmd\",\"example-cmd ? grep: \\\"File not found\\\" \"]},\"1746\":{\"h\":\"Detail\",\"t\":[\"A pipeline isn't a Murex specific construct but rather something inherited from Unix. Where Murex differs is that it can support sending typed information to compatible functions (unlike standard Unix pipes which are dumb-byte streams).\",\"Wikipedia has a page on Pipeline (Unix):\",\"In Unix-like computer operating systems, a pipeline is a mechanism for inter-process communication using message passing. A pipeline is a set of processes chained together by their standard streams, so that the output text of each process (stdout) is passed directly as input (stdin) to the next one. The second process is started as the first process is still executing, and they are executed concurrently. The concept of pipelines was championed by Douglas McIlroy at Unix's ancestral home of Bell Labs, during the development of Unix, shaping its toolbox philosophy. It is named by analogy to a physical pipeline. A key feature of these pipelines is their \\\"hiding of internals\\\" (Ritchie & Thompson, 1974). This in turn allows for more clarity and simplicity in the system.\"]},\"1747\":{\"h\":\"Named Pipes\",\"t\":[\"The drawback with pipes is that it assumes each command runs sequentially one after another and that everything fits neatly into the concept of \\\"output\\\" and \\\"errors\\\". The moment you need to use background (bg) processes, do anything more specific with data streams (even if just ignore them entirely), or use more than one data stream, then this concept breaks down. This is where named pipes come to the rescue. Named pipes are out of scope for this specific document but you can read more on them in links the links below.\"]},\"1748\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Bang Prefix: Bang prefixing to reverse default actions\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"Schedulers: Overview of the different schedulers (or 'run modes') in Murex\",\"bg:\\nRun processes in the background\"]},\"1749\":{\"h\":\"Murex Profile Files - User Guide\",\"t\":[\"A breakdown of the different files loaded on start up\",\"Murex has several profile files which are loaded in the following order of execution:\",\"~/.murex_preload\",\"~/.murex_modules/*/\",\"~/.murex_profile\"]},\"1750\":{\"h\":\".murex_preload\",\"t\":[\"This file should only used to define any environmental variables that might need to be set before the modules are loaded (eg including directories in $PATH if you have anything installed in non-standard locations).\",\"Most of the time this file will be empty bar the standard warning message:\",\"# This file is loaded before any murex modules. It should only contain # environmental variables required for the modules to work eg: # # export PATH=... # # Any other profile config belongs in your profile script instead: # /home/$USER/.murex_profile \",\"This file is created upon the first run of Murex.\"]},\"1751\":{\"h\":\".murex_modules/\",\"t\":[\"Murex's module directory - where all the modules are installed to. This directory is managed by murex-package builtin.\"]},\"1752\":{\"h\":\".murex_profile\",\"t\":[\"This file is comparable to .bash_profile, .bashrc and .zshrc etc. It is the standard place to put all user and/or machine specific config in.\",\".murex_profile is only read from the users home directory. Unlike bash et al, profiles will not be read from /etc/profile.d nor similar. Modules should be used in its place.\"]},\"1753\":{\"h\":\"Overriding The Default Paths (XDG)\",\"t\":[\"Some individuals, particularly those running Linux, follow a standard called XDG Base Directory Specification. While Murex does not adhere to this standard, instead conforming to the de facto standard defined by the past precedents of previous shells, in order to offer flexibility for those who do prefer the XDG specification Murex does support overriding its own default paths via special environmental variables.\",\"MUREX_PRELOAD defines the preload path (and file name)\",\"MUREX_MODULES defines the module path (only)\",\"MUREX_PROFILE defines the profile path (and file name)\",\"Where MUREX_PRELOAD and/or MUREX_PROFILE are directories rather than absolute file names, the path is appended with the default file names as named above.\",\"For people who wish to use XDG paths, in many instances you can get away with setting the follow prior to launching Murex (eg in /etc/profile.d):\",\"MUREX_PRELOAD=\\\"$XDG_CONFIG_HOME/murex/\\\" MUREX_MODULES=\\\"$XDG_CONFIG_HOME/murex/\\\" MUREX_PROFILE=\\\"$XDG_CONFIG_HOME/murex/\\\" \",\"This, however, depends on $XDG_CONFIG_HOME pointing to a single path rather than an array of paths (like $PATH). In that instance you can still use custom paths in Murex but you might need to get a little more creative in how you define that value.\"]},\"1754\":{\"h\":\"See Also\",\"t\":[\"Modules and Packages: An introduction to Murex modules and packages\",\"export: Define an environmental variable and set it's value\",\"murex-package:\\nMurex's package manager\"]},\"1755\":{\"h\":\"Reserved Variables - User Guide\",\"t\":[\"Special variables reserved by Murex\",\"Murex reserves a few special variables which cannot be assigned via set nor let.\",\"The following is a list of reserved variables, their data type, and its usage:\"]},\"1756\":{\"h\":\"SELF (json)\",\"t\":[\"This returns meta information about the running scope.\",\"A 'scope' in Murex is a collection of code blocks to which variables and config are persistent within. In Murex, a variable declared inside an if or foreach block will be persistent outside of their blocks as long as you're still inside the same function.\",\"Please see scoping document (link below) for more information on scoping.\",\"» function example { out $SELF } » example { \\\"Parent\\\": 11357, \\\"Scope\\\": 11357, \\\"TTY\\\": true, \\\"Method\\\": false, \\\"Not\\\": false, \\\"Background\\\": false, \\\"Module\\\": \\\"murex\\\" } \"]},\"1757\":{\"h\":\"Parent (num)\",\"t\":[\"This is the function ID of the parent function that created the scope. In some instances this will be the same value as scope FID. However if in doubt then please using Scope instead.\"]},\"1758\":{\"h\":\"Scope (num)\",\"t\":[\"The scope value here returns the function ID of the top level function in the scope.\"]},\"1759\":{\"h\":\"TTY (bool)\",\"t\":[\"A boolean value as to whether STDOUT is a TTY (ie are we printing to the terminal (TTY) or a pipe?)\"]},\"1760\":{\"h\":\"Method (bool)\",\"t\":[\"A boolean value to describe whether the current scope is a method (ie being called mid-way or at the end of a pipeline).\"]},\"1761\":{\"h\":\"Not (bool)\",\"t\":[\"A boolean value which represents whether the function was called with a bang- prefix or not.\"]},\"1762\":{\"h\":\"Background (bool)\",\"t\":[\"A boolean value to identify whether the current scope is running in the background for foreground.\"]},\"1763\":{\"h\":\"Module (str)\",\"t\":[\"This will be the module string for the current scope.\"]},\"1764\":{\"h\":\"ARGS (json)\",\"t\":[\"This returns a JSON array of the command name and parameters within a given scope.\",\"Unlike $PARAMS, $ARGS includes the function name.\",\"» function example { out $ARGS } » example abc 1 2 3 [ \\\"example\\\", \\\"abc\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\" ] \"]},\"1765\":{\"h\":\"PARAMS (json)\",\"t\":[\"This returns a JSON array of the parameters within a given scope.\",\"Unlike $ARGS, $PARAMS does not include the function name.\",\"» function example { out $PARAMS } » example abc 1 2 3 [ \\\"abc\\\", \\\"1\\\", \\\"2\\\", \\\"3\\\" ] \"]},\"1766\":{\"h\":\"MUREX_EXE (str)\",\"t\":[\"This is very similar to the $SHELL environmental variable in that it holds the full path to the running shell. The reason for defining a reserved variable is so that the shell path cannot be overridden.\"]},\"1767\":{\"h\":\"MUREX_ARGS (json)\",\"t\":[\"This is TODO: [https://github.com/lmorg/murex/issues/304](Github issue 304)\"]},\"1768\":{\"h\":\"HOSTNAME (str)\",\"t\":[\"This returns the hostname of the machine Murex is running from.\"]},\"1769\":{\"h\":\"0 (str)\",\"t\":[\"This returns the name of the executable (like $ARGS[0])\"]},\"1770\":{\"h\":\"1 , 2 , 3 ... (str)\",\"t\":[\"This returns parameter n (like $ARGS[n]). If there is no parameter n then the variable will not be set thus the upper limit variable is determined by how many parameters are set. For example if you have 19 parameters passed then variables $1 through to $19 (inclusive) will all be set.\"]},\"1771\":{\"h\":\"See Also\",\"t\":[\"Array (@) Token: Expand values as an array\",\"Bang Prefix: Bang prefixing to reverse default actions\",\"Modules and Packages: An introduction to Murex modules and packages\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"String ($) Token: Expand values as a string\",\"Variable and Config Scoping: How scoping works within Murex\",\"config: Query or define Murex runtime settings\",\"foreach: Iterate through an array\",\"function: Define a function block\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"private: Define a private function block\",\"set: Define a local variable and set it's value\",\"switch:\\nBlocks of cascading conditionals\"]},\"1772\":{\"h\":\"Rosetta Stone - User Guide\",\"t\":[\"A tabulated list of Bashism's and their equivalent Murex syntax\",\"Below is a reference table of common Bash code and how it could be written in Murex.\",\"It is also recommended that you read the language tour if you want to learn more about shell scripting in Murex.\",\"Description\",\"Bash\",\"Murex\",\"Write to STDOUT\",\"echo \\\"Hello Bash\\\"\",\"out \\\"Hello Murex\\\"echo \\\"Hello Murex\\\"[1]\",\"Write to STDERR\",\"echo \\\"Hello Bash\\\" >2\",\"err \\\"Hello Murex\\\"\",\"Write to file (truncate)\",\"echo \\\"Hello Bash\\\" > hello.txt\",\"echo \\\"Hello Murex\\\" |> hello.txt\",\"Write to file (append)\",\"echo \\\"Hello Bash\\\" >> hello.txt\",\"echo \\\"Hello Murex\\\" >> hello.txt\",\"Pipe commands\",\"echo \\\"Hello Bash | grep Bash\",\"echo \\\"Hello Murex | grep Murexout \\\"Hello Murex\\\" -> regexp m/Murex/\",\"Redirect errors to STDOUT\",\"curl murex.rocks 2>&1 | less\",\"curl murex.rocks ? lesscurl <!out> murex.rocks | less\",\"Redirect output to STDERR\",\"uname -a >&2\",\"uname <err> -a\",\"Quoting strings\",\"Infixing\",\"echo \\\"Hello $SHELL\\\"\",\"out \\\"Hello $SHELL\\\"\",\"String literals\",\"echo 'Hello' $SHELL\",\"out 'Hello' $SHELL\",\"Nesting quotes\",\"echo 'Hello \\\\'Bob\\\\''\",\"out %(Hello 'Bob')\",\"Process management\",\"Exit number\",\"$?\",\"exitnum\",\"Background jobs\",\"command &\",\"bg { command }\",\"Job control\",\"ps,jobs,bg pid,fg pid\",\"fid-list,jobs,bg fid,fg fid\",\"Happy paths\",\"command && command\",\"command && commandtry {command; command}\",\"Unhappy paths\",\"command || command\",\"command || commandtry {command}; catch {command}\",\"Pipe fail\",\"set -o pipefail\",\"runmode trypipe modulerunmode trypipe functiontrypipe { commands }\",\"Comments\",\"Single line\",\"# comment\",\"# comment\",\"Multiple lines\",\":<<EOCline 1line 2EOC\",\"/#line 1line 2#/\",\"Mid-line\",\"n/a\",\"eg out foo/#comment#/bar\",\"File pattern matching(also known as \\\"wildcards\\\")\",\"Globbing\",\"eg ls *.txt\",\"eg ls *.txt (in the interactive terminal) g pattern eg ls @{g *.txt}\",\"Regexp\",\"n/a\",\"rx pattern eg ls @{rx '*\\\\\\\\.txt'}\",\"File type matching\",\"n/a\",\"f flags eg f +s (only return symlinks)\",\"Chaining\",\"n/a\",\"eg f +f | g *.txt | !g murex.* (returns only files with the extension \\\"txt\\\" that aren't called \\\"murex\\\")\",\"Expressions\",\"Assignment\",\"foobar = $((1 + 2 * 3))\",\"foobar = 1 + 2 * 3[2]\",\"Comparison, string\",\"[ \\\"$(command)\\\" == \\\"value\\\" ]\",\"${command} == \\\"value\\\"[2][5]\",\"Comparison, numeric\",\"[ $integer -eq 5 ]\",\"$number == 5[2]\",\"Arithmetic\",\"echo $(( 1+2*3 ))\",\"1 + 2 * 3[2]out ${1+2*3}[2][5]\",\"Supported data types\",\"1. String,2. Integer(all variables are strings)\",\"1. String,2. Integer,3. Float (default number type),4. Boolean5. Array,6. Object,7. Null(all variables can be treated as strings and/or their primitive)\",\"Variables\",\"Assign a local variable\",\"local foo=\\\"bar\\\"\",\"$foo = \\\"bar\\\"[2][6]out \\\"bar\\\" | set foo\",\"Assign a global variable\",\"foo=\\\"bar\\\"\",\"$GLOBAL.foo = \\\"bar\\\"[6]out \\\"bar\\\" | global foo\",\"Assign an environmental variable\",\"export foo=\\\"bar\\\"\",\"export foo = \\\"bar\\\"[1][2][3]$ENV.foo = \\\"bar\\\"[6]out \\\"bar\\\" | export foo[3]\",\"Printing a variable\",\"echo \\\"$foobar\\\"\",\"out $foobar[5]$foobar (variables don't need to be quoted in Murex)\",\"Arrays(eg arrays, lists)\",\"Creating an array\",\"array_name=(value1 value2 value3)\",\"%[value1 value2 value3]%[value1, value2, value3] eg array_name = %[1, 2, 3], eg %[hello world] | foreach { ... }\",\"Accessing an array element\",\"${array_name[0]}\",\"$array_name[0] (immutable) $array_name.0 (mutable) [5]array | [0]\",\"Printing multiple elements\",\"echo ${array_name[1]} ${array_name[0]}\",\"@array_name[1 0]array | [1 0]\",\"Printing a range of elements\",\"n/a\",\"@array_name[1..3]array | [1..3]\",\"Printing all elements\",\"echo ${array_name[*]}\",\"@array_name\",\"Iterating through an array\",\"for item in array; do;$itemdone;\",\"array | foreach item { $item } eg %[Tom Richard Sally] | foreach name { out \\\"Hello $name\\\" }\",\"Objects(eg JSON objects, maps, hashes, dictionaries)\",\"Creating an object\",\"n/a\",\"%{ key: value, array: [1, 2, 3] }[2] eg object_name = %{ key: val, arr: [1,3,3] } eg %{ a:1, b:2, c:3 } | formap { ... }\",\"Accessing an element\",\"n/a\",\"$object_name[key] (immutable) $object_name.key[5] (mutable) object | [key]\",\"Printing multiple elements\",\"n/a\",\"$object_name[key1 key2]object | [key1 key2]\",\"Accessing a nested element\",\"n/a\",\"$object_name[[.path.to.element]] (immutable) [4]$object_name.path.to.element (mutable)object | [[.path.to.element]][4]\",\"Iterating through an map\",\"n/a\",\"object | formap key value { $key; $value } eg %{Bob: {age: 10}, Richard: {age: 20}, Sally: {age: 30} } | formap name person { out \\\"$name is $person[age] years old\\\" }\",\"Sub-shells\",\"Sub-shell, string\",\"\\\"$(commands)\\\" eg \\\"echo $(echo \\\"Hello world\\\")\\\"\",\"${commands}[5] eg out ${out Hello world}\",\"Sub-shell, arrays\",\"$(commands) eg $(echo 1 2 3)\",\"@{commands}[5] eg out @{ %[1,2,3] }\"]},\"1773\":{\"h\":\"Footnotes\",\"t\":[\"Supported for compatibility with traditional shells like Bash.\",\"Unlike Bash, whitespace (or the absence of) is optional.\",\"Environmental variables can only be stored as a string. This is a limitation of current operating systems.\",\"Path separator can be any 1 byte wide character, eg /. The path separator is defined by the first character in a path.\",\"Murex uses ${} for subshells and $() for variables, the reverse of what Bash and others use. The reason for this difference is because {} always denotes a code block and () denotes strings. So ${foobar} makes more sense as a subshell executing the command foobar, while $(foobar) makes more sense as the variable $foobar.\",\"When assigning a variable where the right hand side is an expression, eg $foo = \\\"bar\\\", the dollar prefix is optional. The set, global and export keywords are considered deprecated.\"]},\"1774\":{\"h\":\"See Also\",\"t\":[\"And (&&) Logical Operator: Continues next operation if previous operation passes\",\"Append Pipe (>>) Token: Redirects STDOUT to a file and append its contents\",\"Array (@) Token: Expand values as an array\",\"Murex Named Pipes: A detailed breakdown of named pipes in Murex\",\"Or (||) Logical Operator: Continues next operation only if previous operation fails\",\"String ($) Token: Expand values as a string\",\"Terminal Hotkeys: A list of all the terminal hotkeys and their uses\",\">> (append file): Writes STDIN to disk - appending contents if file already exists\",\"> (truncate file): Writes STDIN to disk - overwriting contents if file already exists\",\"[[ (element): Outputs an element from a nested structure\",\"[ (index): Outputs an element from an array, map or table\",\"[ (range) : Outputs a ranged subset of data from STDIN\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1775\":{\"h\":\"Schedulers - User Guide\",\"t\":[\"Overview of the different schedulers (or 'run modes') in Murex\",\"There are a few distinct schedulers (or run modes) in Murex which are invoked by builtin commands. This means you can alter the way commands are executed dynamically within Murex shell scripts.\"]},\"1776\":{\"h\":\"Normal\",\"t\":[\"This is a traditional shell where anything in a pipeline (eg cmd1 -> cmd2 -> cmd3) is executed in parallel. The scheduler only pauses launching new commands when the last command in any pipeline is still executing. A pipeline could be multiple commands (like above) or a single command (eg top).\"]},\"1777\":{\"h\":\"Try\",\"t\":[\"This is similar to normal where commands in a pipeline are run in parallel except Murex validates the stderr and exit status of the last command in any pipeline.\",\"If stderr is greater than stdout (per bytes written) OR the exit status is non-zero then the scheduler exits that entire block.\"]},\"1778\":{\"h\":\"Try Pipe\",\"t\":[\"This runs the commands sequentially because the stderr and the exit status of each command is checked irrespective of whether that command is at the start of the pipeline (eg start -> middle -> end), or anywhere else.\",\"Like with try, if stderr is greater than stdout (per bytes written) OR the exit status is non-zero then the scheduler exits that entire block. Unlike with try, this check happens on every command rather than the last command in the pipeline.\"]},\"1779\":{\"h\":\"See Also\",\"t\":[\"Arrow Pipe (->) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Generic Pipe (=>) Token: Pipes a reformatted STDOUT stream from the left hand command to STDIN of the right hand command\",\"POSIX Pipe (|) Token: Pipes STDOUT from the left hand command to STDIN of the right hand command\",\"Pipeline: Overview of what a \\\"pipeline\\\" is\",\"STDERR Pipe (?) Token: Pipes STDERR from the left hand command to STDIN of the right hand command\",\"runmode: Alter the scheduler's behaviour at higher scoping level\",\"try: Handles errors inside a block of code\",\"trypipe:\\nChecks state of each function in a pipeline and exits block on error\"]},\"1780\":{\"h\":\"Variable and Config Scoping - User Guide\",\"t\":[\"How scoping works within Murex\",\"A 'scope' in Murex is a collection of code blocks to which variables and config are persistent within. In Murex, a variable declared inside an if or foreach block will be persistent outside of their blocks as long as you're still inside the same function.\",\"For example lets start with the following function that sets a variable called foo\",\"function example { if { true } then { set foo=bar } out $foo } \",\"In here the value is getting set inside an if block but its value is is retrieved outside of that block. out and set have different parents but the same scoping.\",\"Then lets set foo outside of that function and see what happens:\",\"» set foo=oof » $foo oof » example bar » $foo oof \",\"Despite setting a variable named foo, the value inside example does not overwrite the value outside example because they occupy different scoping.\"]},\"1781\":{\"h\":\"What Instantiates A New Scope?\",\"t\":[\"A new scope is instantiated by anything which resembles a function. This would be code inside events, dynamic autocompletes, open agents, any code blocks defined in config, as well as public and private functions too.\",\"Code inside an if, switch, foreach and source do not create a new scope. Subshells also do not create a new scoping either.\"]},\"1782\":{\"h\":\"See Also\",\"t\":[\"Reserved Variables: Special variables reserved by Murex\",\"autocomplete: Set definitions for tab-completion in the command line\",\"config: Query or define Murex runtime settings\",\"event: Event driven programming for shell scripts\",\"foreach: Iterate through an array\",\"function: Define a function block\",\"if: Conditional statement to execute different blocks of code depending on the result of the condition\",\"let: Evaluate a mathematical function and assign to variable (deprecated)\",\"openagent: Creates a handler function for `open\",\"private: Define a private function block\",\"set: Define a local variable and set it's value\",\"source: Import Murex code from another file of code block\",\"switch:\\nBlocks of cascading conditionals\"]},\"1783\":{\"h\":\"Spellcheck - User Guide\",\"t\":[\"How to enable inline spellchecking\",\"Murex supports inline spellchecking, where errors are underlined. For example\",\"However to use this there needs to be a few satisfied prerequisites, not all of which will be enabled by default:\"]},\"1784\":{\"h\":\"CLI Spellchecker (3rd Party Software)\",\"t\":[\"A CLI spellchecker needs to be installed. The recommendation is aspell. This might already be installed by default with your OS or has been included as a dependency with another application. You can check if aspell is installed by running the following:\",\"which: aspell \",\"If that returns no data, then you will need to install aspell yourself. Please consult your OS docs for how to install software.\",\"For help debugging issues with aspell, please see the last section in this document.\"]},\"1785\":{\"h\":\"Murex Config\"},\"1786\":{\"h\":\"ANSI Escape Sequences\",\"t\":[\"ANSI escape sequences need to be enabled (which they are by default). This option is found in config under shell, color.\",\"config: set shell color true \"]},\"1787\":{\"h\":\"Spellcheck Enable\",\"t\":[\"Spellcheck needs to be enabled. This option can be found in config under shell, spellcheck-enabled.\",\"To enable this run:\",\"config: set shell spellcheck-enabled true \",\"...or add the above line to your Murex profile, ~/.murex_profile to make the change persistent.\",\"Please note that this option will automatically be enabled if aspell is installed.\"]},\"1788\":{\"h\":\"Spellcheck Murex Code\",\"t\":[\"This shouldn't need tweaking if you're running aspell but other spellcheckers will require updated code. The default will look something like this:\",\"» config: get shell spellcheck-func { -> aspell list } \",\"The default should be good enough for most people but should you want to run an alternative spellchecker then follow the instructions in the next section:\"]},\"1789\":{\"h\":\"How To Write Your Own spellcheck-func\",\"t\":[\"You might legitimately want to run a different spellchecker and if so you'll need to write your own spellcheck-func. Fortunately this is simple:\",\"The function reads the command line from STDIN, if the spellchecker reads lines from parameters rather than STDIN you'll need to write something equivalent to the following\",\"{ # This is a theoretical example. It will not work generically. -> set: line newspellchecker --check \\\"$line\\\" } \",\"The output of the function must me an array containing the misspelt words only. That array can be JSON just as long as you have set STDOUT's data type to json. Similarly, other supported Murex data types can be used too. However in general you might just want to go with a misspelling per line as it's pretty POSIX friendly and thus most spellcheckers are likely to support it. eg\",\"» out \\\"a list of misspelt words: qwert fuubar madeupword\\\" -> aspell: list qwert fuubar madeupword \"]},\"1790\":{\"h\":\"User Dictionary\",\"t\":[\"Murex has it's own user dictionary, which is held as a JSON array:\",\"» config: get shell spellcheck-user-dictionary [\\\"murex\\\"] \",\"You can add words to a user dictionary via:\",\"» config: eval shell spellcheck-user-dictionary { -> append \\\"myword\\\" } \",\"or\",\"» config: eval shell spellcheck-user-dictionary { -> alter: --merge / ([\\\"word1\\\", \\\"word2\\\", \\\"word3\\\"]) } \",\"Don't forget to record these in your Murex profile, ~/.murex_profile to make the changes persistent.\"]},\"1791\":{\"h\":\"Ignored By Default\",\"t\":[\"Sometimes commands are not valid words in ones native language. Thus any words that fall into the following categories are ignored by default:\",\"words that are also the names of commands found in $PATH\",\"words that are the names of Murex functions (defined via function)\",\"words that are builtins (eg config and jsplit)\",\"any global aliases\",\"also any words that are also the names of global variables\"]},\"1792\":{\"h\":\"Common Problems With aspell\"},\"1793\":{\"h\":\"Error: No word lists can be found for the language \\\"en_NZ\\\".\",\"t\":[\"The en_NZ portion of the error will differ depending on your language.\",\"If this error arises then it means aspell is installed but it doesn't have the dictionary for your language. This is an easy fix in most OSs. For example in Ubuntu:\",\"apt install aspell-en \",\"(you may need to change -en with your specific language code)\",\"Please consult your operating systems documentation for how to install software and what the package names are for aspell and its corresponding dictionaries.\"]},\"1794\":{\"h\":\"See Also\",\"t\":[\"ANSI Constants: Infixed constants that return ANSI escape sequences\",\"Code Block Parsing: Overview of how code blocks are parsed\",\"Curly Brace ({, }) Tokens: Initiates or terminates a code block\",\"Murex Profile Files: A breakdown of the different files loaded on start up\",\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"alter: Change a value within a structured data-type and pass that change along the pipeline without altering the original source input\",\"append: Add data to the end of an array\",\"config: Query or define Murex runtime settings\",\"json: JavaScript Object Notation (JSON)\",\"jsplit: Splits STDIN into a JSON array based on a regex parameter\",\"set:\\nDefine a local variable and set it's value\"]},\"1795\":{\"h\":\"Terminal Hotkeys - User Guide\",\"t\":[\"A list of all the terminal hotkeys and their uses\",\"Table of Contents\",\"Command Prompt\",\"Autocomplete\",\"Fuzzy Find Autocomplete\",\"Preview Box\",\"Search Shell History\",\"Line Editing\",\"Navigation\",\"General Hotkeys\",\"Vim Keys\",\"Supported Keys\",\"Full Screen Editing via $EDITOR\",\"Recalling Previous Words\",\"Job Control\",\"Miscellaneous\",\"Cancel Prompt\",\"End Of File\",\"Alternative Cancel Key\",\"Clear Screen\"]},\"1796\":{\"h\":\"Command Prompt\"},\"1797\":{\"h\":\"Autocomplete\",\"t\":[\"Pressing tab provides autocompletion suggestions. Suggestions can come in one of two formats:\",\"a gridded view where the hint text (the, typically blue, text under the prompt) provides the description\",\"a list view where the description is printed alongside the completion suggestion.\",\"While the autocompletion suggestions are open, the following keys are assigned roles:\",\"arrow keys (left, right, up, down): highlight different suggestions\",\"tab: highlight the next suggestion\",\"shift+tab: highlight the previous suggestion\",\"enter / return: this selects the highlighted autocompletion\",\"esc: closes the suggestions without selecting one\",\"ctrl+f: fuzzy find in the suggestions\",\"f1: enable / disable preview box. This will hide your terminal output while enabled. The preview box supports additional key bindings (see below)\"]},\"1798\":{\"h\":\"Fuzzy Find Autocomplete\",\"t\":[\"Pressing ctrl+f either from the prompt, or while the autocomplete suggestions are open, will open up the fuzzy find dialog to search through available suggestions. This can also be used to quickly jump to specific sub-directories.\",\"Your typed search terms will appear in the hint text.\",\"By default the fuzzy finder will look for any item that includes all of the search words. However the search behavior can be changed if the first search term is any of the following:\",\"or: show results that match any of the search terms. eg or .md .txt will match both markdown and txt files (when finding files in completion suggestions).\",\"!: only show suggestions that do not match any of the search terms. eg ! .md .txt will match all files except markdown and txt files (when finding files in completion suggestions).\",\"g: show only results that match a shell glob. eg *.txt. This mode is automatically assumed if you include an abstricts in your search term.\",\"rx: use a regexp pattern matcher instead of any fuzzy search. Expressions will be case insensitive and non-greedy by default.\",\"Aside from globbing matches, searching in fuzzy finder is not case sensitive.\",\"While the fuzzy finder is open, the following keys are assigned roles:\",\"arrow keys (left, right, up, down): highlight different suggestions\",\"tab: highlight the next suggestion\",\"shift+tab: highlight the previous suggestion\",\"enter / return: this selects the highlighted autocompletion\",\"esc: cancel search\",\"f1: enable / disable preview box. This will hide your terminal output while enabled. The preview box supports additional key bindings (see below)\"]},\"1799\":{\"h\":\"Preview Box\",\"t\":[\"The preview box is a way of quickly examining the contents of a function, man page, text file or even image, based on what autocomplete suggestion is highlighted.\",\"While the preview box is open, the rest of your terminal output will be hidden. However once you close it, that output will reappear.\",\"While the preview box is open, the following keys are assigned roles:\",\"f1: closes the preview box\",\"page up scroll up the contents of the preview box, one page at a time\",\"ctrl+arrow up scroll up the contents of the preview box, one page at a time (IBM keyboard layouts)\",\"option+arrow up scroll up the contents of the preview box, one page at a time (Apple keyboard layouts)\",\"page down scroll down the contents of the preview box, one page at a time\",\"ctrl+arrow down scroll down the contents of the preview box, one page at a time (IBM keyboard layouts)\",\"option+arrow down scroll down the contents of the preview box, one page at a time (Apple keyboard layouts)\"]},\"1800\":{\"h\":\"Search Shell History\",\"t\":[\"This displays up your timestamped shell history as an autocomplete list with fuzzy find activated. Using ctrl+r you can rapidly rerun previous command lines.\",\"From here, the usual autocomplete / fuzzy find hotkeys apply. Such as pressing esc to cancel history completion.\",\"If the prompt line is not empty, then the current line is included in the history search.\"]},\"1801\":{\"h\":\"Line Editing\",\"t\":[\"These are the various hotkeys and editing modes available in Murex's interactive command prompt.\"]},\"1802\":{\"h\":\"Navigation\",\"t\":[\"Arrow keys, left and right: move the cursor forwards or backwards in line\",\"Arrow keys, up and down: If the command line spans multiple lines on the screen then this will jump up or down to the next/previous line. When at the top or bottom line, the up or down keys will search through your history of past command lines\",\"alt+b: jump backwards a word at a time (Emacs compatibility)\",\"ctrl+left: jump backwards a word at a time (IBM keyboard layouts)\",\"option+left: jump backwards a word at a time (Apple keyboard layouts)\",\"alt+f: jump forwards a word at a time (Emacs compatibility)\",\"ctrl+right: jump forwards a word at a time (IBM keyboard layouts)\",\"option+right: jump forwards a word at a time (Apple keyboard layouts)\",\"ctrl+a: jump to beginning of line\",\"home: jump to beginning of line\",\"ctrl+e: jump to end of line\",\"end: jump to end of line\"]},\"1803\":{\"h\":\"General Hotkeys\",\"t\":[\"ctrl+k: clears line after cursor\",\"ctrl+u: clears the whole line\"]},\"1804\":{\"h\":\"Vim Keys\",\"t\":[\"Pressing esc while no autocomplete suggestions are shown will switch the line editor into vim keys mode.\",\"Press i to return to normal editing mode.\"]},\"1805\":{\"h\":\"Supported Keys\",\"t\":[\"a: insert after current character\",\"A: insert at end of line\",\"b: jump to beginning of word\",\"B: jump to previous whitespace\",\"d: delete mode\",\"D: delete characters\",\"e: jump to end of word\",\"E: jump to next whitespace\",\"h: previous character (like left)\",\"i: insert mode\",\"I: insert at beginning of line\",\"l: next character (like right)\",\"p: paste after\",\"P: paste before\",\"r: replace character (replace once)\",\"R: replace many characters\",\"u: undo\",\"v: visual editor (opens line in $EDITOR)\",\"w: jump to end of word\",\"W: jump to next whitespace\",\"x: delete character\",\"y: yank (copy line)\",\"Y: same as y\",\"[: jump to previous brace\",\"]: jump to next brace\",\"$: jump to end of line\",\"%: jump to either end of matching bracket\",\"0 to 9: repeat action n times. eg 5x would delete (x) five (5) characters\"]},\"1806\":{\"h\":\"Full Screen Editing via $EDITOR\",\"t\":[\"When in \\\"vim keys\\\" mode, press v to bring up the visual editor. The editor will be whichever command is stored in the $EDITOR environmental variable.\"]},\"1807\":{\"h\":\"Recalling Previous Words\",\"t\":[\"shift+f1 recalls the first word\",\"shift+f2 recalls the second word\",\"...\",\"shift+f12 recalls the twelfth word\",\"In the following example, code inside square brackets represent key presses rather than text:\",\"» echo two three four five six seven eight nine two three four five six seven eight nine » [shift+f1]echo [shift+f5]five \"]},\"1808\":{\"h\":\"Job Control\",\"t\":[\"While processes are running, the following keys are assigned roles:\",\"ctrl+c: kill foreground process. Pressing this will send a kill (SIGINT) request to the foreground process\",\"ctrl+\\\\: kill all running processes in current shell session, including any background processes too. This hotkey is a effectively an emergency kill switch to bring you back to the command prompt should ctrl+c prove ineffective. Use this sparingly because it doesn't allow processes to end gracefully\",\"ctrl+z: suspend foreground process. This will take you back to the prompt and from there you can then use job control to resume execution in either the foreground or background. (read more)\"]},\"1809\":{\"h\":\"Miscellaneous\"},\"1810\":{\"h\":\"Cancel Prompt\",\"t\":[\"Pressing ctrl+c while on the prompt will clear the prompt. This is similar to ctrl+u.\"]},\"1811\":{\"h\":\"End Of File\",\"t\":[\"Pressing ctrl+d on an empty prompt will send EOF (end of file). This will exit that running shell session.\"]},\"1812\":{\"h\":\"Alternative Cancel Key\",\"t\":[\"ctrl+g performs the same action as esc at all states of the interactive shell.\"]},\"1813\":{\"h\":\"Clear Screen\",\"t\":[\"Pressing ctrl+l will clear the screen.\"]},\"1814\":{\"h\":\"See Also\",\"t\":[\"Murex's Interactive Shell: What's different about Murex's interactive shell?\",\"Rosetta Stone: A tabulated list of Bashism's and their equivalent Murex syntax\",\"Spellcheck:\\nHow to enable inline spellchecking\"]},\"1815\":{\"h\":\"Events\"},\"1816\":{\"h\":\"User Guide\"}},\"dirtCount\":0,\"index\":[[\"☺isalive\",{\"1\":{\"1226\":1}}],[\"☺lastname\",{\"1\":{\"1226\":1}}],[\"☺firstname\",{\"1\":{\"1226\":1}}],[\"☺spouse\",{\"1\":{\"1226\":1}}],[\"☺children\",{\"1\":{\"1226\":1}}],[\"☺phonenumbers☺2\",{\"1\":{\"1226\":1}}],[\"☺phonenumbers☺1\",{\"1\":{\"1226\":1}}],[\"☺phonenumbers☺0\",{\"1\":{\"1226\":1}}],[\"☺phonenumbers\",{\"1\":{\"1226\":1}}],[\"☺address☺postalcode\",{\"1\":{\"1226\":1}}],[\"☺address☺state\",{\"1\":{\"1226\":1}}],[\"☺address☺streetaddress\",{\"1\":{\"1226\":1}}],[\"☺address☺city\",{\"1\":{\"1226\":1}}],[\"☺address\",{\"1\":{\"1226\":1}}],[\"☺age\",{\"1\":{\"1226\":1}}],[\"☺\",{\"1\":{\"1226\":1}}],[\"使用再生纸\",{\"1\":{\"127\":1,\"1505\":2,\"1592\":2}}],[\"举手之劳就可以使办公室更加环保\",{\"1\":{\"127\":1,\"1505\":2,\"1592\":2}}],[\"比如\",{\"1\":{\"127\":2,\"1505\":4,\"1592\":4}}],[\"^^\",{\"1\":{\"1701\":1}}],[\"^y\",{\"1\":{\"1701\":1}}],[\"^x\",{\"1\":{\"1701\":1}}],[\"^w\",{\"1\":{\"1701\":1}}],[\"^v\",{\"1\":{\"1701\":1}}],[\"^u\",{\"1\":{\"1701\":1}}],[\"^t\",{\"1\":{\"1701\":1}}],[\"^s\",{\"1\":{\"1701\":1}}],[\"^q\",{\"1\":{\"1701\":1}}],[\"^p\",{\"1\":{\"1701\":1}}],[\"^o\",{\"1\":{\"1701\":1}}],[\"^options$\",{\"1\":{\"1280\":1}}],[\"^n\",{\"1\":{\"1701\":1}}],[\"^m\",{\"1\":{\"1701\":1}}],[\"^l\",{\"1\":{\"1701\":1}}],[\"^k\",{\"1\":{\"1701\":1}}],[\"^j\",{\"1\":{\"1701\":1}}],[\"^i\",{\"1\":{\"1701\":1}}],[\"^h\",{\"1\":{\"1701\":1}}],[\"^hello\",{\"1\":{\"1285\":1}}],[\"^g\",{\"1\":{\"1701\":1}}],[\"^e\",{\"1\":{\"1701\":1}}],[\"^b\",{\"1\":{\"1701\":1}}],[\"^a\",{\"1\":{\"1701\":1}}],[\"^d\",{\"1\":{\"182\":2,\"1701\":1}}],[\"^r\",{\"1\":{\"147\":1,\"182\":1,\"1701\":1}}],[\"^f\",{\"1\":{\"147\":1,\"182\":1,\"1701\":1}}],[\"^\",{\"1\":{\"121\":1,\"218\":2,\"251\":1,\"252\":1,\"389\":1,\"1131\":1,\"1701\":5,\"1725\":1}}],[\"^$name\",{\"1\":{\"115\":1}}],[\"^c\",{\"1\":{\"95\":2,\"115\":1,\"139\":1,\"1701\":1}}],[\"^z\",{\"1\":{\"3\":1,\"90\":2,\"115\":1,\"1701\":1}}],[\"+1\",{\"1\":{\"347\":1}}],[\"+$`\",{\"1\":{\"347\":2}}],[\"+s\",{\"1\":{\"238\":1,\"692\":1,\"1772\":1}}],[\"+d\",{\"1\":{\"238\":2,\"694\":1}}],[\"+x\",{\"1\":{\"201\":1}}],[\"+\",{\"1\":{\"121\":1,\"127\":2,\"217\":2,\"254\":1,\"255\":1,\"256\":1,\"318\":6,\"326\":6,\"333\":6,\"340\":11,\"347\":3,\"354\":5,\"361\":5,\"389\":1,\"608\":1,\"689\":1,\"692\":1,\"695\":2,\"696\":2,\"908\":1,\"1021\":1,\"1278\":2,\"1285\":2,\"1300\":7,\"1716\":1,\"1772\":3}}],[\"+json\",{\"1\":{\"113\":1,\"1021\":1}}],[\"+=\",{\"1\":{\"111\":1,\"139\":2,\"340\":1,\"904\":1}}],[\"+fw\",{\"1\":{\"694\":1}}],[\"+fd\",{\"1\":{\"694\":1}}],[\"+flags\",{\"1\":{\"692\":2}}],[\"+f\",{\"1\":{\"93\":1,\"694\":1,\"791\":2,\"795\":1,\"1186\":2,\"1190\":1,\"1772\":1}}],[\"+build\",{\"1\":{\"90\":1}}],[\"5x\",{\"1\":{\"1805\":1}}],[\"59\",{\"1\":{\"1701\":16}}],[\"593\",{\"1\":{\"134\":1}}],[\"572197+01\",{\"1\":{\"1710\":1}}],[\"57\",{\"1\":{\"1701\":3}}],[\"56\",{\"1\":{\"1701\":3}}],[\"566\",{\"1\":{\"159\":1}}],[\"53\",{\"1\":{\"1701\":6,\"1710\":2}}],[\"536\",{\"1\":{\"151\":1}}],[\"5♣\",{\"1\":{\"1652\":1,\"1662\":1}}],[\"5th\",{\"1\":{\"865\":1}}],[\"541952+01\",{\"1\":{\"1710\":1}}],[\"54\",{\"1\":{\"762\":3,\"1701\":4}}],[\"52\",{\"1\":{\"575\":2,\"1701\":25}}],[\"5200\",{\"0\":{\"140\":1}}],[\"58\",{\"1\":{\"182\":1}}],[\"555\",{\"1\":{\"1226\":2,\"1639\":2}}],[\"55\",{\"1\":{\"168\":1,\"1701\":6}}],[\"5000\",{\"1\":{\"1691\":1}}],[\"50\",{\"1\":{\"129\":1,\"847\":1,\"1155\":1,\"1701\":12,\"1702\":2}}],[\"50+\",{\"1\":{\"50\":1}}],[\"51\",{\"1\":{\"100\":1,\"847\":1,\"1335\":3,\"1701\":25,\"1702\":2}}],[\"5\",{\"0\":{\"79\":1,\"111\":1,\"437\":1},\"1\":{\"119\":1,\"121\":2,\"217\":5,\"239\":2,\"251\":1,\"252\":1,\"347\":1,\"375\":3,\"399\":1,\"417\":1,\"431\":1,\"473\":2,\"487\":2,\"488\":1,\"534\":1,\"535\":1,\"739\":1,\"742\":2,\"751\":1,\"865\":7,\"875\":2,\"1082\":1,\"1107\":2,\"1115\":1,\"1260\":1,\"1267\":1,\"1272\":2,\"1293\":4,\"1341\":4,\"1400\":2,\"1404\":3,\"1428\":13,\"1429\":2,\"1436\":3,\"1437\":2,\"1449\":5,\"1484\":1,\"1495\":2,\"1496\":1,\"1506\":8,\"1629\":1,\"1701\":3,\"1710\":2,\"1772\":9,\"1805\":1}}],[\"68\",{\"1\":{\"1701\":1}}],[\"67\",{\"1\":{\"1701\":1}}],[\"66\",{\"1\":{\"1701\":1}}],[\"663812496\",{\"1\":{\"742\":1}}],[\"646\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"64\",{\"1\":{\"1107\":2,\"1620\":1,\"1677\":1}}],[\"64bit\",{\"1\":{\"9\":2,\"111\":1,\"201\":1,\"1634\":1}}],[\"6th\",{\"1\":{\"865\":2,\"1115\":1}}],[\"65\",{\"1\":{\"347\":1,\"1701\":1}}],[\"628\",{\"1\":{\"168\":1}}],[\"620\",{\"1\":{\"162\":1}}],[\"630\",{\"1\":{\"168\":1,\"181\":1}}],[\"614\",{\"1\":{\"163\":1}}],[\"6140\",{\"0\":{\"136\":1}}],[\"617\",{\"1\":{\"163\":1}}],[\"613\",{\"1\":{\"162\":1}}],[\"611\",{\"1\":{\"162\":1}}],[\"60\",{\"1\":{\"437\":2,\"645\":1,\"1392\":2,\"1393\":1}}],[\"608\",{\"1\":{\"162\":1}}],[\"601\",{\"1\":{\"139\":1}}],[\"603\",{\"1\":{\"135\":1}}],[\"600\",{\"1\":{\"135\":1}}],[\"6\",{\"0\":{\"78\":1,\"113\":1},\"1\":{\"90\":1,\"189\":1,\"217\":1,\"367\":1,\"417\":1,\"534\":1,\"544\":1,\"742\":1,\"743\":1,\"751\":1,\"756\":1,\"865\":1,\"897\":1,\"1082\":1,\"1131\":1,\"1175\":1,\"1260\":3,\"1267\":5,\"1400\":2,\"1428\":2,\"1436\":3,\"1449\":5,\"1484\":1,\"1641\":1,\"1701\":3,\"1772\":4}}],[\"770c71786935b44ba6667eaa9d470888\",{\"1\":{\"1731\":1}}],[\"79\",{\"1\":{\"1701\":4}}],[\"72\",{\"1\":{\"1701\":1}}],[\"7♣\",{\"1\":{\"1652\":1,\"1662\":1}}],[\"754\",{\"1\":{\"1620\":1,\"1677\":1}}],[\"7890\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"70\",{\"1\":{\"1701\":1}}],[\"7000\",{\"0\":{\"175\":1}}],[\"70s\",{\"1\":{\"39\":1,\"57\":1}}],[\"7300\",{\"0\":{\"132\":1}}],[\"7\",{\"0\":{\"77\":1,\"115\":1},\"1\":{\"375\":3,\"488\":1,\"534\":1,\"535\":1,\"544\":1,\"575\":1,\"751\":1,\"754\":1,\"765\":1,\"779\":1,\"780\":1,\"865\":1,\"897\":1,\"1022\":2,\"1267\":1,\"1343\":1,\"1404\":3,\"1416\":1,\"1428\":2,\"1436\":4,\"1449\":5,\"1484\":1,\"1701\":4,\"1772\":1}}],[\"zone\",{\"1\":{\"1629\":3}}],[\"zones\",{\"1\":{\"1629\":1}}],[\"zulu\",{\"1\":{\"1386\":1}}],[\"zls\",{\"0\":{\"432\":1,\"438\":1,\"439\":1,\"441\":1,\"447\":1},\"1\":{\"431\":6}}],[\"z0\",{\"1\":{\"389\":1}}],[\"za\",{\"1\":{\"347\":1,\"389\":1,\"1021\":1,\"1285\":1}}],[\"z\",{\"1\":{\"256\":1,\"347\":1,\"377\":1,\"695\":2,\"1021\":1,\"1131\":1,\"1285\":1,\"1401\":1,\"1402\":5,\"1406\":1,\"1407\":5,\"1430\":1,\"1432\":1,\"1438\":1,\"1535\":1}}],[\"zip\",{\"1\":{\"197\":3}}],[\"zeros\",{\"1\":{\"1401\":1,\"1432\":1}}],[\"zero\",{\"0\":{\"595\":1,\"867\":1},\"1\":{\"76\":1,\"77\":1,\"95\":1,\"103\":1,\"115\":3,\"117\":1,\"155\":2,\"163\":1,\"347\":2,\"421\":1,\"431\":1,\"444\":1,\"591\":1,\"595\":1,\"793\":1,\"863\":1,\"867\":1,\"882\":1,\"1123\":1,\"1324\":1,\"1330\":1,\"1777\":1,\"1778\":1}}],[\"zshrc\",{\"1\":{\"1752\":1}}],[\"zsh\",{\"1\":{\"46\":1,\"48\":1,\"657\":1,\"711\":1,\"1745\":1}}],[\"83\",{\"1\":{\"1701\":1}}],[\"82\",{\"1\":{\"1701\":1}}],[\"82077789z\",{\"1\":{\"847\":1}}],[\"81\",{\"1\":{\"1701\":1}}],[\"8ec6936c1ac1c347bf85675eab4a0877\",{\"1\":{\"1299\":1}}],[\"8736\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"886706796+01\",{\"1\":{\"1175\":1}}],[\"8002\",{\"1\":{\"1691\":1}}],[\"8001\",{\"1\":{\"1691\":2}}],[\"8000\",{\"0\":{\"171\":1}}],[\"80\",{\"1\":{\"1056\":1,\"1701\":1}}],[\"80s\",{\"1\":{\"39\":1,\"57\":1}}],[\"8\",{\"0\":{\"76\":1,\"117\":1},\"1\":{\"367\":1,\"534\":1,\"544\":1,\"546\":1,\"742\":1,\"751\":1,\"780\":1,\"782\":1,\"865\":1,\"897\":1,\"1116\":2,\"1267\":1,\"1428\":3,\"1434\":1,\"1449\":3,\"1601\":1,\"1701\":4}}],[\"`create|chmod\",{\"1\":{\"1366\":1}}],[\"`continue`\",{\"1\":{\"535\":1}}],[\"`config`\",{\"1\":{\"808\":2}}],[\"`config\",{\"1\":{\"71\":1,\"123\":1,\"1176\":1}}],[\"``\",{\"1\":{\"1340\":1}}],[\"```\",{\"1\":{\"1042\":1}}],[\"`1\",{\"1\":{\"1155\":1}}],[\"`1`\",{\"1\":{\"1043\":2}}],[\"`https\",{\"1\":{\"1022\":2}}],[\"`http\",{\"1\":{\"1022\":1}}],[\"`hello`\",{\"1\":{\"783\":1}}],[\"`merge\",{\"1\":{\"1487\":1}}],[\"`method`\",{\"1\":{\"103\":1}}],[\"`math`\",{\"1\":{\"953\":1}}],[\"`text`\",{\"1\":{\"953\":1}}],[\"`try`\",{\"1\":{\"679\":2,\"825\":2,\"912\":2,\"1201\":2}}],[\"`set`\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"`string`\",{\"1\":{\"953\":1}}],[\"`str`\",{\"1\":{\"819\":1,\"1195\":1}}],[\"`str\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"`getfile`\",{\"1\":{\"1022\":2}}],[\"`get`\",{\"1\":{\"808\":3,\"1022\":2}}],[\"`generic`\",{\"1\":{\"953\":1}}],[\"`global`\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"`git\",{\"1\":{\"242\":1}}],[\"`float\",{\"1\":{\"1620\":1}}],[\"`false`\",{\"1\":{\"1487\":3}}],[\"`fail\",{\"1\":{\"1487\":1}}],[\"`fexec\",{\"1\":{\"711\":1}}],[\"`function`\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"`foo`+`bar`\",{\"1\":{\"608\":1,\"908\":1}}],[\"`foo`\",{\"1\":{\"488\":1,\"535\":1}}],[\"`int`\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"`bar`\",{\"1\":{\"488\":1,\"535\":1}}],[\"`break`\",{\"1\":{\"488\":1}}],[\"`$age`\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"`$abc`==`123`\",{\"1\":{\"606\":1,\"906\":1}}],[\"`$\",{\"1\":{\"423\":1}}],[\"`<\",{\"1\":{\"423\":1}}],[\"`<stdin>`\",{\"1\":{\"381\":1,\"396\":1,\"415\":1,\"440\":2,\"472\":2,\"492\":1,\"512\":1,\"539\":1,\"561\":1,\"574\":1,\"580\":1,\"592\":1,\"602\":1,\"621\":2,\"627\":1,\"632\":2,\"638\":2,\"654\":2,\"672\":1,\"693\":1,\"748\":3,\"761\":2,\"769\":1,\"790\":3,\"805\":1,\"819\":2,\"834\":1,\"840\":1,\"864\":2,\"880\":1,\"887\":1,\"895\":1,\"925\":1,\"943\":2,\"957\":1,\"963\":1,\"985\":1,\"996\":1,\"1005\":1,\"1011\":1,\"1064\":1,\"1073\":1,\"1080\":1,\"1087\":1,\"1101\":1,\"1114\":1,\"1121\":1,\"1129\":1,\"1146\":1,\"1185\":2,\"1195\":2,\"1210\":1,\"1216\":1,\"1217\":2,\"1225\":2,\"1231\":1,\"1259\":1,\"1266\":1,\"1277\":1,\"1298\":1,\"1310\":1,\"1322\":1,\"1328\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1459\":2,\"1466\":1,\"1472\":2,\"1477\":1,\"1483\":1}}],[\"`<stdout>`\",{\"1\":{\"366\":1,\"372\":5,\"381\":1,\"396\":1,\"407\":2,\"415\":1,\"422\":1,\"427\":1,\"466\":1,\"478\":1,\"492\":1,\"498\":3,\"512\":2,\"539\":1,\"551\":1,\"556\":1,\"561\":2,\"574\":3,\"592\":2,\"602\":2,\"621\":4,\"627\":2,\"632\":4,\"638\":4,\"654\":2,\"667\":1,\"688\":1,\"693\":2,\"700\":1,\"706\":1,\"731\":1,\"738\":1,\"748\":3,\"761\":2,\"769\":1,\"790\":5,\"800\":3,\"805\":2,\"812\":1,\"846\":1,\"864\":3,\"874\":4,\"880\":1,\"887\":1,\"895\":1,\"920\":1,\"925\":2,\"933\":1,\"938\":1,\"943\":2,\"957\":1,\"963\":1,\"970\":1,\"978\":4,\"985\":2,\"996\":1,\"1005\":1,\"1011\":2,\"1017\":1,\"1034\":2,\"1042\":2,\"1047\":1,\"1064\":2,\"1073\":1,\"1080\":1,\"1087\":1,\"1101\":1,\"1114\":1,\"1129\":1,\"1146\":1,\"1156\":1,\"1174\":2,\"1185\":4,\"1216\":1,\"1225\":2,\"1231\":1,\"1244\":1,\"1259\":1,\"1266\":1,\"1271\":4,\"1277\":1,\"1298\":1,\"1304\":1,\"1316\":1,\"1322\":2,\"1328\":2,\"1334\":1,\"1340\":3,\"1408\":5,\"1413\":5,\"1425\":5,\"1433\":5,\"1441\":5,\"1459\":2,\"1466\":1,\"1472\":2,\"1477\":1,\"1483\":2}}],[\"`a`\",{\"1\":{\"1487\":1}}],[\"`age`\",{\"1\":{\"782\":2}}],[\"`args`\",{\"1\":{\"423\":1}}],[\"`append`\",{\"1\":{\"417\":1,\"1082\":1}}],[\"`^\",{\"1\":{\"347\":4,\"1021\":1,\"1701\":1}}],[\"`enter\",{\"1\":{\"1377\":1}}],[\"`echo`\",{\"1\":{\"224\":1}}],[\"`exec`\",{\"1\":{\"103\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"`=~\",{\"1\":{\"129\":1}}],[\"`\",{\"1\":{\"103\":3,\"354\":2,\"360\":2,\"361\":2,\"400\":2,\"423\":4,\"541\":3,\"563\":1,\"752\":1,\"794\":1,\"808\":2,\"869\":2,\"927\":1,\"942\":1,\"1022\":3,\"1158\":2,\"1176\":2,\"1189\":1,\"1227\":2,\"1701\":1}}],[\"`|`\",{\"1\":{\"103\":3}}],[\"`open\",{\"1\":{\"15\":1,\"26\":1,\"110\":1,\"116\":1,\"1024\":1,\"1025\":1,\"1182\":1,\"1782\":1}}],[\"48\",{\"1\":{\"1701\":22}}],[\"4♠\",{\"1\":{\"1652\":1,\"1662\":1}}],[\"4th\",{\"1\":{\"865\":2}}],[\"4567\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"456\",{\"1\":{\"493\":2,\"1088\":2,\"1226\":1,\"1639\":1}}],[\"44\",{\"1\":{\"159\":1}}],[\"405\",{\"1\":{\"1065\":1}}],[\"404\",{\"1\":{\"119\":1,\"616\":3,\"1305\":2}}],[\"408028\",{\"1\":{\"86\":2}}],[\"408024\",{\"1\":{\"86\":2}}],[\"49\",{\"1\":{\"86\":1,\"115\":1,\"1701\":41}}],[\"4\",{\"0\":{\"66\":1,\"80\":1,\"106\":1,\"170\":1,\"171\":1,\"175\":1,\"179\":1},\"1\":{\"61\":1,\"66\":1,\"69\":2,\"131\":2,\"170\":1,\"367\":1,\"399\":2,\"417\":1,\"487\":1,\"534\":1,\"557\":1,\"605\":1,\"608\":1,\"739\":1,\"742\":2,\"743\":1,\"751\":2,\"756\":1,\"865\":5,\"875\":1,\"905\":1,\"908\":1,\"1082\":1,\"1147\":1,\"1154\":1,\"1260\":3,\"1267\":5,\"1272\":1,\"1341\":2,\"1400\":1,\"1428\":4,\"1429\":1,\"1436\":2,\"1437\":1,\"1449\":6,\"1484\":1,\"1506\":3,\"1532\":3,\"1634\":1,\"1641\":1,\"1701\":6,\"1772\":3}}],[\"4200\",{\"0\":{\"144\":1}}],[\"42\",{\"1\":{\"53\":1,\"663\":1,\"847\":1}}],[\"43\",{\"1\":{\"43\":1,\"762\":3,\"847\":1}}],[\"x11\",{\"1\":{\"1016\":1}}],[\"x16\",{\"1\":{\"93\":1}}],[\"xdg\",{\"0\":{\"1753\":1},\"1\":{\"1016\":1,\"1023\":2,\"1753\":3}}],[\"xyz\",{\"1\":{\"926\":1}}],[\"xyzzy\",{\"1\":{\"926\":2}}],[\"x\",{\"0\":{\"69\":1,\"131\":1,\"179\":1},\"1\":{\"69\":2,\"95\":1,\"121\":1,\"131\":2,\"462\":1,\"692\":1,\"695\":2,\"779\":1,\"780\":2,\"782\":1,\"1265\":1,\"1401\":1,\"1403\":1,\"1432\":1,\"1448\":1,\"1516\":1,\"1616\":2,\"1630\":2,\"1643\":2,\"1655\":9,\"1668\":10,\"1692\":2,\"1697\":2,\"1805\":2}}],[\"xml\",{\"1\":{\"37\":1}}],[\"x86\",{\"1\":{\"2\":1,\"9\":2}}],[\"0f\",{\"1\":{\"1434\":1}}],[\"0e\",{\"1\":{\"1434\":1}}],[\"0d\",{\"1\":{\"1434\":1}}],[\"0c\",{\"1\":{\"1434\":1}}],[\"0b\",{\"1\":{\"1434\":1}}],[\"0h\",{\"1\":{\"865\":1,\"1260\":2,\"1267\":4}}],[\"0a\",{\"1\":{\"639\":2,\"1434\":1}}],[\"000240977\",{\"1\":{\"1293\":1}}],[\"000151513\",{\"1\":{\"1293\":1}}],[\"000\",{\"1\":{\"1153\":1}}],[\"0000\",{\"1\":{\"1022\":2}}],[\"00\",{\"1\":{\"91\":1,\"109\":1,\"367\":23,\"575\":2,\"865\":1,\"1175\":2,\"1260\":6,\"1267\":12,\"1401\":3,\"1404\":1,\"1432\":3,\"1691\":2,\"1710\":2}}],[\"01\",{\"0\":{\"74\":1},\"1\":{\"93\":1,\"108\":1,\"367\":1,\"373\":2,\"375\":4,\"562\":3,\"575\":2,\"847\":3,\"1401\":1,\"1404\":5,\"1414\":2,\"1416\":3,\"1418\":2,\"1419\":2,\"1420\":2,\"1421\":2,\"1426\":2,\"1432\":1}}],[\"097643108\",{\"1\":{\"742\":1}}],[\"09\",{\"0\":{\"73\":1,\"80\":1,\"81\":1},\"1\":{\"95\":1,\"104\":1,\"109\":1,\"168\":1,\"1404\":1,\"1434\":1}}],[\"03\",{\"0\":{\"70\":1},\"1\":{\"129\":1,\"367\":1,\"373\":2,\"375\":4,\"1404\":5,\"1418\":2,\"1419\":2,\"1420\":2,\"1421\":2,\"1426\":2,\"1710\":2}}],[\"07t14\",{\"1\":{\"1175\":2}}],[\"07\",{\"0\":{\"66\":1,\"67\":1,\"75\":1},\"1\":{\"119\":1,\"168\":1,\"182\":1,\"375\":4,\"1175\":2,\"1404\":5,\"1436\":3}}],[\"08x16\",{\"1\":{\"1434\":1}}],[\"08\",{\"0\":{\"74\":1},\"1\":{\"62\":1,\"93\":1,\"95\":1,\"109\":1,\"121\":1,\"562\":3,\"1404\":1,\"1434\":2,\"1691\":1}}],[\"05581+01\",{\"1\":{\"1175\":1}}],[\"053924326\",{\"1\":{\"742\":1}}],[\"05\",{\"0\":{\"76\":1,\"77\":1},\"1\":{\"62\":1,\"108\":1,\"115\":1,\"117\":1,\"375\":4,\"544\":1,\"562\":3,\"1404\":5,\"1412\":1,\"1436\":9,\"1691\":1}}],[\"06\",{\"0\":{\"68\":1,\"69\":1,\"82\":1},\"1\":{\"62\":1,\"100\":1,\"159\":1,\"163\":1,\"375\":4,\"562\":3,\"1175\":2,\"1404\":5,\"1421\":12,\"1436\":3}}],[\"0\",{\"0\":{\"70\":1,\"72\":1,\"84\":1,\"86\":1,\"121\":1,\"125\":1,\"1769\":1},\"1\":{\"52\":9,\"61\":1,\"318\":2,\"326\":2,\"333\":2,\"340\":9,\"347\":30,\"375\":3,\"376\":4,\"440\":2,\"447\":1,\"507\":1,\"575\":7,\"576\":1,\"593\":1,\"595\":1,\"661\":1,\"668\":1,\"742\":5,\"865\":13,\"867\":1,\"1021\":2,\"1107\":2,\"1108\":1,\"1116\":1,\"1139\":1,\"1141\":1,\"1142\":1,\"1153\":2,\"1154\":1,\"1175\":1,\"1178\":12,\"1226\":3,\"1251\":1,\"1260\":68,\"1267\":105,\"1285\":1,\"1300\":1,\"1335\":3,\"1352\":1,\"1395\":1,\"1400\":3,\"1401\":2,\"1404\":5,\"1405\":4,\"1428\":15,\"1429\":2,\"1432\":2,\"1436\":4,\"1437\":2,\"1629\":1,\"1691\":4,\"1701\":2,\"1710\":1,\"1745\":1,\"1769\":1,\"1772\":7,\"1805\":1}}],[\"02\",{\"0\":{\"34\":1,\"67\":1,\"71\":1,\"78\":1,\"79\":1},\"1\":{\"53\":1,\"111\":1,\"113\":1,\"123\":1,\"168\":1,\"367\":1,\"373\":1,\"375\":4,\"562\":3,\"1260\":2,\"1267\":4,\"1404\":5,\"1418\":1,\"1419\":1,\"1420\":1,\"1421\":32,\"1426\":1}}],[\"04\",{\"0\":{\"33\":1,\"69\":1,\"83\":1,\"84\":1},\"1\":{\"43\":1,\"86\":1,\"91\":1,\"159\":1,\"562\":3,\"1404\":1}}],[\"2eoc\",{\"1\":{\"1772\":1}}],[\"29\",{\"1\":{\"1404\":1,\"1414\":2,\"1651\":1,\"1661\":1,\"1701\":1}}],[\"299\",{\"1\":{\"103\":1}}],[\"28t09\",{\"1\":{\"1710\":2}}],[\"28\",{\"1\":{\"1404\":1,\"1414\":2,\"1701\":1}}],[\"27t07\",{\"1\":{\"1691\":1}}],[\"27\",{\"1\":{\"1226\":1,\"1404\":1,\"1414\":2,\"1639\":1,\"1701\":91,\"1702\":2}}],[\"2+2==5\",{\"1\":{\"1035\":1}}],[\"2+2==4\",{\"1\":{\"408\":1}}],[\"2nd\",{\"0\":{\"1168\":1},\"1\":{\"593\":1,\"742\":1,\"865\":2,\"1226\":1,\"1639\":1}}],[\"25th\",{\"1\":{\"1416\":1}}],[\"25\",{\"1\":{\"544\":1,\"1404\":1,\"1412\":3,\"1414\":4,\"1416\":2,\"1701\":1}}],[\"254\",{\"1\":{\"376\":4,\"1405\":4}}],[\"2>\",{\"1\":{\"232\":1,\"423\":1,\"1772\":1}}],[\"2^31\",{\"1\":{\"111\":1}}],[\"2^63\",{\"1\":{\"111\":1}}],[\"2012a\",{\"1\":{\"1651\":1,\"1661\":1}}],[\"2012b\",{\"1\":{\"1651\":1,\"1661\":1}}],[\"2013\",{\"1\":{\"1651\":2,\"1661\":2}}],[\"2019\",{\"1\":{\"575\":2,\"847\":3,\"1175\":2}}],[\"20t00\",{\"1\":{\"575\":2}}],[\"2006\",{\"1\":{\"1421\":13}}],[\"200\",{\"1\":{\"108\":1,\"806\":1}}],[\"20\",{\"1\":{\"93\":1,\"108\":1,\"119\":1,\"224\":1,\"249\":1,\"608\":2,\"639\":2,\"908\":2,\"1157\":3,\"1404\":1,\"1701\":1,\"1772\":1}}],[\"2020\",{\"1\":{\"544\":1,\"1412\":3,\"1414\":8,\"1416\":11,\"1421\":2}}],[\"2022\",{\"0\":{\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1},\"1\":{\"93\":1,\"95\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1}}],[\"2021\",{\"0\":{\"34\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1},\"1\":{\"53\":1,\"62\":1,\"86\":1,\"91\":1,\"100\":1,\"104\":1,\"109\":1,\"544\":1,\"1412\":1,\"1414\":2,\"1416\":1,\"1710\":2}}],[\"2023\",{\"0\":{\"33\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1},\"1\":{\"43\":1,\"123\":1,\"129\":1,\"159\":1,\"163\":1,\"168\":1,\"182\":1}}],[\"2147483647\",{\"1\":{\"1634\":1}}],[\"2147483648\",{\"1\":{\"1634\":1}}],[\"212\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"21\",{\"0\":{\"82\":1},\"1\":{\"100\":2,\"108\":1,\"123\":1,\"562\":3,\"603\":14,\"639\":2,\"847\":1,\"902\":1,\"1226\":1,\"1404\":1,\"1639\":1,\"1701\":1}}],[\"233996\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"23\",{\"0\":{\"76\":1},\"1\":{\"117\":2,\"163\":1,\"382\":2,\"1404\":1,\"1416\":4,\"1701\":1}}],[\"267q\",{\"1\":{\"1299\":1}}],[\"265541\",{\"1\":{\"1178\":1}}],[\"265540\",{\"1\":{\"1178\":1}}],[\"265499\",{\"1\":{\"1178\":1}}],[\"26\",{\"0\":{\"70\":1,\"78\":1,\"81\":1},\"1\":{\"104\":1,\"113\":1,\"129\":1,\"1404\":1,\"1414\":2,\"1701\":1}}],[\"24\",{\"1\":{\"62\":1,\"1404\":1,\"1416\":2,\"1651\":1,\"1661\":1,\"1701\":1}}],[\"2\",{\"0\":{\"68\":1,\"82\":1,\"97\":1,\"160\":1,\"1770\":1},\"1\":{\"60\":1,\"61\":7,\"67\":1,\"93\":1,\"103\":1,\"165\":1,\"224\":1,\"235\":2,\"236\":2,\"237\":4,\"340\":1,\"367\":1,\"373\":2,\"397\":1,\"399\":1,\"417\":1,\"459\":1,\"462\":1,\"487\":1,\"493\":2,\"534\":1,\"544\":2,\"545\":2,\"605\":2,\"608\":1,\"739\":1,\"742\":3,\"743\":6,\"749\":2,\"751\":2,\"755\":2,\"756\":6,\"764\":1,\"770\":2,\"779\":1,\"780\":2,\"782\":4,\"783\":2,\"801\":3,\"847\":1,\"865\":3,\"869\":1,\"875\":1,\"888\":1,\"897\":2,\"905\":2,\"908\":1,\"939\":4,\"997\":2,\"1021\":1,\"1082\":1,\"1088\":2,\"1217\":7,\"1226\":4,\"1260\":4,\"1267\":5,\"1272\":1,\"1339\":1,\"1341\":2,\"1400\":2,\"1401\":1,\"1403\":1,\"1404\":1,\"1426\":2,\"1428\":3,\"1429\":1,\"1432\":1,\"1436\":3,\"1437\":1,\"1448\":1,\"1449\":6,\"1484\":1,\"1506\":3,\"1522\":2,\"1524\":1,\"1525\":2,\"1526\":2,\"1527\":2,\"1532\":2,\"1539\":2,\"1634\":1,\"1641\":6,\"1691\":2,\"1701\":4,\"1741\":1,\"1764\":2,\"1765\":2,\"1772\":20}}],[\"22\",{\"0\":{\"33\":1},\"1\":{\"43\":1,\"53\":1,\"115\":1,\"117\":1,\"123\":1,\"182\":1,\"417\":1,\"562\":3,\"1082\":1,\"1404\":1,\"1701\":1}}],[\"2d\",{\"1\":{\"15\":1,\"26\":1,\"364\":1,\"884\":1,\"947\":1,\"967\":1,\"1137\":1}}],[\"2darray\",{\"0\":{\"364\":1},\"1\":{\"15\":1,\"26\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"884\":1,\"947\":1,\"967\":1,\"1137\":1}}],[\"~joe\",{\"1\":{\"1597\":1}}],[\"~>\",{\"1\":{\"142\":1,\"1629\":1}}],[\"~\",{\"0\":{\"1595\":1},\"1\":{\"24\":1,\"108\":1,\"113\":2,\"182\":1,\"506\":1,\"848\":1,\"977\":1,\"1175\":2,\"1502\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1597\":1,\"1598\":5,\"1704\":1,\"1729\":1,\"1731\":1,\"1749\":3,\"1787\":1,\"1790\":1}}],[\"$object\",{\"1\":{\"1772\":5}}],[\"$xdg\",{\"1\":{\"1753\":4}}],[\"$tmpdir\",{\"1\":{\"1300\":1}}],[\"$tmp\",{\"1\":{\"1299\":2}}],[\"$table2\",{\"1\":{\"111\":1}}],[\"$table1\",{\"1\":{\"111\":1}}],[\"$rand\",{\"1\":{\"1245\":3}}],[\"$url\",{\"1\":{\"1311\":2}}],[\"$under21\",{\"1\":{\"902\":1}}],[\"$under18\",{\"1\":{\"902\":1}}],[\"$user\",{\"1\":{\"247\":1,\"252\":1,\"487\":1,\"1750\":1}}],[\"$value\",{\"1\":{\"751\":1,\"762\":2,\"1400\":1,\"1772\":1}}],[\"$var\",{\"1\":{\"751\":1}}],[\"$variable\",{\"1\":{\"592\":1,\"800\":1,\"864\":1}}],[\"$v\",{\"1\":{\"743\":2,\"756\":2,\"1641\":2}}],[\"$cmd\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"$dark\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"$day\",{\"1\":{\"40\":1,\"41\":1,\"42\":2,\"750\":2,\"1400\":1}}],[\"$b\",{\"1\":{\"628\":2}}],[\"$array\",{\"1\":{\"1772\":2}}],[\"$args\",{\"1\":{\"423\":4,\"779\":1,\"1764\":2,\"1765\":1,\"1769\":1,\"1770\":1}}],[\"$abc==123\",{\"1\":{\"605\":2,\"905\":2}}],[\"$age\",{\"1\":{\"603\":2,\"677\":1,\"782\":1,\"823\":1,\"902\":2,\"910\":1,\"1199\":1}}],[\"$key\",{\"1\":{\"762\":2,\"1400\":1,\"1772\":1}}],[\"$k\",{\"1\":{\"440\":1}}],[\"$shell\",{\"1\":{\"1766\":1,\"1772\":4}}],[\"$shells\",{\"1\":{\"34\":1,\"45\":1,\"46\":1}}],[\"$self\",{\"1\":{\"1756\":1}}],[\"$strings\",{\"1\":{\"440\":1}}],[\"$`\",{\"1\":{\"347\":2,\"1021\":1}}],[\"$item\",{\"1\":{\"1772\":1}}],[\"$itemdone\",{\"1\":{\"1772\":1}}],[\"$integer\",{\"1\":{\"1772\":1}}],[\"$issue\",{\"1\":{\"1018\":2}}],[\"$i\",{\"1\":{\"251\":2,\"252\":2,\"487\":2,\"488\":2,\"534\":2,\"535\":2,\"739\":1,\"741\":1,\"742\":5,\"743\":6,\"749\":1,\"755\":4,\"756\":6,\"904\":2,\"1341\":2,\"1641\":6}}],[\"$number\",{\"1\":{\"1772\":1}}],[\"$name\",{\"1\":{\"225\":3,\"249\":1,\"744\":3,\"757\":3,\"781\":2,\"783\":2,\"784\":1,\"1122\":2,\"1163\":1,\"1175\":1,\"1245\":1,\"1285\":1,\"1642\":3,\"1772\":2}}],[\"$new\",{\"1\":{\"38\":2,\"56\":2}}],[\"$fb\",{\"1\":{\"628\":1}}],[\"$fruit\",{\"1\":{\"248\":1}}],[\"$file\",{\"1\":{\"228\":1,\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"$f\",{\"1\":{\"208\":1}}],[\"$foobar=\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"$foobar\",{\"1\":{\"127\":1,\"224\":1,\"678\":1,\"679\":2,\"824\":1,\"825\":2,\"911\":1,\"912\":2,\"1200\":1,\"1201\":2,\"1772\":3,\"1773\":1}}],[\"$foo\",{\"1\":{\"121\":1,\"127\":1,\"225\":1,\"676\":1,\"683\":4,\"829\":4,\"916\":4,\"1205\":4,\"1772\":1,\"1773\":1,\"1780\":3}}],[\"$gitstatus\",{\"1\":{\"1725\":1}}],[\"$guess\",{\"1\":{\"1245\":2}}],[\"$gopath\",{\"1\":{\"207\":1,\"208\":2}}],[\"$global\",{\"1\":{\"127\":1,\"225\":4,\"1772\":1}}],[\"$editor\",{\"0\":{\"1806\":1},\"1\":{\"1716\":1,\"1795\":1,\"1805\":1,\"1806\":1}}],[\"$exe\",{\"1\":{\"653\":2}}],[\"$example\",{\"1\":{\"61\":2,\"801\":1,\"1226\":5,\"1505\":6,\"1517\":1,\"1550\":1,\"1587\":2,\"1592\":6,\"1593\":5}}],[\"$event\",{\"1\":{\"649\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1369\":2,\"1378\":1}}],[\"$envvar\",{\"1\":{\"1708\":2}}],[\"$env\",{\"1\":{\"127\":1,\"226\":3,\"1772\":1}}],[\"$hw\",{\"1\":{\"673\":2,\"682\":1,\"820\":2,\"828\":1,\"915\":1,\"1196\":2,\"1204\":1}}],[\"$hello\",{\"1\":{\"126\":1}}],[\"$hostname\",{\"1\":{\"115\":1}}],[\"$partial\",{\"1\":{\"1505\":1,\"1592\":1}}],[\"$params\",{\"1\":{\"1764\":1,\"1765\":2}}],[\"$param\",{\"1\":{\"779\":1}}],[\"$path\",{\"1\":{\"15\":1,\"26\":1,\"113\":1,\"123\":2,\"210\":1,\"244\":1,\"387\":1,\"390\":1,\"450\":1,\"451\":1,\"656\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"775\":1,\"988\":1,\"989\":1,\"1241\":1,\"1750\":1,\"1753\":1,\"1791\":1}}],[\"$people\",{\"1\":{\"762\":2}}],[\"$person\",{\"1\":{\"249\":1,\"1772\":1}}],[\"$pid\",{\"1\":{\"743\":2,\"756\":2,\"1641\":2}}],[\"$ps\",{\"1\":{\"367\":4}}],[\"$prefix\",{\"1\":{\"142\":1,\"438\":1,\"439\":1}}],[\"$pwdhist\",{\"1\":{\"507\":3}}],[\"$pwd\",{\"1\":{\"119\":1,\"126\":3}}],[\"$mood\",{\"1\":{\"1163\":1}}],[\"$months\",{\"1\":{\"59\":2}}],[\"$message\",{\"1\":{\"242\":1}}],[\"$myvar\",{\"1\":{\"117\":1}}],[\"$0\",{\"1\":{\"115\":1}}],[\"$2\",{\"1\":{\"115\":1,\"779\":1}}],[\"$19\",{\"1\":{\"1770\":1}}],[\"$13\",{\"1\":{\"115\":1}}],[\"$1\",{\"1\":{\"115\":2,\"421\":1,\"1770\":1}}],[\"$len\",{\"1\":{\"108\":1}}],[\"$linenum\",{\"1\":{\"108\":1}}],[\"$line\",{\"1\":{\"38\":4,\"56\":4,\"1789\":1}}],[\"$jsonobject\",{\"1\":{\"42\":2}}],[\"$jsonstring\",{\"1\":{\"42\":3}}],[\"$json\",{\"1\":{\"40\":1,\"41\":1,\"127\":1}}],[\"$\",{\"0\":{\"1590\":1},\"1\":{\"24\":1,\"40\":1,\"41\":1,\"61\":4,\"108\":3,\"115\":1,\"126\":2,\"127\":3,\"130\":1,\"135\":1,\"142\":1,\"162\":1,\"163\":1,\"237\":2,\"238\":1,\"389\":1,\"423\":6,\"440\":3,\"526\":1,\"605\":1,\"751\":1,\"754\":5,\"765\":5,\"777\":1,\"780\":1,\"905\":1,\"921\":1,\"926\":1,\"1095\":1,\"1125\":1,\"1175\":1,\"1285\":1,\"1312\":1,\"1343\":5,\"1416\":1,\"1502\":1,\"1505\":4,\"1506\":2,\"1507\":1,\"1513\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1592\":4,\"1599\":1,\"1629\":2,\"1771\":1,\"1772\":16,\"1773\":4,\"1774\":1,\"1805\":1}}],[\"|regexp\",{\"1\":{\"1583\":1}}],[\"|eof\",{\"1\":{\"1376\":1}}],[\"|abort\",{\"1\":{\"1376\":1}}],[\"|after\",{\"1\":{\"1376\":1}}],[\"|uri\",{\"1\":{\"1017\":1}}],[\"|data\",{\"1\":{\"596\":1}}],[\"|syntax\",{\"1\":{\"596\":1}}],[\"|shell|syntax\",{\"1\":{\"597\":1}}],[\"|shell\",{\"1\":{\"596\":1}}],[\"|path|to|key\",{\"1\":{\"395\":1}}],[\"|>\",{\"1\":{\"119\":1,\"233\":1,\"791\":2,\"840\":1,\"841\":1,\"1186\":1,\"1211\":1,\"1567\":1,\"1772\":1}}],[\"|\",{\"0\":{\"1581\":1},\"1\":{\"24\":1,\"38\":1,\"40\":2,\"41\":1,\"47\":2,\"56\":1,\"59\":3,\"60\":1,\"99\":1,\"104\":1,\"105\":1,\"217\":1,\"218\":1,\"231\":3,\"235\":3,\"236\":1,\"238\":2,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"361\":2,\"395\":1,\"396\":3,\"498\":1,\"539\":2,\"596\":1,\"837\":1,\"843\":1,\"978\":1,\"999\":1,\"1058\":1,\"1218\":1,\"1219\":1,\"1244\":2,\"1321\":1,\"1483\":2,\"1502\":1,\"1566\":1,\"1568\":1,\"1570\":2,\"1572\":1,\"1576\":1,\"1578\":1,\"1579\":1,\"1580\":1,\"1583\":2,\"1719\":2,\"1727\":1,\"1744\":1,\"1745\":2,\"1748\":1,\"1772\":21,\"1779\":1}}],[\"|||spouse\",{\"1\":{\"1226\":1}}],[\"|||children\",{\"1\":{\"1226\":1}}],[\"|||phonenumbers\",{\"1\":{\"1226\":1}}],[\"|||address\",{\"1\":{\"1226\":1}}],[\"|||age\",{\"1\":{\"1226\":1}}],[\"|||isalive\",{\"1\":{\"1226\":1}}],[\"|||lastname\",{\"1\":{\"1226\":1}}],[\"|||firstname\",{\"1\":{\"1226\":1}}],[\"|||\",{\"1\":{\"1226\":1}}],[\"||\",{\"0\":{\"1558\":1},\"1\":{\"24\":1,\"93\":1,\"94\":1,\"115\":2,\"116\":1,\"347\":2,\"1502\":1,\"1560\":2,\"1772\":2,\"1774\":1}}],[\"😉\",{\"1\":{\"111\":1}}],[\"🛟\",{\"0\":{\"20\":1}}],[\"📦\",{\"0\":{\"19\":1}}],[\"👁‍🗨\",{\"0\":{\"18\":1}}],[\"qwert\",{\"1\":{\"1789\":2}}],[\"q\",{\"1\":{\"695\":2}}],[\"qs\",{\"1\":{\"648\":1,\"1175\":1,\"1311\":2}}],[\"qr\",{\"0\":{\"1475\":1},\"1\":{\"16\":2,\"27\":2,\"209\":1,\"467\":2,\"1014\":2,\"1456\":2,\"1475\":1,\"1476\":2,\"1477\":1,\"1478\":3,\"1479\":1}}],[\"quarter\",{\"1\":{\"1449\":2}}],[\"quantities\",{\"1\":{\"751\":1}}],[\"quitting\",{\"1\":{\"645\":1}}],[\"quicker\",{\"1\":{\"113\":1}}],[\"quick\",{\"1\":{\"47\":1,\"52\":1,\"445\":1,\"447\":1,\"545\":2,\"546\":2,\"692\":1}}],[\"quickly\",{\"1\":{\"24\":2,\"34\":1,\"44\":1,\"45\":1,\"46\":1,\"63\":1,\"130\":1,\"378\":1,\"743\":1,\"756\":1,\"877\":1,\"1274\":1,\"1502\":2,\"1519\":1,\"1536\":1,\"1537\":1,\"1540\":1,\"1641\":1,\"1675\":1,\"1798\":1,\"1799\":1}}],[\"queried\",{\"1\":{\"519\":1,\"889\":1,\"1075\":1,\"1148\":1,\"1233\":1,\"1400\":1}}],[\"queries\",{\"1\":{\"90\":1,\"113\":1,\"1482\":1,\"1486\":1}}],[\"query\",{\"1\":{\"15\":1,\"26\":1,\"87\":1,\"96\":1,\"110\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"120\":1,\"122\":1,\"164\":1,\"169\":1,\"183\":1,\"404\":1,\"457\":1,\"463\":1,\"510\":1,\"599\":1,\"779\":1,\"809\":1,\"816\":1,\"849\":1,\"871\":1,\"935\":1,\"982\":1,\"987\":1,\"1024\":1,\"1070\":1,\"1182\":1,\"1213\":1,\"1241\":1,\"1289\":1,\"1311\":2,\"1337\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1400\":1,\"1491\":1,\"1601\":1,\"1618\":1,\"1675\":1,\"1706\":1,\"1707\":1,\"1727\":1,\"1771\":1,\"1782\":1,\"1794\":1}}],[\"querying\",{\"0\":{\"14\":1,\"1455\":1},\"1\":{\"1173\":1,\"1610\":1}}],[\"question\",{\"1\":{\"50\":1}}],[\"quoting\",{\"0\":{\"222\":1,\"597\":1},\"1\":{\"441\":1,\"480\":1,\"1772\":1}}],[\"quoted\",{\"1\":{\"216\":1,\"222\":1,\"228\":1,\"387\":1,\"1506\":1,\"1509\":1,\"1520\":1,\"1538\":1,\"1549\":1,\"1586\":1,\"1674\":2,\"1772\":1}}],[\"quotes\",{\"0\":{\"1513\":1,\"1515\":1},\"1\":{\"121\":1,\"222\":1,\"228\":1,\"387\":1,\"480\":1,\"526\":1,\"683\":2,\"780\":2,\"829\":2,\"916\":2,\"1205\":2,\"1509\":4,\"1513\":2,\"1515\":1,\"1516\":1,\"1549\":1,\"1551\":1,\"1586\":1,\"1588\":1,\"1593\":3,\"1598\":3,\"1702\":1,\"1772\":1}}],[\"quote\",{\"0\":{\"476\":1,\"1508\":1,\"1548\":1,\"1585\":1},\"1\":{\"15\":1,\"24\":3,\"26\":1,\"222\":4,\"228\":1,\"395\":1,\"402\":1,\"545\":2,\"546\":1,\"597\":2,\"611\":1,\"618\":1,\"685\":1,\"831\":1,\"917\":1,\"975\":1,\"1052\":1,\"1126\":1,\"1207\":1,\"1307\":1,\"1313\":1,\"1502\":3,\"1507\":4,\"1509\":1,\"1517\":1,\"1518\":3,\"1536\":3,\"1540\":3,\"1542\":1,\"1547\":4,\"1549\":1,\"1552\":3,\"1586\":1,\"1589\":3,\"1593\":1,\"1594\":4,\"1599\":4,\"1674\":1,\"1675\":1,\"1705\":1}}],[\"quotations\",{\"1\":{\"3\":1,\"1509\":1}}],[\"quotation\",{\"0\":{\"683\":1,\"829\":1,\"916\":1,\"1205\":1,\"1674\":1},\"1\":{\"3\":3,\"40\":1,\"47\":3,\"237\":1,\"1509\":1,\"1513\":1,\"1542\":2,\"1593\":1}}],[\"kthreadd\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"kworker\",{\"1\":{\"865\":1,\"1260\":2,\"1267\":4}}],[\"k\",{\"1\":{\"440\":1,\"743\":2,\"756\":2,\"1641\":2}}],[\"kind\",{\"1\":{\"90\":1,\"376\":1,\"1405\":1,\"1652\":1,\"1662\":1}}],[\"kin\",{\"1\":{\"52\":1}}],[\"killed\",{\"1\":{\"113\":1}}],[\"killall\",{\"0\":{\"724\":1},\"1\":{\"15\":1,\"26\":1,\"475\":1,\"659\":1,\"718\":1,\"723\":1,\"725\":1,\"726\":1,\"727\":1,\"735\":1}}],[\"kill\",{\"0\":{\"719\":1},\"1\":{\"15\":1,\"26\":1,\"217\":1,\"475\":1,\"659\":1,\"718\":1,\"720\":2,\"721\":1,\"722\":2,\"727\":3,\"728\":1,\"735\":1,\"1716\":2,\"1808\":4}}],[\"knife\",{\"1\":{\"1276\":1}}],[\"know\",{\"1\":{\"220\":1,\"247\":1,\"354\":1,\"361\":1,\"1634\":1,\"1677\":1}}],[\"known\",{\"1\":{\"1\":1,\"3\":1,\"204\":1,\"525\":1,\"695\":1,\"1570\":1,\"1741\":1,\"1772\":1}}],[\"knew\",{\"1\":{\"47\":1}}],[\"kept\",{\"1\":{\"1728\":1}}],[\"kernel\",{\"1\":{\"717\":1,\"722\":1,\"727\":1}}],[\"keeping\",{\"1\":{\"1723\":1}}],[\"keep\",{\"1\":{\"40\":1,\"154\":1,\"387\":1}}],[\"keywords\",{\"1\":{\"1773\":1}}],[\"key2\",{\"1\":{\"1772\":2}}],[\"key1\",{\"1\":{\"1772\":2}}],[\"keyboard\",{\"1\":{\"138\":1,\"1799\":4,\"1802\":4}}],[\"key=c\",{\"1\":{\"60\":1}}],[\"key=b\",{\"1\":{\"60\":1}}],[\"key=a\",{\"1\":{\"60\":1}}],[\"key=$key\",{\"1\":{\"60\":1}}],[\"keyed\",{\"1\":{\"47\":1}}],[\"key\",{\"0\":{\"516\":1,\"1812\":1},\"1\":{\"30\":1,\"50\":1,\"52\":1,\"60\":3,\"61\":3,\"98\":1,\"147\":1,\"265\":1,\"272\":1,\"279\":1,\"287\":1,\"288\":1,\"292\":3,\"313\":1,\"318\":8,\"320\":1,\"326\":8,\"328\":1,\"333\":8,\"335\":1,\"340\":25,\"342\":1,\"349\":1,\"395\":3,\"397\":1,\"439\":2,\"446\":1,\"512\":7,\"516\":2,\"517\":1,\"526\":2,\"527\":1,\"575\":3,\"596\":2,\"597\":1,\"648\":1,\"748\":1,\"761\":2,\"762\":2,\"847\":3,\"869\":1,\"926\":1,\"937\":2,\"939\":6,\"1020\":1,\"1021\":1,\"1175\":1,\"1278\":4,\"1280\":1,\"1400\":2,\"1612\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1746\":1,\"1772\":6,\"1795\":1,\"1797\":1,\"1798\":1,\"1807\":1}}],[\"keystrokes\",{\"1\":{\"241\":1}}],[\"keys\",{\"0\":{\"1223\":1,\"1804\":1,\"1805\":1},\"1\":{\"15\":2,\"26\":2,\"89\":1,\"95\":1,\"96\":2,\"98\":1,\"154\":1,\"168\":2,\"340\":1,\"398\":1,\"399\":1,\"596\":1,\"1223\":1,\"1224\":3,\"1225\":2,\"1226\":4,\"1260\":1,\"1538\":1,\"1701\":1,\"1716\":1,\"1718\":1,\"1795\":2,\"1797\":2,\"1798\":2,\"1799\":1,\"1802\":3,\"1804\":1,\"1806\":1,\"1808\":1}}],[\"1+2\",{\"1\":{\"1772\":2}}],[\"1+1==2\",{\"1\":{\"408\":1,\"1035\":1}}],[\"1line\",{\"1\":{\"1772\":2}}],[\"1st\",{\"0\":{\"1165\":1},\"1\":{\"121\":2,\"865\":2}}],[\"144\",{\"1\":{\"1484\":1}}],[\"149\",{\"1\":{\"1175\":1}}],[\"14\",{\"1\":{\"119\":1,\"865\":1,\"1404\":1,\"1651\":1,\"1661\":1,\"1701\":1}}],[\"168\",{\"1\":{\"1691\":1}}],[\"168284\",{\"1\":{\"865\":1}}],[\"16784\",{\"1\":{\"847\":1}}],[\"16783\",{\"1\":{\"847\":1}}],[\"16782\",{\"1\":{\"847\":1}}],[\"167776212z\",{\"1\":{\"575\":1}}],[\"167127131z\",{\"1\":{\"575\":1}}],[\"1639002750\",{\"1\":{\"562\":2}}],[\"16\",{\"1\":{\"111\":2,\"1401\":1,\"1404\":1,\"1432\":1,\"1701\":1}}],[\"1<\",{\"1\":{\"103\":1}}],[\"13893\",{\"1\":{\"1299\":1}}],[\"13\",{\"1\":{\"99\":1,\"119\":1,\"1141\":3,\"1404\":1,\"1701\":3}}],[\"17\",{\"0\":{\"84\":1},\"1\":{\"86\":1,\"121\":1,\"129\":1,\"488\":1,\"535\":1,\"1404\":1,\"1701\":1}}],[\"15\",{\"0\":{\"75\":1,\"77\":1},\"1\":{\"115\":1,\"119\":2,\"163\":1,\"562\":3,\"1157\":1,\"1404\":1,\"1701\":1}}],[\"126\",{\"1\":{\"1701\":18}}],[\"127\",{\"1\":{\"1701\":2}}],[\"124273664z\",{\"1\":{\"847\":1}}],[\"123==123\",{\"1\":{\"605\":2,\"905\":2}}],[\"123\",{\"1\":{\"493\":2,\"1088\":2,\"1226\":1,\"1639\":1}}],[\"12345\",{\"1\":{\"1153\":1}}],[\"1234\",{\"1\":{\"217\":1,\"1226\":1,\"1639\":1}}],[\"1200\",{\"1\":{\"103\":1,\"1335\":2}}],[\"12\",{\"0\":{\"71\":1,\"72\":1,\"73\":1,\"79\":1,\"80\":1},\"1\":{\"86\":1,\"90\":1,\"95\":1,\"109\":1,\"111\":1,\"121\":1,\"123\":1,\"544\":1,\"562\":3,\"689\":1,\"1404\":1,\"1449\":2,\"1701\":1}}],[\"192\",{\"1\":{\"1691\":1}}],[\"1974\",{\"1\":{\"1746\":1}}],[\"1979\",{\"1\":{\"1691\":1}}],[\"1970s\",{\"1\":{\"51\":1}}],[\"19t22\",{\"1\":{\"847\":3}}],[\"19\",{\"0\":{\"68\":1},\"1\":{\"163\":1,\"367\":1,\"902\":1,\"1404\":1,\"1651\":1,\"1661\":1,\"1701\":1,\"1770\":1}}],[\"18\",{\"0\":{\"66\":1},\"1\":{\"113\":1,\"182\":1,\"207\":1,\"902\":1,\"1404\":1,\"1701\":1}}],[\"11357\",{\"1\":{\"1756\":2}}],[\"114986768z\",{\"1\":{\"847\":1}}],[\"1100\",{\"0\":{\"152\":1}}],[\"11\",{\"0\":{\"73\":1,\"95\":1},\"1\":{\"43\":1,\"104\":1,\"367\":1,\"869\":1,\"1175\":1,\"1404\":1,\"1449\":2,\"1629\":1,\"1701\":1}}],[\"109\",{\"1\":{\"1701\":50,\"1702\":2}}],[\"10♥\",{\"1\":{\"1652\":1,\"1662\":1}}],[\"10x8\",{\"1\":{\"1436\":1}}],[\"10x16\",{\"1\":{\"1434\":1}}],[\"10s\",{\"1\":{\"1175\":1,\"1285\":1}}],[\"10th\",{\"1\":{\"1115\":1}}],[\"1036\",{\"1\":{\"865\":1}}],[\"108025\",{\"1\":{\"865\":1}}],[\"10+10\",{\"1\":{\"608\":1,\"908\":1}}],[\"10021\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"10000\",{\"1\":{\"742\":1}}],[\"100\",{\"1\":{\"445\":1,\"1245\":2}}],[\"10\",{\"0\":{\"34\":1,\"74\":1,\"93\":1,\"156\":1},\"1\":{\"53\":1,\"91\":1,\"93\":1,\"95\":1,\"121\":1,\"159\":1,\"217\":1,\"249\":1,\"251\":1,\"252\":1,\"367\":2,\"487\":1,\"488\":1,\"517\":2,\"534\":2,\"535\":1,\"608\":2,\"751\":2,\"908\":2,\"921\":2,\"1022\":2,\"1154\":1,\"1175\":1,\"1267\":1,\"1386\":1,\"1404\":1,\"1434\":3,\"1436\":8,\"1449\":2,\"1691\":2,\"1701\":3,\"1710\":2,\"1772\":1}}],[\"1\",{\"0\":{\"69\":1,\"71\":1,\"83\":1,\"88\":1,\"123\":1,\"131\":1,\"132\":1,\"136\":1,\"140\":1,\"144\":1,\"148\":1,\"152\":1,\"156\":1,\"751\":1,\"1770\":1},\"1\":{\"15\":1,\"26\":1,\"41\":1,\"52\":9,\"60\":1,\"61\":2,\"69\":2,\"103\":2,\"107\":1,\"108\":1,\"111\":4,\"119\":1,\"121\":3,\"131\":2,\"168\":1,\"207\":1,\"224\":2,\"232\":1,\"235\":2,\"236\":2,\"237\":4,\"239\":2,\"251\":1,\"252\":1,\"340\":6,\"345\":2,\"347\":19,\"367\":1,\"371\":2,\"373\":4,\"375\":3,\"397\":2,\"399\":2,\"417\":2,\"423\":1,\"437\":1,\"487\":2,\"488\":1,\"493\":2,\"534\":2,\"535\":1,\"544\":2,\"545\":8,\"575\":4,\"576\":1,\"584\":1,\"585\":1,\"586\":1,\"593\":2,\"596\":1,\"605\":8,\"608\":1,\"645\":1,\"664\":1,\"678\":1,\"689\":1,\"739\":1,\"742\":4,\"743\":9,\"749\":4,\"751\":3,\"754\":1,\"755\":6,\"756\":9,\"765\":1,\"770\":2,\"782\":6,\"794\":2,\"801\":3,\"824\":1,\"847\":1,\"865\":7,\"873\":1,\"875\":2,\"897\":2,\"904\":3,\"905\":8,\"908\":1,\"911\":1,\"939\":4,\"997\":1,\"1021\":1,\"1022\":2,\"1082\":2,\"1088\":2,\"1107\":1,\"1108\":1,\"1115\":1,\"1154\":1,\"1175\":2,\"1189\":2,\"1200\":1,\"1226\":5,\"1245\":1,\"1253\":1,\"1254\":1,\"1260\":7,\"1267\":9,\"1270\":1,\"1272\":2,\"1339\":1,\"1341\":2,\"1343\":1,\"1392\":1,\"1400\":1,\"1401\":3,\"1403\":2,\"1404\":3,\"1416\":1,\"1426\":4,\"1428\":7,\"1429\":1,\"1432\":1,\"1436\":3,\"1437\":1,\"1448\":3,\"1449\":6,\"1484\":20,\"1491\":1,\"1506\":8,\"1522\":4,\"1524\":2,\"1525\":2,\"1526\":2,\"1527\":2,\"1532\":3,\"1539\":2,\"1634\":3,\"1641\":9,\"1666\":1,\"1691\":4,\"1701\":3,\"1710\":1,\"1764\":2,\"1765\":2,\"1772\":19,\"1773\":1}}],[\"yml\",{\"1\":{\"1697\":1}}],[\"yipee\",{\"1\":{\"1545\":2}}],[\"yy\",{\"1\":{\"1421\":2}}],[\"york\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"yourself\",{\"1\":{\"1784\":1}}],[\"your\",{\"0\":{\"1789\":1},\"1\":{\"15\":3,\"19\":1,\"20\":2,\"26\":3,\"33\":2,\"36\":2,\"43\":2,\"54\":2,\"57\":2,\"77\":1,\"87\":1,\"89\":1,\"95\":1,\"98\":1,\"108\":3,\"113\":3,\"115\":2,\"122\":1,\"189\":1,\"201\":1,\"202\":3,\"205\":1,\"206\":1,\"207\":2,\"208\":1,\"210\":1,\"214\":2,\"220\":1,\"226\":1,\"227\":1,\"231\":1,\"232\":1,\"255\":1,\"260\":2,\"268\":3,\"270\":3,\"275\":3,\"277\":3,\"282\":3,\"289\":3,\"292\":1,\"296\":3,\"303\":2,\"310\":3,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"340\":1,\"344\":1,\"347\":1,\"421\":1,\"439\":1,\"440\":4,\"447\":1,\"484\":1,\"536\":1,\"553\":1,\"554\":1,\"555\":1,\"584\":1,\"589\":1,\"605\":1,\"606\":1,\"616\":3,\"664\":1,\"682\":1,\"737\":1,\"743\":1,\"745\":1,\"755\":1,\"756\":1,\"758\":1,\"766\":1,\"781\":2,\"784\":2,\"787\":1,\"828\":1,\"859\":1,\"904\":1,\"905\":1,\"906\":1,\"915\":1,\"981\":1,\"986\":1,\"989\":1,\"993\":1,\"999\":1,\"1009\":1,\"1044\":1,\"1058\":1,\"1098\":1,\"1122\":2,\"1143\":1,\"1153\":2,\"1154\":1,\"1155\":2,\"1163\":1,\"1204\":1,\"1217\":1,\"1219\":1,\"1245\":1,\"1255\":1,\"1324\":1,\"1330\":1,\"1369\":1,\"1378\":2,\"1480\":1,\"1486\":3,\"1509\":1,\"1513\":1,\"1641\":1,\"1677\":1,\"1704\":1,\"1710\":1,\"1716\":1,\"1719\":1,\"1723\":1,\"1728\":2,\"1750\":1,\"1784\":2,\"1787\":1,\"1789\":1,\"1790\":1,\"1793\":4,\"1797\":1,\"1798\":3,\"1799\":1,\"1800\":1,\"1802\":1}}],[\"you\",{\"1\":{\"3\":2,\"8\":1,\"10\":1,\"14\":2,\"38\":3,\"39\":4,\"40\":4,\"41\":2,\"42\":2,\"43\":3,\"46\":1,\"47\":5,\"50\":8,\"51\":1,\"52\":1,\"56\":3,\"57\":5,\"59\":5,\"71\":1,\"76\":1,\"90\":2,\"95\":1,\"108\":3,\"111\":2,\"113\":7,\"115\":2,\"117\":1,\"119\":2,\"121\":1,\"123\":2,\"126\":3,\"154\":1,\"162\":2,\"189\":1,\"199\":2,\"202\":2,\"205\":1,\"207\":2,\"208\":7,\"209\":1,\"215\":1,\"218\":1,\"219\":2,\"220\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"231\":1,\"232\":5,\"234\":1,\"238\":1,\"239\":1,\"241\":2,\"242\":1,\"244\":1,\"247\":2,\"248\":1,\"251\":1,\"259\":1,\"262\":1,\"267\":1,\"270\":3,\"274\":1,\"277\":3,\"281\":1,\"288\":1,\"295\":1,\"302\":1,\"304\":1,\"308\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"340\":1,\"344\":1,\"347\":4,\"355\":1,\"368\":1,\"372\":1,\"375\":2,\"376\":5,\"387\":4,\"390\":1,\"391\":3,\"395\":1,\"397\":3,\"398\":2,\"402\":1,\"403\":1,\"407\":1,\"423\":1,\"430\":1,\"431\":1,\"432\":1,\"437\":2,\"438\":2,\"439\":2,\"440\":2,\"441\":3,\"442\":1,\"443\":1,\"444\":2,\"445\":1,\"447\":1,\"452\":4,\"453\":2,\"455\":5,\"459\":1,\"480\":3,\"485\":1,\"487\":1,\"491\":1,\"494\":1,\"507\":1,\"508\":1,\"520\":1,\"544\":1,\"576\":2,\"591\":1,\"596\":3,\"605\":5,\"606\":2,\"607\":1,\"616\":1,\"626\":1,\"643\":3,\"645\":1,\"653\":6,\"655\":3,\"656\":1,\"675\":1,\"676\":1,\"677\":3,\"679\":1,\"682\":2,\"692\":2,\"701\":1,\"705\":1,\"710\":3,\"722\":1,\"727\":1,\"733\":1,\"742\":1,\"743\":2,\"749\":4,\"751\":1,\"754\":2,\"755\":2,\"756\":2,\"762\":1,\"764\":1,\"765\":2,\"778\":1,\"779\":2,\"780\":4,\"781\":6,\"783\":2,\"784\":1,\"785\":3,\"794\":2,\"795\":2,\"801\":2,\"808\":1,\"814\":3,\"822\":1,\"823\":3,\"825\":1,\"828\":2,\"859\":4,\"869\":1,\"875\":1,\"897\":1,\"905\":5,\"906\":2,\"907\":1,\"910\":3,\"912\":1,\"915\":2,\"924\":3,\"926\":1,\"942\":1,\"953\":1,\"958\":1,\"965\":1,\"981\":1,\"984\":2,\"986\":1,\"989\":4,\"995\":1,\"1023\":2,\"1034\":1,\"1043\":2,\"1068\":1,\"1093\":1,\"1097\":3,\"1113\":1,\"1122\":1,\"1125\":1,\"1139\":1,\"1141\":1,\"1153\":2,\"1163\":2,\"1175\":2,\"1178\":1,\"1189\":2,\"1190\":2,\"1198\":1,\"1199\":3,\"1201\":1,\"1204\":2,\"1217\":1,\"1237\":2,\"1248\":2,\"1250\":1,\"1261\":1,\"1267\":1,\"1272\":3,\"1297\":1,\"1300\":1,\"1317\":1,\"1321\":1,\"1324\":1,\"1330\":1,\"1339\":1,\"1343\":2,\"1350\":4,\"1353\":1,\"1356\":1,\"1357\":1,\"1364\":1,\"1366\":1,\"1378\":1,\"1382\":1,\"1383\":1,\"1384\":1,\"1386\":2,\"1387\":2,\"1396\":1,\"1397\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":2,\"1404\":2,\"1405\":4,\"1407\":1,\"1408\":1,\"1413\":1,\"1421\":2,\"1425\":1,\"1428\":2,\"1432\":1,\"1433\":1,\"1436\":2,\"1441\":1,\"1448\":2,\"1451\":1,\"1455\":2,\"1461\":2,\"1479\":2,\"1486\":2,\"1489\":1,\"1496\":2,\"1505\":1,\"1506\":2,\"1513\":2,\"1520\":2,\"1529\":1,\"1538\":1,\"1561\":1,\"1564\":1,\"1592\":1,\"1593\":1,\"1600\":1,\"1601\":1,\"1602\":1,\"1610\":1,\"1628\":1,\"1634\":3,\"1641\":2,\"1672\":1,\"1677\":3,\"1690\":1,\"1696\":1,\"1704\":1,\"1717\":1,\"1719\":3,\"1723\":3,\"1726\":1,\"1728\":1,\"1732\":1,\"1742\":1,\"1744\":1,\"1745\":1,\"1747\":2,\"1750\":1,\"1753\":4,\"1756\":1,\"1770\":1,\"1772\":2,\"1775\":1,\"1780\":1,\"1784\":2,\"1788\":2,\"1789\":5,\"1790\":1,\"1793\":1,\"1798\":1,\"1799\":1,\"1800\":1,\"1808\":3}}],[\"yn\",{\"1\":{\"1122\":1}}],[\"y\",{\"1\":{\"1122\":2,\"1265\":1,\"1805\":3}}],[\"yank\",{\"1\":{\"1805\":1}}],[\"yarn\",{\"1\":{\"117\":1,\"119\":2,\"121\":1}}],[\"yay\",{\"1\":{\"95\":1}}],[\"yaml\",{\"0\":{\"1695\":1},\"1\":{\"28\":3,\"37\":1,\"41\":1,\"59\":1,\"60\":1,\"104\":1,\"236\":1,\"315\":1,\"323\":1,\"330\":1,\"743\":1,\"747\":1,\"755\":6,\"756\":1,\"758\":3,\"770\":1,\"956\":2,\"1175\":1,\"1224\":1,\"1257\":1,\"1258\":1,\"1260\":2,\"1268\":1,\"1520\":1,\"1538\":1,\"1603\":3,\"1632\":3,\"1638\":1,\"1641\":1,\"1645\":3,\"1657\":3,\"1670\":3,\"1675\":3,\"1694\":3,\"1695\":2,\"1696\":1,\"1697\":5,\"1698\":7}}],[\"year\",{\"1\":{\"1081\":2,\"1416\":2}}],[\"years\",{\"1\":{\"46\":1,\"50\":1,\"249\":1,\"762\":4,\"1728\":1,\"1772\":1}}],[\"yes\",{\"1\":{\"576\":1}}],[\"yellow\",{\"1\":{\"108\":1,\"1701\":4}}],[\"yet\",{\"1\":{\"15\":3,\"26\":3,\"44\":1,\"108\":1,\"110\":3,\"122\":2,\"291\":1,\"369\":2,\"370\":1,\"378\":2,\"383\":2,\"419\":2,\"548\":3,\"569\":1,\"599\":2,\"745\":2,\"752\":1,\"758\":2,\"871\":2,\"872\":1,\"877\":2,\"884\":2,\"891\":2,\"898\":2,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"1002\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":3,\"1150\":2,\"1235\":2,\"1269\":1,\"1274\":2,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1488\":1,\"1507\":1,\"1536\":3,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1,\"1719\":1}}],[\">2\",{\"1\":{\"1772\":1}}],[\">regexp\",{\"1\":{\"1571\":1}}],[\">shell>syntax\",{\"1\":{\"596\":2}}],[\">shell>prompt>value\",{\"1\":{\"402\":1}}],[\">pretty\",{\"1\":{\"423\":1}}],[\">=\",{\"1\":{\"182\":1,\"340\":2}}],[\">`\",{\"1\":{\"103\":3}}],[\">\",{\"0\":{\"838\":1,\"1569\":1},\"1\":{\"15\":1,\"24\":1,\"26\":1,\"89\":2,\"90\":1,\"93\":1,\"98\":1,\"104\":1,\"105\":1,\"108\":1,\"119\":2,\"120\":1,\"121\":1,\"150\":1,\"182\":1,\"208\":1,\"217\":1,\"231\":4,\"340\":10,\"347\":4,\"366\":1,\"367\":2,\"372\":5,\"381\":2,\"382\":1,\"396\":2,\"397\":10,\"398\":1,\"399\":1,\"402\":4,\"407\":2,\"415\":2,\"416\":1,\"417\":1,\"422\":1,\"423\":3,\"427\":1,\"440\":8,\"466\":1,\"472\":2,\"473\":1,\"478\":1,\"483\":1,\"487\":1,\"488\":1,\"492\":2,\"493\":1,\"498\":3,\"499\":1,\"512\":4,\"513\":2,\"526\":4,\"534\":1,\"535\":1,\"539\":2,\"540\":1,\"544\":8,\"545\":2,\"546\":4,\"551\":1,\"556\":1,\"561\":3,\"562\":1,\"574\":4,\"575\":1,\"580\":1,\"581\":1,\"592\":3,\"593\":2,\"596\":7,\"597\":2,\"602\":3,\"603\":4,\"614\":1,\"616\":1,\"618\":1,\"621\":6,\"622\":1,\"627\":3,\"628\":5,\"632\":6,\"633\":2,\"638\":6,\"639\":2,\"649\":1,\"654\":4,\"667\":1,\"672\":1,\"673\":1,\"676\":3,\"677\":2,\"681\":1,\"682\":2,\"688\":1,\"693\":3,\"694\":2,\"700\":1,\"706\":1,\"731\":2,\"738\":1,\"742\":3,\"743\":13,\"744\":6,\"748\":7,\"749\":3,\"750\":2,\"751\":1,\"754\":2,\"755\":10,\"756\":13,\"757\":6,\"761\":4,\"762\":2,\"765\":2,\"769\":2,\"770\":1,\"790\":8,\"791\":3,\"800\":3,\"801\":1,\"805\":3,\"806\":1,\"808\":1,\"812\":1,\"815\":1,\"819\":2,\"820\":1,\"823\":2,\"827\":1,\"828\":2,\"837\":2,\"842\":1,\"843\":1,\"846\":1,\"854\":1,\"856\":1,\"864\":5,\"865\":12,\"869\":2,\"874\":4,\"880\":2,\"881\":1,\"887\":2,\"888\":2,\"895\":2,\"896\":1,\"897\":7,\"910\":2,\"914\":1,\"915\":2,\"920\":1,\"925\":3,\"926\":1,\"933\":1,\"938\":1,\"943\":4,\"944\":2,\"954\":1,\"957\":2,\"958\":3,\"963\":2,\"964\":1,\"970\":1,\"975\":1,\"978\":4,\"985\":3,\"995\":1,\"996\":2,\"997\":1,\"999\":5,\"1005\":2,\"1006\":2,\"1011\":3,\"1012\":1,\"1017\":1,\"1018\":1,\"1022\":1,\"1034\":2,\"1042\":2,\"1047\":1,\"1052\":1,\"1056\":1,\"1058\":5,\"1064\":3,\"1065\":1,\"1069\":1,\"1073\":2,\"1074\":1,\"1080\":2,\"1081\":1,\"1082\":1,\"1087\":2,\"1088\":1,\"1101\":2,\"1102\":3,\"1103\":1,\"1114\":2,\"1115\":4,\"1121\":1,\"1122\":1,\"1126\":1,\"1129\":2,\"1131\":1,\"1132\":2,\"1133\":1,\"1146\":2,\"1147\":2,\"1156\":1,\"1174\":2,\"1175\":1,\"1176\":1,\"1178\":1,\"1185\":6,\"1186\":2,\"1195\":2,\"1196\":1,\"1199\":2,\"1203\":1,\"1204\":2,\"1210\":1,\"1211\":1,\"1216\":1,\"1217\":5,\"1218\":1,\"1219\":5,\"1225\":4,\"1226\":4,\"1231\":2,\"1232\":1,\"1239\":1,\"1244\":1,\"1245\":3,\"1259\":2,\"1260\":7,\"1266\":2,\"1267\":8,\"1271\":4,\"1277\":2,\"1280\":2,\"1285\":3,\"1292\":2,\"1298\":2,\"1299\":1,\"1301\":1,\"1304\":1,\"1305\":1,\"1310\":1,\"1311\":3,\"1316\":1,\"1321\":1,\"1322\":4,\"1323\":1,\"1328\":4,\"1329\":5,\"1334\":1,\"1340\":4,\"1343\":2,\"1350\":3,\"1356\":2,\"1357\":2,\"1369\":1,\"1378\":1,\"1400\":4,\"1403\":3,\"1404\":1,\"1408\":5,\"1413\":5,\"1416\":2,\"1421\":2,\"1425\":5,\"1433\":5,\"1441\":5,\"1448\":1,\"1459\":4,\"1460\":2,\"1461\":2,\"1466\":2,\"1472\":4,\"1477\":2,\"1478\":5,\"1483\":3,\"1484\":1,\"1487\":1,\"1502\":1,\"1522\":1,\"1561\":1,\"1566\":1,\"1568\":2,\"1570\":3,\"1571\":2,\"1576\":1,\"1579\":3,\"1580\":1,\"1582\":1,\"1584\":1,\"1615\":1,\"1641\":13,\"1642\":6,\"1710\":2,\"1719\":2,\"1725\":4,\"1727\":1,\"1742\":2,\"1744\":1,\"1745\":1,\"1748\":1,\"1772\":3,\"1774\":1,\"1776\":2,\"1778\":2,\"1779\":1,\"1788\":1,\"1789\":2,\"1790\":2}}],[\">>\",{\"0\":{\"832\":1,\"1563\":1},\"1\":{\"15\":1,\"24\":1,\"26\":1,\"119\":2,\"120\":2,\"233\":1,\"483\":1,\"618\":1,\"834\":1,\"835\":1,\"836\":1,\"843\":1,\"975\":1,\"1052\":1,\"1103\":1,\"1126\":1,\"1301\":1,\"1502\":1,\"1565\":2,\"1566\":3,\"1568\":1,\"1772\":2,\"1774\":2}}],[\"=1==2\",{\"1\":{\"1674\":2}}],[\"=i>=5\",{\"1\":{\"1341\":1}}],[\"=i<5\",{\"1\":{\"1341\":1}}],[\"=~\",{\"1\":{\"926\":1,\"1369\":1}}],[\"=3\",{\"1\":{\"904\":1}}],[\"==123\",{\"1\":{\"605\":2,\"905\":2}}],[\"==\",{\"1\":{\"52\":5,\"61\":2,\"251\":1,\"252\":2,\"318\":2,\"326\":1,\"333\":2,\"340\":3,\"347\":10,\"354\":1,\"361\":1,\"423\":8,\"487\":2,\"488\":1,\"534\":1,\"535\":1,\"1251\":2,\"1252\":3,\"1253\":4,\"1772\":3}}],[\"=>\",{\"0\":{\"1577\":1},\"1\":{\"24\":1,\"104\":1,\"162\":1,\"1218\":1,\"1285\":2,\"1502\":1,\"1572\":1,\"1576\":1,\"1579\":1,\"1584\":1,\"1725\":2,\"1744\":1,\"1748\":1,\"1779\":1}}],[\"=\",{\"0\":{\"600\":1},\"1\":{\"15\":1,\"26\":1,\"42\":2,\"52\":3,\"59\":1,\"61\":1,\"95\":1,\"108\":1,\"111\":3,\"117\":1,\"121\":1,\"127\":2,\"139\":1,\"217\":1,\"224\":3,\"225\":3,\"226\":1,\"228\":1,\"229\":1,\"260\":2,\"261\":1,\"269\":3,\"270\":1,\"276\":3,\"277\":1,\"282\":1,\"283\":5,\"290\":1,\"296\":1,\"297\":5,\"303\":2,\"304\":4,\"311\":3,\"312\":6,\"316\":1,\"318\":22,\"324\":1,\"326\":23,\"331\":1,\"333\":24,\"338\":5,\"340\":85,\"345\":5,\"347\":121,\"352\":1,\"353\":5,\"354\":2,\"359\":1,\"360\":6,\"361\":7,\"389\":1,\"408\":3,\"601\":1,\"602\":2,\"603\":5,\"605\":14,\"606\":4,\"608\":5,\"610\":1,\"677\":2,\"685\":1,\"690\":1,\"741\":1,\"754\":1,\"765\":1,\"823\":2,\"831\":1,\"902\":1,\"904\":4,\"905\":14,\"906\":4,\"908\":5,\"910\":2,\"917\":1,\"953\":13,\"1021\":8,\"1035\":3,\"1175\":1,\"1199\":2,\"1207\":1,\"1245\":2,\"1248\":4,\"1300\":13,\"1341\":2,\"1343\":1,\"1416\":1,\"1421\":1,\"1449\":7,\"1505\":5,\"1511\":1,\"1592\":5,\"1629\":7,\"1691\":13,\"1701\":2,\"1772\":8,\"1773\":1}}],[\"<<eocline\",{\"1\":{\"1772\":1}}],[\"<out>\",{\"1\":{\"1742\":3}}],[\"<in>\",{\"1\":{\"1742\":2}}],[\"<int>\",{\"1\":{\"162\":1}}],[\"<seconds>\",{\"1\":{\"1392\":1}}],[\"<std\",{\"1\":{\"1340\":1}}],[\"<stdout>\",{\"1\":{\"731\":1}}],[\"<stderr>\",{\"1\":{\"614\":1,\"1292\":2}}],[\"<stdin>\",{\"0\":{\"1214\":1},\"1\":{\"15\":1,\"26\":1,\"457\":1,\"1002\":1,\"1061\":1,\"1217\":1,\"1218\":1,\"1221\":1,\"1360\":1,\"1743\":1}}],[\"<path>\",{\"1\":{\"1368\":1}}],[\"<pre><code>config\",{\"1\":{\"108\":2}}],[\"<pre><code>\",{\"1\":{\"99\":1,\"103\":1}}],[\"<command>\",{\"1\":{\"1349\":1}}],[\"<test\",{\"1\":{\"1285\":1}}],[\"<table2>\",{\"1\":{\"111\":1}}],[\"<table1>\",{\"1\":{\"111\":1}}],[\"<h1>foo\",{\"1\":{\"633\":2}}],[\"<messages>\",{\"1\":{\"616\":2}}],[\"<namedpipe>\",{\"1\":{\"440\":1,\"995\":1,\"996\":2}}],[\"<null>\",{\"1\":{\"232\":2,\"582\":1,\"742\":4,\"1742\":1}}],[\"<example>\",{\"1\":{\"801\":1,\"997\":2,\"999\":8,\"1056\":2,\"1058\":8,\"1219\":8}}],[\"<err>\",{\"1\":{\"232\":2,\"1742\":1,\"1772\":1}}],[\"<env\",{\"1\":{\"99\":1,\"151\":1}}],[\"<=\",{\"1\":{\"182\":1,\"347\":1}}],[\"<~\",{\"1\":{\"139\":1,\"146\":1}}],[\"<\",{\"1\":{\"38\":3,\"56\":3,\"108\":1,\"182\":1,\"232\":4,\"269\":1,\"276\":1,\"318\":6,\"333\":9,\"340\":2,\"345\":1,\"347\":10,\"423\":1,\"603\":5,\"902\":1,\"1245\":1,\"1725\":1,\"1742\":1,\"1772\":1}}],[\"<>\",{\"0\":{\"994\":1},\"1\":{\"15\":1,\"26\":1,\"112\":1,\"618\":1,\"639\":2,\"837\":1,\"843\":1,\"999\":1,\"1001\":1,\"1058\":1,\"1061\":2,\"1219\":1,\"1222\":1,\"1289\":1,\"1403\":1,\"1448\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1743\":1}}],[\"jpeg\",{\"1\":{\"1010\":1}}],[\"jmap\",{\"1\":{\"747\":1,\"748\":1,\"750\":1,\"752\":2,\"760\":1,\"761\":1,\"762\":2,\"763\":1}}],[\"j\",{\"1\":{\"347\":2}}],[\"joe\",{\"1\":{\"1597\":1}}],[\"john\",{\"1\":{\"783\":4,\"1226\":1,\"1639\":1}}],[\"joined\",{\"1\":{\"1321\":1,\"1744\":1}}],[\"joiner\",{\"1\":{\"1278\":1}}],[\"join\",{\"1\":{\"345\":1,\"347\":2}}],[\"jobs\",{\"1\":{\"90\":3,\"92\":1,\"108\":1,\"123\":1,\"475\":1,\"659\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"731\":3,\"732\":4,\"734\":1,\"735\":1,\"1772\":3}}],[\"job\",{\"0\":{\"1808\":1},\"1\":{\"3\":1,\"8\":1,\"53\":1,\"1772\":1,\"1795\":1,\"1808\":1}}],[\"jbytes\",{\"1\":{\"318\":4,\"326\":4,\"333\":4}}],[\"jinterface\",{\"1\":{\"283\":3,\"297\":3,\"338\":3}}],[\"jul\",{\"1\":{\"1449\":1}}],[\"july\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":2,\"1449\":1,\"1531\":1}}],[\"jun\",{\"1\":{\"1449\":1}}],[\"june\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":2,\"1449\":1,\"1531\":2}}],[\"jumps\",{\"1\":{\"751\":1}}],[\"jumped\",{\"1\":{\"162\":1,\"545\":2,\"546\":2}}],[\"jump\",{\"0\":{\"751\":1},\"1\":{\"162\":5,\"181\":2,\"251\":1,\"447\":1,\"1386\":1,\"1798\":1,\"1802\":11,\"1805\":10}}],[\"just\",{\"1\":{\"38\":1,\"40\":1,\"41\":2,\"42\":1,\"46\":1,\"47\":3,\"56\":1,\"59\":1,\"115\":1,\"119\":2,\"138\":1,\"162\":1,\"176\":1,\"211\":1,\"216\":1,\"227\":1,\"253\":1,\"264\":1,\"270\":1,\"277\":1,\"304\":1,\"347\":1,\"402\":1,\"423\":1,\"445\":1,\"448\":1,\"508\":2,\"526\":1,\"607\":1,\"661\":1,\"814\":1,\"907\":1,\"924\":1,\"962\":1,\"989\":1,\"1021\":1,\"1141\":1,\"1180\":1,\"1339\":1,\"1400\":1,\"1403\":1,\"1505\":1,\"1509\":1,\"1566\":1,\"1592\":1,\"1601\":1,\"1673\":1,\"1710\":1,\"1747\":1,\"1789\":2}}],[\"jq\",{\"0\":{\"40\":1},\"1\":{\"36\":1,\"39\":1,\"40\":8,\"41\":1,\"43\":1,\"57\":1,\"1719\":2}}],[\"jsplit\",{\"0\":{\"878\":1},\"1\":{\"15\":1,\"26\":1,\"369\":1,\"545\":1,\"546\":2,\"548\":2,\"879\":1,\"880\":1,\"881\":1,\"882\":2,\"883\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1118\":1,\"1137\":1,\"1791\":1,\"1794\":1}}],[\"jsonseq\",{\"1\":{\"1655\":5}}],[\"jsons\",{\"1\":{\"1655\":1}}],[\"json=\",{\"1\":{\"40\":1}}],[\"jsonlines\",{\"1\":{\"90\":1,\"117\":1,\"304\":1,\"732\":1,\"747\":1,\"755\":1,\"1650\":3,\"1654\":4,\"1659\":1,\"1660\":1,\"1668\":5}}],[\"jsonl\",{\"0\":{\"744\":1,\"757\":1,\"1642\":1,\"1654\":1,\"1658\":1},\"1\":{\"28\":1,\"92\":1,\"117\":1,\"382\":1,\"732\":2,\"735\":1,\"743\":3,\"744\":1,\"747\":1,\"755\":2,\"756\":3,\"757\":1,\"758\":1,\"1175\":1,\"1491\":1,\"1603\":1,\"1618\":1,\"1632\":1,\"1641\":3,\"1642\":1,\"1645\":1,\"1650\":1,\"1657\":1,\"1664\":1,\"1668\":5,\"1675\":1,\"1694\":1,\"1699\":1}}],[\"jsonconcat\",{\"1\":{\"1655\":5}}],[\"jsonc\",{\"0\":{\"1646\":1},\"1\":{\"28\":1,\"117\":1,\"118\":1,\"1603\":1,\"1645\":1,\"1655\":5,\"1666\":1,\"1670\":1,\"1675\":1}}],[\"json\",{\"0\":{\"42\":1,\"376\":1,\"743\":1,\"744\":1,\"750\":1,\"756\":1,\"757\":1,\"808\":1,\"1067\":1,\"1405\":1,\"1522\":1,\"1525\":1,\"1530\":1,\"1534\":1,\"1637\":1,\"1641\":1,\"1642\":1,\"1648\":1,\"1649\":1,\"1664\":1,\"1665\":1,\"1666\":1,\"1756\":1,\"1764\":1,\"1765\":1,\"1767\":1},\"1\":{\"15\":6,\"26\":6,\"28\":5,\"33\":1,\"36\":2,\"37\":1,\"39\":2,\"40\":3,\"41\":3,\"42\":3,\"43\":4,\"54\":1,\"57\":2,\"58\":1,\"59\":4,\"60\":2,\"90\":1,\"92\":1,\"104\":1,\"110\":1,\"113\":2,\"117\":3,\"118\":1,\"121\":2,\"122\":1,\"162\":1,\"235\":2,\"236\":1,\"259\":1,\"261\":5,\"270\":4,\"277\":5,\"283\":4,\"290\":5,\"297\":4,\"304\":3,\"309\":1,\"312\":4,\"315\":1,\"316\":4,\"323\":1,\"324\":4,\"330\":1,\"331\":4,\"338\":4,\"353\":1,\"360\":1,\"364\":1,\"365\":1,\"369\":4,\"376\":1,\"378\":1,\"383\":1,\"395\":1,\"397\":3,\"399\":1,\"403\":1,\"417\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":3,\"426\":1,\"431\":1,\"433\":1,\"440\":1,\"441\":2,\"457\":1,\"493\":1,\"520\":1,\"526\":2,\"530\":3,\"540\":1,\"541\":1,\"545\":1,\"548\":3,\"599\":1,\"616\":2,\"618\":1,\"635\":2,\"641\":2,\"677\":3,\"689\":1,\"692\":1,\"697\":2,\"732\":2,\"735\":1,\"743\":11,\"744\":1,\"745\":1,\"747\":1,\"748\":1,\"752\":1,\"754\":1,\"755\":4,\"756\":11,\"757\":1,\"758\":4,\"761\":1,\"762\":1,\"763\":1,\"765\":1,\"766\":2,\"770\":1,\"780\":1,\"789\":1,\"791\":2,\"801\":6,\"803\":1,\"808\":1,\"809\":1,\"816\":2,\"823\":3,\"847\":2,\"871\":1,\"872\":1,\"873\":1,\"877\":2,\"878\":1,\"879\":1,\"882\":1,\"884\":2,\"891\":1,\"896\":1,\"898\":2,\"910\":3,\"924\":2,\"937\":1,\"939\":2,\"940\":2,\"947\":4,\"950\":1,\"951\":1,\"956\":2,\"958\":2,\"960\":2,\"962\":1,\"967\":4,\"978\":1,\"1002\":1,\"1021\":1,\"1022\":2,\"1024\":2,\"1062\":1,\"1067\":1,\"1070\":1,\"1077\":1,\"1082\":1,\"1084\":1,\"1085\":1,\"1086\":1,\"1088\":1,\"1103\":2,\"1118\":2,\"1121\":1,\"1123\":2,\"1137\":4,\"1150\":1,\"1173\":1,\"1175\":2,\"1179\":1,\"1182\":1,\"1184\":1,\"1199\":3,\"1224\":2,\"1226\":1,\"1235\":1,\"1245\":1,\"1257\":1,\"1258\":1,\"1268\":1,\"1272\":3,\"1274\":1,\"1278\":1,\"1280\":1,\"1284\":2,\"1305\":1,\"1307\":1,\"1311\":2,\"1313\":1,\"1329\":1,\"1343\":1,\"1400\":7,\"1405\":1,\"1410\":1,\"1422\":1,\"1429\":1,\"1430\":1,\"1437\":1,\"1438\":1,\"1450\":1,\"1491\":1,\"1507\":1,\"1520\":2,\"1536\":1,\"1538\":3,\"1539\":1,\"1542\":1,\"1568\":1,\"1578\":1,\"1580\":1,\"1594\":1,\"1599\":1,\"1601\":1,\"1602\":1,\"1603\":5,\"1618\":1,\"1628\":2,\"1631\":2,\"1632\":5,\"1637\":1,\"1638\":1,\"1639\":1,\"1641\":11,\"1642\":1,\"1643\":5,\"1644\":9,\"1645\":4,\"1646\":1,\"1647\":6,\"1650\":2,\"1654\":3,\"1655\":10,\"1656\":5,\"1657\":5,\"1658\":1,\"1659\":1,\"1660\":1,\"1664\":7,\"1666\":4,\"1667\":2,\"1668\":5,\"1669\":5,\"1670\":5,\"1671\":1,\"1672\":3,\"1674\":1,\"1675\":5,\"1694\":3,\"1699\":3,\"1708\":2,\"1719\":1,\"1731\":3,\"1745\":1,\"1764\":1,\"1765\":1,\"1772\":1,\"1789\":2,\"1790\":1,\"1794\":3}}],[\"java\",{\"1\":{\"1321\":1}}],[\"javascript\",{\"1\":{\"28\":1,\"51\":1,\"52\":1,\"369\":1,\"697\":1,\"758\":1,\"766\":1,\"877\":1,\"1603\":1,\"1632\":1,\"1637\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1694\":1,\"1699\":1,\"1794\":1}}],[\"janurary\",{\"1\":{\"1403\":1}}],[\"january\",{\"1\":{\"59\":4,\"1081\":2,\"1115\":4,\"1416\":1,\"1421\":18,\"1440\":1,\"1449\":1}}],[\"jan\",{\"1\":{\"108\":1,\"544\":1,\"1403\":1,\"1412\":1,\"1414\":2,\"1416\":2,\"1418\":5,\"1419\":5,\"1420\":5,\"1421\":18,\"1440\":1,\"1449\":1}}],[\"ja\",{\"0\":{\"376\":1,\"872\":1,\"1405\":1},\"1\":{\"15\":1,\"26\":1,\"110\":1,\"121\":2,\"122\":1,\"369\":1,\"372\":2,\"376\":1,\"378\":1,\"383\":1,\"419\":1,\"548\":1,\"593\":1,\"599\":1,\"743\":3,\"744\":3,\"745\":1,\"750\":1,\"755\":4,\"756\":3,\"757\":3,\"758\":1,\"865\":1,\"871\":1,\"874\":4,\"875\":3,\"876\":1,\"884\":1,\"888\":2,\"891\":1,\"898\":1,\"940\":1,\"944\":2,\"947\":1,\"960\":1,\"964\":2,\"967\":1,\"1002\":1,\"1074\":1,\"1077\":1,\"1084\":1,\"1118\":1,\"1131\":1,\"1132\":2,\"1133\":1,\"1137\":1,\"1147\":2,\"1150\":1,\"1232\":1,\"1235\":1,\"1272\":1,\"1274\":1,\"1404\":1,\"1405\":1,\"1408\":2,\"1410\":1,\"1413\":2,\"1422\":1,\"1425\":2,\"1429\":2,\"1430\":1,\"1433\":2,\"1437\":2,\"1438\":1,\"1441\":2,\"1450\":1,\"1506\":5,\"1507\":1,\"1536\":1,\"1568\":1,\"1579\":5,\"1580\":1,\"1594\":1,\"1599\":1,\"1641\":3,\"1642\":3}}],[\"vpc\",{\"1\":{\"1629\":3}}],[\"vs\",{\"0\":{\"868\":1,\"981\":1,\"1247\":1,\"1448\":1,\"1488\":1}}],[\"vsz\",{\"1\":{\"865\":2,\"1260\":2,\"1267\":4}}],[\"vt100\",{\"1\":{\"648\":1,\"1701\":6}}],[\"v1\",{\"1\":{\"119\":2}}],[\"v19\",{\"1\":{\"95\":1}}],[\"v\",{\"1\":{\"93\":2,\"261\":3,\"270\":2,\"277\":2,\"290\":2,\"303\":1,\"304\":3,\"316\":2,\"318\":33,\"324\":2,\"326\":34,\"331\":2,\"333\":49,\"340\":41,\"360\":2,\"361\":5,\"432\":1,\"440\":1,\"743\":2,\"756\":2,\"1641\":2,\"1716\":1,\"1805\":1,\"1806\":1}}],[\"v2\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1},\"1\":{\"103\":1,\"1491\":1}}],[\"v3\",{\"0\":{\"71\":1,\"72\":1,\"121\":1,\"123\":1}}],[\"v4\",{\"0\":{\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"125\":1,\"131\":1,\"132\":1,\"136\":1,\"140\":1,\"144\":1,\"148\":1,\"152\":1,\"156\":1,\"160\":1,\"165\":1,\"170\":1,\"171\":1,\"175\":1,\"179\":1},\"1\":{\"66\":1,\"67\":1,\"165\":1,\"170\":1}}],[\"vendor\",{\"1\":{\"119\":1}}],[\"vendors\",{\"1\":{\"91\":1,\"100\":1}}],[\"verify\",{\"1\":{\"90\":1}}],[\"verbose|\",{\"1\":{\"1284\":1}}],[\"verbose\",{\"1\":{\"50\":2,\"1178\":1,\"1284\":1}}],[\"very\",{\"0\":{\"46\":1},\"1\":{\"46\":2,\"138\":1,\"232\":1,\"354\":1,\"361\":1,\"437\":2,\"439\":1,\"742\":1,\"986\":1,\"1217\":1,\"1461\":1,\"1489\":1,\"1496\":1,\"1610\":1,\"1766\":1}}],[\"verses\",{\"1\":{\"34\":1,\"45\":1}}],[\"versions\",{\"1\":{\"69\":1,\"119\":2,\"131\":1}}],[\"version\",{\"0\":{\"1332\":1},\"1\":{\"15\":2,\"26\":2,\"41\":1,\"61\":1,\"76\":1,\"95\":1,\"117\":1,\"119\":1,\"121\":1,\"201\":1,\"209\":1,\"432\":1,\"459\":1,\"462\":1,\"780\":1,\"782\":1,\"787\":2,\"979\":1,\"1178\":1,\"1213\":2,\"1253\":1,\"1254\":1,\"1332\":1,\"1333\":1,\"1334\":1,\"1335\":3,\"1336\":2,\"1516\":1,\"1629\":1}}],[\"ve\",{\"1\":{\"42\":1,\"47\":1,\"48\":2,\"455\":1,\"989\":1,\"1378\":1,\"1728\":1}}],[\"vastly\",{\"1\":{\"181\":1}}],[\"var++\",{\"1\":{\"904\":1}}],[\"vary\",{\"1\":{\"560\":1,\"643\":1}}],[\"var\",{\"1\":{\"283\":1,\"297\":1,\"304\":1,\"318\":1,\"326\":1,\"333\":1,\"338\":1,\"340\":3,\"347\":12,\"422\":1,\"672\":2,\"675\":1,\"819\":6,\"822\":1,\"901\":3,\"904\":12,\"953\":2,\"1021\":1,\"1121\":3,\"1195\":6,\"1198\":1,\"1299\":1,\"1310\":2,\"1421\":1,\"1449\":7,\"1629\":2,\"1701\":2}}],[\"vars\",{\"1\":{\"108\":1,\"113\":2,\"779\":1}}],[\"variety\",{\"1\":{\"246\":1,\"247\":1,\"1400\":1}}],[\"various\",{\"1\":{\"43\":1,\"129\":1,\"167\":1,\"214\":1,\"560\":1,\"1400\":1,\"1801\":1}}],[\"variable2\",{\"1\":{\"774\":1,\"779\":1,\"780\":1}}],[\"variable1\",{\"1\":{\"774\":1,\"779\":1,\"780\":1}}],[\"variable\",{\"0\":{\"676\":1,\"779\":1,\"1780\":1},\"1\":{\"15\":7,\"23\":1,\"24\":1,\"26\":7,\"38\":4,\"41\":1,\"42\":1,\"56\":4,\"61\":1,\"71\":1,\"96\":2,\"111\":1,\"112\":2,\"113\":1,\"115\":3,\"116\":1,\"119\":2,\"121\":2,\"123\":1,\"127\":3,\"142\":1,\"162\":1,\"207\":1,\"224\":1,\"226\":1,\"227\":1,\"229\":1,\"262\":1,\"285\":1,\"299\":1,\"305\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1,\"393\":4,\"421\":1,\"457\":1,\"491\":1,\"507\":1,\"605\":4,\"611\":6,\"643\":1,\"653\":4,\"659\":1,\"670\":1,\"671\":1,\"675\":1,\"676\":7,\"677\":1,\"678\":2,\"679\":3,\"682\":3,\"683\":2,\"685\":4,\"690\":2,\"738\":1,\"741\":2,\"745\":2,\"748\":3,\"749\":3,\"754\":2,\"755\":1,\"761\":1,\"765\":2,\"766\":1,\"774\":1,\"780\":2,\"781\":2,\"782\":1,\"787\":4,\"798\":1,\"799\":1,\"801\":2,\"802\":2,\"817\":1,\"818\":1,\"819\":1,\"822\":1,\"823\":1,\"824\":2,\"825\":3,\"828\":3,\"829\":2,\"831\":4,\"899\":1,\"900\":1,\"904\":1,\"905\":4,\"910\":1,\"911\":2,\"912\":3,\"915\":3,\"916\":2,\"917\":4,\"975\":1,\"1052\":2,\"1098\":4,\"1111\":2,\"1119\":1,\"1121\":1,\"1122\":2,\"1123\":2,\"1125\":4,\"1126\":1,\"1171\":1,\"1182\":4,\"1193\":1,\"1194\":1,\"1195\":1,\"1198\":1,\"1199\":1,\"1200\":2,\"1201\":3,\"1204\":3,\"1205\":2,\"1207\":4,\"1226\":1,\"1228\":1,\"1255\":2,\"1308\":1,\"1309\":1,\"1312\":4,\"1313\":1,\"1343\":2,\"1345\":3,\"1502\":1,\"1505\":7,\"1506\":1,\"1507\":2,\"1518\":2,\"1547\":2,\"1552\":2,\"1589\":2,\"1592\":7,\"1594\":3,\"1595\":1,\"1599\":1,\"1706\":2,\"1707\":1,\"1710\":1,\"1735\":1,\"1754\":1,\"1756\":1,\"1766\":2,\"1770\":2,\"1771\":3,\"1772\":4,\"1773\":2,\"1780\":3,\"1782\":2,\"1794\":1,\"1806\":1}}],[\"variables\",{\"0\":{\"224\":1,\"225\":1,\"226\":1,\"605\":1,\"679\":1,\"680\":1,\"681\":1,\"781\":1,\"825\":1,\"826\":1,\"827\":1,\"905\":1,\"912\":1,\"913\":1,\"914\":1,\"1201\":1,\"1202\":1,\"1203\":1,\"1755\":1},\"1\":{\"3\":1,\"23\":2,\"24\":3,\"46\":1,\"78\":1,\"80\":1,\"93\":1,\"99\":1,\"106\":1,\"108\":2,\"111\":3,\"113\":1,\"115\":4,\"116\":2,\"118\":2,\"120\":2,\"121\":3,\"126\":1,\"127\":2,\"135\":1,\"151\":1,\"163\":1,\"222\":1,\"224\":2,\"225\":1,\"226\":5,\"228\":4,\"229\":1,\"234\":1,\"391\":2,\"421\":1,\"424\":2,\"438\":1,\"439\":1,\"440\":1,\"491\":1,\"509\":2,\"511\":1,\"518\":1,\"519\":1,\"575\":1,\"605\":2,\"607\":1,\"611\":2,\"675\":1,\"677\":2,\"678\":4,\"679\":7,\"680\":2,\"681\":4,\"682\":2,\"685\":2,\"710\":2,\"743\":1,\"756\":1,\"777\":1,\"779\":1,\"780\":2,\"785\":2,\"787\":2,\"802\":2,\"823\":2,\"824\":4,\"825\":7,\"826\":2,\"827\":4,\"828\":2,\"831\":2,\"905\":2,\"907\":1,\"910\":2,\"911\":4,\"912\":7,\"913\":2,\"914\":4,\"915\":2,\"917\":2,\"1095\":1,\"1097\":2,\"1175\":1,\"1176\":7,\"1180\":3,\"1199\":2,\"1200\":4,\"1201\":7,\"1202\":2,\"1203\":4,\"1204\":2,\"1207\":2,\"1502\":3,\"1505\":1,\"1507\":3,\"1508\":1,\"1509\":1,\"1518\":2,\"1536\":3,\"1540\":3,\"1547\":3,\"1548\":1,\"1549\":2,\"1552\":2,\"1585\":1,\"1586\":1,\"1589\":2,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":5,\"1599\":3,\"1641\":1,\"1675\":1,\"1707\":2,\"1708\":1,\"1713\":1,\"1725\":1,\"1738\":1,\"1750\":2,\"1753\":1,\"1755\":3,\"1756\":1,\"1770\":1,\"1772\":4,\"1773\":2,\"1780\":1,\"1782\":2,\"1791\":1}}],[\"val\",{\"1\":{\"61\":6,\"318\":8,\"326\":8,\"333\":8,\"1772\":1}}],[\"validates\",{\"1\":{\"1327\":1,\"1777\":1}}],[\"validate\",{\"1\":{\"389\":1}}],[\"valid\",{\"0\":{\"1349\":1,\"1368\":1,\"1377\":1,\"1392\":1},\"1\":{\"15\":1,\"26\":1,\"126\":1,\"217\":1,\"223\":1,\"395\":1,\"596\":1,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"743\":1,\"756\":1,\"780\":1,\"858\":1,\"1329\":1,\"1383\":1,\"1463\":1,\"1469\":1,\"1474\":1,\"1545\":1,\"1628\":1,\"1641\":1,\"1647\":1,\"1664\":1,\"1672\":1,\"1674\":1,\"1703\":1,\"1745\":1,\"1791\":1}}],[\"value3\",{\"1\":{\"1772\":3}}],[\"value2\",{\"1\":{\"1772\":3}}],[\"value1\",{\"1\":{\"1772\":3}}],[\"value=3\",{\"1\":{\"60\":1}}],[\"value=2\",{\"1\":{\"60\":1}}],[\"value=1\",{\"1\":{\"60\":1}}],[\"value=$value\",{\"1\":{\"60\":1}}],[\"values\",{\"0\":{\"754\":1,\"765\":1,\"783\":1,\"1247\":1,\"1248\":1,\"1343\":1,\"1527\":1},\"1\":{\"15\":1,\"24\":2,\"26\":1,\"40\":1,\"89\":1,\"95\":1,\"110\":1,\"111\":2,\"117\":1,\"127\":1,\"130\":1,\"153\":1,\"154\":2,\"162\":2,\"217\":1,\"218\":1,\"292\":1,\"399\":2,\"400\":1,\"423\":1,\"433\":1,\"442\":1,\"526\":2,\"559\":1,\"742\":1,\"754\":4,\"765\":4,\"782\":2,\"783\":2,\"1257\":1,\"1268\":1,\"1311\":2,\"1343\":4,\"1383\":1,\"1400\":1,\"1403\":1,\"1422\":1,\"1448\":1,\"1450\":1,\"1502\":2,\"1503\":1,\"1507\":1,\"1518\":2,\"1520\":1,\"1538\":2,\"1547\":2,\"1552\":2,\"1589\":2,\"1590\":1,\"1593\":1,\"1594\":1,\"1599\":2,\"1702\":1,\"1725\":1,\"1771\":2,\"1774\":2}}],[\"value\",{\"0\":{\"517\":1},\"1\":{\"15\":7,\"26\":7,\"30\":1,\"60\":3,\"71\":1,\"96\":1,\"107\":1,\"112\":2,\"123\":1,\"153\":1,\"174\":1,\"265\":1,\"272\":1,\"278\":1,\"279\":1,\"287\":1,\"288\":1,\"292\":2,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"347\":1,\"349\":1,\"361\":1,\"381\":3,\"383\":1,\"393\":3,\"394\":1,\"395\":2,\"396\":1,\"397\":7,\"402\":3,\"403\":1,\"412\":2,\"415\":1,\"419\":1,\"431\":2,\"433\":1,\"437\":1,\"439\":2,\"443\":1,\"446\":1,\"447\":4,\"491\":1,\"512\":2,\"516\":1,\"517\":3,\"520\":2,\"521\":1,\"524\":1,\"526\":3,\"527\":1,\"528\":2,\"530\":1,\"545\":2,\"561\":3,\"562\":2,\"563\":3,\"568\":1,\"611\":4,\"643\":1,\"659\":1,\"661\":1,\"670\":1,\"676\":3,\"679\":1,\"685\":2,\"690\":1,\"698\":1,\"699\":1,\"703\":1,\"743\":6,\"745\":1,\"747\":1,\"748\":1,\"751\":2,\"752\":1,\"756\":6,\"761\":2,\"762\":2,\"766\":1,\"774\":3,\"779\":2,\"780\":3,\"781\":2,\"782\":2,\"783\":3,\"787\":3,\"797\":1,\"801\":1,\"802\":1,\"817\":1,\"819\":5,\"825\":1,\"831\":2,\"861\":2,\"865\":1,\"912\":1,\"917\":3,\"937\":2,\"939\":6,\"940\":1,\"941\":1,\"960\":1,\"1008\":2,\"1022\":15,\"1039\":2,\"1061\":1,\"1080\":1,\"1084\":1,\"1098\":3,\"1106\":1,\"1108\":4,\"1111\":1,\"1118\":1,\"1121\":1,\"1123\":1,\"1137\":1,\"1142\":1,\"1153\":2,\"1154\":2,\"1155\":1,\"1156\":1,\"1182\":3,\"1192\":1,\"1193\":1,\"1195\":4,\"1201\":1,\"1207\":2,\"1222\":1,\"1224\":1,\"1228\":1,\"1244\":1,\"1248\":3,\"1255\":3,\"1262\":1,\"1268\":1,\"1278\":3,\"1303\":1,\"1314\":1,\"1315\":1,\"1319\":1,\"1345\":2,\"1400\":3,\"1416\":3,\"1487\":4,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1593\":1,\"1594\":1,\"1599\":1,\"1605\":1,\"1612\":1,\"1615\":2,\"1632\":1,\"1641\":6,\"1645\":1,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1707\":1,\"1742\":1,\"1753\":1,\"1754\":1,\"1757\":1,\"1758\":1,\"1759\":1,\"1760\":1,\"1761\":1,\"1762\":1,\"1771\":1,\"1772\":4,\"1780\":4,\"1782\":1,\"1794\":2}}],[\"vi\",{\"1\":{\"1245\":2,\"1716\":1}}],[\"visual\",{\"1\":{\"865\":2,\"1805\":1,\"1806\":1}}],[\"visible\",{\"1\":{\"95\":1,\"103\":1}}],[\"viewer\",{\"1\":{\"656\":2,\"733\":1}}],[\"view\",{\"1\":{\"454\":1,\"507\":1,\"733\":1,\"981\":2,\"1716\":1,\"1797\":2}}],[\"views\",{\"1\":{\"174\":2}}],[\"vim\",{\"0\":{\"1804\":1},\"1\":{\"147\":2,\"1245\":2,\"1716\":1,\"1795\":1,\"1804\":1,\"1806\":1}}],[\"video\",{\"1\":{\"59\":1,\"1021\":1}}],[\"virtual\",{\"1\":{\"10\":1}}],[\"via\",{\"0\":{\"40\":1,\"41\":1,\"1806\":1},\"1\":{\"10\":2,\"36\":2,\"71\":1,\"90\":4,\"108\":1,\"115\":3,\"119\":3,\"121\":3,\"123\":4,\"127\":1,\"182\":2,\"189\":1,\"202\":1,\"218\":1,\"227\":1,\"232\":1,\"238\":4,\"244\":1,\"259\":1,\"302\":1,\"354\":1,\"361\":1,\"391\":7,\"402\":1,\"403\":1,\"437\":1,\"511\":2,\"643\":2,\"675\":1,\"679\":1,\"681\":1,\"682\":1,\"710\":7,\"755\":1,\"780\":1,\"785\":7,\"804\":1,\"808\":2,\"814\":1,\"815\":1,\"825\":1,\"827\":1,\"828\":1,\"889\":1,\"912\":1,\"914\":1,\"915\":1,\"945\":1,\"992\":1,\"1000\":1,\"1016\":1,\"1022\":1,\"1026\":1,\"1059\":1,\"1063\":1,\"1067\":1,\"1069\":1,\"1075\":1,\"1093\":1,\"1097\":7,\"1135\":1,\"1148\":1,\"1201\":1,\"1203\":1,\"1204\":1,\"1220\":1,\"1233\":1,\"1261\":1,\"1267\":1,\"1321\":1,\"1324\":3,\"1330\":3,\"1352\":1,\"1363\":1,\"1380\":1,\"1395\":1,\"1400\":1,\"1615\":1,\"1631\":1,\"1712\":1,\"1733\":1,\"1737\":1,\"1744\":1,\"1753\":1,\"1755\":1,\"1790\":1,\"1791\":1,\"1795\":1}}],[\"g`\",{\"1\":{\"794\":1}}],[\"gt\",{\"1\":{\"633\":4}}],[\"gc\",{\"1\":{\"242\":1}}],[\"gc=git\",{\"1\":{\"241\":1}}],[\"gcc\",{\"1\":{\"207\":3,\"208\":1}}],[\"glitches\",{\"1\":{\"174\":1}}],[\"glitch\",{\"1\":{\"174\":1,\"178\":1}}],[\"globs\",{\"1\":{\"119\":1,\"121\":1}}],[\"globals\",{\"1\":{\"1176\":1,\"1710\":1}}],[\"global\",{\"0\":{\"225\":1,\"519\":1,\"523\":1,\"676\":1,\"680\":1,\"817\":1,\"826\":1,\"913\":1,\"1202\":1},\"1\":{\"15\":2,\"26\":2,\"108\":1,\"119\":1,\"127\":1,\"225\":2,\"226\":3,\"354\":1,\"361\":1,\"385\":1,\"391\":4,\"393\":2,\"515\":1,\"519\":2,\"523\":2,\"526\":1,\"611\":4,\"676\":1,\"677\":4,\"678\":5,\"679\":1,\"680\":3,\"681\":1,\"685\":2,\"710\":4,\"743\":6,\"756\":6,\"785\":4,\"787\":2,\"817\":1,\"818\":1,\"819\":6,\"820\":2,\"822\":1,\"823\":4,\"824\":5,\"825\":1,\"826\":3,\"827\":1,\"830\":2,\"865\":1,\"910\":4,\"911\":5,\"912\":1,\"913\":3,\"914\":1,\"917\":2,\"999\":1,\"1000\":1,\"1022\":7,\"1058\":1,\"1059\":1,\"1091\":2,\"1097\":4,\"1098\":2,\"1176\":4,\"1182\":2,\"1199\":4,\"1200\":5,\"1201\":1,\"1202\":3,\"1203\":1,\"1207\":2,\"1219\":1,\"1220\":1,\"1345\":2,\"1487\":4,\"1615\":2,\"1641\":6,\"1710\":2,\"1772\":2,\"1773\":1,\"1791\":2}}],[\"glob\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"119\":2,\"121\":5,\"123\":1,\"127\":1,\"142\":1,\"223\":1,\"238\":1,\"393\":1,\"462\":2,\"463\":1,\"697\":1,\"787\":1,\"788\":1,\"789\":1,\"791\":2,\"837\":1,\"843\":1,\"1098\":1,\"1192\":1,\"1798\":1}}],[\"globbing\",{\"0\":{\"238\":1},\"1\":{\"15\":1,\"26\":1,\"116\":1,\"119\":1,\"121\":1,\"238\":4,\"239\":1,\"391\":1,\"458\":1,\"459\":2,\"462\":1,\"710\":1,\"785\":1,\"791\":1,\"1097\":1,\"1188\":1,\"1772\":1,\"1798\":1}}],[\"glossary\",{\"1\":{\"10\":1,\"264\":1,\"1451\":1,\"1498\":1,\"1600\":1}}],[\"gping\",{\"1\":{\"167\":1}}],[\"guarantee\",{\"1\":{\"762\":1}}],[\"guess\",{\"1\":{\"113\":1,\"1245\":2,\"1267\":1}}],[\"guessing\",{\"1\":{\"113\":1}}],[\"gunzip\",{\"1\":{\"111\":1,\"201\":1}}],[\"guidelines\",{\"1\":{\"741\":1}}],[\"guide\",{\"0\":{\"184\":1,\"1399\":1,\"1700\":1,\"1706\":1,\"1708\":1,\"1710\":1,\"1715\":1,\"1728\":1,\"1740\":1,\"1744\":1,\"1749\":1,\"1755\":1,\"1772\":1,\"1775\":1,\"1780\":1,\"1783\":1,\"1795\":1,\"1816\":1},\"1\":{\"202\":1,\"286\":1,\"300\":1,\"1546\":1,\"1722\":1},\"2\":{\"85\":1}}],[\"guides\",{\"0\":{\"12\":1,\"23\":1,\"1453\":1,\"1500\":1},\"1\":{\"21\":1}}],[\"gamma\",{\"1\":{\"1691\":1}}],[\"gamecontrollerd\",{\"1\":{\"1484\":1}}],[\"game\",{\"1\":{\"1245\":1}}],[\"garbage\",{\"1\":{\"1180\":1}}],[\"garbled\",{\"1\":{\"108\":1}}],[\"gaps\",{\"1\":{\"69\":1,\"131\":1}}],[\"gist\",{\"1\":{\"1731\":1}}],[\"gilbert\",{\"1\":{\"1651\":1,\"1652\":1,\"1661\":1,\"1662\":1}}],[\"gibbous\",{\"1\":{\"1449\":2}}],[\"gif\",{\"1\":{\"1010\":1}}],[\"given\",{\"1\":{\"119\":1,\"181\":1,\"201\":1,\"304\":1,\"447\":1,\"608\":1,\"908\":1,\"932\":1,\"1125\":1,\"1278\":1,\"1312\":1,\"1321\":1,\"1764\":1,\"1765\":1}}],[\"give\",{\"1\":{\"90\":1}}],[\"gitstatus\",{\"1\":{\"1725\":1}}],[\"git\",{\"1\":{\"86\":1,\"93\":1,\"128\":1,\"138\":2,\"181\":1,\"207\":2,\"208\":2,\"242\":1,\"1369\":2,\"1628\":1,\"1725\":2,\"1733\":2}}],[\"githubusercontent\",{\"1\":{\"1731\":1}}],[\"github\",{\"1\":{\"13\":1,\"68\":1,\"69\":1,\"108\":1,\"131\":1,\"160\":1,\"181\":1,\"199\":1,\"208\":5,\"261\":1,\"269\":2,\"270\":3,\"276\":2,\"277\":4,\"283\":2,\"290\":5,\"297\":2,\"304\":1,\"311\":1,\"312\":2,\"316\":3,\"318\":2,\"324\":3,\"326\":2,\"331\":3,\"333\":3,\"338\":2,\"340\":1,\"345\":1,\"347\":1,\"596\":1,\"986\":2,\"1018\":1,\"1021\":1,\"1300\":3,\"1454\":1,\"1489\":1,\"1733\":1,\"1767\":2}}],[\"gracefully\",{\"1\":{\"1808\":1}}],[\"grapheme\",{\"1\":{\"1509\":1}}],[\"grapes\",{\"1\":{\"689\":2}}],[\"granted\",{\"1\":{\"742\":1}}],[\"grammar\",{\"1\":{\"48\":2,\"51\":1,\"52\":2}}],[\"groupmath\",{\"1\":{\"953\":2}}],[\"grouptext\",{\"1\":{\"953\":2}}],[\"groups\",{\"0\":{\"953\":1},\"1\":{\"953\":2}}],[\"grouped\",{\"1\":{\"515\":1,\"977\":1,\"1729\":1}}],[\"group\",{\"1\":{\"421\":1,\"447\":1,\"695\":6,\"953\":1,\"1484\":1}}],[\"grokking\",{\"1\":{\"60\":1}}],[\"grok\",{\"1\":{\"40\":1}}],[\"gridded\",{\"1\":{\"182\":1,\"1716\":1,\"1797\":1}}],[\"grid\",{\"1\":{\"174\":1,\"454\":1}}],[\"greedy\",{\"1\":{\"1798\":1}}],[\"greeeen\",{\"1\":{\"1703\":2}}],[\"green\",{\"1\":{\"1546\":1,\"1700\":1,\"1701\":4,\"1702\":2,\"1703\":3}}],[\"grep\",{\"1\":{\"47\":2,\"59\":4,\"99\":1,\"121\":2,\"217\":1,\"218\":1,\"219\":1,\"499\":1,\"676\":3,\"681\":1,\"827\":1,\"914\":1,\"1203\":1,\"1323\":1,\"1329\":1,\"1745\":1,\"1772\":2}}],[\"greater\",{\"1\":{\"72\":1,\"113\":1,\"121\":1,\"340\":2,\"1155\":1,\"1341\":1,\"1777\":1,\"1778\":1}}],[\"greatly\",{\"1\":{\"43\":1}}],[\"great\",{\"1\":{\"22\":1,\"48\":1,\"50\":1,\"782\":2,\"1659\":1}}],[\"goal\",{\"1\":{\"1628\":1}}],[\"gone\",{\"1\":{\"921\":1}}],[\"gopls\",{\"1\":{\"865\":1}}],[\"gopath\",{\"1\":{\"207\":1}}],[\"google\",{\"1\":{\"806\":1,\"808\":1,\"813\":1,\"815\":1,\"1056\":1,\"1065\":1,\"1069\":1}}],[\"good\",{\"1\":{\"42\":1,\"48\":1,\"53\":1,\"274\":1,\"387\":1,\"1788\":1}}],[\"goes\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"govaluate\",{\"1\":{\"609\":1,\"909\":1}}],[\"golang\",{\"1\":{\"207\":1,\"259\":1,\"302\":1,\"999\":1,\"1058\":1,\"1219\":1}}],[\"golfing\",{\"0\":{\"1545\":1},\"1\":{\"52\":1}}],[\"goto\",{\"0\":{\"447\":1},\"1\":{\"117\":1,\"431\":1,\"447\":5}}],[\"goreportcard\",{\"1\":{\"91\":1,\"100\":1}}],[\"going\",{\"1\":{\"40\":1,\"47\":3,\"59\":1,\"60\":1,\"315\":1,\"323\":1,\"330\":1,\"438\":1,\"439\":1,\"1293\":2,\"1620\":1}}],[\"go\",{\"0\":{\"567\":2},\"1\":{\"30\":2,\"90\":1,\"95\":1,\"119\":2,\"121\":1,\"207\":3,\"208\":5,\"259\":1,\"265\":2,\"270\":1,\"272\":2,\"277\":1,\"278\":1,\"279\":2,\"302\":1,\"304\":1,\"314\":1,\"315\":1,\"322\":1,\"323\":1,\"329\":1,\"330\":1,\"345\":1,\"354\":1,\"361\":1,\"562\":3,\"567\":2,\"575\":1,\"576\":1,\"682\":2,\"694\":1,\"828\":2,\"865\":1,\"915\":2,\"1176\":1,\"1186\":1,\"1188\":1,\"1204\":2,\"1209\":1,\"1421\":1,\"1645\":2,\"1699\":2,\"1789\":1}}],[\"gzipped\",{\"1\":{\"1020\":1}}],[\"gzip\",{\"1\":{\"16\":1,\"27\":1,\"467\":2,\"1456\":1,\"1463\":1,\"1469\":1,\"1470\":1,\"1471\":1}}],[\"gz\",{\"0\":{\"1470\":1},\"1\":{\"16\":1,\"27\":1,\"190\":2,\"192\":1,\"193\":4,\"194\":4,\"195\":4,\"196\":4,\"198\":1,\"199\":3,\"201\":3,\"1017\":1,\"1020\":1,\"1456\":1,\"1463\":1,\"1469\":1,\"1472\":2,\"1473\":2,\"1483\":1}}],[\"gender\",{\"1\":{\"762\":3}}],[\"general\",{\"0\":{\"1803\":1},\"1\":{\"227\":1,\"1789\":1,\"1795\":1}}],[\"generally\",{\"1\":{\"42\":1,\"737\":1,\"743\":1,\"756\":1,\"1403\":1,\"1448\":1,\"1600\":1,\"1641\":1,\"1741\":1}}],[\"generating\",{\"1\":{\"371\":1,\"873\":1,\"1270\":1,\"1401\":1,\"1666\":1}}],[\"generation\",{\"1\":{\"66\":1,\"170\":1,\"1110\":1}}],[\"generates\",{\"1\":{\"869\":1,\"1476\":1}}],[\"generated\",{\"1\":{\"109\":1,\"875\":1,\"1176\":1,\"1272\":1,\"1287\":1,\"1428\":1,\"1436\":1,\"1513\":1,\"1708\":1}}],[\"generate\",{\"1\":{\"24\":2,\"41\":1,\"44\":1,\"63\":1,\"130\":1,\"231\":1,\"377\":1,\"378\":1,\"877\":1,\"1105\":1,\"1176\":1,\"1274\":1,\"1502\":2,\"1519\":1,\"1535\":1,\"1536\":1,\"1537\":1,\"1540\":1,\"1675\":1,\"1708\":1}}],[\"generator\",{\"1\":{\"15\":1,\"26\":1,\"1104\":1,\"1110\":1}}],[\"generically\",{\"1\":{\"1789\":1}}],[\"generic\",{\"0\":{\"1577\":1,\"1623\":1},\"1\":{\"24\":1,\"28\":2,\"92\":2,\"99\":1,\"101\":2,\"103\":2,\"134\":1,\"345\":1,\"735\":2,\"760\":1,\"953\":1,\"1020\":1,\"1021\":4,\"1024\":2,\"1260\":1,\"1267\":1,\"1491\":2,\"1502\":1,\"1572\":1,\"1576\":1,\"1578\":1,\"1579\":1,\"1584\":1,\"1601\":1,\"1603\":2,\"1612\":2,\"1618\":2,\"1623\":1,\"1651\":1,\"1657\":2,\"1661\":1,\"1670\":2,\"1682\":1,\"1686\":1,\"1688\":2,\"1748\":1,\"1779\":1}}],[\"getpid\",{\"1\":{\"1300\":1}}],[\"gets\",{\"1\":{\"605\":1,\"905\":1,\"1021\":1,\"1023\":1}}],[\"gethostsfile\",{\"1\":{\"182\":1}}],[\"getvalue\",{\"1\":{\"121\":1,\"605\":1,\"905\":1}}],[\"getbytes\",{\"1\":{\"50\":1}}],[\"getting\",{\"0\":{\"20\":1,\"213\":1},\"1\":{\"95\":1,\"115\":1,\"135\":1,\"151\":1,\"155\":1,\"526\":3,\"605\":1,\"905\":1,\"1780\":1}}],[\"getfile\",{\"0\":{\"810\":1},\"1\":{\"15\":1,\"26\":1,\"113\":3,\"121\":1,\"122\":1,\"515\":1,\"530\":1,\"635\":1,\"641\":1,\"809\":1,\"812\":1,\"813\":1,\"815\":2,\"1024\":1,\"1070\":1,\"1102\":1,\"1103\":1}}],[\"get\",{\"0\":{\"798\":1,\"803\":1,\"923\":1},\"1\":{\"15\":4,\"26\":4,\"42\":1,\"111\":1,\"113\":2,\"115\":1,\"119\":2,\"181\":1,\"183\":1,\"207\":1,\"208\":2,\"274\":1,\"427\":1,\"428\":1,\"436\":1,\"440\":2,\"446\":1,\"457\":1,\"512\":2,\"515\":1,\"517\":1,\"526\":2,\"527\":1,\"530\":1,\"596\":1,\"635\":1,\"641\":1,\"754\":1,\"765\":1,\"787\":1,\"799\":1,\"800\":3,\"801\":7,\"804\":1,\"805\":2,\"806\":1,\"808\":3,\"814\":1,\"816\":1,\"924\":4,\"925\":2,\"926\":1,\"935\":1,\"975\":1,\"1022\":1,\"1024\":1,\"1027\":1,\"1056\":1,\"1070\":1,\"1102\":1,\"1103\":1,\"1175\":1,\"1213\":1,\"1332\":1,\"1343\":1,\"1513\":1,\"1571\":1,\"1575\":1,\"1583\":1,\"1724\":1,\"1753\":2,\"1788\":1,\"1790\":1}}],[\"g\",{\"0\":{\"458\":1,\"788\":1},\"1\":{\"15\":2,\"26\":2,\"38\":2,\"56\":2,\"93\":1,\"94\":1,\"115\":2,\"116\":1,\"121\":1,\"208\":1,\"238\":4,\"393\":1,\"459\":2,\"460\":1,\"461\":1,\"462\":1,\"463\":1,\"694\":2,\"697\":1,\"787\":1,\"790\":5,\"791\":8,\"794\":2,\"795\":5,\"796\":2,\"835\":1,\"837\":1,\"841\":1,\"843\":1,\"858\":3,\"1098\":1,\"1175\":2,\"1186\":1,\"1188\":2,\"1190\":1,\"1192\":1,\"1647\":1,\"1664\":1,\"1772\":4,\"1798\":1}}],[\"gnu\",{\"1\":{\"3\":1,\"121\":1,\"1461\":1,\"1496\":1}}],[\"ubuntu\",{\"1\":{\"1793\":1}}],[\"udp\",{\"1\":{\"1175\":4}}],[\"u003c\",{\"1\":{\"1175\":2}}],[\"u003e\",{\"1\":{\"847\":1,\"1175\":10}}],[\"uri\",{\"1\":{\"978\":2,\"979\":2,\"1731\":1}}],[\"url\",{\"1\":{\"15\":1,\"26\":1,\"624\":1,\"629\":1,\"635\":1,\"636\":1,\"637\":2,\"804\":1,\"805\":2,\"811\":1,\"812\":1,\"814\":1,\"1063\":1,\"1064\":2,\"1311\":4,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"utilized\",{\"1\":{\"851\":1}}],[\"utilities\",{\"1\":{\"3\":1,\"39\":1,\"57\":1}}],[\"utils\",{\"1\":{\"111\":1,\"270\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"312\":1,\"316\":1,\"318\":2,\"324\":1,\"331\":1,\"333\":2,\"338\":1,\"347\":3,\"1300\":1}}],[\"ugly\",{\"1\":{\"111\":1,\"247\":1,\"447\":1,\"956\":1}}],[\"u\",{\"0\":{\"546\":1},\"1\":{\"108\":1,\"208\":1,\"541\":1,\"1158\":1,\"1805\":1}}],[\"ux\",{\"1\":{\"91\":1,\"100\":1}}],[\"uid\",{\"1\":{\"367\":2}}],[\"ui\",{\"1\":{\"91\":1,\"100\":1,\"104\":1,\"138\":1}}],[\"usbmuxd\",{\"1\":{\"1484\":1}}],[\"usr\",{\"1\":{\"423\":1,\"681\":1,\"827\":1,\"865\":2,\"914\":1,\"1203\":1}}],[\"us\",{\"1\":{\"90\":1,\"121\":1,\"202\":1,\"607\":1,\"907\":1}}],[\"usability\",{\"1\":{\"73\":1,\"75\":1,\"95\":1,\"119\":1}}],[\"usages\",{\"1\":{\"247\":1,\"372\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1}}],[\"usage\",{\"0\":{\"34\":1,\"45\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1,\"352\":1,\"359\":1,\"366\":1,\"372\":1,\"381\":1,\"386\":1,\"396\":1,\"407\":1,\"415\":1,\"422\":1,\"427\":1,\"460\":1,\"466\":1,\"472\":1,\"478\":1,\"486\":1,\"492\":1,\"498\":1,\"505\":1,\"512\":1,\"533\":1,\"539\":1,\"551\":1,\"556\":1,\"561\":1,\"574\":1,\"580\":1,\"587\":1,\"592\":1,\"602\":1,\"614\":1,\"621\":1,\"627\":1,\"632\":1,\"638\":1,\"644\":1,\"654\":1,\"662\":1,\"667\":1,\"672\":1,\"683\":1,\"688\":1,\"693\":1,\"700\":1,\"706\":1,\"716\":1,\"721\":1,\"726\":1,\"731\":1,\"738\":1,\"748\":1,\"761\":1,\"769\":1,\"774\":1,\"790\":1,\"800\":1,\"805\":1,\"812\":1,\"819\":1,\"829\":1,\"834\":1,\"840\":1,\"846\":1,\"852\":1,\"864\":1,\"874\":1,\"880\":1,\"887\":1,\"895\":1,\"901\":1,\"916\":1,\"920\":1,\"925\":1,\"933\":1,\"938\":1,\"943\":1,\"950\":1,\"957\":1,\"963\":1,\"970\":1,\"978\":1,\"985\":1,\"990\":1,\"996\":1,\"1000\":1,\"1005\":1,\"1011\":1,\"1017\":1,\"1027\":1,\"1034\":1,\"1042\":1,\"1047\":1,\"1055\":1,\"1059\":1,\"1064\":1,\"1073\":1,\"1080\":1,\"1087\":1,\"1092\":1,\"1101\":1,\"1106\":1,\"1114\":1,\"1121\":1,\"1125\":1,\"1129\":1,\"1140\":1,\"1146\":1,\"1156\":1,\"1162\":1,\"1174\":1,\"1178\":1,\"1185\":1,\"1195\":1,\"1205\":1,\"1210\":1,\"1216\":1,\"1220\":1,\"1225\":1,\"1231\":1,\"1238\":1,\"1244\":1,\"1259\":1,\"1266\":1,\"1271\":1,\"1277\":1,\"1284\":1,\"1292\":1,\"1298\":1,\"1304\":1,\"1310\":1,\"1316\":1,\"1322\":1,\"1328\":1,\"1334\":1,\"1340\":1,\"1348\":1,\"1367\":1,\"1376\":1,\"1391\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1,\"1459\":1,\"1466\":1,\"1472\":1,\"1477\":1,\"1483\":1,\"1494\":1},\"1\":{\"34\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":2,\"52\":1,\"68\":1,\"78\":1,\"113\":1,\"160\":1,\"244\":1,\"385\":1,\"423\":1,\"474\":2,\"572\":1,\"808\":1,\"815\":1,\"857\":1,\"865\":1,\"927\":1,\"1069\":1,\"1115\":2,\"1121\":2,\"1122\":2,\"1125\":1,\"1321\":1,\"1407\":1,\"1412\":1,\"1424\":1,\"1432\":1,\"1440\":1,\"1728\":1,\"1755\":1}}],[\"using\",{\"0\":{\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"751\":1,\"779\":1,\"1730\":1},\"1\":{\"21\":1,\"42\":1,\"43\":1,\"47\":1,\"48\":1,\"60\":1,\"103\":1,\"111\":1,\"117\":2,\"121\":1,\"199\":1,\"202\":2,\"219\":1,\"225\":2,\"226\":3,\"237\":1,\"238\":1,\"239\":1,\"242\":1,\"260\":1,\"303\":1,\"440\":1,\"441\":1,\"443\":1,\"452\":1,\"453\":1,\"513\":1,\"526\":1,\"543\":1,\"605\":1,\"607\":1,\"677\":1,\"679\":1,\"692\":1,\"694\":1,\"741\":1,\"742\":1,\"764\":1,\"823\":1,\"825\":1,\"905\":1,\"907\":1,\"910\":1,\"912\":1,\"926\":1,\"981\":1,\"1010\":1,\"1016\":1,\"1023\":1,\"1049\":1,\"1199\":1,\"1201\":1,\"1245\":1,\"1400\":1,\"1401\":1,\"1424\":1,\"1429\":1,\"1432\":1,\"1437\":1,\"1467\":1,\"1505\":1,\"1509\":1,\"1546\":1,\"1549\":1,\"1586\":1,\"1592\":1,\"1647\":1,\"1664\":1,\"1716\":1,\"1728\":1,\"1731\":1,\"1733\":1,\"1746\":1,\"1757\":1,\"1800\":1}}],[\"used\",{\"0\":{\"755\":1,\"795\":1,\"1190\":1},\"1\":{\"48\":1,\"89\":1,\"93\":2,\"95\":1,\"103\":3,\"104\":1,\"113\":5,\"115\":1,\"117\":3,\"121\":4,\"127\":1,\"147\":1,\"162\":1,\"182\":1,\"208\":1,\"210\":1,\"217\":1,\"231\":1,\"246\":1,\"285\":1,\"299\":1,\"337\":1,\"341\":1,\"344\":1,\"348\":1,\"377\":1,\"389\":1,\"395\":1,\"402\":1,\"423\":1,\"432\":1,\"497\":1,\"500\":1,\"568\":1,\"596\":1,\"677\":2,\"683\":2,\"696\":1,\"730\":1,\"733\":1,\"743\":1,\"747\":1,\"749\":1,\"756\":1,\"760\":2,\"795\":1,\"823\":2,\"829\":2,\"910\":2,\"916\":2,\"919\":1,\"999\":2,\"1000\":2,\"1021\":2,\"1058\":2,\"1059\":2,\"1153\":2,\"1176\":1,\"1178\":1,\"1179\":1,\"1190\":1,\"1199\":2,\"1205\":2,\"1209\":1,\"1215\":1,\"1219\":2,\"1220\":2,\"1226\":1,\"1278\":4,\"1280\":1,\"1283\":1,\"1359\":1,\"1385\":1,\"1404\":1,\"1504\":1,\"1505\":1,\"1509\":1,\"1535\":1,\"1542\":2,\"1545\":1,\"1549\":2,\"1564\":1,\"1570\":1,\"1582\":1,\"1586\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1596\":1,\"1598\":1,\"1614\":2,\"1624\":1,\"1628\":1,\"1641\":1,\"1706\":1,\"1723\":1,\"1741\":1,\"1750\":1,\"1752\":1,\"1789\":1,\"1798\":1}}],[\"useless\",{\"1\":{\"47\":1}}],[\"useful\",{\"1\":{\"38\":3,\"56\":3,\"376\":1,\"643\":1,\"784\":1,\"1110\":1,\"1179\":1}}],[\"usefulness\",{\"1\":{\"3\":1}}],[\"use\",{\"0\":{\"1250\":1},\"1\":{\"34\":1,\"38\":3,\"40\":1,\"41\":4,\"45\":1,\"47\":4,\"48\":2,\"50\":1,\"56\":3,\"58\":1,\"70\":1,\"76\":1,\"90\":1,\"104\":1,\"111\":1,\"113\":3,\"117\":1,\"119\":1,\"121\":1,\"125\":1,\"126\":2,\"177\":1,\"189\":1,\"197\":1,\"201\":1,\"208\":1,\"216\":3,\"222\":3,\"231\":1,\"232\":2,\"238\":1,\"251\":1,\"259\":1,\"302\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"340\":1,\"344\":1,\"347\":1,\"376\":1,\"387\":1,\"397\":1,\"409\":1,\"435\":1,\"436\":1,\"441\":2,\"444\":1,\"453\":1,\"459\":1,\"468\":1,\"487\":2,\"494\":1,\"507\":1,\"515\":1,\"526\":1,\"544\":1,\"566\":1,\"576\":2,\"582\":1,\"596\":2,\"605\":1,\"606\":1,\"607\":1,\"626\":1,\"695\":1,\"733\":1,\"737\":1,\"743\":1,\"749\":1,\"755\":1,\"756\":1,\"779\":1,\"794\":1,\"814\":2,\"859\":2,\"897\":1,\"905\":1,\"906\":1,\"907\":1,\"926\":1,\"942\":1,\"953\":2,\"956\":1,\"981\":2,\"984\":1,\"1021\":1,\"1036\":1,\"1125\":1,\"1175\":1,\"1176\":1,\"1178\":1,\"1189\":1,\"1218\":1,\"1227\":1,\"1237\":1,\"1248\":1,\"1272\":1,\"1276\":1,\"1309\":1,\"1321\":1,\"1400\":1,\"1405\":1,\"1421\":1,\"1461\":1,\"1487\":1,\"1496\":1,\"1564\":1,\"1567\":1,\"1591\":1,\"1601\":1,\"1615\":1,\"1620\":1,\"1628\":1,\"1634\":1,\"1641\":1,\"1667\":1,\"1672\":1,\"1677\":1,\"1716\":1,\"1719\":1,\"1747\":2,\"1753\":2,\"1773\":1,\"1783\":1,\"1798\":1,\"1808\":2}}],[\"uses\",{\"1\":{\"23\":1,\"41\":1,\"59\":1,\"99\":1,\"113\":1,\"130\":1,\"164\":1,\"183\":1,\"376\":1,\"426\":1,\"596\":1,\"609\":1,\"909\":1,\"1188\":1,\"1297\":1,\"1388\":1,\"1674\":1,\"1700\":1,\"1717\":2,\"1727\":1,\"1773\":1,\"1774\":1,\"1795\":1}}],[\"users\",{\"1\":{\"51\":1,\"79\":1,\"90\":1,\"103\":1,\"111\":1,\"208\":1,\"1403\":1,\"1596\":1,\"1752\":1}}],[\"user\",{\"0\":{\"23\":1,\"90\":1,\"91\":1,\"99\":1,\"100\":1,\"103\":1,\"104\":1,\"108\":1,\"109\":1,\"128\":1,\"1022\":1,\"1700\":1,\"1706\":1,\"1708\":1,\"1710\":1,\"1715\":1,\"1728\":1,\"1740\":1,\"1744\":1,\"1749\":1,\"1755\":1,\"1772\":1,\"1775\":1,\"1780\":1,\"1783\":1,\"1790\":1,\"1795\":1,\"1816\":1},\"1\":{\"15\":5,\"21\":1,\"26\":5,\"43\":2,\"70\":1,\"90\":2,\"99\":1,\"103\":1,\"110\":1,\"111\":2,\"113\":2,\"115\":1,\"116\":1,\"121\":1,\"123\":2,\"125\":1,\"142\":1,\"183\":1,\"201\":1,\"286\":1,\"300\":1,\"378\":1,\"515\":1,\"516\":1,\"548\":1,\"643\":1,\"695\":6,\"751\":1,\"783\":1,\"808\":2,\"815\":2,\"865\":2,\"877\":1,\"947\":1,\"967\":1,\"975\":2,\"979\":2,\"1022\":3,\"1052\":3,\"1069\":2,\"1119\":1,\"1123\":1,\"1126\":2,\"1137\":1,\"1151\":1,\"1171\":1,\"1176\":1,\"1179\":1,\"1260\":3,\"1267\":4,\"1269\":1,\"1270\":1,\"1308\":2,\"1313\":1,\"1350\":1,\"1377\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1484\":4,\"1536\":1,\"1546\":1,\"1717\":1,\"1722\":1,\"1725\":1,\"1741\":1,\"1752\":1,\"1790\":5}}],[\"usually\",{\"1\":{\"111\":1,\"433\":1,\"1741\":1}}],[\"usual\",{\"1\":{\"15\":1,\"26\":1,\"103\":1,\"164\":1,\"393\":1,\"469\":1,\"606\":1,\"608\":1,\"659\":1,\"704\":1,\"705\":1,\"723\":1,\"728\":1,\"735\":1,\"787\":1,\"906\":1,\"908\":1,\"1024\":1,\"1031\":1,\"1098\":1,\"1213\":1,\"1294\":1,\"1416\":1,\"1800\":1}}],[\"unhappy\",{\"1\":{\"1772\":1}}],[\"unnamed\",{\"1\":{\"1741\":1}}],[\"unreported\",{\"1\":{\"1176\":1}}],[\"unreadable\",{\"1\":{\"103\":1}}],[\"unwanted\",{\"1\":{\"882\":1}}],[\"unbuffered\",{\"1\":{\"748\":2}}],[\"unquoted\",{\"1\":{\"596\":1}}],[\"uncle\",{\"1\":{\"1245\":1}}],[\"unchanged\",{\"1\":{\"491\":1}}],[\"uncropped\",{\"1\":{\"95\":1}}],[\"unordered\",{\"1\":{\"347\":1}}],[\"unaffected\",{\"1\":{\"1724\":1}}],[\"uname\",{\"1\":{\"244\":2,\"653\":1,\"1772\":2}}],[\"unavailable\",{\"1\":{\"147\":1}}],[\"unlock\",{\"1\":{\"920\":1,\"921\":1}}],[\"unless\",{\"1\":{\"208\":1,\"1091\":1,\"1350\":1,\"1451\":1,\"1520\":1,\"1538\":1,\"1591\":1,\"1634\":1,\"1677\":1}}],[\"unlike\",{\"1\":{\"39\":1,\"57\":1,\"198\":1,\"591\":2,\"760\":1,\"1188\":1,\"1306\":1,\"1387\":1,\"1403\":1,\"1412\":1,\"1440\":1,\"1542\":1,\"1746\":1,\"1752\":1,\"1764\":1,\"1765\":1,\"1773\":1,\"1778\":1}}],[\"unzip\",{\"1\":{\"202\":1}}],[\"untraditional\",{\"1\":{\"1509\":1}}],[\"untested\",{\"1\":{\"199\":1,\"208\":1,\"1372\":1}}],[\"until\",{\"1\":{\"15\":1,\"26\":1,\"46\":1,\"114\":1,\"164\":1,\"347\":1,\"410\":2,\"440\":1,\"532\":1,\"745\":1,\"758\":1,\"766\":1,\"920\":1,\"1037\":1,\"1255\":1,\"1338\":1,\"1339\":2,\"1340\":2,\"1416\":2,\"1708\":1}}],[\"unedited\",{\"1\":{\"1703\":1}}],[\"unexpected\",{\"1\":{\"433\":1}}],[\"unexpectedly\",{\"1\":{\"182\":1}}],[\"unescaped\",{\"1\":{\"423\":1,\"596\":1,\"620\":1,\"631\":1,\"637\":1}}],[\"unescape\",{\"1\":{\"15\":1,\"26\":1,\"619\":1,\"621\":2,\"629\":1,\"632\":2,\"633\":1,\"635\":1,\"638\":2,\"639\":1,\"641\":1,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"undo\",{\"1\":{\"1805\":1}}],[\"undocumented\",{\"1\":{\"176\":1}}],[\"undefine\",{\"1\":{\"774\":1,\"1027\":1,\"1238\":1,\"1239\":1,\"1706\":1}}],[\"undefining\",{\"0\":{\"390\":1,\"430\":1,\"778\":1,\"1096\":1},\"1\":{\"430\":1,\"1096\":1}}],[\"underoff\",{\"1\":{\"1701\":1}}],[\"under21\",{\"1\":{\"902\":1}}],[\"under18=age<18\",{\"1\":{\"902\":1}}],[\"underscore\",{\"1\":{\"389\":1,\"780\":1,\"1591\":1,\"1701\":1}}],[\"understand\",{\"1\":{\"50\":1,\"59\":1,\"605\":2,\"643\":1,\"905\":2}}],[\"understandable\",{\"1\":{\"48\":1}}],[\"understanding\",{\"1\":{\"47\":1,\"208\":1}}],[\"underpinning\",{\"1\":{\"202\":1}}],[\"underline\",{\"1\":{\"1701\":1}}],[\"underlined\",{\"1\":{\"121\":1,\"1722\":1,\"1783\":1}}],[\"underlines\",{\"1\":{\"93\":1}}],[\"underlying\",{\"1\":{\"111\":1,\"201\":1,\"214\":1,\"1620\":1}}],[\"under\",{\"1\":{\"95\":1,\"108\":1,\"224\":1,\"376\":1,\"603\":6,\"1020\":1,\"1021\":1,\"1022\":1,\"1324\":1,\"1330\":1,\"1501\":1,\"1786\":1,\"1787\":1,\"1797\":1}}],[\"unfortunate\",{\"1\":{\"121\":1}}],[\"unfortunately\",{\"1\":{\"48\":1,\"90\":1,\"605\":1,\"905\":1}}],[\"unmashal\",{\"1\":{\"1678\":1}}],[\"unmatchedcount++\",{\"1\":{\"347\":1}}],[\"unmatchedcount\",{\"1\":{\"347\":4}}],[\"unmatched\",{\"0\":{\"444\":1},\"1\":{\"117\":1,\"347\":7,\"431\":1}}],[\"unmarshall\",{\"1\":{\"1601\":1}}],[\"unmarshallers\",{\"1\":{\"303\":1,\"304\":1,\"361\":2,\"889\":1,\"1075\":1,\"1148\":1,\"1175\":1,\"1176\":2,\"1233\":1}}],[\"unmarshaller\",{\"1\":{\"302\":2,\"303\":1,\"304\":1,\"319\":1,\"327\":1,\"334\":1,\"361\":3}}],[\"unmarshalling\",{\"1\":{\"270\":1,\"277\":1,\"304\":1,\"1611\":1}}],[\"unmarshaldatabuffered\",{\"1\":{\"361\":1}}],[\"unmarshaldata\",{\"0\":{\"357\":1},\"1\":{\"30\":1,\"263\":1,\"265\":1,\"302\":1,\"303\":2,\"306\":1,\"356\":1,\"359\":1,\"360\":1,\"361\":3,\"891\":1,\"1077\":1,\"1150\":1,\"1235\":1}}],[\"unmarshals\",{\"1\":{\"30\":2,\"265\":2,\"272\":2,\"279\":2,\"314\":1,\"322\":1,\"329\":1,\"1645\":2,\"1699\":2}}],[\"unmarshal\",{\"0\":{\"301\":1},\"1\":{\"30\":1,\"139\":1,\"263\":1,\"265\":1,\"270\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"302\":1,\"303\":1,\"304\":3,\"316\":1,\"318\":2,\"324\":1,\"326\":2,\"331\":1,\"333\":2,\"338\":1,\"356\":1,\"361\":2,\"363\":1,\"771\":1,\"953\":2,\"1606\":1,\"1607\":1,\"1612\":1,\"1617\":1,\"1618\":1,\"1621\":1,\"1622\":1,\"1625\":1,\"1626\":1,\"1631\":1,\"1632\":1,\"1635\":1,\"1636\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1664\":1,\"1669\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1679\":1,\"1683\":1,\"1687\":1,\"1688\":1,\"1693\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"unsuitable\",{\"1\":{\"1488\":1}}],[\"unsupported\",{\"0\":{\"1703\":1},\"1\":{\"1020\":1}}],[\"unsuccessful\",{\"1\":{\"15\":1,\"26\":1,\"115\":1,\"409\":1,\"410\":1,\"412\":1,\"703\":1,\"861\":1,\"1008\":1,\"1032\":1,\"1036\":1,\"1037\":1,\"1255\":1,\"1319\":1,\"1707\":1}}],[\"unsorted\",{\"1\":{\"762\":1}}],[\"unsightly\",{\"1\":{\"741\":1}}],[\"unsafe\",{\"1\":{\"121\":1,\"440\":2}}],[\"unset\",{\"1\":{\"115\":1,\"139\":1,\"224\":1,\"675\":2,\"678\":1,\"684\":1,\"822\":1,\"824\":1,\"911\":1,\"1198\":1,\"1200\":1}}],[\"unknown\",{\"1\":{\"113\":1,\"162\":1}}],[\"unused\",{\"1\":{\"93\":1}}],[\"uniq\",{\"1\":{\"1745\":1}}],[\"unique\",{\"0\":{\"546\":2},\"1\":{\"43\":1,\"539\":1,\"541\":3,\"546\":3,\"1300\":1,\"1712\":1,\"1737\":1}}],[\"universe\",{\"1\":{\"408\":1,\"1674\":2}}],[\"unit|state|config\",{\"1\":{\"182\":1}}],[\"unit\",{\"1\":{\"90\":1,\"91\":1,\"95\":1,\"100\":1,\"104\":1,\"113\":1,\"119\":1,\"679\":1,\"825\":1,\"912\":1,\"1201\":1,\"1284\":3,\"1285\":4}}],[\"unicode\",{\"1\":{\"50\":1,\"127\":2,\"147\":1,\"596\":1,\"780\":3,\"1226\":1,\"1505\":1,\"1592\":1}}],[\"unix\",{\"0\":{\"201\":1},\"1\":{\"10\":1,\"38\":1,\"39\":2,\"46\":2,\"50\":1,\"51\":1,\"56\":1,\"57\":2,\"62\":1,\"90\":1,\"108\":1,\"121\":1,\"174\":1,\"188\":1,\"202\":1,\"270\":1,\"277\":1,\"304\":1,\"560\":1,\"562\":2,\"579\":1,\"956\":3,\"1372\":1,\"1403\":1,\"1448\":1,\"1601\":1,\"1659\":1,\"1741\":3,\"1746\":6}}],[\"uppercase\",{\"1\":{\"1403\":2,\"1417\":2,\"1444\":2}}],[\"upper\",{\"0\":{\"1420\":1,\"1447\":1},\"1\":{\"780\":1,\"1770\":1}}],[\"upping\",{\"1\":{\"119\":1}}],[\"updating\",{\"0\":{\"1734\":1},\"1\":{\"76\":1,\"117\":1,\"138\":1,\"397\":1,\"1734\":1}}],[\"updated\",{\"1\":{\"91\":1,\"93\":2,\"100\":1,\"104\":1,\"108\":2,\"109\":1,\"111\":1,\"113\":1,\"119\":1,\"128\":1,\"142\":1,\"1142\":1,\"1366\":1,\"1788\":1}}],[\"updates\",{\"1\":{\"75\":1,\"95\":1,\"119\":1,\"174\":1,\"208\":1,\"507\":1,\"671\":1,\"818\":1,\"979\":1,\"1194\":1}}],[\"update\",{\"0\":{\"988\":1},\"1\":{\"15\":1,\"26\":1,\"77\":1,\"78\":1,\"113\":1,\"115\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"978\":2,\"979\":1,\"989\":1,\"990\":1,\"991\":1,\"992\":1,\"1241\":1,\"1734\":1}}],[\"upwards\",{\"1\":{\"51\":1,\"115\":1}}],[\"upwardly\",{\"1\":{\"46\":1}}],[\"upgrade\",{\"1\":{\"51\":1,\"86\":1}}],[\"up\",{\"1\":{\"3\":1,\"23\":1,\"40\":1,\"47\":1,\"52\":1,\"57\":1,\"91\":1,\"94\":1,\"95\":1,\"96\":1,\"100\":1,\"110\":1,\"111\":1,\"113\":1,\"119\":1,\"129\":1,\"182\":1,\"347\":1,\"391\":1,\"410\":2,\"437\":1,\"440\":1,\"463\":1,\"532\":1,\"596\":1,\"605\":1,\"656\":1,\"678\":1,\"710\":1,\"743\":2,\"756\":2,\"785\":1,\"824\":1,\"905\":1,\"911\":1,\"953\":2,\"982\":1,\"1021\":1,\"1037\":1,\"1091\":1,\"1097\":1,\"1153\":1,\"1154\":2,\"1155\":2,\"1158\":3,\"1200\":1,\"1293\":2,\"1416\":2,\"1641\":2,\"1701\":1,\"1705\":1,\"1708\":1,\"1728\":1,\"1741\":1,\"1749\":1,\"1794\":1,\"1797\":1,\"1798\":2,\"1799\":6,\"1800\":1,\"1802\":3,\"1806\":1}}],[\"upon\",{\"0\":{\"869\":1},\"1\":{\"3\":1,\"29\":1,\"51\":1,\"95\":2,\"109\":1,\"119\":1,\"129\":1,\"139\":1,\"183\":1,\"214\":1,\"234\":1,\"647\":1,\"741\":1,\"1346\":1,\"1369\":1,\"1388\":1,\"1750\":1}}],[\"3rd\",{\"0\":{\"1784\":1},\"1\":{\"1710\":1}}],[\"36\",{\"1\":{\"1401\":1,\"1432\":1}}],[\"362\",{\"1\":{\"103\":1}}],[\"3t\",{\"1\":{\"1299\":1}}],[\"39\",{\"1\":{\"847\":1}}],[\"346254973\",{\"1\":{\"742\":1}}],[\"3e\",{\"1\":{\"639\":2}}],[\"3c\",{\"1\":{\"639\":2}}],[\"3f\",{\"1\":{\"639\":2}}],[\"37\",{\"1\":{\"865\":1}}],[\"3750\",{\"1\":{\"575\":2}}],[\"379\",{\"1\":{\"108\":1}}],[\"32\",{\"1\":{\"562\":3,\"762\":3,\"1691\":1}}],[\"32bit\",{\"1\":{\"9\":2,\"111\":1,\"1634\":1}}],[\"3+3==6\",{\"1\":{\"408\":1,\"1035\":1}}],[\"35\",{\"1\":{\"119\":1}}],[\"380\",{\"1\":{\"108\":2}}],[\"386\",{\"1\":{\"9\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"199\":1,\"1634\":1}}],[\"33\",{\"1\":{\"104\":1,\"113\":1,\"1154\":2}}],[\"304\",{\"1\":{\"1767\":2}}],[\"308\",{\"1\":{\"1484\":1}}],[\"30th\",{\"1\":{\"865\":1}}],[\"3010\",{\"0\":{\"148\":1}}],[\"30\",{\"0\":{\"83\":1},\"1\":{\"91\":1,\"249\":1,\"562\":3,\"677\":2,\"823\":2,\"865\":1,\"910\":2,\"1199\":2,\"1414\":2,\"1701\":1,\"1772\":1}}],[\"3100\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"316\",{\"1\":{\"103\":1}}],[\"31\",{\"0\":{\"72\":1},\"1\":{\"121\":1,\"1414\":3,\"1701\":1}}],[\"3\",{\"0\":{\"67\":1,\"81\":1,\"102\":1,\"165\":1,\"1770\":1},\"1\":{\"3\":1,\"41\":1,\"60\":1,\"61\":2,\"121\":1,\"189\":1,\"235\":2,\"236\":2,\"237\":4,\"367\":1,\"373\":4,\"375\":3,\"397\":2,\"399\":1,\"417\":1,\"437\":2,\"462\":1,\"487\":1,\"493\":2,\"534\":1,\"540\":1,\"605\":1,\"608\":1,\"689\":2,\"739\":1,\"741\":1,\"742\":2,\"743\":9,\"749\":4,\"750\":1,\"751\":3,\"754\":1,\"755\":6,\"756\":9,\"765\":1,\"770\":2,\"801\":3,\"847\":1,\"865\":6,\"875\":1,\"888\":1,\"896\":1,\"904\":1,\"905\":1,\"908\":1,\"939\":4,\"997\":1,\"1082\":1,\"1088\":2,\"1115\":4,\"1131\":4,\"1147\":1,\"1154\":4,\"1253\":1,\"1254\":1,\"1260\":1,\"1267\":1,\"1272\":1,\"1341\":2,\"1343\":1,\"1400\":1,\"1403\":2,\"1404\":3,\"1426\":4,\"1428\":3,\"1429\":1,\"1436\":2,\"1437\":1,\"1448\":3,\"1449\":6,\"1484\":4,\"1506\":3,\"1516\":1,\"1522\":4,\"1524\":2,\"1525\":2,\"1526\":2,\"1527\":2,\"1532\":2,\"1539\":2,\"1634\":1,\"1641\":9,\"1701\":3,\"1764\":2,\"1765\":2,\"1772\":17}}],[\"rsync\",{\"1\":{\"1280\":1}}],[\"rss\",{\"1\":{\"865\":1,\"1260\":2,\"1267\":4}}],[\"rng\",{\"1\":{\"1110\":2}}],[\"rm\",{\"1\":{\"238\":1}}],[\"rudimentary\",{\"1\":{\"956\":1,\"1610\":1}}],[\"rules\",{\"1\":{\"113\":1,\"292\":1,\"426\":1,\"430\":1,\"434\":1,\"780\":1}}],[\"rule\",{\"1\":{\"103\":1,\"430\":1}}],[\"run|define|report\",{\"1\":{\"182\":1}}],[\"rune\",{\"1\":{\"163\":1,\"333\":1}}],[\"runcom\",{\"1\":{\"46\":3}}],[\"runmode\",{\"0\":{\"1160\":1},\"1\":{\"15\":1,\"26\":1,\"93\":1,\"94\":1,\"119\":1,\"120\":1,\"391\":1,\"502\":1,\"575\":1,\"710\":1,\"785\":1,\"1097\":1,\"1161\":3,\"1162\":1,\"1163\":1,\"1164\":1,\"1169\":2,\"1170\":3,\"1325\":1,\"1331\":1,\"1772\":1,\"1774\":1,\"1779\":1}}],[\"running\",{\"1\":{\"15\":3,\"26\":3,\"40\":1,\"46\":1,\"90\":1,\"92\":1,\"110\":1,\"113\":1,\"119\":1,\"142\":1,\"162\":1,\"163\":1,\"255\":1,\"475\":4,\"487\":3,\"488\":2,\"526\":1,\"534\":1,\"535\":2,\"544\":1,\"659\":4,\"679\":2,\"680\":1,\"713\":1,\"718\":4,\"719\":1,\"720\":1,\"722\":1,\"723\":3,\"724\":1,\"725\":1,\"727\":1,\"728\":3,\"729\":1,\"735\":3,\"747\":1,\"781\":1,\"808\":1,\"825\":2,\"826\":1,\"897\":1,\"912\":2,\"913\":1,\"965\":1,\"1068\":1,\"1141\":1,\"1167\":1,\"1171\":1,\"1176\":2,\"1178\":1,\"1180\":1,\"1182\":1,\"1201\":2,\"1202\":1,\"1241\":1,\"1291\":1,\"1325\":1,\"1331\":1,\"1484\":1,\"1721\":1,\"1728\":1,\"1753\":1,\"1756\":1,\"1762\":1,\"1766\":1,\"1768\":1,\"1784\":1,\"1788\":1,\"1808\":2,\"1811\":1}}],[\"runs\",{\"1\":{\"15\":2,\"26\":2,\"61\":1,\"162\":2,\"164\":1,\"393\":1,\"475\":1,\"652\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"787\":1,\"983\":1,\"1024\":1,\"1098\":1,\"1207\":1,\"1213\":2,\"1241\":1,\"1291\":1,\"1295\":1,\"1337\":1,\"1497\":1,\"1513\":1,\"1555\":1,\"1747\":1,\"1778\":1}}],[\"runtimes\",{\"1\":{\"1176\":1}}],[\"runtime\",{\"0\":{\"1172\":1},\"1\":{\"10\":1,\"15\":3,\"26\":3,\"51\":1,\"87\":1,\"96\":1,\"103\":1,\"105\":2,\"108\":1,\"110\":3,\"112\":1,\"114\":1,\"116\":1,\"120\":1,\"122\":1,\"164\":1,\"169\":1,\"183\":1,\"262\":1,\"264\":1,\"285\":1,\"299\":1,\"305\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1,\"403\":2,\"404\":3,\"457\":1,\"463\":1,\"467\":2,\"468\":1,\"469\":2,\"510\":1,\"511\":2,\"526\":1,\"530\":2,\"577\":2,\"599\":1,\"649\":1,\"651\":2,\"659\":1,\"669\":2,\"713\":1,\"723\":1,\"728\":1,\"735\":1,\"802\":2,\"809\":1,\"816\":1,\"849\":3,\"871\":1,\"889\":3,\"891\":2,\"935\":1,\"954\":2,\"981\":2,\"982\":3,\"987\":3,\"999\":1,\"1002\":2,\"1024\":1,\"1029\":1,\"1031\":2,\"1058\":1,\"1061\":2,\"1070\":1,\"1075\":3,\"1077\":2,\"1148\":3,\"1150\":2,\"1161\":1,\"1172\":1,\"1173\":1,\"1174\":2,\"1175\":7,\"1176\":1,\"1178\":4,\"1179\":1,\"1180\":2,\"1181\":1,\"1182\":1,\"1213\":3,\"1219\":1,\"1222\":2,\"1233\":3,\"1235\":2,\"1239\":1,\"1241\":4,\"1261\":2,\"1262\":2,\"1285\":1,\"1289\":1,\"1337\":3,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1491\":1,\"1618\":1,\"1626\":2,\"1632\":2,\"1636\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":3,\"1679\":2,\"1688\":2,\"1694\":2,\"1699\":2,\"1707\":1,\"1710\":2,\"1714\":2,\"1719\":1,\"1727\":3,\"1741\":1,\"1771\":1,\"1782\":1,\"1794\":1}}],[\"run\",{\"1\":{\"8\":2,\"14\":2,\"15\":3,\"23\":1,\"26\":3,\"38\":1,\"40\":1,\"50\":2,\"51\":1,\"56\":1,\"75\":1,\"90\":2,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"119\":1,\"120\":1,\"121\":1,\"182\":3,\"183\":1,\"190\":1,\"202\":1,\"208\":5,\"252\":1,\"387\":1,\"431\":1,\"438\":1,\"439\":1,\"440\":1,\"470\":1,\"471\":1,\"487\":1,\"488\":1,\"502\":1,\"535\":1,\"577\":1,\"605\":1,\"618\":1,\"653\":1,\"655\":2,\"659\":1,\"669\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"741\":1,\"783\":3,\"784\":1,\"808\":1,\"861\":1,\"905\":1,\"922\":1,\"989\":1,\"999\":1,\"1002\":1,\"1043\":5,\"1058\":1,\"1061\":2,\"1068\":1,\"1141\":1,\"1166\":1,\"1171\":1,\"1178\":4,\"1182\":1,\"1219\":1,\"1253\":1,\"1282\":1,\"1283\":1,\"1284\":2,\"1285\":2,\"1287\":1,\"1290\":1,\"1300\":1,\"1324\":1,\"1325\":1,\"1327\":1,\"1330\":1,\"1331\":1,\"1350\":1,\"1386\":2,\"1455\":2,\"1476\":1,\"1489\":1,\"1497\":1,\"1554\":3,\"1555\":1,\"1557\":1,\"1559\":3,\"1560\":2,\"1561\":1,\"1562\":1,\"1704\":1,\"1708\":1,\"1709\":1,\"1731\":1,\"1739\":1,\"1743\":1,\"1748\":2,\"1750\":1,\"1775\":2,\"1777\":1,\"1787\":1,\"1788\":1,\"1789\":1}}],[\"ritchie\",{\"1\":{\"1746\":1}}],[\"risk\",{\"1\":{\"76\":1,\"115\":1,\"117\":1,\"682\":1,\"828\":1,\"915\":1,\"1000\":1,\"1059\":1,\"1204\":1,\"1220\":1,\"1701\":1}}],[\"richard\",{\"1\":{\"247\":1,\"249\":1,\"1772\":2}}],[\"rich\",{\"1\":{\"50\":2}}],[\"richer\",{\"1\":{\"50\":1}}],[\"right\",{\"0\":{\"1144\":1},\"1\":{\"15\":2,\"24\":4,\"26\":2,\"105\":2,\"121\":1,\"174\":1,\"532\":1,\"717\":1,\"837\":3,\"843\":3,\"886\":1,\"888\":1,\"891\":2,\"954\":1,\"1077\":2,\"1144\":1,\"1145\":2,\"1146\":1,\"1147\":2,\"1149\":2,\"1150\":2,\"1235\":2,\"1502\":4,\"1509\":1,\"1554\":1,\"1557\":1,\"1559\":1,\"1562\":1,\"1568\":3,\"1569\":1,\"1572\":3,\"1573\":1,\"1576\":3,\"1577\":1,\"1580\":3,\"1581\":1,\"1584\":3,\"1610\":1,\"1727\":2,\"1748\":4,\"1773\":1,\"1779\":4,\"1797\":1,\"1798\":1,\"1802\":1,\"1805\":1}}],[\"rc\",{\"1\":{\"46\":1}}],[\"r\",{\"1\":{\"38\":1,\"40\":4,\"56\":1,\"59\":1,\"628\":5,\"695\":2,\"780\":2,\"1116\":1,\"1403\":1,\"1448\":1,\"1805\":2}}],[\"rx`\",{\"1\":{\"1189\":1}}],[\"rxmimeprefix\",{\"1\":{\"1021\":2}}],[\"rxrowsuffixnew\",{\"1\":{\"347\":3}}],[\"rxrowsuffixold\",{\"1\":{\"347\":3}}],[\"rxcolumnprefixnew\",{\"1\":{\"347\":3}}],[\"rxcolumnprefixold\",{\"1\":{\"347\":3}}],[\"rxwhitespace\",{\"1\":{\"345\":1}}],[\"rx\",{\"0\":{\"1183\":1},\"1\":{\"15\":1,\"26\":1,\"93\":1,\"94\":1,\"238\":2,\"463\":1,\"694\":1,\"697\":1,\"795\":1,\"797\":1,\"1185\":4,\"1186\":6,\"1188\":2,\"1189\":2,\"1190\":6,\"1191\":2,\"1772\":2,\"1798\":1}}],[\"rotates\",{\"1\":{\"1258\":1,\"1262\":1,\"1264\":1,\"1265\":1}}],[\"roles\",{\"1\":{\"643\":1,\"1797\":1,\"1798\":1,\"1799\":1,\"1808\":1}}],[\"role\",{\"1\":{\"219\":1,\"1629\":1}}],[\"robust\",{\"1\":{\"142\":1}}],[\"rows\",{\"1\":{\"347\":2,\"348\":1,\"1400\":1}}],[\"row\",{\"1\":{\"121\":1,\"292\":1,\"348\":1,\"454\":1,\"865\":1,\"1113\":1,\"1267\":1,\"1487\":1}}],[\"route53\",{\"1\":{\"1629\":1}}],[\"routines\",{\"1\":{\"111\":1}}],[\"rounds\",{\"1\":{\"1158\":2}}],[\"rounded\",{\"1\":{\"1153\":1,\"1154\":4}}],[\"rounding\",{\"1\":{\"181\":1,\"1153\":1,\"1157\":1}}],[\"round\",{\"0\":{\"1151\":1},\"1\":{\"15\":2,\"26\":2,\"181\":1,\"183\":2,\"1151\":1,\"1152\":1,\"1153\":2,\"1154\":1,\"1155\":3,\"1156\":1,\"1157\":1}}],[\"rocks\",{\"1\":{\"69\":1,\"86\":1,\"131\":1,\"167\":1,\"201\":1,\"1772\":3}}],[\"room\",{\"1\":{\"50\":1}}],[\"root\",{\"1\":{\"40\":1,\"103\":1,\"113\":1,\"252\":2,\"367\":9,\"487\":2,\"865\":5,\"1260\":12,\"1267\":16,\"1350\":3,\"1484\":1}}],[\"rosetta\",{\"0\":{\"220\":1,\"1772\":1},\"1\":{\"12\":1,\"23\":1,\"54\":1,\"124\":1,\"220\":1,\"1453\":1,\"1500\":1,\"1814\":1}}],[\"rapidly\",{\"1\":{\"1800\":1}}],[\"raw\",{\"1\":{\"1731\":1}}],[\"rare\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"rarely\",{\"1\":{\"172\":1}}],[\"rab\",{\"1\":{\"676\":1}}],[\"rate\",{\"1\":{\"445\":1}}],[\"rational\",{\"1\":{\"354\":1,\"361\":1,\"808\":1,\"815\":1,\"1069\":1}}],[\"rather\",{\"1\":{\"3\":1,\"42\":1,\"50\":2,\"73\":1,\"74\":1,\"90\":2,\"93\":1,\"95\":2,\"108\":2,\"115\":1,\"119\":2,\"121\":2,\"129\":1,\"142\":1,\"163\":2,\"292\":1,\"400\":1,\"445\":1,\"454\":1,\"455\":1,\"511\":1,\"544\":1,\"576\":1,\"582\":1,\"596\":1,\"653\":1,\"742\":1,\"743\":1,\"756\":1,\"794\":1,\"801\":1,\"897\":1,\"929\":1,\"956\":1,\"972\":1,\"981\":1,\"1125\":1,\"1139\":1,\"1155\":1,\"1161\":1,\"1178\":1,\"1189\":1,\"1249\":1,\"1312\":1,\"1372\":1,\"1401\":1,\"1403\":1,\"1432\":1,\"1448\":1,\"1504\":1,\"1571\":1,\"1575\":1,\"1578\":1,\"1583\":1,\"1634\":1,\"1641\":1,\"1701\":1,\"1708\":2,\"1741\":1,\"1746\":1,\"1753\":2,\"1778\":1,\"1789\":1,\"1807\":1}}],[\"raise\",{\"1\":{\"199\":1,\"488\":1,\"535\":1,\"596\":1,\"1489\":1}}],[\"raised\",{\"1\":{\"15\":1,\"26\":1,\"50\":1,\"68\":2,\"119\":1,\"147\":1,\"160\":2,\"412\":1,\"496\":1,\"497\":1,\"499\":1,\"861\":1,\"1039\":1,\"1171\":1,\"1255\":1,\"1325\":1,\"1331\":1}}],[\"ray\",{\"1\":{\"187\":1}}],[\"racing\",{\"1\":{\"174\":1}}],[\"races\",{\"1\":{\"100\":1,\"260\":1,\"282\":1,\"296\":1,\"303\":1,\"354\":1,\"361\":1}}],[\"race\",{\"1\":{\"95\":1,\"109\":1,\"1347\":1}}],[\"ramifications\",{\"1\":{\"91\":1,\"100\":1}}],[\"ranging\",{\"1\":{\"875\":1,\"1272\":1}}],[\"rangemoon\",{\"1\":{\"1449\":2}}],[\"rangemonthshort\",{\"1\":{\"1449\":2}}],[\"rangemonthlong\",{\"1\":{\"1449\":2}}],[\"rangeweekdayshort\",{\"1\":{\"1449\":2}}],[\"rangeweekdaylong\",{\"1\":{\"1449\":2}}],[\"rangeseason\",{\"1\":{\"1449\":2}}],[\"ranges\",{\"0\":{\"1403\":1,\"1411\":1,\"1423\":1,\"1431\":1,\"1439\":1,\"1448\":1,\"1527\":1,\"1531\":1},\"1\":{\"93\":1,\"107\":1,\"121\":1,\"371\":1,\"377\":5,\"742\":1,\"1115\":1,\"1403\":6,\"1410\":2,\"1412\":1,\"1417\":3,\"1421\":1,\"1422\":2,\"1428\":1,\"1430\":1,\"1432\":1,\"1436\":1,\"1438\":1,\"1439\":1,\"1440\":1,\"1444\":3,\"1448\":3,\"1450\":1,\"1531\":1,\"1535\":5,\"1536\":2,\"1540\":2}}],[\"ranged\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"122\":1,\"369\":1,\"378\":1,\"419\":1,\"548\":1,\"569\":1,\"599\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"940\":1,\"960\":1,\"1112\":1,\"1274\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1774\":1}}],[\"range\",{\"0\":{\"1112\":1,\"1524\":1},\"1\":{\"3\":1,\"15\":1,\"26\":1,\"94\":1,\"108\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"134\":1,\"239\":1,\"318\":6,\"326\":8,\"333\":9,\"340\":9,\"347\":11,\"369\":1,\"378\":1,\"419\":1,\"548\":1,\"560\":1,\"569\":1,\"599\":1,\"751\":1,\"752\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"940\":1,\"960\":1,\"1110\":1,\"1113\":3,\"1115\":2,\"1116\":1,\"1274\":1,\"1401\":2,\"1402\":2,\"1403\":3,\"1407\":2,\"1410\":1,\"1416\":1,\"1422\":1,\"1428\":1,\"1430\":1,\"1432\":2,\"1436\":1,\"1438\":1,\"1448\":3,\"1450\":1,\"1634\":2,\"1772\":1,\"1774\":1}}],[\"ran\",{\"1\":{\"46\":1,\"77\":1,\"115\":1,\"527\":1,\"528\":1,\"572\":1,\"1335\":3,\"1339\":1,\"1347\":2,\"1350\":1}}],[\"rand=0\",{\"1\":{\"1245\":1}}],[\"random\",{\"1\":{\"15\":1,\"26\":1,\"1104\":1,\"1105\":1,\"1107\":4,\"1108\":3,\"1110\":2}}],[\"rand\",{\"0\":{\"1104\":1},\"1\":{\"15\":1,\"26\":1,\"1105\":1,\"1106\":1,\"1107\":4,\"1110\":1,\"1245\":2}}],[\"rerun\",{\"1\":{\"1800\":1}}],[\"reruns\",{\"1\":{\"742\":1}}],[\"rename\",{\"1\":{\"1366\":1}}],[\"renamed\",{\"1\":{\"121\":1,\"174\":1,\"462\":1,\"1366\":1}}],[\"rendering\",{\"1\":{\"814\":1}}],[\"render\",{\"1\":{\"174\":2,\"178\":1,\"814\":1,\"1010\":1,\"1016\":1}}],[\"renders\",{\"1\":{\"15\":1,\"26\":1,\"87\":1,\"1009\":1,\"1480\":1}}],[\"rewriting\",{\"1\":{\"121\":1,\"340\":1,\"347\":1}}],[\"rewritten\",{\"1\":{\"41\":1,\"46\":1,\"86\":1,\"90\":1,\"100\":1,\"121\":1}}],[\"revamped\",{\"1\":{\"113\":1,\"121\":1}}],[\"revert\",{\"1\":{\"108\":1}}],[\"reverses\",{\"1\":{\"962\":1}}],[\"reversed\",{\"1\":{\"956\":1,\"958\":1}}],[\"reverse\",{\"1\":{\"15\":1,\"23\":1,\"26\":1,\"286\":1,\"300\":1,\"369\":1,\"378\":1,\"383\":1,\"419\":1,\"548\":1,\"599\":1,\"620\":1,\"631\":1,\"637\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"960\":1,\"961\":1,\"962\":1,\"965\":1,\"966\":1,\"1084\":1,\"1274\":1,\"1403\":3,\"1422\":1,\"1448\":2,\"1450\":1,\"1706\":1,\"1748\":1,\"1771\":1,\"1773\":1}}],[\"rebuilt\",{\"1\":{\"91\":1,\"100\":1}}],[\"remembering\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"remember\",{\"1\":{\"103\":1,\"228\":1,\"231\":1,\"395\":1,\"440\":1}}],[\"removal\",{\"1\":{\"93\":1}}],[\"removes\",{\"1\":{\"174\":1,\"1116\":1}}],[\"removed\",{\"1\":{\"47\":2,\"93\":1,\"119\":1,\"121\":4,\"143\":1,\"176\":1,\"178\":1,\"1516\":1}}],[\"remove\",{\"1\":{\"47\":1,\"115\":1,\"151\":1,\"208\":1,\"440\":1,\"692\":1,\"791\":1,\"795\":1,\"1186\":1,\"1190\":1,\"1366\":1}}],[\"remainder\",{\"1\":{\"1154\":1}}],[\"remaining\",{\"1\":{\"1113\":1}}],[\"remain\",{\"1\":{\"90\":1,\"123\":1,\"142\":1}}],[\"remains\",{\"1\":{\"72\":1,\"121\":1}}],[\"recalls\",{\"1\":{\"1807\":3}}],[\"recalling\",{\"0\":{\"1807\":1},\"1\":{\"1795\":1}}],[\"recalled\",{\"1\":{\"47\":1}}],[\"recursion\",{\"1\":{\"737\":1}}],[\"recursive\",{\"1\":{\"89\":3,\"436\":2,\"449\":1}}],[\"recs\",{\"1\":{\"347\":33}}],[\"receiver\",{\"1\":{\"1647\":1,\"1664\":1}}],[\"received\",{\"1\":{\"201\":1}}],[\"receiving\",{\"1\":{\"201\":1,\"755\":1}}],[\"recent\",{\"1\":{\"68\":1,\"160\":1}}],[\"record\",{\"1\":{\"1659\":1,\"1790\":1}}],[\"records\",{\"1\":{\"117\":1,\"347\":2,\"751\":1,\"1278\":2,\"1615\":1}}],[\"recognize\",{\"1\":{\"1647\":1,\"1664\":1}}],[\"recognized\",{\"1\":{\"1021\":1,\"1509\":1,\"1517\":1,\"1542\":1}}],[\"recommendation\",{\"0\":{\"607\":1,\"907\":1},\"1\":{\"202\":1,\"607\":1,\"907\":1,\"1784\":1}}],[\"recommended\",{\"0\":{\"211\":1},\"1\":{\"113\":1,\"119\":1,\"208\":1,\"270\":1,\"277\":1,\"441\":1,\"487\":1,\"544\":1,\"596\":1,\"597\":1,\"616\":2,\"643\":1,\"737\":1,\"742\":1,\"749\":1,\"814\":1,\"857\":1,\"897\":1,\"1000\":1,\"1059\":1,\"1220\":1,\"1486\":1,\"1628\":1,\"1634\":1,\"1677\":1,\"1690\":1,\"1696\":1,\"1772\":1}}],[\"reinvented\",{\"1\":{\"47\":1}}],[\"redraws\",{\"1\":{\"182\":1}}],[\"reduces\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"reduce\",{\"1\":{\"115\":1,\"121\":1,\"127\":1,\"682\":1,\"828\":1,\"915\":1,\"1091\":1,\"1204\":1}}],[\"redundant\",{\"1\":{\"47\":1,\"111\":1}}],[\"red\",{\"1\":{\"115\":1,\"479\":2,\"1701\":4}}],[\"redirecting\",{\"0\":{\"233\":1},\"1\":{\"859\":1}}],[\"redirection\",{\"0\":{\"230\":1,\"232\":1},\"1\":{\"232\":1,\"440\":1}}],[\"redirected\",{\"1\":{\"232\":2}}],[\"redirect\",{\"1\":{\"38\":1,\"56\":1,\"119\":2,\"232\":3,\"859\":1,\"1022\":1,\"1564\":1,\"1772\":2}}],[\"redirects\",{\"1\":{\"24\":1,\"120\":1,\"423\":1,\"833\":1,\"839\":1,\"1022\":1,\"1502\":1,\"1563\":1,\"1774\":1}}],[\"reused\",{\"1\":{\"47\":1}}],[\"registry\",{\"1\":{\"511\":1}}],[\"registerwritearray\",{\"1\":{\"310\":1}}],[\"registerreadmap\",{\"1\":{\"289\":1}}],[\"registerreadarraywithtype\",{\"1\":{\"275\":1}}],[\"registerreadarray\",{\"1\":{\"268\":1}}],[\"register\",{\"1\":{\"261\":1,\"304\":1}}],[\"registering\",{\"1\":{\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1}}],[\"registered\",{\"1\":{\"95\":1,\"259\":1,\"302\":1,\"1176\":1}}],[\"regukarly\",{\"1\":{\"115\":1}}],[\"regular\",{\"1\":{\"59\":1,\"121\":1,\"695\":2,\"926\":2,\"989\":1,\"1327\":1,\"1403\":1,\"1448\":1,\"1654\":1,\"1673\":1}}],[\"regarding\",{\"1\":{\"566\":1,\"567\":1}}],[\"regards\",{\"1\":{\"90\":1,\"207\":1,\"514\":1,\"780\":1}}],[\"regardless\",{\"1\":{\"43\":1,\"59\":1,\"117\":1,\"151\":1,\"182\":1,\"488\":1,\"535\":1,\"1056\":1,\"1321\":1}}],[\"regressions\",{\"1\":{\"90\":1,\"99\":1}}],[\"regression\",{\"1\":{\"79\":1,\"90\":1,\"95\":1,\"99\":1,\"108\":1,\"111\":2,\"123\":1}}],[\"regexp\",{\"0\":{\"1127\":1},\"1\":{\"15\":3,\"26\":3,\"94\":1,\"121\":1,\"122\":2,\"127\":1,\"129\":1,\"219\":2,\"238\":2,\"347\":5,\"383\":2,\"419\":2,\"441\":2,\"452\":1,\"463\":1,\"697\":1,\"743\":1,\"756\":1,\"795\":1,\"797\":3,\"947\":2,\"1021\":2,\"1084\":2,\"1116\":1,\"1127\":1,\"1128\":2,\"1129\":1,\"1131\":1,\"1132\":2,\"1133\":1,\"1135\":1,\"1136\":2,\"1183\":1,\"1184\":1,\"1186\":2,\"1188\":1,\"1190\":1,\"1192\":2,\"1350\":1,\"1360\":2,\"1571\":3,\"1572\":2,\"1575\":5,\"1576\":2,\"1583\":3,\"1584\":2,\"1641\":1,\"1725\":2,\"1772\":2,\"1798\":1}}],[\"regex\",{\"1\":{\"15\":1,\"26\":1,\"369\":1,\"389\":1,\"548\":2,\"878\":1,\"879\":1,\"880\":1,\"898\":1,\"926\":3,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1118\":1,\"1136\":1,\"1137\":1,\"1186\":1,\"1278\":1,\"1794\":1}}],[\"re\",{\"1\":{\"39\":1,\"40\":1,\"43\":1,\"47\":1,\"48\":1,\"57\":1,\"59\":1,\"93\":1,\"95\":1,\"115\":1,\"121\":2,\"123\":1,\"208\":1,\"270\":1,\"277\":1,\"397\":1,\"453\":1,\"645\":1,\"679\":1,\"755\":1,\"764\":1,\"814\":1,\"825\":1,\"875\":1,\"912\":1,\"924\":1,\"929\":1,\"1091\":1,\"1201\":1,\"1272\":1,\"1280\":1,\"1350\":1,\"1756\":1,\"1780\":1,\"1788\":1}}],[\"reappear\",{\"1\":{\"1799\":1}}],[\"reassign\",{\"1\":{\"754\":1,\"765\":1,\"1343\":1}}],[\"reasonable\",{\"1\":{\"433\":1}}],[\"reason\",{\"1\":{\"121\":1,\"237\":1,\"459\":1,\"468\":1,\"653\":1,\"795\":1,\"956\":1,\"1043\":1,\"1190\":1,\"1387\":1,\"1489\":1,\"1654\":1,\"1766\":1,\"1773\":1}}],[\"reasons\",{\"1\":{\"38\":1,\"46\":2,\"47\":1,\"56\":1,\"95\":1,\"121\":1,\"596\":1,\"653\":1,\"741\":1}}],[\"real\",{\"1\":{\"681\":1,\"827\":1,\"914\":1,\"1203\":1}}],[\"really\",{\"1\":{\"53\":1,\"119\":1,\"214\":1,\"447\":1,\"607\":1,\"675\":1,\"907\":1}}],[\"realized\",{\"1\":{\"52\":1}}],[\"ready\",{\"1\":{\"208\":1,\"1451\":1}}],[\"readme\",{\"1\":{\"121\":1,\"794\":1,\"1189\":1,\"1628\":1}}],[\"readmap\",{\"0\":{\"287\":1},\"1\":{\"30\":1,\"265\":1,\"272\":1,\"279\":1,\"289\":2,\"290\":2,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"953\":2,\"1175\":1,\"1176\":2,\"1611\":1,\"1612\":1,\"1617\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1683\":1,\"1687\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"readcloser\",{\"1\":{\"111\":1}}],[\"readline\",{\"0\":{\"1717\":1},\"1\":{\"66\":1,\"86\":1,\"93\":1,\"95\":4,\"103\":1,\"108\":2,\"121\":1,\"127\":4,\"138\":1,\"143\":1,\"147\":3,\"170\":1,\"174\":5,\"178\":2,\"181\":2,\"182\":5,\"345\":1,\"743\":1,\"756\":1,\"1120\":1,\"1309\":1,\"1359\":1,\"1375\":1,\"1377\":1,\"1385\":1,\"1641\":1,\"1715\":1,\"1716\":3,\"1717\":1}}],[\"reading\",{\"0\":{\"33\":1,\"36\":1,\"38\":1,\"42\":1,\"56\":1},\"1\":{\"36\":2,\"54\":1,\"59\":1,\"117\":1,\"207\":2,\"224\":1,\"232\":1,\"269\":1,\"276\":1,\"292\":1,\"318\":1,\"326\":1,\"333\":1,\"755\":1,\"799\":1,\"999\":1,\"1016\":1,\"1058\":1,\"1123\":1,\"1219\":1,\"1488\":1,\"1654\":1}}],[\"readindexes\",{\"1\":{\"282\":1}}],[\"readindex\",{\"0\":{\"280\":1},\"1\":{\"30\":1,\"260\":1,\"265\":1,\"272\":1,\"279\":1,\"282\":2,\"283\":1,\"293\":1,\"296\":1,\"297\":2,\"300\":1,\"303\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"337\":1,\"342\":1,\"344\":1,\"349\":1,\"953\":2,\"1611\":1,\"1612\":1,\"1617\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1683\":1,\"1687\":1,\"1693\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"readnotindexes\",{\"1\":{\"296\":1}}],[\"readnotindex\",{\"0\":{\"294\":1},\"1\":{\"30\":1,\"265\":1,\"272\":1,\"279\":1,\"284\":1,\"286\":1,\"293\":1,\"296\":1,\"297\":1,\"298\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"337\":1,\"342\":1,\"344\":1,\"349\":1,\"953\":2,\"1611\":1,\"1612\":1,\"1617\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1687\":1,\"1693\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"readall\",{\"1\":{\"283\":1,\"297\":1,\"304\":1,\"318\":1,\"326\":1,\"333\":1,\"338\":1}}],[\"readability\",{\"1\":{\"47\":1,\"52\":1,\"72\":1,\"121\":1,\"216\":1,\"596\":1,\"682\":1,\"741\":1,\"828\":1,\"915\":1,\"1204\":1,\"1404\":1,\"1647\":1,\"1664\":1}}],[\"readable\",{\"1\":{\"15\":1,\"26\":1,\"47\":2,\"48\":1,\"51\":1,\"52\":1,\"211\":2,\"251\":1,\"261\":1,\"445\":1,\"607\":1,\"618\":1,\"742\":1,\"808\":1,\"815\":1,\"907\":1,\"929\":2,\"947\":1,\"967\":1,\"1069\":1,\"1085\":1,\"1086\":1,\"1137\":1,\"1175\":2,\"1178\":1,\"1182\":1,\"1276\":2,\"1280\":1,\"1285\":1,\"1307\":1,\"1313\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1701\":1,\"1719\":1}}],[\"readarraybymapifaceiface\",{\"1\":{\"318\":2}}],[\"readarraybymapifacestr\",{\"1\":{\"318\":2}}],[\"readarraybymapstriface\",{\"1\":{\"318\":2}}],[\"readarraybymapstrstr\",{\"1\":{\"318\":2}}],[\"readarraybysliceinterface\",{\"1\":{\"318\":2}}],[\"readarraybyslicestring\",{\"1\":{\"318\":2}}],[\"readarraybystring\",{\"1\":{\"318\":2}}],[\"readarraywithtypebymapifaceiface\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebymapifacestr\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebymapstriface\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebymapstrstr\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebyslicebool\",{\"1\":{\"333\":2}}],[\"readarraywithtypebysliceint\",{\"1\":{\"333\":2}}],[\"readarraywithtypebysliceinterface\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebyslicefloat\",{\"1\":{\"333\":2}}],[\"readarraywithtypebyslicestring\",{\"1\":{\"326\":2,\"333\":2}}],[\"readarraywithtypebystring\",{\"1\":{\"326\":2,\"333\":4}}],[\"readarraywithtype\",{\"0\":{\"273\":1},\"1\":{\"30\":1,\"90\":1,\"92\":1,\"265\":1,\"275\":1,\"276\":2,\"277\":1,\"286\":1,\"293\":1,\"300\":1,\"313\":1,\"320\":1,\"323\":1,\"330\":1,\"335\":1,\"342\":1,\"349\":1,\"758\":1,\"953\":2,\"1176\":2,\"1611\":1,\"1617\":1,\"1625\":1,\"1631\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1669\":1,\"1683\":1,\"1687\":1,\"1693\":1,\"1698\":1}}],[\"readarray\",{\"0\":{\"266\":1},\"1\":{\"30\":1,\"104\":1,\"121\":1,\"265\":1,\"268\":2,\"269\":2,\"270\":2,\"274\":2,\"275\":1,\"277\":1,\"286\":1,\"293\":1,\"300\":1,\"313\":1,\"315\":1,\"316\":1,\"320\":1,\"324\":1,\"328\":1,\"331\":1,\"335\":1,\"342\":1,\"349\":1,\"953\":2,\"1175\":1,\"1176\":2,\"1611\":1,\"1612\":1,\"1617\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1683\":1,\"1687\":1,\"1693\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"reads\",{\"0\":{\"1488\":1},\"1\":{\"15\":2,\"26\":2,\"38\":3,\"56\":3,\"112\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"412\":1,\"618\":1,\"703\":1,\"747\":1,\"748\":2,\"795\":1,\"837\":1,\"843\":1,\"861\":1,\"932\":1,\"981\":1,\"994\":1,\"1003\":1,\"1004\":1,\"1039\":1,\"1061\":2,\"1190\":1,\"1222\":1,\"1255\":1,\"1289\":1,\"1319\":1,\"1360\":1,\"1566\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1707\":1,\"1743\":1,\"1789\":2}}],[\"read\",{\"0\":{\"215\":1,\"609\":1,\"909\":1,\"994\":1,\"1119\":1,\"1488\":1,\"1702\":1},\"1\":{\"3\":1,\"15\":5,\"26\":5,\"30\":3,\"33\":1,\"36\":1,\"38\":7,\"39\":1,\"40\":2,\"41\":1,\"47\":3,\"48\":2,\"50\":1,\"51\":1,\"53\":2,\"54\":1,\"56\":7,\"57\":1,\"59\":1,\"78\":1,\"82\":1,\"83\":1,\"88\":1,\"92\":1,\"97\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":2,\"127\":4,\"134\":1,\"142\":2,\"150\":1,\"167\":1,\"172\":1,\"177\":1,\"181\":1,\"214\":1,\"222\":3,\"225\":1,\"226\":2,\"227\":1,\"231\":2,\"232\":1,\"235\":1,\"238\":3,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"253\":1,\"265\":3,\"266\":1,\"267\":1,\"269\":2,\"270\":3,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"276\":2,\"277\":3,\"278\":1,\"279\":1,\"286\":2,\"287\":1,\"288\":1,\"290\":3,\"291\":1,\"292\":1,\"293\":2,\"300\":2,\"304\":4,\"313\":3,\"316\":3,\"318\":2,\"319\":1,\"320\":3,\"324\":3,\"326\":2,\"327\":1,\"328\":2,\"331\":3,\"333\":2,\"334\":1,\"335\":3,\"342\":3,\"347\":1,\"349\":3,\"397\":1,\"438\":5,\"440\":1,\"457\":1,\"526\":8,\"541\":1,\"544\":1,\"561\":1,\"563\":1,\"618\":1,\"643\":1,\"695\":4,\"749\":3,\"755\":1,\"758\":1,\"794\":1,\"808\":1,\"815\":1,\"837\":1,\"843\":1,\"873\":1,\"876\":1,\"879\":1,\"894\":1,\"965\":1,\"975\":1,\"996\":1,\"999\":2,\"1001\":1,\"1002\":1,\"1016\":1,\"1052\":3,\"1058\":2,\"1061\":3,\"1069\":1,\"1113\":1,\"1119\":1,\"1121\":3,\"1122\":4,\"1123\":3,\"1125\":7,\"1126\":1,\"1163\":2,\"1171\":2,\"1189\":1,\"1214\":1,\"1217\":1,\"1219\":2,\"1222\":1,\"1245\":2,\"1273\":1,\"1289\":1,\"1297\":1,\"1308\":1,\"1309\":1,\"1312\":1,\"1313\":2,\"1350\":2,\"1356\":3,\"1357\":3,\"1360\":2,\"1491\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1600\":1,\"1611\":2,\"1612\":2,\"1632\":2,\"1645\":3,\"1654\":1,\"1657\":2,\"1670\":2,\"1694\":2,\"1699\":2,\"1706\":1,\"1743\":2,\"1747\":1,\"1752\":2,\"1772\":1,\"1808\":1}}],[\"repos\",{\"1\":{\"1018\":1}}],[\"repository\",{\"1\":{\"986\":1,\"1628\":1,\"1725\":1}}],[\"reportmemoryexception\",{\"1\":{\"1484\":1}}],[\"report|\",{\"1\":{\"1284\":1}}],[\"reports\",{\"1\":{\"981\":1,\"1287\":1}}],[\"reported\",{\"1\":{\"491\":1}}],[\"report\",{\"0\":{\"1287\":1},\"1\":{\"119\":1,\"1284\":4,\"1287\":4}}],[\"reporting\",{\"1\":{\"103\":1}}],[\"repeat\",{\"1\":{\"1805\":1}}],[\"repeatable\",{\"1\":{\"808\":1,\"815\":1,\"1069\":1}}],[\"repeated\",{\"1\":{\"545\":1,\"546\":1,\"1091\":1}}],[\"repetition\",{\"1\":{\"47\":1}}],[\"repetitive\",{\"1\":{\"38\":1,\"56\":1}}],[\"represent\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1,\"1807\":1}}],[\"represented\",{\"1\":{\"977\":1,\"1729\":1}}],[\"represents\",{\"1\":{\"447\":1,\"1761\":1}}],[\"representation\",{\"1\":{\"259\":1,\"1224\":1,\"1708\":1}}],[\"repls\",{\"1\":{\"48\":1}}],[\"repl\",{\"0\":{\"1713\":1,\"1738\":1},\"1\":{\"46\":1,\"47\":2,\"48\":1,\"50\":1,\"52\":2,\"75\":1,\"115\":2,\"119\":2,\"121\":1,\"215\":1,\"679\":1,\"825\":1,\"912\":1,\"992\":1,\"1201\":1}}],[\"replacement\",{\"1\":{\"962\":1}}],[\"replaced\",{\"1\":{\"113\":1,\"166\":1,\"172\":1,\"1254\":1}}],[\"replaces\",{\"1\":{\"38\":1,\"56\":1,\"544\":1}}],[\"replace\",{\"1\":{\"38\":1,\"56\":1,\"117\":1,\"605\":1,\"905\":1,\"1654\":1,\"1702\":1,\"1805\":3}}],[\"relies\",{\"1\":{\"315\":1,\"323\":1,\"330\":1,\"1628\":1,\"1647\":1,\"1664\":1,\"1690\":1,\"1696\":1}}],[\"reliably\",{\"1\":{\"163\":1,\"174\":1,\"929\":1}}],[\"reliance\",{\"1\":{\"40\":1}}],[\"reloads\",{\"1\":{\"113\":1,\"979\":1}}],[\"reload\",{\"1\":{\"113\":1,\"979\":1}}],[\"relevant\",{\"1\":{\"103\":1,\"783\":1,\"784\":1,\"1016\":1}}],[\"releases\",{\"1\":{\"69\":4,\"131\":4}}],[\"release\",{\"0\":{\"1489\":1},\"1\":{\"64\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":2,\"88\":2,\"93\":1,\"95\":1,\"97\":2,\"102\":2,\"106\":2,\"108\":2,\"111\":2,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"291\":1,\"1372\":1,\"1489\":1,\"1491\":1,\"1516\":1}}],[\"relaxed\",{\"1\":{\"95\":1}}],[\"relative\",{\"1\":{\"506\":1,\"1593\":1}}],[\"relatively\",{\"1\":{\"42\":1}}],[\"relates\",{\"1\":{\"447\":1}}],[\"related\",{\"1\":{\"31\":1}}],[\"rely\",{\"1\":{\"3\":1,\"39\":1,\"57\":1,\"315\":1,\"323\":1,\"330\":1,\"523\":1}}],[\"resume\",{\"1\":{\"1808\":1}}],[\"resumes\",{\"1\":{\"715\":1}}],[\"results\",{\"1\":{\"30\":2,\"90\":1,\"99\":2,\"103\":1,\"111\":1,\"115\":3,\"129\":2,\"155\":1,\"181\":1,\"228\":2,\"237\":2,\"265\":2,\"272\":2,\"279\":2,\"314\":1,\"322\":1,\"329\":1,\"406\":1,\"453\":2,\"575\":1,\"692\":1,\"1033\":1,\"1175\":1,\"1176\":2,\"1401\":1,\"1432\":1,\"1487\":1,\"1645\":2,\"1699\":2,\"1798\":2}}],[\"result\",{\"1\":{\"15\":2,\"26\":2,\"39\":1,\"54\":1,\"57\":1,\"61\":2,\"412\":1,\"421\":2,\"448\":1,\"489\":1,\"502\":1,\"530\":1,\"532\":1,\"536\":1,\"611\":1,\"635\":1,\"641\":1,\"703\":1,\"745\":1,\"758\":1,\"803\":1,\"816\":1,\"850\":1,\"917\":1,\"1008\":1,\"1024\":1,\"1039\":1,\"1070\":1,\"1103\":1,\"1153\":1,\"1251\":1,\"1252\":1,\"1255\":1,\"1319\":1,\"1325\":1,\"1331\":1,\"1360\":1,\"1706\":1,\"1771\":1,\"1782\":1}}],[\"rescue\",{\"1\":{\"606\":1,\"906\":1,\"1217\":1,\"1747\":1}}],[\"rescan\",{\"1\":{\"15\":1,\"26\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"988\":1,\"1241\":1}}],[\"restrict\",{\"1\":{\"1372\":1}}],[\"restricting\",{\"1\":{\"692\":1}}],[\"rest\",{\"1\":{\"391\":1,\"437\":1,\"710\":1,\"785\":1,\"859\":1,\"1097\":1,\"1799\":1}}],[\"residing\",{\"1\":{\"354\":1,\"361\":1}}],[\"resized\",{\"1\":{\"123\":1}}],[\"resource\",{\"1\":{\"811\":1,\"814\":1}}],[\"resolved\",{\"1\":{\"119\":1,\"755\":1,\"1666\":1}}],[\"resorting\",{\"1\":{\"117\":1,\"447\":1}}],[\"resort\",{\"1\":{\"37\":1}}],[\"respecting\",{\"1\":{\"1706\":1}}],[\"respective\",{\"1\":{\"219\":1,\"1178\":1}}],[\"respectively\",{\"1\":{\"108\":1,\"232\":1,\"485\":1,\"1593\":1}}],[\"responsibilities\",{\"1\":{\"121\":1}}],[\"responsiveness\",{\"1\":{\"66\":1,\"90\":1,\"108\":1,\"170\":1,\"182\":1}}],[\"resembles\",{\"1\":{\"1781\":1}}],[\"reserves\",{\"1\":{\"1755\":1}}],[\"reserved\",{\"0\":{\"1755\":1},\"1\":{\"23\":2,\"115\":3,\"116\":2,\"118\":2,\"119\":1,\"120\":2,\"424\":2,\"509\":2,\"611\":2,\"685\":2,\"779\":2,\"787\":2,\"802\":2,\"831\":2,\"917\":2,\"1207\":2,\"1594\":2,\"1707\":2,\"1755\":2,\"1766\":1,\"1782\":2}}],[\"resets\",{\"1\":{\"1706\":1}}],[\"reset\",{\"1\":{\"95\":1,\"108\":2,\"174\":1,\"479\":1,\"512\":1,\"1546\":1,\"1701\":1,\"1703\":2}}],[\"reflow\",{\"1\":{\"123\":1}}],[\"reflect\",{\"1\":{\"108\":1,\"1566\":1}}],[\"refactoring\",{\"1\":{\"121\":1,\"155\":1}}],[\"refactored\",{\"1\":{\"104\":1,\"109\":1}}],[\"refinements\",{\"1\":{\"73\":1,\"95\":1}}],[\"refers\",{\"1\":{\"515\":1,\"516\":1,\"1744\":1}}],[\"referred\",{\"1\":{\"115\":1,\"1375\":1,\"1667\":1}}],[\"refer\",{\"1\":{\"60\":1,\"189\":1,\"377\":1,\"601\":1,\"643\":1,\"900\":1,\"1407\":1,\"1412\":1,\"1424\":1,\"1432\":1,\"1440\":1,\"1535\":1,\"1601\":1,\"1602\":1}}],[\"references\",{\"1\":{\"121\":1,\"159\":1,\"218\":1,\"1487\":1}}],[\"reference\",{\"0\":{\"10\":1,\"11\":1,\"30\":1,\"258\":1,\"264\":1,\"266\":1,\"273\":1,\"280\":1,\"287\":1,\"294\":1,\"301\":1,\"307\":1,\"314\":1,\"322\":1,\"329\":1,\"336\":1,\"343\":1,\"350\":1,\"357\":1,\"364\":1,\"370\":1,\"379\":1,\"384\":1,\"394\":1,\"405\":1,\"413\":1,\"420\":1,\"425\":1,\"458\":1,\"464\":1,\"470\":1,\"476\":1,\"484\":1,\"490\":1,\"496\":1,\"503\":1,\"510\":1,\"531\":1,\"537\":1,\"554\":1,\"559\":1,\"570\":1,\"578\":1,\"585\":1,\"590\":1,\"600\":1,\"612\":1,\"619\":1,\"625\":1,\"630\":1,\"636\":1,\"642\":1,\"652\":1,\"660\":1,\"665\":1,\"670\":1,\"686\":1,\"691\":1,\"698\":1,\"704\":1,\"714\":1,\"719\":1,\"724\":1,\"729\":1,\"736\":1,\"746\":1,\"759\":1,\"767\":1,\"772\":1,\"788\":1,\"793\":1,\"798\":1,\"803\":1,\"810\":1,\"817\":1,\"832\":1,\"838\":1,\"844\":1,\"850\":1,\"862\":1,\"872\":1,\"878\":1,\"885\":1,\"893\":1,\"899\":1,\"918\":1,\"923\":1,\"931\":1,\"936\":1,\"941\":1,\"948\":1,\"955\":1,\"961\":1,\"968\":1,\"976\":1,\"983\":1,\"988\":1,\"994\":1,\"1003\":1,\"1009\":1,\"1015\":1,\"1025\":1,\"1032\":1,\"1040\":1,\"1045\":1,\"1053\":1,\"1062\":1,\"1071\":1,\"1078\":1,\"1085\":1,\"1090\":1,\"1099\":1,\"1104\":1,\"1112\":1,\"1119\":1,\"1127\":1,\"1138\":1,\"1144\":1,\"1151\":1,\"1160\":1,\"1172\":1,\"1179\":1,\"1183\":1,\"1193\":1,\"1208\":1,\"1214\":1,\"1223\":1,\"1229\":1,\"1236\":1,\"1242\":1,\"1257\":1,\"1264\":1,\"1269\":1,\"1275\":1,\"1282\":1,\"1290\":1,\"1296\":1,\"1302\":1,\"1308\":1,\"1314\":1,\"1320\":1,\"1326\":1,\"1332\":1,\"1338\":1,\"1451\":1,\"1452\":1,\"1457\":1,\"1464\":1,\"1470\":1,\"1475\":1,\"1481\":1,\"1492\":1,\"1498\":1,\"1499\":1,\"1503\":1,\"1508\":1,\"1519\":1,\"1537\":1,\"1541\":1,\"1548\":1,\"1553\":1,\"1558\":1,\"1563\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1581\":1,\"1585\":1,\"1590\":1,\"1595\":1,\"1600\":1,\"1604\":1,\"1608\":1,\"1613\":1,\"1619\":1,\"1623\":1,\"1627\":1,\"1633\":1,\"1637\":1,\"1646\":1,\"1658\":1,\"1671\":1,\"1676\":1,\"1681\":1,\"1685\":1,\"1689\":1,\"1695\":1},\"1\":{\"12\":1,\"21\":1,\"220\":1,\"264\":1,\"397\":1,\"549\":1,\"934\":1,\"1453\":1,\"1500\":1,\"1596\":1,\"1772\":1}}],[\"reformated\",{\"1\":{\"768\":1}}],[\"reformats\",{\"1\":{\"236\":1,\"1086\":1}}],[\"reformatted\",{\"1\":{\"24\":1,\"1502\":1,\"1572\":1,\"1576\":1,\"1577\":1,\"1584\":1,\"1748\":1,\"1779\":1}}],[\"reformat\",{\"1\":{\"15\":1,\"26\":1,\"404\":1,\"494\":1,\"495\":1,\"758\":1,\"767\":1,\"1089\":1,\"1111\":1,\"1182\":1,\"1262\":1,\"1268\":1,\"1281\":1,\"1307\":1,\"1313\":1,\"1580\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1}}],[\"retrieved\",{\"1\":{\"1780\":1}}],[\"rethink\",{\"1\":{\"90\":1}}],[\"returning\",{\"1\":{\"304\":1,\"743\":1,\"756\":1,\"1141\":1,\"1155\":1,\"1641\":1}}],[\"returned\",{\"1\":{\"115\":1,\"440\":1,\"794\":1,\"1123\":2,\"1142\":1,\"1189\":1,\"1358\":1,\"1400\":1,\"1624\":1,\"1698\":1}}],[\"returns\",{\"1\":{\"15\":8,\"26\":8,\"30\":4,\"99\":1,\"103\":1,\"105\":1,\"107\":2,\"110\":1,\"121\":1,\"259\":1,\"265\":4,\"272\":2,\"274\":1,\"279\":2,\"286\":2,\"300\":2,\"302\":1,\"304\":1,\"314\":1,\"320\":2,\"322\":1,\"328\":2,\"329\":1,\"335\":2,\"336\":1,\"342\":1,\"343\":1,\"349\":1,\"376\":1,\"404\":1,\"405\":1,\"406\":1,\"409\":1,\"410\":2,\"412\":3,\"421\":1,\"438\":1,\"457\":1,\"465\":1,\"469\":1,\"530\":2,\"544\":1,\"545\":1,\"546\":1,\"577\":1,\"601\":1,\"620\":2,\"631\":2,\"635\":1,\"637\":2,\"641\":1,\"651\":1,\"659\":1,\"669\":1,\"679\":1,\"698\":1,\"699\":1,\"703\":3,\"713\":1,\"723\":1,\"728\":1,\"732\":2,\"735\":1,\"768\":1,\"780\":2,\"789\":1,\"798\":1,\"799\":1,\"802\":1,\"803\":1,\"808\":1,\"814\":1,\"816\":1,\"825\":1,\"849\":1,\"861\":4,\"882\":2,\"886\":1,\"891\":1,\"897\":1,\"912\":1,\"924\":2,\"942\":1,\"954\":1,\"962\":1,\"972\":1,\"979\":2,\"982\":1,\"987\":1,\"999\":1,\"1002\":1,\"1008\":4,\"1024\":1,\"1031\":1,\"1032\":1,\"1033\":1,\"1036\":1,\"1037\":2,\"1039\":3,\"1043\":1,\"1058\":1,\"1061\":1,\"1067\":1,\"1070\":1,\"1072\":1,\"1077\":1,\"1103\":1,\"1131\":2,\"1145\":1,\"1150\":1,\"1172\":1,\"1184\":1,\"1201\":1,\"1213\":1,\"1219\":1,\"1222\":1,\"1230\":1,\"1235\":1,\"1241\":2,\"1255\":4,\"1262\":1,\"1290\":1,\"1291\":1,\"1297\":1,\"1314\":1,\"1315\":1,\"1319\":3,\"1324\":2,\"1330\":2,\"1333\":1,\"1336\":2,\"1337\":1,\"1405\":1,\"1482\":1,\"1497\":1,\"1570\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":3,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":3,\"1707\":2,\"1714\":1,\"1727\":1,\"1756\":1,\"1758\":1,\"1764\":1,\"1765\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1772\":1,\"1784\":1}}],[\"return\",{\"0\":{\"808\":1,\"1067\":1,\"1138\":1},\"1\":{\"14\":1,\"15\":3,\"23\":1,\"26\":3,\"30\":1,\"59\":1,\"92\":1,\"103\":2,\"110\":1,\"111\":1,\"113\":1,\"122\":1,\"129\":1,\"181\":1,\"183\":1,\"237\":1,\"252\":1,\"261\":2,\"265\":1,\"269\":3,\"270\":2,\"273\":1,\"276\":3,\"277\":2,\"283\":4,\"286\":1,\"290\":2,\"293\":1,\"297\":4,\"300\":1,\"304\":4,\"309\":1,\"311\":4,\"312\":5,\"313\":1,\"315\":1,\"316\":2,\"318\":29,\"320\":1,\"323\":1,\"324\":2,\"326\":22,\"330\":1,\"331\":2,\"333\":40,\"335\":1,\"338\":4,\"340\":28,\"342\":1,\"345\":2,\"347\":25,\"349\":1,\"353\":2,\"354\":3,\"360\":2,\"361\":6,\"436\":2,\"439\":1,\"448\":1,\"483\":1,\"487\":2,\"489\":1,\"530\":2,\"536\":1,\"544\":2,\"572\":1,\"575\":1,\"591\":1,\"593\":2,\"618\":1,\"635\":2,\"641\":2,\"692\":1,\"694\":2,\"758\":1,\"791\":1,\"809\":2,\"810\":1,\"816\":1,\"865\":7,\"886\":1,\"897\":2,\"927\":1,\"942\":1,\"945\":1,\"1021\":7,\"1024\":2,\"1052\":1,\"1062\":1,\"1070\":1,\"1103\":2,\"1115\":2,\"1135\":1,\"1139\":1,\"1140\":1,\"1141\":4,\"1142\":1,\"1145\":1,\"1186\":1,\"1248\":1,\"1278\":1,\"1300\":4,\"1306\":1,\"1307\":1,\"1400\":3,\"1403\":2,\"1417\":2,\"1444\":2,\"1455\":1,\"1547\":1,\"1601\":1,\"1645\":1,\"1700\":1,\"1709\":1,\"1727\":1,\"1772\":1,\"1794\":1,\"1797\":1,\"1798\":1,\"1804\":1}}],[\"retained\",{\"1\":{\"882\":3}}],[\"retain\",{\"1\":{\"3\":1,\"52\":1,\"643\":1,\"1516\":1}}],[\"requesting\",{\"1\":{\"111\":1}}],[\"requested\",{\"1\":{\"108\":1,\"347\":1,\"526\":1}}],[\"request\",{\"1\":{\"15\":3,\"26\":3,\"122\":1,\"445\":1,\"530\":3,\"635\":3,\"641\":3,\"803\":1,\"804\":1,\"808\":1,\"809\":2,\"810\":1,\"814\":1,\"816\":2,\"1022\":1,\"1024\":3,\"1062\":1,\"1063\":1,\"1068\":1,\"1070\":2,\"1103\":3,\"1451\":1,\"1808\":1}}],[\"requests\",{\"1\":{\"8\":1,\"68\":1,\"160\":1,\"1708\":1}}],[\"requirement\",{\"1\":{\"929\":1}}],[\"requirements\",{\"0\":{\"47\":1},\"1\":{\"216\":1,\"387\":1}}],[\"requires\",{\"1\":{\"60\":1,\"86\":1,\"121\":1,\"202\":1,\"251\":1,\"252\":1,\"340\":1,\"485\":1,\"743\":1,\"756\":1,\"1448\":1,\"1641\":1,\"1654\":1}}],[\"require\",{\"1\":{\"14\":1,\"397\":1,\"576\":1,\"859\":1,\"1125\":1,\"1139\":1,\"1178\":1,\"1455\":1,\"1461\":1,\"1513\":1,\"1722\":1,\"1788\":1}}],[\"required\",{\"0\":{\"521\":1,\"522\":1,\"524\":1},\"1\":{\"8\":1,\"47\":1,\"182\":1,\"207\":1,\"391\":1,\"433\":1,\"441\":1,\"456\":1,\"474\":1,\"520\":1,\"522\":1,\"568\":1,\"710\":1,\"780\":1,\"785\":1,\"886\":1,\"1097\":1,\"1145\":1,\"1176\":2,\"1538\":1,\"1601\":1,\"1629\":1,\"1691\":1,\"1750\":1}}],[\"png\",{\"1\":{\"1010\":1,\"1012\":2,\"1476\":1,\"1478\":3}}],[\"physical\",{\"1\":{\"1746\":1}}],[\"philosophical\",{\"1\":{\"1706\":1}}],[\"philosophy\",{\"1\":{\"737\":1,\"1746\":1}}],[\"phonenumbers\",{\"1\":{\"1226\":12,\"1639\":1}}],[\"php\",{\"1\":{\"683\":1,\"829\":1,\"916\":1,\"1205\":1}}],[\"pkg\",{\"1\":{\"567\":1}}],[\"py\",{\"0\":{\"566\":1},\"1\":{\"1421\":1}}],[\"python\",{\"0\":{\"566\":1},\"1\":{\"48\":3,\"51\":1,\"566\":2,\"1209\":2}}],[\"pc\",{\"1\":{\"181\":1}}],[\"pending\",{\"1\":{\"1287\":1}}],[\"pem\",{\"1\":{\"1175\":1}}],[\"people=\",{\"1\":{\"762\":1}}],[\"people\",{\"1\":{\"181\":1,\"508\":1,\"1520\":1,\"1753\":1,\"1788\":1}}],[\"period\",{\"1\":{\"1591\":1}}],[\"percpu\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"permissions\",{\"1\":{\"695\":12,\"1366\":1}}],[\"persist\",{\"1\":{\"754\":1,\"765\":1,\"1343\":1}}],[\"persistent\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1,\"1704\":1,\"1756\":2,\"1780\":2,\"1787\":1,\"1790\":1}}],[\"perspective\",{\"1\":{\"605\":1,\"743\":1,\"756\":1,\"905\":1,\"1641\":1,\"1728\":1}}],[\"person\",{\"1\":{\"249\":1,\"1772\":1}}],[\"personalities\",{\"0\":{\"34\":1,\"45\":1}}],[\"personal\",{\"1\":{\"31\":1,\"211\":1,\"1728\":1}}],[\"perhaps\",{\"1\":{\"48\":1}}],[\"perl\",{\"1\":{\"48\":1,\"683\":1,\"829\":1,\"916\":1,\"1205\":1,\"1209\":1,\"1403\":1,\"1448\":2}}],[\"per\",{\"1\":{\"39\":1,\"57\":1,\"99\":1,\"113\":1,\"129\":1,\"201\":1,\"518\":1,\"875\":1,\"1125\":1,\"1272\":1,\"1300\":1,\"1366\":1,\"1617\":1,\"1625\":1,\"1687\":1,\"1777\":1,\"1778\":1,\"1789\":1}}],[\"performs\",{\"1\":{\"480\":1,\"737\":1,\"1812\":1}}],[\"performance\",{\"1\":{\"46\":1,\"73\":1,\"80\":1,\"95\":4,\"106\":1,\"109\":1,\"121\":1,\"354\":1,\"361\":1,\"437\":1,\"742\":1}}],[\"perform\",{\"1\":{\"38\":1,\"56\":1,\"181\":1,\"219\":1,\"1016\":1,\"1153\":1,\"1350\":1,\"1461\":1}}],[\"performing\",{\"1\":{\"38\":1,\"56\":1}}],[\"p\",{\"1\":{\"108\":2,\"147\":1,\"208\":1,\"260\":1,\"261\":2,\"262\":1,\"283\":4,\"285\":1,\"297\":4,\"299\":1,\"303\":1,\"304\":2,\"305\":1,\"338\":4,\"340\":45,\"341\":1,\"345\":4,\"347\":22,\"348\":1,\"352\":1,\"353\":3,\"354\":2,\"355\":1,\"359\":1,\"360\":3,\"361\":2,\"362\":1,\"695\":1,\"1300\":6,\"1805\":2}}],[\"pw\",{\"1\":{\"1122\":1}}],[\"pwd\",{\"1\":{\"108\":2,\"126\":1,\"135\":1}}],[\"pwb\",{\"1\":{\"46\":1,\"51\":1}}],[\"pick\",{\"1\":{\"1021\":1}}],[\"pid\",{\"1\":{\"367\":2,\"575\":1,\"722\":1,\"727\":1,\"865\":2,\"1260\":3,\"1267\":4,\"1772\":2}}],[\"piping\",{\"0\":{\"230\":1},\"1\":{\"151\":1,\"232\":1,\"582\":1,\"1218\":1,\"1578\":1}}],[\"pipefail\",{\"1\":{\"1772\":1}}],[\"pipelining\",{\"1\":{\"591\":1,\"814\":1,\"1654\":1,\"1708\":1}}],[\"pipelined\",{\"1\":{\"103\":1,\"438\":1,\"439\":1,\"755\":1,\"1571\":1,\"1575\":1,\"1583\":1}}],[\"pipelines\",{\"1\":{\"15\":1,\"16\":1,\"26\":1,\"27\":1,\"50\":1,\"92\":1,\"108\":1,\"112\":1,\"114\":1,\"122\":1,\"270\":1,\"277\":1,\"530\":1,\"635\":1,\"641\":1,\"809\":1,\"810\":1,\"859\":1,\"1024\":1,\"1070\":1,\"1103\":1,\"1167\":1,\"1456\":1,\"1481\":1,\"1618\":1,\"1659\":1,\"1721\":1,\"1746\":2}}],[\"pipeline\",{\"0\":{\"1744\":1},\"1\":{\"15\":2,\"23\":2,\"26\":2,\"40\":1,\"47\":1,\"50\":1,\"94\":1,\"103\":1,\"108\":1,\"111\":2,\"112\":3,\"120\":1,\"217\":1,\"234\":1,\"394\":1,\"412\":1,\"440\":1,\"491\":1,\"502\":1,\"755\":1,\"859\":2,\"861\":1,\"940\":1,\"960\":1,\"999\":1,\"1039\":1,\"1058\":1,\"1061\":2,\"1100\":2,\"1118\":1,\"1166\":2,\"1167\":1,\"1171\":3,\"1215\":1,\"1217\":1,\"1218\":1,\"1219\":1,\"1222\":2,\"1255\":1,\"1262\":1,\"1268\":1,\"1321\":4,\"1325\":1,\"1326\":1,\"1327\":1,\"1557\":3,\"1562\":3,\"1568\":2,\"1570\":1,\"1572\":2,\"1576\":2,\"1578\":1,\"1579\":1,\"1580\":2,\"1582\":1,\"1584\":2,\"1707\":2,\"1709\":2,\"1719\":1,\"1744\":4,\"1745\":4,\"1746\":5,\"1760\":1,\"1771\":2,\"1774\":1,\"1776\":3,\"1777\":2,\"1778\":2,\"1779\":3,\"1794\":1}}],[\"pipew\",{\"1\":{\"575\":1}}],[\"piper\",{\"1\":{\"575\":1}}],[\"piped\",{\"1\":{\"150\":1,\"440\":1,\"732\":2,\"742\":1,\"999\":2,\"1058\":2,\"1219\":2,\"1327\":1,\"1554\":1,\"1559\":1}}],[\"pipes\",{\"0\":{\"231\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1740\":1,\"1747\":1},\"1\":{\"15\":1,\"23\":2,\"24\":4,\"26\":1,\"39\":1,\"46\":1,\"57\":1,\"99\":2,\"103\":1,\"105\":2,\"111\":2,\"112\":1,\"214\":1,\"232\":2,\"304\":1,\"440\":1,\"618\":1,\"695\":3,\"802\":1,\"837\":4,\"843\":4,\"954\":1,\"995\":1,\"999\":5,\"1000\":4,\"1002\":1,\"1053\":1,\"1054\":1,\"1058\":5,\"1059\":4,\"1175\":5,\"1176\":5,\"1182\":1,\"1218\":1,\"1219\":5,\"1220\":4,\"1222\":1,\"1301\":1,\"1360\":2,\"1502\":4,\"1557\":1,\"1562\":1,\"1564\":1,\"1568\":3,\"1569\":1,\"1572\":3,\"1573\":1,\"1576\":3,\"1577\":1,\"1580\":3,\"1581\":1,\"1584\":3,\"1727\":2,\"1740\":1,\"1741\":1,\"1742\":2,\"1746\":1,\"1747\":3,\"1748\":4,\"1774\":2,\"1779\":4}}],[\"pipe\",{\"0\":{\"994\":1,\"1053\":1,\"1563\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1581\":1,\"1778\":1},\"1\":{\"15\":5,\"24\":5,\"26\":5,\"104\":1,\"105\":2,\"112\":3,\"120\":1,\"121\":1,\"123\":1,\"227\":1,\"231\":1,\"232\":1,\"261\":1,\"391\":1,\"395\":1,\"423\":2,\"440\":1,\"457\":1,\"483\":1,\"582\":1,\"596\":1,\"616\":3,\"618\":4,\"677\":3,\"710\":1,\"785\":1,\"795\":2,\"798\":1,\"799\":1,\"800\":1,\"801\":3,\"802\":1,\"823\":3,\"837\":6,\"843\":6,\"859\":1,\"910\":3,\"924\":1,\"954\":1,\"958\":1,\"965\":1,\"994\":1,\"995\":2,\"996\":2,\"997\":2,\"999\":5,\"1000\":1,\"1001\":2,\"1002\":1,\"1016\":1,\"1052\":1,\"1054\":1,\"1055\":5,\"1056\":8,\"1058\":5,\"1059\":1,\"1060\":2,\"1061\":4,\"1097\":1,\"1099\":1,\"1100\":1,\"1178\":8,\"1182\":1,\"1190\":2,\"1199\":3,\"1219\":5,\"1220\":1,\"1222\":3,\"1289\":2,\"1301\":1,\"1350\":1,\"1356\":3,\"1357\":3,\"1360\":2,\"1366\":1,\"1403\":1,\"1448\":1,\"1502\":5,\"1557\":1,\"1562\":1,\"1568\":5,\"1570\":1,\"1572\":5,\"1576\":5,\"1578\":2,\"1579\":1,\"1580\":5,\"1582\":2,\"1584\":5,\"1719\":2,\"1727\":2,\"1741\":7,\"1742\":1,\"1743\":2,\"1744\":1,\"1748\":4,\"1759\":1,\"1772\":2,\"1774\":1,\"1779\":4}}],[\"pinned\",{\"1\":{\"91\":1,\"100\":1}}],[\"pseudo\",{\"1\":{\"605\":1,\"905\":1}}],[\"ps\",{\"1\":{\"90\":1,\"367\":2,\"656\":1,\"730\":1,\"733\":1,\"865\":4,\"1260\":4,\"1267\":4,\"1484\":1,\"1617\":1,\"1625\":1,\"1772\":1}}],[\"pless\",{\"1\":{\"1329\":1}}],[\"pleased\",{\"1\":{\"781\":3,\"783\":2,\"1163\":1}}],[\"please\",{\"0\":{\"857\":1},\"1\":{\"47\":1,\"82\":1,\"83\":1,\"88\":1,\"97\":1,\"189\":1,\"197\":1,\"199\":1,\"201\":1,\"202\":1,\"207\":1,\"208\":2,\"377\":1,\"397\":1,\"435\":1,\"436\":1,\"441\":1,\"446\":1,\"518\":1,\"544\":1,\"576\":1,\"591\":1,\"596\":1,\"601\":1,\"606\":1,\"680\":1,\"743\":1,\"749\":1,\"756\":1,\"762\":1,\"781\":1,\"782\":1,\"783\":1,\"801\":1,\"826\":1,\"863\":1,\"873\":1,\"875\":1,\"876\":1,\"897\":1,\"900\":1,\"904\":1,\"906\":1,\"913\":1,\"965\":1,\"986\":2,\"999\":1,\"1043\":2,\"1058\":1,\"1113\":1,\"1125\":1,\"1175\":1,\"1178\":1,\"1202\":1,\"1219\":1,\"1260\":1,\"1267\":1,\"1272\":1,\"1273\":1,\"1276\":1,\"1309\":1,\"1311\":2,\"1384\":1,\"1401\":1,\"1407\":1,\"1412\":1,\"1424\":1,\"1429\":1,\"1432\":2,\"1437\":1,\"1440\":1,\"1489\":1,\"1491\":1,\"1505\":1,\"1535\":1,\"1574\":1,\"1592\":1,\"1620\":1,\"1641\":1,\"1706\":1,\"1708\":1,\"1722\":1,\"1724\":1,\"1756\":1,\"1757\":1,\"1784\":2,\"1787\":1,\"1793\":1}}],[\"plugins\",{\"1\":{\"977\":1,\"1729\":1}}],[\"plus\",{\"1\":{\"66\":1,\"67\":1,\"80\":1,\"83\":1,\"86\":1,\"88\":2,\"97\":1,\"106\":1,\"165\":1,\"170\":1,\"292\":1,\"347\":1,\"742\":1,\"1300\":1,\"1401\":1,\"1432\":1,\"1491\":1}}],[\"plasmasword\",{\"1\":{\"1610\":1}}],[\"play\",{\"1\":{\"50\":1,\"733\":1}}],[\"platform\",{\"1\":{\"40\":1,\"205\":1,\"208\":2,\"474\":1,\"560\":1,\"956\":1,\"1043\":1,\"1372\":1,\"1448\":1}}],[\"platforms\",{\"0\":{\"204\":1},\"1\":{\"0\":1,\"198\":1,\"204\":1,\"474\":1,\"1043\":1,\"1461\":1,\"1496\":1,\"1728\":1}}],[\"placed\",{\"1\":{\"1169\":1,\"1170\":1,\"1700\":1}}],[\"placement\",{\"1\":{\"421\":1}}],[\"places\",{\"1\":{\"103\":1,\"121\":1,\"216\":1,\"1153\":2,\"1158\":2}}],[\"place\",{\"0\":{\"1153\":1},\"1\":{\"37\":1,\"90\":1,\"1153\":1,\"1752\":2}}],[\"plan9\",{\"1\":{\"199\":6,\"1043\":1}}],[\"planned\",{\"1\":{\"108\":1,\"717\":1,\"1654\":1}}],[\"plan\",{\"0\":{\"8\":1,\"199\":1},\"1\":{\"0\":1,\"8\":3,\"79\":1,\"111\":1,\"188\":1,\"189\":1,\"198\":1,\"208\":1,\"474\":1,\"717\":1,\"1043\":4,\"1372\":1}}],[\"purpose\",{\"1\":{\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"681\":1,\"827\":1,\"914\":1,\"1091\":1,\"1161\":1,\"1178\":1,\"1203\":1,\"1578\":1}}],[\"purely\",{\"1\":{\"47\":1,\"103\":1,\"231\":1}}],[\"public\",{\"0\":{\"242\":1},\"1\":{\"243\":1,\"708\":1,\"722\":1,\"727\":1,\"733\":1,\"1781\":1}}],[\"published\",{\"1\":{\"43\":1,\"53\":1,\"62\":1,\"86\":1,\"91\":1,\"93\":1,\"95\":1,\"100\":1,\"104\":1,\"109\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"129\":1,\"159\":1,\"163\":1,\"168\":1,\"182\":1}}],[\"push\",{\"1\":{\"119\":1,\"755\":1}}],[\"putting\",{\"1\":{\"53\":1,\"113\":1}}],[\"put\",{\"1\":{\"50\":1,\"387\":1,\"1752\":1}}],[\"pulling\",{\"1\":{\"808\":1,\"1067\":1}}],[\"pulled\",{\"1\":{\"181\":1}}],[\"pull\",{\"1\":{\"8\":1}}],[\"pty\",{\"1\":{\"123\":1}}],[\"pt\",{\"0\":{\"1099\":1},\"1\":{\"15\":1,\"26\":1,\"483\":1,\"618\":1,\"1052\":1,\"1100\":1,\"1101\":1,\"1102\":1}}],[\"practice\",{\"0\":{\"607\":1,\"907\":1},\"1\":{\"76\":1,\"117\":1,\"857\":1}}],[\"practicalities\",{\"1\":{\"50\":1}}],[\"practical\",{\"1\":{\"46\":1,\"48\":1,\"218\":1,\"965\":1}}],[\"principals\",{\"1\":{\"1629\":1}}],[\"principle\",{\"1\":{\"237\":1}}],[\"printing\",{\"1\":{\"1759\":1,\"1772\":5}}],[\"printable\",{\"1\":{\"93\":1,\"1108\":1,\"1110\":1,\"1116\":1,\"1575\":1,\"1591\":1}}],[\"printed\",{\"1\":{\"38\":1,\"56\":1,\"682\":1,\"828\":1,\"915\":1,\"1204\":1,\"1647\":1,\"1664\":1,\"1797\":1}}],[\"prints\",{\"1\":{\"38\":1,\"56\":1,\"115\":1}}],[\"print\",{\"0\":{\"215\":1},\"1\":{\"15\":3,\"26\":3,\"423\":1,\"479\":1,\"483\":3,\"489\":1,\"495\":2,\"536\":1,\"541\":1,\"544\":1,\"548\":1,\"612\":1,\"618\":2,\"629\":1,\"758\":1,\"771\":1,\"802\":1,\"897\":1,\"922\":1,\"975\":3,\"1024\":1,\"1045\":1,\"1052\":2,\"1061\":1,\"1089\":2,\"1126\":3,\"1143\":1,\"1171\":1,\"1222\":1,\"1302\":1,\"1307\":2,\"1313\":3,\"1345\":2,\"1400\":3,\"1403\":1,\"1448\":1,\"1487\":2,\"1505\":1,\"1507\":1,\"1518\":1,\"1547\":3,\"1552\":1,\"1557\":2,\"1562\":2,\"1572\":2,\"1576\":2,\"1584\":2,\"1589\":1,\"1592\":1,\"1594\":1,\"1599\":1,\"1705\":3}}],[\"printf\",{\"1\":{\"15\":1,\"26\":1,\"108\":1,\"110\":1,\"544\":2,\"559\":1,\"655\":1,\"897\":2,\"1422\":1,\"1450\":1}}],[\"primary\",{\"1\":{\"219\":1,\"653\":1,\"1666\":1}}],[\"primitive\",{\"1\":{\"28\":6,\"92\":1,\"101\":1,\"153\":1,\"183\":2,\"378\":1,\"735\":1,\"999\":1,\"1024\":1,\"1058\":1,\"1219\":1,\"1491\":1,\"1601\":1,\"1603\":6,\"1604\":1,\"1607\":2,\"1612\":2,\"1618\":3,\"1619\":1,\"1622\":2,\"1623\":1,\"1626\":3,\"1628\":1,\"1633\":1,\"1636\":2,\"1657\":1,\"1670\":1,\"1676\":1,\"1679\":2,\"1684\":1,\"1685\":1,\"1688\":3,\"1690\":1,\"1696\":1,\"1772\":1}}],[\"priority\",{\"1\":{\"72\":1,\"121\":1,\"596\":2}}],[\"prior\",{\"1\":{\"47\":1,\"1161\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1753\":1}}],[\"privates\",{\"1\":{\"119\":1,\"451\":1,\"1091\":1,\"1169\":1,\"1170\":1,\"1175\":1,\"1176\":1}}],[\"private\",{\"0\":{\"243\":1,\"1090\":1,\"1096\":1},\"1\":{\"15\":2,\"26\":2,\"120\":2,\"135\":1,\"181\":1,\"182\":2,\"183\":2,\"243\":1,\"252\":1,\"391\":4,\"393\":2,\"450\":1,\"457\":2,\"485\":3,\"489\":2,\"532\":1,\"536\":2,\"651\":2,\"679\":1,\"707\":1,\"708\":2,\"710\":4,\"713\":2,\"722\":1,\"727\":1,\"733\":1,\"785\":4,\"787\":2,\"825\":1,\"912\":1,\"954\":2,\"982\":2,\"1090\":1,\"1091\":2,\"1092\":1,\"1093\":1,\"1095\":1,\"1096\":1,\"1097\":4,\"1139\":1,\"1143\":2,\"1171\":2,\"1176\":1,\"1182\":2,\"1201\":1,\"1213\":2,\"1337\":2,\"1732\":1,\"1739\":2,\"1771\":2,\"1781\":1,\"1782\":2}}],[\"preblock\",{\"1\":{\"1285\":1}}],[\"predict\",{\"1\":{\"433\":2}}],[\"predictable\",{\"1\":{\"99\":2}}],[\"prerequisites\",{\"1\":{\"207\":1,\"1783\":1}}],[\"preload=\",{\"1\":{\"1753\":1}}],[\"preload\",{\"0\":{\"1750\":1},\"1\":{\"113\":1,\"163\":1,\"1749\":1,\"1753\":3}}],[\"preston\",{\"1\":{\"1691\":1}}],[\"preserving\",{\"0\":{\"755\":1}}],[\"preserve\",{\"1\":{\"755\":1}}],[\"preserves\",{\"1\":{\"692\":1}}],[\"preserved\",{\"1\":{\"491\":1,\"605\":1,\"905\":1,\"1100\":1}}],[\"presented\",{\"1\":{\"782\":1}}],[\"presenting\",{\"1\":{\"123\":1}}],[\"present\",{\"1\":{\"113\":1,\"208\":1,\"1244\":1,\"1366\":1,\"1488\":1,\"1602\":1,\"1628\":1,\"1690\":1,\"1696\":1}}],[\"presses\",{\"1\":{\"1807\":1}}],[\"pressed\",{\"1\":{\"648\":1,\"743\":1,\"756\":1,\"1123\":1,\"1377\":2,\"1641\":1}}],[\"pressing\",{\"1\":{\"182\":1,\"254\":1,\"255\":1,\"256\":1,\"1716\":3,\"1797\":1,\"1798\":1,\"1800\":1,\"1804\":1,\"1808\":1,\"1810\":1,\"1811\":1,\"1813\":1}}],[\"press\",{\"1\":{\"90\":1,\"103\":1,\"177\":1,\"182\":1,\"783\":1,\"1719\":1,\"1804\":1,\"1806\":1}}],[\"pre>\",{\"1\":{\"99\":1,\"103\":1,\"108\":2}}],[\"preview\",{\"0\":{\"1799\":1},\"1\":{\"123\":4,\"129\":1,\"174\":4,\"176\":1,\"177\":1,\"1716\":1,\"1795\":1,\"1797\":2,\"1798\":2,\"1799\":10}}],[\"previews\",{\"1\":{\"115\":1}}],[\"previously\",{\"1\":{\"86\":1,\"119\":1,\"143\":1,\"151\":1,\"979\":2}}],[\"previous\",{\"0\":{\"1807\":1},\"1\":{\"15\":3,\"24\":2,\"26\":3,\"44\":1,\"52\":1,\"63\":1,\"67\":1,\"69\":1,\"94\":2,\"109\":1,\"116\":2,\"131\":1,\"165\":1,\"231\":2,\"376\":1,\"383\":1,\"404\":1,\"412\":1,\"419\":1,\"483\":1,\"490\":1,\"507\":2,\"572\":1,\"575\":1,\"618\":1,\"665\":1,\"666\":1,\"703\":1,\"758\":1,\"771\":1,\"851\":1,\"861\":1,\"975\":1,\"1003\":1,\"1004\":1,\"1039\":1,\"1052\":1,\"1084\":1,\"1126\":1,\"1143\":1,\"1251\":1,\"1253\":1,\"1255\":1,\"1262\":1,\"1268\":1,\"1307\":1,\"1313\":1,\"1319\":1,\"1405\":1,\"1480\":1,\"1502\":2,\"1553\":1,\"1558\":1,\"1570\":1,\"1579\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1707\":1,\"1753\":1,\"1774\":2,\"1795\":1,\"1797\":1,\"1798\":1,\"1800\":1,\"1802\":1,\"1805\":3}}],[\"prevent\",{\"1\":{\"93\":1,\"99\":1,\"777\":1,\"1095\":1}}],[\"pre\",{\"0\":{\"205\":1},\"1\":{\"90\":1,\"95\":2,\"121\":1,\"139\":1,\"162\":1,\"166\":1,\"189\":1,\"205\":1,\"208\":1,\"391\":1,\"710\":1,\"785\":1,\"1097\":1,\"1672\":1,\"1742\":1}}],[\"precise\",{\"1\":{\"1620\":1,\"1677\":1}}],[\"precision\",{\"1\":{\"15\":1,\"26\":1,\"183\":1,\"1151\":1,\"1152\":1,\"1153\":2,\"1155\":1,\"1156\":1,\"1158\":2}}],[\"precedents\",{\"1\":{\"1753\":1}}],[\"precedence\",{\"0\":{\"710\":1,\"785\":1},\"1\":{\"15\":1,\"26\":1,\"164\":1,\"391\":2,\"393\":1,\"447\":1,\"469\":1,\"656\":1,\"659\":1,\"704\":1,\"705\":1,\"710\":2,\"723\":1,\"728\":1,\"735\":1,\"785\":2,\"787\":1,\"1024\":1,\"1031\":1,\"1097\":2,\"1098\":1,\"1213\":1}}],[\"preceded\",{\"1\":{\"440\":1}}],[\"prettier\",{\"1\":{\"1249\":1}}],[\"prettifies\",{\"1\":{\"15\":1,\"26\":1,\"618\":1,\"947\":1,\"967\":1,\"1085\":1,\"1137\":1,\"1182\":1,\"1307\":1,\"1313\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1}}],[\"pretty\",{\"0\":{\"1085\":1},\"1\":{\"15\":1,\"26\":1,\"42\":1,\"111\":1,\"211\":1,\"371\":1,\"616\":1,\"618\":1,\"873\":1,\"947\":1,\"967\":1,\"1087\":1,\"1088\":1,\"1137\":1,\"1178\":2,\"1182\":1,\"1270\":1,\"1305\":1,\"1307\":1,\"1313\":1,\"1329\":2,\"1401\":1,\"1628\":1,\"1632\":1,\"1645\":1,\"1647\":1,\"1657\":1,\"1664\":1,\"1670\":1,\"1675\":1,\"1690\":1,\"1696\":1,\"1789\":1}}],[\"prepend\",{\"0\":{\"1078\":1},\"1\":{\"15\":1,\"26\":1,\"111\":1,\"121\":1,\"122\":1,\"369\":1,\"380\":2,\"383\":1,\"404\":1,\"417\":1,\"419\":1,\"548\":1,\"884\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1079\":1,\"1080\":1,\"1081\":1,\"1082\":1,\"1083\":2,\"1118\":1,\"1137\":1,\"1262\":1,\"1268\":1}}],[\"prefer\",{\"1\":{\"508\":1,\"1403\":1,\"1448\":1,\"1726\":1,\"1753\":1}}],[\"preferences\",{\"1\":{\"511\":1,\"1731\":1}}],[\"preference\",{\"0\":{\"391\":1,\"1097\":1},\"1\":{\"211\":2,\"777\":1,\"1095\":1,\"1716\":1}}],[\"prefers\",{\"1\":{\"43\":2}}],[\"preferred\",{\"1\":{\"15\":1,\"26\":1,\"50\":1,\"87\":1,\"110\":1,\"121\":1,\"164\":1,\"182\":1,\"189\":1,\"202\":2,\"530\":1,\"651\":1,\"713\":1,\"816\":1,\"1014\":1,\"1015\":1,\"1031\":1,\"1182\":1,\"1301\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1}}],[\"preface\",{\"0\":{\"37\":1},\"1\":{\"36\":1}}],[\"prefixed\",{\"1\":{\"30\":1,\"103\":2,\"229\":1,\"232\":1,\"265\":1,\"272\":1,\"279\":1,\"286\":1,\"293\":1,\"294\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"391\":1,\"409\":1,\"710\":1,\"780\":1,\"785\":1,\"929\":1,\"1000\":1,\"1036\":1,\"1059\":1,\"1072\":1,\"1097\":1,\"1125\":1,\"1220\":1,\"1312\":1,\"1574\":1,\"1612\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1673\":1,\"1694\":1,\"1699\":1}}],[\"prefixing\",{\"1\":{\"23\":1,\"286\":1,\"300\":1,\"1706\":1,\"1748\":1,\"1771\":1}}],[\"prefix\",{\"0\":{\"219\":1,\"1071\":1,\"1706\":1},\"1\":{\"15\":4,\"23\":1,\"26\":4,\"93\":1,\"116\":1,\"162\":1,\"167\":1,\"219\":3,\"226\":1,\"284\":1,\"286\":1,\"298\":1,\"300\":1,\"390\":1,\"438\":1,\"439\":1,\"458\":1,\"459\":1,\"462\":1,\"500\":1,\"591\":1,\"605\":1,\"653\":1,\"675\":1,\"749\":2,\"778\":1,\"794\":1,\"822\":1,\"891\":3,\"905\":1,\"947\":3,\"967\":3,\"1021\":4,\"1071\":1,\"1073\":1,\"1074\":1,\"1076\":2,\"1077\":1,\"1134\":3,\"1137\":3,\"1150\":3,\"1175\":1,\"1189\":1,\"1198\":1,\"1229\":1,\"1235\":2,\"1386\":1,\"1533\":1,\"1534\":1,\"1539\":1,\"1615\":1,\"1706\":3,\"1748\":1,\"1761\":1,\"1771\":1,\"1773\":1}}],[\"probably\",{\"1\":{\"1610\":1}}],[\"problems\",{\"0\":{\"1792\":1},\"1\":{\"48\":1,\"61\":1,\"228\":2,\"246\":1,\"247\":1,\"626\":1}}],[\"problem\",{\"1\":{\"37\":1,\"39\":1,\"47\":1,\"48\":1,\"53\":1,\"57\":1,\"121\":1,\"135\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"prototype\",{\"1\":{\"1488\":1}}],[\"protocol\",{\"1\":{\"1022\":1}}],[\"protect\",{\"1\":{\"238\":1,\"1347\":1}}],[\"promote\",{\"1\":{\"459\":1}}],[\"promptgoproc\",{\"1\":{\"575\":1}}],[\"prompts\",{\"1\":{\"121\":1,\"127\":1}}],[\"prompted\",{\"1\":{\"119\":1,\"781\":2}}],[\"prompt\",{\"0\":{\"1796\":1,\"1810\":1},\"1\":{\"10\":1,\"70\":1,\"93\":2,\"95\":1,\"103\":1,\"108\":4,\"115\":1,\"119\":1,\"121\":1,\"125\":1,\"162\":4,\"166\":2,\"167\":1,\"397\":6,\"402\":3,\"783\":1,\"784\":1,\"857\":1,\"1121\":3,\"1122\":2,\"1123\":1,\"1125\":4,\"1310\":1,\"1312\":4,\"1347\":1,\"1359\":2,\"1377\":4,\"1378\":2,\"1384\":1,\"1385\":2,\"1387\":1,\"1716\":1,\"1723\":2,\"1726\":1,\"1795\":2,\"1797\":1,\"1798\":1,\"1800\":1,\"1801\":1,\"1808\":2,\"1810\":2,\"1811\":1}}],[\"pronounced\",{\"1\":{\"371\":1}}],[\"pro\",{\"1\":{\"211\":1}}],[\"property\",{\"1\":{\"582\":1}}],[\"properties\",{\"1\":{\"117\":1,\"127\":1,\"443\":1,\"1176\":1,\"1179\":1,\"1284\":2,\"1631\":2,\"1644\":2,\"1656\":2,\"1669\":2,\"1693\":2,\"1698\":2}}],[\"properly\",{\"1\":{\"127\":1}}],[\"projects\",{\"1\":{\"208\":1}}],[\"project\",{\"1\":{\"121\":1,\"1501\":1}}],[\"proxies\",{\"1\":{\"115\":1}}],[\"progressively\",{\"1\":{\"119\":1}}],[\"progress\",{\"1\":{\"113\":2,\"743\":2,\"756\":2,\"1611\":1,\"1641\":2}}],[\"programs\",{\"1\":{\"50\":1,\"95\":1,\"226\":1,\"244\":1,\"656\":1}}],[\"program\",{\"1\":{\"46\":1,\"47\":1,\"50\":1,\"962\":1,\"989\":1,\"1280\":1}}],[\"programmatically\",{\"1\":{\"41\":1,\"924\":1}}],[\"programming\",{\"1\":{\"15\":1,\"26\":1,\"48\":1,\"50\":1,\"116\":1,\"169\":1,\"183\":1,\"231\":1,\"259\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"302\":1,\"308\":1,\"447\":1,\"530\":1,\"532\":1,\"560\":1,\"642\":1,\"713\":1,\"1171\":1,\"1182\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1782\":1}}],[\"proceed\",{\"1\":{\"741\":1,\"1252\":1}}],[\"processed\",{\"1\":{\"1659\":1}}],[\"processes\",{\"1\":{\"15\":2,\"26\":2,\"90\":1,\"92\":1,\"93\":1,\"99\":4,\"119\":1,\"121\":2,\"122\":1,\"232\":3,\"470\":1,\"471\":1,\"484\":1,\"515\":1,\"536\":1,\"576\":1,\"584\":1,\"589\":1,\"618\":1,\"656\":1,\"659\":1,\"664\":1,\"681\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"733\":4,\"735\":1,\"745\":1,\"755\":1,\"758\":1,\"766\":1,\"787\":1,\"827\":1,\"865\":1,\"914\":1,\"922\":1,\"1002\":1,\"1061\":1,\"1098\":1,\"1143\":1,\"1176\":1,\"1203\":1,\"1218\":1,\"1255\":1,\"1347\":2,\"1461\":1,\"1484\":1,\"1659\":1,\"1741\":1,\"1746\":1,\"1747\":1,\"1748\":1,\"1808\":4}}],[\"processor\",{\"1\":{\"190\":1}}],[\"processing\",{\"1\":{\"38\":2,\"56\":2,\"743\":1,\"756\":1,\"1641\":1,\"1659\":1}}],[\"process\",{\"1\":{\"15\":4,\"26\":4,\"50\":1,\"90\":1,\"92\":1,\"95\":1,\"101\":1,\"108\":1,\"115\":1,\"122\":1,\"123\":1,\"208\":1,\"261\":1,\"262\":2,\"283\":1,\"285\":2,\"297\":1,\"299\":2,\"303\":1,\"304\":1,\"305\":2,\"338\":1,\"340\":3,\"341\":2,\"345\":1,\"347\":3,\"348\":2,\"353\":1,\"354\":1,\"355\":2,\"360\":1,\"361\":3,\"362\":2,\"391\":1,\"412\":1,\"474\":1,\"475\":1,\"489\":1,\"531\":1,\"575\":1,\"620\":1,\"631\":1,\"637\":1,\"653\":2,\"656\":4,\"659\":1,\"665\":1,\"666\":1,\"681\":1,\"703\":1,\"710\":1,\"713\":1,\"714\":1,\"715\":1,\"722\":2,\"723\":1,\"727\":2,\"728\":1,\"733\":1,\"735\":1,\"743\":2,\"749\":1,\"756\":2,\"785\":1,\"827\":1,\"861\":1,\"914\":1,\"965\":1,\"1003\":1,\"1004\":1,\"1039\":1,\"1097\":1,\"1142\":1,\"1143\":2,\"1203\":1,\"1255\":1,\"1300\":3,\"1319\":1,\"1321\":1,\"1324\":2,\"1327\":1,\"1330\":2,\"1641\":2,\"1707\":1,\"1716\":2,\"1741\":3,\"1746\":4,\"1772\":1,\"1808\":3}}],[\"proc\",{\"1\":{\"108\":1,\"113\":1,\"115\":2,\"515\":1}}],[\"proof\",{\"1\":{\"95\":1}}],[\"profiling\",{\"1\":{\"93\":1}}],[\"profile=\",{\"1\":{\"1753\":1}}],[\"profile`\",{\"1\":{\"113\":1}}],[\"profiles\",{\"1\":{\"46\":1,\"93\":1,\"163\":1,\"181\":1,\"1710\":1,\"1752\":1}}],[\"profile\",{\"0\":{\"1749\":1,\"1752\":1},\"1\":{\"23\":1,\"89\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"98\":1,\"108\":3,\"110\":1,\"111\":4,\"113\":1,\"163\":2,\"463\":1,\"982\":1,\"1175\":3,\"1704\":2,\"1705\":1,\"1749\":2,\"1750\":3,\"1752\":3,\"1753\":4,\"1787\":2,\"1790\":2,\"1794\":1}}],[\"prove\",{\"1\":{\"1808\":1}}],[\"proverbial\",{\"1\":{\"57\":1}}],[\"providing\",{\"1\":{\"354\":1,\"361\":1,\"421\":1,\"956\":1}}],[\"provides\",{\"1\":{\"692\":1,\"808\":1,\"1067\":1,\"1128\":1,\"1706\":1,\"1717\":1,\"1728\":1,\"1797\":2}}],[\"provide\",{\"1\":{\"95\":1,\"264\":1,\"442\":1,\"446\":1,\"525\":1,\"1178\":3,\"1179\":1,\"1300\":1,\"1359\":1,\"1385\":1,\"1723\":1}}],[\"provided\",{\"1\":{\"30\":1,\"50\":1,\"264\":1}}],[\"produce\",{\"1\":{\"123\":1,\"224\":1,\"1110\":1,\"1647\":1,\"1664\":1}}],[\"produces\",{\"1\":{\"115\":1,\"117\":1,\"176\":1,\"1555\":1,\"1560\":1,\"1570\":1,\"1725\":1}}],[\"produced\",{\"1\":{\"53\":1,\"119\":1,\"762\":1,\"1179\":1}}],[\"productivity\",{\"1\":{\"47\":1,\"1600\":1,\"1716\":1}}],[\"productive\",{\"1\":{\"39\":1,\"57\":1}}],[\"padded\",{\"1\":{\"1575\":1}}],[\"padding\",{\"1\":{\"1401\":1,\"1432\":1}}],[\"pacman=pacman\",{\"1\":{\"1350\":1}}],[\"pacman\",{\"1\":{\"1350\":3}}],[\"packages\",{\"0\":{\"1000\":1,\"1059\":1,\"1220\":1,\"1728\":1,\"1729\":1,\"1730\":1,\"1734\":1},\"1\":{\"23\":2,\"87\":2,\"94\":2,\"110\":2,\"113\":1,\"208\":1,\"469\":2,\"977\":3,\"978\":4,\"979\":4,\"981\":1,\"982\":2,\"1031\":2,\"1628\":1,\"1690\":1,\"1696\":1,\"1714\":2,\"1728\":2,\"1729\":3,\"1731\":4,\"1733\":2,\"1734\":1,\"1754\":2,\"1771\":2}}],[\"package\",{\"0\":{\"206\":1,\"976\":1,\"981\":1},\"1\":{\"15\":2,\"19\":1,\"26\":2,\"87\":2,\"111\":1,\"113\":1,\"189\":1,\"206\":1,\"207\":1,\"261\":1,\"269\":1,\"270\":1,\"276\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"304\":1,\"309\":1,\"311\":1,\"312\":1,\"316\":1,\"318\":1,\"324\":1,\"326\":1,\"331\":1,\"333\":1,\"338\":1,\"340\":1,\"345\":1,\"347\":1,\"354\":1,\"361\":1,\"609\":1,\"909\":1,\"953\":1,\"976\":1,\"977\":5,\"978\":16,\"979\":5,\"981\":4,\"1000\":1,\"1021\":1,\"1059\":1,\"1220\":1,\"1284\":1,\"1300\":1,\"1350\":1,\"1421\":1,\"1449\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1701\":1,\"1714\":2,\"1728\":2,\"1729\":5,\"1731\":3,\"1733\":2,\"1734\":1,\"1735\":1,\"1739\":2,\"1751\":1,\"1754\":2,\"1793\":1}}],[\"payload\",{\"0\":{\"1352\":1,\"1363\":1,\"1380\":1,\"1395\":1},\"1\":{\"643\":1,\"1352\":1,\"1363\":1,\"1380\":1,\"1395\":1}}],[\"pane\",{\"1\":{\"129\":1}}],[\"panics\",{\"1\":{\"151\":1}}],[\"panic\",{\"1\":{\"115\":2,\"147\":1,\"163\":1}}],[\"panicking\",{\"1\":{\"95\":1}}],[\"pasting\",{\"1\":{\"1716\":1}}],[\"paste\",{\"1\":{\"1311\":2,\"1529\":1,\"1805\":2}}],[\"pasted\",{\"1\":{\"626\":1}}],[\"past\",{\"1\":{\"121\":1,\"1753\":1,\"1802\":1}}],[\"password\",{\"1\":{\"1110\":1,\"1122\":1,\"1123\":1}}],[\"passed\",{\"0\":{\"1522\":1},\"1\":{\"50\":1,\"108\":1,\"111\":1,\"115\":1,\"139\":1,\"142\":1,\"162\":1,\"218\":1,\"397\":1,\"562\":1,\"643\":1,\"677\":1,\"742\":1,\"747\":1,\"749\":1,\"751\":1,\"752\":1,\"755\":1,\"779\":1,\"801\":1,\"823\":1,\"910\":1,\"924\":2,\"945\":1,\"1023\":1,\"1135\":1,\"1142\":1,\"1199\":1,\"1352\":1,\"1363\":1,\"1380\":1,\"1393\":1,\"1395\":1,\"1539\":1,\"1546\":1,\"1703\":4,\"1746\":1,\"1770\":1}}],[\"passes\",{\"1\":{\"24\":1,\"39\":1,\"41\":1,\"42\":1,\"57\":1,\"59\":1,\"94\":1,\"111\":1,\"116\":1,\"214\":1,\"1502\":1,\"1553\":1,\"1570\":1,\"1582\":1,\"1774\":1}}],[\"passing\",{\"1\":{\"15\":1,\"26\":1,\"50\":3,\"111\":1,\"121\":1,\"122\":1,\"530\":1,\"616\":2,\"635\":1,\"641\":1,\"681\":1,\"749\":1,\"809\":1,\"810\":1,\"814\":1,\"827\":1,\"914\":1,\"999\":1,\"1024\":1,\"1058\":1,\"1070\":1,\"1103\":1,\"1203\":1,\"1219\":1,\"1659\":1,\"1700\":1,\"1746\":1}}],[\"pass\",{\"1\":{\"15\":1,\"26\":1,\"47\":1,\"112\":1,\"121\":1,\"270\":3,\"277\":3,\"290\":1,\"316\":1,\"324\":1,\"331\":1,\"394\":1,\"423\":1,\"561\":1,\"616\":1,\"924\":1,\"940\":1,\"960\":1,\"999\":1,\"1023\":1,\"1058\":1,\"1118\":1,\"1215\":1,\"1219\":1,\"1262\":1,\"1268\":1,\"1794\":1}}],[\"pauses\",{\"1\":{\"1776\":1}}],[\"paused\",{\"1\":{\"90\":1}}],[\"pause\",{\"1\":{\"90\":1,\"103\":1}}],[\"pair\",{\"1\":{\"288\":1,\"695\":2,\"1652\":3,\"1662\":3}}],[\"pairs\",{\"1\":{\"60\":2,\"1278\":1}}],[\"pain\",{\"1\":{\"47\":2,\"1538\":1}}],[\"path=\",{\"1\":{\"1750\":1}}],[\"paths\",{\"0\":{\"1753\":1},\"1\":{\"115\":1,\"127\":1,\"130\":1,\"436\":1,\"507\":1,\"1753\":4,\"1772\":2}}],[\"path\",{\"0\":{\"402\":1,\"596\":1,\"1365\":1,\"1681\":1},\"1\":{\"15\":1,\"24\":1,\"26\":1,\"51\":1,\"96\":1,\"108\":1,\"115\":1,\"117\":1,\"121\":1,\"127\":1,\"130\":1,\"178\":1,\"208\":1,\"395\":5,\"396\":1,\"402\":2,\"447\":2,\"505\":1,\"506\":2,\"508\":1,\"575\":1,\"591\":1,\"596\":1,\"597\":1,\"656\":1,\"808\":1,\"920\":2,\"921\":1,\"926\":1,\"977\":1,\"978\":1,\"979\":1,\"1011\":1,\"1023\":2,\"1067\":1,\"1188\":1,\"1223\":1,\"1224\":1,\"1362\":1,\"1363\":1,\"1365\":1,\"1368\":1,\"1369\":1,\"1501\":1,\"1502\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1595\":1,\"1681\":1,\"1683\":2,\"1712\":1,\"1725\":1,\"1729\":1,\"1731\":1,\"1737\":1,\"1753\":5,\"1766\":2,\"1772\":3,\"1773\":3}}],[\"patterns\",{\"1\":{\"436\":1}}],[\"pattern\",{\"0\":{\"793\":1},\"1\":{\"15\":2,\"26\":2,\"94\":2,\"113\":1,\"142\":1,\"153\":1,\"354\":1,\"361\":1,\"393\":1,\"463\":2,\"697\":2,\"787\":1,\"788\":1,\"789\":1,\"790\":5,\"795\":1,\"797\":1,\"837\":1,\"843\":1,\"926\":3,\"1098\":1,\"1183\":1,\"1184\":1,\"1185\":4,\"1190\":1,\"1192\":1,\"1278\":1,\"1772\":3,\"1798\":1}}],[\"pager\",{\"1\":{\"1329\":2}}],[\"page\",{\"1\":{\"15\":2,\"26\":2,\"66\":1,\"95\":1,\"111\":1,\"113\":1,\"119\":1,\"121\":1,\"129\":1,\"170\":1,\"174\":2,\"178\":1,\"181\":2,\"183\":1,\"189\":1,\"205\":1,\"445\":3,\"446\":1,\"453\":2,\"616\":3,\"804\":1,\"923\":1,\"924\":2,\"930\":1,\"931\":1,\"935\":1,\"971\":1,\"972\":1,\"975\":1,\"1063\":1,\"1305\":2,\"1746\":1,\"1799\":9}}],[\"pages\",{\"0\":{\"15\":1,\"265\":1,\"445\":1,\"1456\":1,\"1502\":1,\"1603\":1},\"1\":{\"15\":1,\"26\":1,\"120\":1,\"122\":1,\"431\":1,\"445\":1,\"924\":1,\"929\":1,\"930\":1,\"932\":1,\"935\":1,\"968\":1,\"969\":1,\"973\":1,\"982\":1,\"984\":1,\"987\":1,\"1237\":1,\"1241\":1,\"1278\":2}}],[\"parsing\",{\"0\":{\"1708\":1},\"1\":{\"23\":1,\"66\":1,\"95\":1,\"117\":1,\"129\":1,\"155\":1,\"163\":1,\"170\":1,\"181\":1,\"292\":1,\"417\":1,\"421\":2,\"445\":1,\"446\":1,\"567\":1,\"924\":1,\"1082\":1,\"1278\":3,\"1518\":1,\"1545\":2,\"1546\":1,\"1547\":1,\"1609\":1,\"1654\":1,\"1675\":1,\"1708\":1,\"1727\":1,\"1794\":1}}],[\"parsable\",{\"1\":{\"15\":1,\"26\":1,\"445\":1,\"530\":1,\"635\":1,\"641\":1,\"809\":1,\"816\":1,\"1024\":1,\"1062\":1,\"1103\":1,\"1178\":1}}],[\"parsefloat\",{\"1\":{\"417\":1,\"1082\":1}}],[\"parse\",{\"1\":{\"40\":1,\"60\":1,\"126\":1,\"182\":1,\"445\":1,\"453\":1,\"929\":1,\"1280\":1,\"1601\":2}}],[\"parsed\",{\"1\":{\"23\":1,\"135\":1,\"217\":1,\"228\":1,\"387\":1,\"421\":1,\"1518\":1,\"1542\":2,\"1547\":1,\"1647\":1,\"1664\":1,\"1672\":1,\"1675\":1,\"1708\":4,\"1727\":1,\"1794\":1}}],[\"parses\",{\"1\":{\"15\":1,\"26\":1,\"183\":1,\"217\":2,\"228\":1,\"923\":1,\"935\":1,\"975\":1}}],[\"parsers\",{\"0\":{\"565\":1},\"1\":{\"565\":1,\"743\":1,\"756\":1,\"1538\":1,\"1641\":1}}],[\"parser\",{\"0\":{\"983\":1,\"1498\":1,\"1503\":1,\"1508\":1,\"1519\":1,\"1537\":1,\"1541\":1,\"1548\":1,\"1553\":1,\"1558\":1,\"1563\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1581\":1,\"1585\":1,\"1590\":1,\"1595\":1},\"1\":{\"15\":3,\"26\":3,\"72\":1,\"103\":1,\"104\":2,\"108\":1,\"111\":1,\"117\":1,\"119\":1,\"121\":2,\"123\":1,\"139\":1,\"181\":1,\"231\":1,\"420\":1,\"453\":1,\"596\":1,\"605\":1,\"606\":1,\"787\":1,\"905\":1,\"906\":1,\"929\":1,\"983\":1,\"985\":2,\"1213\":3,\"1337\":3,\"1498\":1,\"1501\":1,\"1566\":1,\"1615\":1,\"1647\":1,\"1654\":3,\"1664\":1,\"1666\":1,\"1708\":3}}],[\"parents\",{\"1\":{\"1570\":1,\"1582\":1,\"1780\":1}}],[\"parentheses\",{\"1\":{\"237\":1,\"441\":1}}],[\"parenthesis\",{\"1\":{\"121\":1,\"1131\":1,\"1505\":1,\"1592\":1}}],[\"parent\",{\"0\":{\"1757\":1},\"1\":{\"15\":1,\"26\":1,\"77\":1,\"90\":1,\"115\":2,\"135\":1,\"361\":2,\"455\":1,\"457\":1,\"518\":2,\"679\":4,\"754\":2,\"765\":2,\"825\":4,\"912\":4,\"1002\":1,\"1061\":1,\"1178\":4,\"1201\":4,\"1214\":1,\"1343\":2,\"1360\":1,\"1743\":1,\"1756\":1,\"1757\":1}}],[\"parallel\",{\"1\":{\"1166\":1,\"1167\":1,\"1300\":1,\"1327\":1,\"1776\":1,\"1777\":1}}],[\"param3\",{\"1\":{\"1285\":1}}],[\"param2\",{\"1\":{\"1285\":1}}],[\"param1\",{\"1\":{\"1285\":1}}],[\"params\",{\"0\":{\"1765\":1},\"1\":{\"283\":2,\"297\":2,\"338\":2,\"340\":50,\"345\":2,\"347\":27,\"575\":1}}],[\"parameter3\",{\"1\":{\"1742\":3}}],[\"parameter2\",{\"1\":{\"1742\":3}}],[\"parameter1\",{\"1\":{\"1742\":3}}],[\"parameterized\",{\"0\":{\"779\":1}}],[\"parameter\",{\"0\":{\"1165\":1,\"1168\":1,\"1511\":1},\"1\":{\"15\":1,\"26\":1,\"113\":1,\"115\":2,\"135\":1,\"232\":1,\"237\":1,\"251\":1,\"252\":1,\"369\":1,\"375\":3,\"386\":2,\"397\":1,\"402\":1,\"433\":4,\"455\":1,\"485\":2,\"548\":2,\"561\":1,\"576\":1,\"591\":1,\"596\":1,\"597\":1,\"605\":4,\"661\":1,\"741\":4,\"742\":1,\"780\":1,\"782\":2,\"808\":1,\"878\":1,\"879\":1,\"886\":2,\"898\":1,\"905\":4,\"924\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1043\":1,\"1068\":1,\"1118\":1,\"1125\":3,\"1137\":1,\"1139\":1,\"1142\":1,\"1145\":2,\"1210\":1,\"1211\":1,\"1244\":1,\"1303\":1,\"1312\":3,\"1335\":2,\"1339\":1,\"1404\":3,\"1504\":1,\"1513\":2,\"1517\":1,\"1542\":1,\"1545\":2,\"1546\":1,\"1591\":1,\"1708\":3,\"1742\":2,\"1770\":2,\"1794\":1}}],[\"parameters\",{\"0\":{\"262\":1,\"271\":1,\"278\":1,\"285\":1,\"292\":1,\"299\":1,\"305\":1,\"319\":1,\"327\":1,\"334\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1,\"597\":1},\"1\":{\"3\":3,\"47\":1,\"102\":1,\"108\":1,\"109\":1,\"111\":2,\"115\":1,\"121\":1,\"129\":1,\"182\":1,\"216\":1,\"217\":1,\"218\":1,\"228\":1,\"237\":1,\"285\":1,\"299\":1,\"341\":1,\"348\":1,\"375\":2,\"380\":1,\"387\":2,\"389\":1,\"406\":1,\"421\":2,\"423\":3,\"433\":1,\"434\":2,\"438\":2,\"442\":1,\"465\":1,\"477\":1,\"575\":1,\"596\":1,\"597\":1,\"605\":4,\"613\":1,\"620\":1,\"626\":1,\"631\":1,\"637\":1,\"656\":1,\"661\":1,\"677\":1,\"706\":1,\"732\":1,\"774\":1,\"779\":2,\"780\":1,\"781\":1,\"783\":2,\"784\":1,\"823\":1,\"905\":4,\"910\":1,\"929\":2,\"937\":1,\"942\":2,\"999\":1,\"1033\":1,\"1046\":1,\"1058\":1,\"1141\":1,\"1164\":1,\"1178\":4,\"1199\":1,\"1219\":1,\"1292\":1,\"1300\":1,\"1303\":1,\"1335\":1,\"1339\":1,\"1350\":1,\"1352\":1,\"1355\":1,\"1404\":2,\"1504\":1,\"1506\":1,\"1520\":1,\"1708\":5,\"1764\":1,\"1765\":1,\"1770\":2,\"1789\":1}}],[\"paradigm\",{\"1\":{\"10\":1}}],[\"parts\",{\"1\":{\"742\":2}}],[\"partial\",{\"1\":{\"93\":1,\"142\":1,\"167\":1,\"438\":1,\"439\":1,\"440\":1,\"448\":1,\"1505\":1,\"1592\":1}}],[\"particular\",{\"1\":{\"61\":1,\"487\":1}}],[\"particularly\",{\"1\":{\"47\":1,\"59\":1,\"376\":1,\"924\":1,\"1461\":1,\"1496\":1,\"1719\":1,\"1753\":1}}],[\"party\",{\"0\":{\"1784\":1},\"1\":{\"39\":1,\"40\":1,\"57\":1,\"1710\":1}}],[\"part\",{\"1\":{\"8\":1,\"27\":1,\"40\":1,\"46\":1,\"78\":1,\"113\":2,\"202\":2,\"209\":1,\"452\":1,\"656\":1,\"679\":2,\"781\":1,\"808\":1,\"825\":2,\"912\":2,\"1068\":1,\"1201\":2,\"1542\":1,\"1549\":1,\"1702\":2,\"1712\":1,\"1716\":1,\"1737\":1}}],[\"porcelain\",{\"1\":{\"1725\":1}}],[\"portion\",{\"1\":{\"1793\":1}}],[\"portable\",{\"1\":{\"1731\":1}}],[\"portability\",{\"1\":{\"1347\":1}}],[\"ports\",{\"1\":{\"1691\":1}}],[\"ported\",{\"1\":{\"42\":1}}],[\"policy\",{\"1\":{\"1629\":2}}],[\"poll\",{\"1\":{\"3\":1}}],[\"popup\",{\"1\":{\"439\":1,\"454\":1}}],[\"populate\",{\"1\":{\"445\":1,\"783\":1}}],[\"populated\",{\"0\":{\"445\":1},\"1\":{\"431\":2,\"445\":1,\"446\":1,\"520\":1,\"984\":1,\"1237\":1,\"1384\":1}}],[\"popular\",{\"1\":{\"38\":1,\"56\":1,\"560\":1}}],[\"potentially\",{\"1\":{\"1372\":1}}],[\"potential\",{\"1\":{\"77\":1,\"78\":1,\"80\":1,\"95\":1,\"100\":1,\"104\":1,\"106\":1,\"113\":1,\"115\":1}}],[\"powerful\",{\"1\":{\"48\":1,\"50\":1}}],[\"power\",{\"1\":{\"40\":1}}],[\"powershell\",{\"0\":{\"42\":1,\"50\":1},\"1\":{\"36\":1,\"39\":1,\"42\":5,\"43\":2,\"50\":10,\"57\":2}}],[\"pointing\",{\"1\":{\"432\":1,\"1753\":1}}],[\"points\",{\"1\":{\"155\":1,\"447\":1,\"1728\":1}}],[\"pointer\",{\"1\":{\"111\":1,\"341\":1}}],[\"point\",{\"0\":{\"1428\":1,\"1436\":1,\"1619\":1},\"1\":{\"28\":3,\"50\":1,\"183\":1,\"208\":1,\"340\":1,\"347\":1,\"417\":1,\"432\":1,\"755\":1,\"956\":1,\"999\":1,\"1058\":1,\"1082\":1,\"1096\":2,\"1107\":1,\"1108\":1,\"1153\":1,\"1219\":1,\"1428\":1,\"1436\":1,\"1603\":3,\"1607\":1,\"1619\":1,\"1620\":1,\"1622\":1,\"1626\":1,\"1634\":1,\"1636\":1,\"1676\":1,\"1677\":1,\"1688\":1}}],[\"pose\",{\"1\":{\"1000\":1,\"1059\":1,\"1220\":1}}],[\"positive\",{\"1\":{\"1634\":2}}],[\"position\",{\"1\":{\"162\":1,\"1153\":1}}],[\"positions\",{\"1\":{\"147\":1,\"1179\":1}}],[\"posix\",{\"0\":{\"657\":1,\"711\":1,\"1372\":1,\"1581\":1},\"1\":{\"3\":1,\"24\":1,\"50\":3,\"52\":2,\"105\":1,\"198\":2,\"208\":1,\"214\":2,\"237\":1,\"387\":1,\"472\":1,\"474\":1,\"544\":1,\"695\":1,\"716\":1,\"717\":1,\"720\":1,\"722\":1,\"727\":1,\"730\":2,\"733\":1,\"837\":1,\"843\":1,\"897\":1,\"999\":1,\"1043\":7,\"1058\":1,\"1219\":1,\"1366\":1,\"1451\":1,\"1502\":1,\"1509\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1591\":1,\"1719\":1,\"1727\":1,\"1748\":1,\"1779\":1,\"1789\":1}}],[\"possibly\",{\"1\":{\"117\":1,\"1654\":1}}],[\"possible\",{\"1\":{\"99\":2,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"462\":1,\"596\":1,\"779\":1,\"882\":1,\"1029\":1,\"1096\":1,\"1400\":1}}],[\"postblock\",{\"1\":{\"1285\":1}}],[\"postalcode\",{\"1\":{\"1226\":2,\"1639\":1}}],[\"post\",{\"0\":{\"1062\":1,\"1068\":1},\"1\":{\"15\":2,\"26\":2,\"33\":1,\"36\":1,\"54\":1,\"113\":2,\"162\":1,\"166\":1,\"515\":1,\"530\":2,\"635\":2,\"641\":2,\"809\":2,\"816\":2,\"1022\":1,\"1024\":2,\"1062\":1,\"1063\":1,\"1064\":2,\"1065\":1,\"1067\":1,\"1068\":2,\"1069\":2,\"1102\":1,\"1103\":2}}],[\"eight\",{\"1\":{\"1807\":2}}],[\"either\",{\"1\":{\"10\":1,\"111\":1,\"232\":1,\"238\":1,\"439\":1,\"440\":1,\"471\":1,\"605\":1,\"620\":1,\"631\":1,\"637\":1,\"661\":1,\"779\":1,\"780\":2,\"795\":1,\"859\":1,\"905\":1,\"924\":2,\"1113\":1,\"1123\":1,\"1154\":2,\"1155\":1,\"1190\":1,\"1209\":1,\"1244\":1,\"1372\":1,\"1742\":1,\"1781\":1,\"1798\":1,\"1805\":1,\"1808\":1}}],[\"eot\",{\"1\":{\"1701\":1}}],[\"eof\",{\"1\":{\"182\":1,\"1377\":1,\"1701\":1,\"1811\":1}}],[\"ec2\",{\"1\":{\"1629\":1}}],[\"echo=after\",{\"1\":{\"1378\":1}}],[\"echo\",{\"1\":{\"38\":4,\"40\":2,\"41\":2,\"52\":6,\"56\":4,\"60\":2,\"93\":1,\"115\":5,\"217\":1,\"218\":1,\"223\":2,\"224\":1,\"461\":1,\"562\":1,\"575\":2,\"739\":1,\"741\":1,\"742\":1,\"1006\":1,\"1048\":2,\"1049\":1,\"1051\":1,\"1378\":3,\"1400\":1,\"1421\":1,\"1505\":1,\"1522\":1,\"1539\":1,\"1566\":2,\"1592\":1,\"1772\":19,\"1807\":2}}],[\"epoch\",{\"1\":{\"562\":1}}],[\"edit\",{\"1\":{\"1712\":1,\"1737\":1}}],[\"editor\",{\"1\":{\"1297\":1,\"1804\":1,\"1805\":1,\"1806\":2}}],[\"editors\",{\"1\":{\"1245\":1}}],[\"editing\",{\"0\":{\"1801\":1,\"1806\":1},\"1\":{\"440\":1,\"1716\":1,\"1795\":2,\"1801\":1,\"1804\":1}}],[\"ed\",{\"1\":{\"129\":1,\"135\":1}}],[\"edge\",{\"1\":{\"90\":1,\"113\":1,\"115\":1,\"653\":1,\"1021\":1,\"1628\":1,\"1666\":1,\"1690\":1,\"1696\":1}}],[\"et\",{\"1\":{\"95\":1,\"107\":1,\"108\":1,\"113\":1,\"121\":1,\"139\":1,\"162\":1,\"1161\":1,\"1416\":1,\"1424\":1,\"1564\":1,\"1708\":1,\"1720\":1,\"1752\":1}}],[\"etc\",{\"1\":{\"2\":1,\"3\":4,\"90\":1,\"111\":1,\"113\":2,\"115\":1,\"119\":1,\"121\":1,\"139\":1,\"181\":1,\"252\":1,\"354\":1,\"361\":1,\"371\":1,\"377\":1,\"485\":1,\"506\":1,\"532\":1,\"596\":1,\"692\":1,\"695\":2,\"743\":1,\"756\":1,\"780\":1,\"781\":1,\"1016\":1,\"1139\":1,\"1169\":1,\"1170\":1,\"1209\":2,\"1224\":1,\"1401\":1,\"1422\":1,\"1432\":1,\"1439\":1,\"1535\":1,\"1536\":1,\"1540\":1,\"1628\":1,\"1641\":1,\"1713\":1,\"1735\":1,\"1738\":1,\"1752\":2,\"1753\":1}}],[\"effort\",{\"1\":{\"433\":1}}],[\"efficient\",{\"1\":{\"216\":1}}],[\"efficiently\",{\"1\":{\"43\":1}}],[\"effects\",{\"1\":{\"1701\":1}}],[\"effect\",{\"1\":{\"103\":1,\"1554\":1,\"1559\":1,\"1561\":1,\"1564\":1,\"1629\":1}}],[\"effectively\",{\"1\":{\"304\":1,\"354\":1,\"361\":1,\"984\":1,\"1237\":1,\"1808\":1}}],[\"effective\",{\"1\":{\"59\":1,\"1574\":1}}],[\"e\",{\"1\":{\"59\":1,\"121\":1,\"398\":2,\"695\":2,\"865\":1,\"1116\":1,\"1321\":1,\"1403\":1,\"1434\":1,\"1448\":1,\"1647\":1,\"1664\":1,\"1805\":2}}],[\"elapsed\",{\"1\":{\"645\":1}}],[\"elivate\",{\"1\":{\"455\":1}}],[\"elfish\",{\"1\":{\"53\":1}}],[\"elses\",{\"1\":{\"1733\":1}}],[\"elsewhere\",{\"1\":{\"1708\":1}}],[\"else\",{\"1\":{\"52\":3,\"115\":2,\"246\":2,\"247\":1,\"333\":1,\"340\":7,\"347\":5,\"603\":3,\"695\":1,\"853\":1,\"854\":1,\"857\":1,\"858\":1,\"1249\":1,\"1778\":1}}],[\"elementlookup\",{\"1\":{\"340\":1}}],[\"elements\",{\"0\":{\"869\":1,\"1131\":1,\"1132\":1},\"1\":{\"30\":1,\"40\":1,\"90\":2,\"92\":1,\"265\":1,\"273\":1,\"286\":1,\"293\":1,\"300\":1,\"313\":1,\"320\":1,\"335\":1,\"342\":1,\"349\":1,\"541\":1,\"546\":1,\"758\":1,\"863\":1,\"865\":2,\"868\":2,\"882\":2,\"1132\":2,\"1134\":3,\"1387\":1,\"1400\":1,\"1520\":1,\"1538\":1,\"1631\":1,\"1644\":1,\"1645\":1,\"1772\":4}}],[\"element\",{\"0\":{\"590\":1,\"595\":1},\"1\":{\"15\":3,\"26\":3,\"30\":5,\"41\":1,\"61\":3,\"92\":1,\"103\":1,\"111\":1,\"117\":1,\"118\":3,\"122\":1,\"265\":5,\"266\":1,\"267\":1,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"278\":1,\"279\":1,\"286\":8,\"292\":1,\"293\":3,\"300\":8,\"307\":1,\"308\":1,\"313\":2,\"319\":1,\"320\":5,\"327\":1,\"328\":4,\"334\":1,\"335\":5,\"336\":1,\"342\":5,\"343\":1,\"348\":1,\"349\":5,\"369\":1,\"378\":3,\"383\":3,\"404\":3,\"419\":4,\"457\":1,\"530\":3,\"548\":3,\"590\":1,\"591\":4,\"592\":2,\"593\":1,\"596\":2,\"597\":1,\"598\":1,\"599\":1,\"611\":3,\"629\":1,\"747\":1,\"749\":3,\"755\":1,\"758\":3,\"766\":1,\"809\":3,\"831\":3,\"862\":1,\"863\":1,\"864\":3,\"865\":1,\"869\":1,\"871\":2,\"877\":3,\"882\":2,\"884\":3,\"898\":3,\"917\":3,\"940\":3,\"960\":3,\"1070\":3,\"1072\":1,\"1084\":3,\"1118\":3,\"1182\":1,\"1207\":3,\"1228\":3,\"1230\":1,\"1262\":3,\"1268\":3,\"1274\":3,\"1281\":3,\"1400\":2,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1505\":1,\"1592\":1,\"1612\":4,\"1617\":4,\"1618\":3,\"1625\":4,\"1626\":3,\"1631\":1,\"1632\":5,\"1636\":3,\"1644\":1,\"1645\":6,\"1656\":1,\"1657\":5,\"1669\":1,\"1670\":5,\"1675\":3,\"1679\":3,\"1683\":5,\"1687\":5,\"1688\":3,\"1694\":5,\"1698\":2,\"1699\":5,\"1714\":2,\"1772\":6,\"1774\":3}}],[\"eqdc10\",{\"1\":{\"1691\":2}}],[\"eq\",{\"1\":{\"52\":1,\"1772\":1}}],[\"equivelent\",{\"1\":{\"1556\":1}}],[\"equivalent\",{\"1\":{\"3\":1,\"23\":1,\"41\":1,\"50\":1,\"54\":1,\"124\":1,\"220\":1,\"232\":1,\"249\":1,\"423\":1,\"981\":1,\"1742\":1,\"1772\":1,\"1789\":1,\"1814\":1}}],[\"equatable\",{\"1\":{\"1651\":1,\"1661\":1}}],[\"equations\",{\"1\":{\"1035\":1}}],[\"equal\",{\"1\":{\"1278\":1,\"1341\":1,\"1602\":1,\"1706\":1}}],[\"equally\",{\"1\":{\"47\":1,\"1638\":1}}],[\"emergency\",{\"1\":{\"1808\":1}}],[\"emendable\",{\"1\":{\"237\":1}}],[\"emit\",{\"1\":{\"1647\":1,\"1664\":1}}],[\"emitted\",{\"1\":{\"108\":1}}],[\"embed\",{\"1\":{\"1520\":1,\"1672\":1,\"1701\":1}}],[\"embedded\",{\"1\":{\"375\":1,\"1404\":1,\"1647\":1,\"1664\":1,\"1672\":1}}],[\"emacs\",{\"1\":{\"1245\":2,\"1802\":2}}],[\"empty\",{\"1\":{\"123\":1,\"147\":1,\"182\":1,\"882\":2,\"1116\":1,\"1713\":1,\"1738\":1,\"1750\":1,\"1800\":1,\"1811\":1}}],[\"emphasis\",{\"1\":{\"52\":1}}],[\"emulators\",{\"1\":{\"202\":1}}],[\"emulator\",{\"1\":{\"3\":2,\"115\":1}}],[\"english\",{\"1\":{\"566\":1}}],[\"engine\",{\"1\":{\"433\":3,\"1188\":1}}],[\"enabling\",{\"0\":{\"1704\":1},\"1\":{\"462\":1,\"522\":1,\"576\":1}}],[\"enable|\",{\"1\":{\"1284\":1}}],[\"enables\",{\"1\":{\"90\":1,\"808\":1,\"815\":1,\"979\":1,\"1069\":1,\"1287\":1,\"1601\":1}}],[\"enabled|disabled\",{\"1\":{\"981\":1}}],[\"enabledconfig\",{\"1\":{\"176\":1}}],[\"enabled\",{\"0\":{\"981\":1},\"1\":{\"86\":2,\"95\":1,\"113\":1,\"115\":1,\"119\":1,\"121\":4,\"123\":5,\"403\":1,\"436\":2,\"449\":1,\"452\":1,\"462\":1,\"575\":1,\"979\":3,\"981\":1,\"1180\":1,\"1261\":1,\"1278\":1,\"1284\":1,\"1488\":1,\"1691\":1,\"1704\":1,\"1716\":3,\"1726\":2,\"1783\":1,\"1786\":1,\"1787\":4,\"1797\":1,\"1798\":1}}],[\"enable\",{\"0\":{\"1787\":1},\"1\":{\"23\":1,\"71\":2,\"87\":1,\"90\":1,\"94\":1,\"95\":1,\"108\":2,\"123\":2,\"210\":1,\"434\":1,\"440\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"455\":1,\"459\":1,\"462\":1,\"508\":1,\"573\":1,\"575\":1,\"576\":1,\"978\":3,\"979\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1284\":2,\"1717\":1,\"1722\":1,\"1727\":1,\"1783\":1,\"1787\":1,\"1797\":1,\"1798\":1,\"1814\":1}}],[\"en\",{\"0\":{\"1793\":1},\"1\":{\"202\":1,\"1793\":3}}],[\"enclose\",{\"1\":{\"228\":1}}],[\"encouraging\",{\"1\":{\"459\":1}}],[\"encounter\",{\"1\":{\"199\":1}}],[\"encoding\",{\"1\":{\"50\":2,\"261\":1,\"304\":1,\"1300\":1}}],[\"encodetostring\",{\"1\":{\"1300\":1}}],[\"encoded\",{\"1\":{\"1300\":1}}],[\"encode\",{\"1\":{\"15\":2,\"16\":1,\"26\":2,\"27\":1,\"624\":2,\"629\":2,\"630\":1,\"635\":1,\"636\":1,\"641\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1460\":1,\"1463\":2,\"1469\":3,\"1474\":3}}],[\"encapsulating\",{\"1\":{\"606\":1,\"743\":1,\"756\":1,\"906\":1,\"1641\":1}}],[\"encapsulation\",{\"1\":{\"127\":1}}],[\"encapsulate\",{\"1\":{\"237\":1}}],[\"encapsulated\",{\"1\":{\"135\":1,\"163\":1,\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"ensures\",{\"1\":{\"337\":1,\"344\":1}}],[\"ensure\",{\"1\":{\"111\":1,\"208\":1,\"447\":1,\"882\":1,\"1728\":2}}],[\"enough\",{\"1\":{\"111\":1,\"566\":1,\"1300\":1,\"1788\":1}}],[\"env\",{\"1\":{\"99\":1,\"423\":1,\"676\":3,\"681\":3,\"827\":3,\"914\":3,\"1203\":3}}],[\"environment\",{\"1\":{\"47\":1,\"50\":1,\"95\":1,\"1728\":1}}],[\"environments\",{\"1\":{\"33\":1,\"36\":1,\"43\":1,\"54\":1}}],[\"environmental\",{\"0\":{\"226\":1,\"681\":1,\"827\":1,\"914\":1,\"1203\":1},\"1\":{\"15\":1,\"26\":1,\"71\":1,\"99\":1,\"123\":1,\"151\":1,\"207\":1,\"226\":3,\"391\":1,\"393\":1,\"507\":1,\"511\":1,\"611\":1,\"670\":1,\"671\":1,\"676\":2,\"677\":1,\"678\":2,\"680\":1,\"681\":2,\"710\":1,\"785\":1,\"787\":1,\"823\":1,\"824\":2,\"826\":1,\"827\":2,\"831\":1,\"910\":1,\"911\":2,\"913\":1,\"914\":2,\"917\":1,\"1097\":1,\"1098\":1,\"1176\":2,\"1182\":1,\"1199\":1,\"1200\":2,\"1202\":1,\"1203\":2,\"1207\":1,\"1750\":2,\"1753\":1,\"1754\":1,\"1766\":1,\"1772\":1,\"1773\":1,\"1806\":1}}],[\"enjoy\",{\"1\":{\"48\":1}}],[\"enforced\",{\"1\":{\"47\":1}}],[\"entries\",{\"1\":{\"1260\":1}}],[\"entry\",{\"1\":{\"545\":2}}],[\"entire\",{\"1\":{\"119\":2,\"162\":1,\"270\":1,\"277\":1,\"304\":2,\"347\":1,\"387\":1,\"447\":1,\"597\":1,\"859\":1,\"972\":1,\"1321\":1,\"1488\":1,\"1611\":2,\"1654\":1,\"1777\":1,\"1778\":1}}],[\"entirely\",{\"1\":{\"47\":1,\"208\":1,\"437\":1,\"440\":1,\"1747\":1}}],[\"entered\",{\"1\":{\"438\":1,\"741\":1,\"783\":1,\"1093\":1}}],[\"enter\",{\"1\":{\"115\":1,\"423\":1,\"781\":1,\"782\":1,\"783\":2,\"1378\":1,\"1797\":1,\"1798\":1}}],[\"entering\",{\"1\":{\"47\":1}}],[\"enhancements\",{\"1\":{\"1672\":1}}],[\"enhance\",{\"1\":{\"43\":1}}],[\"endpoint\",{\"1\":{\"232\":1,\"999\":1,\"1058\":1,\"1219\":1}}],[\"endpoints\",{\"1\":{\"90\":1,\"999\":1,\"1016\":1,\"1058\":1,\"1219\":1}}],[\"ending\",{\"1\":{\"115\":1}}],[\"ends\",{\"1\":{\"108\":1}}],[\"ended\",{\"1\":{\"47\":1,\"59\":1,\"113\":1,\"487\":1,\"488\":1,\"535\":1}}],[\"end\",{\"0\":{\"1811\":1},\"1\":{\"15\":1,\"26\":1,\"40\":1,\"50\":1,\"52\":1,\"57\":1,\"103\":1,\"107\":1,\"108\":1,\"122\":1,\"134\":1,\"162\":1,\"223\":1,\"252\":1,\"369\":1,\"372\":8,\"383\":1,\"404\":1,\"413\":1,\"414\":1,\"530\":1,\"548\":1,\"743\":1,\"755\":1,\"756\":1,\"780\":3,\"874\":6,\"884\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1084\":1,\"1113\":1,\"1114\":1,\"1116\":1,\"1118\":1,\"1137\":1,\"1262\":1,\"1268\":1,\"1271\":6,\"1321\":1,\"1401\":2,\"1403\":1,\"1408\":8,\"1413\":8,\"1416\":2,\"1425\":8,\"1432\":2,\"1433\":8,\"1441\":8,\"1448\":1,\"1505\":1,\"1542\":1,\"1592\":1,\"1641\":1,\"1701\":2,\"1760\":1,\"1778\":1,\"1794\":1,\"1795\":1,\"1802\":3,\"1805\":5,\"1808\":1,\"1811\":1}}],[\"esc\",{\"1\":{\"147\":1,\"162\":1,\"1701\":1,\"1716\":2,\"1797\":1,\"1798\":1,\"1800\":1,\"1804\":1,\"1812\":1}}],[\"escurl\",{\"0\":{\"636\":1},\"1\":{\"15\":1,\"26\":1,\"624\":1,\"629\":1,\"635\":1,\"637\":1,\"638\":4,\"639\":2,\"640\":2,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"eschtml\",{\"0\":{\"630\":1},\"1\":{\"15\":1,\"26\":1,\"624\":1,\"629\":1,\"631\":2,\"632\":4,\"633\":2,\"634\":2,\"637\":1,\"641\":1,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"esccli\",{\"0\":{\"625\":1},\"1\":{\"15\":1,\"26\":1,\"624\":1,\"626\":1,\"627\":2,\"628\":2,\"635\":1,\"641\":1,\"1175\":1,\"1285\":1,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"escaped\",{\"1\":{\"108\":1,\"111\":1,\"596\":2,\"620\":2,\"631\":2,\"637\":2}}],[\"escapes\",{\"1\":{\"15\":1,\"26\":1,\"624\":1,\"625\":1,\"626\":1,\"635\":1,\"641\":1,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"escape\",{\"0\":{\"619\":1,\"1704\":1,\"1786\":1},\"1\":{\"15\":2,\"23\":1,\"26\":2,\"108\":1,\"110\":1,\"129\":1,\"255\":1,\"395\":1,\"402\":1,\"441\":2,\"480\":2,\"483\":1,\"488\":1,\"535\":1,\"596\":1,\"618\":1,\"619\":1,\"620\":2,\"621\":6,\"622\":2,\"623\":2,\"629\":2,\"632\":2,\"633\":1,\"635\":2,\"638\":2,\"639\":1,\"641\":2,\"683\":1,\"743\":1,\"756\":1,\"780\":2,\"801\":1,\"829\":1,\"916\":1,\"1052\":1,\"1205\":1,\"1307\":1,\"1463\":2,\"1469\":2,\"1474\":2,\"1509\":1,\"1513\":1,\"1547\":1,\"1641\":1,\"1700\":2,\"1701\":2,\"1709\":1,\"1727\":1,\"1786\":1,\"1794\":1}}],[\"escaping\",{\"1\":{\"3\":2,\"50\":1,\"441\":3,\"596\":1,\"1513\":2}}],[\"err>\",{\"1\":{\"1742\":1}}],[\"errunmatched\",{\"1\":{\"347\":3}}],[\"errmixandmatch\",{\"1\":{\"347\":11}}],[\"errorf\",{\"1\":{\"269\":1,\"276\":1,\"347\":1,\"361\":2}}],[\"erroring\",{\"1\":{\"117\":1,\"121\":1}}],[\"error\",{\"0\":{\"869\":1,\"1793\":1},\"1\":{\"15\":1,\"26\":1,\"75\":1,\"80\":1,\"94\":1,\"95\":1,\"99\":1,\"103\":2,\"106\":1,\"107\":1,\"108\":1,\"115\":1,\"119\":2,\"120\":1,\"121\":1,\"127\":1,\"129\":1,\"142\":2,\"155\":1,\"159\":2,\"168\":1,\"182\":1,\"224\":2,\"232\":1,\"259\":1,\"261\":1,\"269\":3,\"270\":2,\"276\":3,\"277\":2,\"283\":2,\"290\":2,\"297\":2,\"302\":1,\"304\":2,\"309\":3,\"311\":4,\"312\":4,\"316\":2,\"318\":13,\"319\":2,\"324\":2,\"326\":13,\"327\":2,\"331\":2,\"333\":16,\"334\":2,\"338\":2,\"340\":7,\"341\":1,\"345\":2,\"347\":9,\"348\":1,\"353\":1,\"354\":2,\"360\":1,\"361\":5,\"412\":1,\"417\":1,\"421\":1,\"423\":3,\"488\":2,\"499\":1,\"502\":1,\"535\":2,\"616\":1,\"679\":1,\"782\":2,\"783\":1,\"794\":1,\"825\":1,\"861\":1,\"869\":2,\"912\":1,\"929\":1,\"1039\":1,\"1082\":1,\"1163\":1,\"1171\":1,\"1189\":1,\"1201\":1,\"1255\":1,\"1300\":1,\"1325\":1,\"1326\":1,\"1350\":1,\"1554\":2,\"1555\":2,\"1557\":1,\"1559\":2,\"1560\":2,\"1561\":1,\"1562\":1,\"1745\":1,\"1774\":1,\"1779\":1,\"1793\":2}}],[\"errors\",{\"1\":{\"15\":1,\"26\":1,\"77\":1,\"94\":1,\"99\":2,\"115\":1,\"120\":1,\"121\":2,\"142\":1,\"147\":1,\"163\":2,\"340\":9,\"347\":4,\"354\":3,\"361\":3,\"412\":1,\"423\":1,\"499\":1,\"500\":1,\"502\":1,\"743\":1,\"756\":1,\"861\":1,\"1022\":1,\"1039\":1,\"1166\":1,\"1171\":1,\"1179\":1,\"1255\":1,\"1294\":1,\"1320\":1,\"1331\":1,\"1557\":1,\"1562\":1,\"1641\":1,\"1722\":1,\"1747\":1,\"1772\":1,\"1774\":1,\"1779\":1,\"1783\":1}}],[\"err\",{\"0\":{\"612\":1},\"1\":{\"15\":1,\"26\":1,\"111\":1,\"232\":2,\"252\":1,\"260\":1,\"269\":5,\"276\":5,\"283\":6,\"297\":6,\"303\":1,\"304\":5,\"311\":4,\"312\":5,\"318\":18,\"326\":18,\"333\":18,\"338\":6,\"340\":41,\"345\":3,\"347\":20,\"352\":1,\"353\":5,\"354\":4,\"359\":1,\"360\":5,\"361\":10,\"423\":2,\"483\":1,\"487\":1,\"575\":1,\"614\":1,\"615\":1,\"616\":2,\"617\":1,\"975\":1,\"1052\":1,\"1126\":1,\"1178\":7,\"1245\":1,\"1300\":11,\"1307\":1,\"1313\":1,\"1345\":1,\"1547\":1,\"1555\":1,\"1556\":1,\"1557\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1571\":1,\"1572\":1,\"1575\":2,\"1576\":1,\"1583\":1,\"1584\":1,\"1674\":2,\"1705\":1,\"1772\":1}}],[\"evolve\",{\"1\":{\"1276\":1}}],[\"evolution\",{\"1\":{\"48\":1}}],[\"eval\",{\"0\":{\"215\":1},\"1\":{\"121\":1,\"440\":1,\"512\":1,\"513\":2,\"528\":1,\"1209\":1,\"1790\":2}}],[\"evaluates\",{\"1\":{\"601\":1,\"900\":1}}],[\"evaluate\",{\"1\":{\"15\":2,\"26\":2,\"96\":1,\"112\":1,\"393\":1,\"600\":1,\"611\":1,\"685\":2,\"690\":2,\"745\":1,\"787\":1,\"831\":2,\"899\":1,\"917\":1,\"1098\":1,\"1111\":1,\"1182\":1,\"1207\":2,\"1255\":1,\"1345\":1,\"1594\":1,\"1771\":1,\"1782\":1}}],[\"evaluation\",{\"0\":{\"600\":1},\"1\":{\"15\":1,\"26\":1,\"217\":1,\"602\":2,\"685\":1,\"690\":1,\"831\":1,\"917\":1,\"1207\":1}}],[\"ever\",{\"1\":{\"95\":1,\"109\":1,\"545\":1,\"1300\":1}}],[\"everywhere\",{\"1\":{\"117\":1}}],[\"everyone\",{\"1\":{\"47\":1,\"211\":1}}],[\"everything\",{\"0\":{\"1429\":1,\"1437\":1},\"1\":{\"39\":2,\"50\":1,\"57\":2,\"119\":1,\"237\":1,\"597\":1,\"942\":1,\"943\":1,\"944\":1,\"1654\":1,\"1747\":1}}],[\"every\",{\"1\":{\"3\":1,\"15\":4,\"26\":4,\"95\":1,\"108\":1,\"129\":1,\"376\":1,\"410\":1,\"448\":1,\"743\":1,\"756\":1,\"758\":1,\"885\":1,\"891\":3,\"943\":1,\"947\":2,\"967\":2,\"1037\":1,\"1071\":1,\"1077\":3,\"1137\":2,\"1144\":1,\"1150\":3,\"1167\":2,\"1175\":1,\"1229\":1,\"1235\":3,\"1327\":1,\"1390\":1,\"1405\":1,\"1641\":1,\"1710\":1,\"1735\":1,\"1778\":1}}],[\"eventually\",{\"1\":{\"51\":1,\"76\":1,\"117\":2,\"1654\":1}}],[\"events\",{\"0\":{\"29\":1,\"647\":1,\"649\":1,\"1346\":1,\"1361\":1,\"1374\":1,\"1389\":1,\"1815\":1},\"1\":{\"21\":1,\"29\":2,\"115\":1,\"166\":1,\"167\":1,\"647\":2,\"649\":1,\"679\":1,\"825\":1,\"865\":1,\"912\":1,\"1169\":1,\"1170\":1,\"1175\":1,\"1176\":2,\"1201\":1,\"1347\":1,\"1360\":1,\"1362\":1,\"1368\":1,\"1374\":1,\"1375\":1,\"1386\":1,\"1387\":2,\"1389\":1,\"1390\":1,\"1713\":1,\"1738\":1,\"1781\":1}}],[\"event\",{\"0\":{\"642\":1},\"1\":{\"15\":2,\"26\":2,\"29\":1,\"115\":4,\"116\":2,\"123\":1,\"166\":1,\"169\":2,\"183\":3,\"530\":2,\"642\":1,\"643\":13,\"644\":4,\"645\":4,\"647\":1,\"648\":1,\"649\":2,\"650\":2,\"713\":2,\"781\":1,\"1171\":2,\"1176\":1,\"1182\":2,\"1346\":1,\"1347\":2,\"1348\":2,\"1349\":1,\"1350\":4,\"1353\":1,\"1354\":1,\"1356\":2,\"1357\":2,\"1360\":2,\"1364\":1,\"1365\":1,\"1366\":1,\"1367\":2,\"1369\":2,\"1372\":2,\"1373\":2,\"1376\":2,\"1378\":4,\"1382\":1,\"1383\":1,\"1386\":2,\"1387\":2,\"1388\":3,\"1391\":2,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":2,\"1710\":1,\"1735\":1,\"1782\":2}}],[\"even\",{\"1\":{\"10\":1,\"37\":1,\"47\":1,\"60\":1,\"70\":1,\"111\":1,\"117\":1,\"125\":1,\"139\":1,\"142\":1,\"264\":1,\"354\":1,\"361\":1,\"437\":1,\"444\":1,\"596\":1,\"597\":1,\"682\":1,\"732\":1,\"743\":2,\"756\":2,\"760\":1,\"762\":1,\"828\":1,\"859\":1,\"875\":1,\"915\":1,\"1204\":1,\"1244\":1,\"1252\":1,\"1272\":1,\"1429\":1,\"1437\":1,\"1513\":2,\"1641\":2,\"1654\":1,\"1710\":2,\"1712\":1,\"1724\":1,\"1737\":1,\"1744\":1,\"1747\":1,\"1799\":1}}],[\"earth\",{\"1\":{\"1285\":1,\"1571\":5,\"1575\":5,\"1583\":5}}],[\"earworm\",{\"1\":{\"59\":1}}],[\"early\",{\"0\":{\"1489\":1},\"1\":{\"46\":2,\"782\":1,\"1489\":1}}],[\"earlier\",{\"1\":{\"41\":1,\"50\":1}}],[\"eat\",{\"1\":{\"57\":1}}],[\"easier\",{\"1\":{\"57\":1,\"70\":1,\"75\":1,\"108\":1,\"109\":1,\"111\":1,\"119\":1,\"125\":1,\"138\":1,\"142\":1,\"181\":2,\"270\":1,\"277\":1,\"808\":1,\"977\":1,\"1067\":1,\"1729\":1,\"1732\":1}}],[\"easiest\",{\"1\":{\"40\":1,\"445\":1,\"1731\":1}}],[\"easily\",{\"1\":{\"3\":1,\"90\":1,\"108\":1,\"121\":1,\"248\":1,\"1000\":1,\"1059\":1,\"1220\":1}}],[\"easy\",{\"0\":{\"19\":1},\"1\":{\"33\":1,\"36\":1,\"37\":1,\"39\":1,\"43\":1,\"54\":1,\"57\":1,\"60\":1,\"207\":1,\"447\":1,\"1728\":4,\"1734\":1,\"1793\":1}}],[\"each\",{\"1\":{\"13\":1,\"15\":1,\"26\":1,\"38\":5,\"56\":5,\"59\":1,\"61\":1,\"90\":1,\"94\":1,\"95\":2,\"113\":1,\"119\":1,\"120\":1,\"219\":1,\"271\":1,\"278\":1,\"319\":1,\"327\":1,\"334\":1,\"348\":1,\"375\":1,\"377\":1,\"412\":1,\"434\":1,\"438\":1,\"439\":2,\"502\":1,\"643\":5,\"730\":1,\"741\":1,\"742\":1,\"743\":1,\"747\":1,\"756\":1,\"760\":1,\"780\":1,\"861\":1,\"882\":1,\"977\":1,\"992\":1,\"1039\":1,\"1072\":1,\"1171\":1,\"1224\":1,\"1230\":1,\"1249\":1,\"1255\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1400\":2,\"1404\":1,\"1454\":1,\"1484\":1,\"1505\":1,\"1535\":1,\"1545\":1,\"1557\":1,\"1562\":1,\"1592\":1,\"1611\":2,\"1617\":3,\"1625\":3,\"1641\":1,\"1647\":2,\"1664\":2,\"1683\":5,\"1687\":4,\"1702\":1,\"1706\":1,\"1708\":1,\"1729\":1,\"1746\":1,\"1747\":1,\"1774\":1,\"1778\":1,\"1779\":1}}],[\"egrep\",{\"1\":{\"121\":2}}],[\"eg\",{\"1\":{\"3\":2,\"14\":1,\"15\":3,\"26\":3,\"30\":2,\"61\":1,\"90\":2,\"93\":3,\"94\":3,\"95\":1,\"104\":1,\"108\":2,\"111\":5,\"113\":1,\"115\":7,\"121\":5,\"127\":6,\"135\":1,\"139\":1,\"151\":1,\"163\":1,\"181\":1,\"182\":1,\"208\":1,\"225\":1,\"238\":1,\"252\":1,\"258\":1,\"259\":1,\"260\":1,\"263\":1,\"265\":2,\"271\":1,\"278\":2,\"292\":3,\"303\":1,\"306\":2,\"309\":1,\"319\":1,\"327\":1,\"334\":1,\"350\":1,\"356\":1,\"363\":2,\"372\":2,\"377\":1,\"393\":1,\"402\":1,\"432\":1,\"440\":2,\"441\":1,\"442\":2,\"445\":1,\"463\":3,\"480\":1,\"485\":1,\"515\":1,\"517\":1,\"523\":1,\"526\":1,\"528\":1,\"532\":1,\"544\":2,\"576\":1,\"596\":1,\"607\":1,\"648\":1,\"653\":1,\"656\":1,\"679\":1,\"681\":1,\"691\":1,\"692\":2,\"694\":1,\"697\":2,\"722\":1,\"727\":1,\"733\":2,\"742\":1,\"754\":1,\"755\":1,\"765\":1,\"771\":1,\"787\":1,\"788\":1,\"794\":1,\"797\":2,\"808\":1,\"814\":1,\"825\":1,\"827\":1,\"837\":1,\"843\":1,\"851\":1,\"891\":1,\"897\":2,\"904\":1,\"907\":1,\"912\":1,\"914\":1,\"926\":2,\"929\":1,\"942\":1,\"956\":1,\"965\":1,\"979\":1,\"995\":1,\"1016\":2,\"1021\":1,\"1043\":1,\"1067\":1,\"1077\":1,\"1098\":1,\"1139\":1,\"1150\":1,\"1161\":1,\"1175\":1,\"1176\":2,\"1179\":1,\"1183\":1,\"1188\":1,\"1189\":1,\"1192\":2,\"1201\":1,\"1203\":1,\"1209\":2,\"1218\":1,\"1224\":1,\"1235\":1,\"1278\":3,\"1300\":1,\"1321\":1,\"1329\":1,\"1343\":1,\"1356\":1,\"1357\":1,\"1386\":1,\"1387\":1,\"1392\":1,\"1403\":1,\"1408\":2,\"1413\":2,\"1416\":2,\"1421\":1,\"1422\":1,\"1425\":2,\"1433\":2,\"1439\":1,\"1441\":2,\"1448\":1,\"1455\":1,\"1505\":1,\"1535\":1,\"1536\":1,\"1540\":1,\"1546\":1,\"1549\":1,\"1586\":1,\"1592\":1,\"1607\":1,\"1612\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1632\":1,\"1634\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1700\":1,\"1708\":3,\"1744\":1,\"1750\":2,\"1753\":1,\"1772\":19,\"1773\":2,\"1776\":2,\"1778\":1,\"1789\":1,\"1791\":1,\"1798\":3,\"1805\":1}}],[\"exotic\",{\"1\":{\"1614\":1}}],[\"exhibit\",{\"1\":{\"252\":1,\"487\":1}}],[\"extremely\",{\"1\":{\"1513\":1}}],[\"extra\",{\"1\":{\"60\":1,\"90\":1,\"1359\":1,\"1385\":1}}],[\"ext\",{\"1\":{\"1300\":5}}],[\"extendability\",{\"0\":{\"1732\":1}}],[\"extend\",{\"1\":{\"51\":1,\"1728\":1}}],[\"extended\",{\"1\":{\"46\":1,\"47\":1,\"210\":1,\"1728\":1}}],[\"extensions\",{\"0\":{\"1020\":1},\"1\":{\"113\":2,\"115\":1,\"441\":1,\"1020\":3,\"1297\":1,\"1728\":1}}],[\"extension\",{\"1\":{\"46\":1,\"227\":1,\"1016\":1,\"1020\":1,\"1297\":1,\"1298\":1,\"1616\":1,\"1630\":3,\"1643\":1,\"1655\":6,\"1668\":6,\"1672\":1,\"1692\":1,\"1697\":2,\"1741\":1,\"1772\":1}}],[\"extensively\",{\"1\":{\"1\":1}}],[\"external\",{\"0\":{\"210\":1,\"244\":1},\"1\":{\"46\":1,\"86\":1,\"103\":3,\"210\":1,\"244\":2,\"391\":1,\"643\":1,\"656\":1,\"681\":2,\"682\":1,\"710\":1,\"722\":1,\"727\":1,\"730\":1,\"733\":1,\"785\":1,\"827\":2,\"828\":1,\"914\":2,\"915\":1,\"1097\":1,\"1203\":2,\"1204\":1,\"1461\":1,\"1578\":1,\"1624\":1,\"1628\":1,\"1629\":2,\"1690\":1,\"1696\":1}}],[\"exc\",{\"1\":{\"695\":1}}],[\"excluding\",{\"1\":{\"1132\":1}}],[\"exclude\",{\"0\":{\"868\":1},\"1\":{\"219\":1,\"694\":1,\"695\":1,\"794\":1,\"868\":1,\"1116\":1,\"1189\":1,\"1486\":1}}],[\"exclusion\",{\"1\":{\"121\":1}}],[\"excel\",{\"1\":{\"1487\":1}}],[\"excessively\",{\"1\":{\"376\":1,\"1405\":1}}],[\"excess\",{\"1\":{\"178\":1}}],[\"except\",{\"1\":{\"41\":1,\"95\":1,\"226\":1,\"243\":1,\"371\":1,\"439\":1,\"446\":1,\"607\":1,\"780\":2,\"865\":2,\"907\":1,\"942\":1,\"943\":1,\"944\":1,\"965\":1,\"1139\":1,\"1564\":1,\"1578\":1,\"1777\":1,\"1798\":1}}],[\"exceptions\",{\"1\":{\"163\":1,\"497\":1}}],[\"exception\",{\"1\":{\"15\":1,\"26\":1,\"123\":1,\"412\":1,\"496\":1,\"747\":1,\"861\":1,\"1039\":1,\"1171\":1,\"1255\":1,\"1325\":1,\"1331\":1}}],[\"exciting\",{\"1\":{\"53\":1}}],[\"excuse\",{\"1\":{\"47\":1,\"59\":1}}],[\"examining\",{\"1\":{\"1799\":1}}],[\"examplefunction\",{\"1\":{\"1674\":3}}],[\"example>\",{\"1\":{\"1285\":1}}],[\"example=60\",{\"1\":{\"1393\":1}}],[\"example=after\",{\"1\":{\"1378\":1,\"1387\":1}}],[\"example=\",{\"1\":{\"801\":1,\"1226\":1,\"1369\":1,\"1517\":1,\"1550\":1,\"1587\":1,\"1593\":1}}],[\"example=before\",{\"1\":{\"166\":1,\"1378\":1,\"1387\":1}}],[\"examplecommand\",{\"1\":{\"353\":1,\"360\":1}}],[\"examples\",{\"0\":{\"261\":1,\"269\":1,\"276\":1,\"283\":1,\"290\":1,\"297\":1,\"304\":1,\"311\":1,\"316\":1,\"324\":1,\"331\":1,\"338\":1,\"345\":1,\"353\":1,\"360\":1,\"367\":1,\"373\":1,\"382\":1,\"387\":1,\"397\":1,\"408\":1,\"416\":1,\"423\":1,\"461\":1,\"467\":1,\"473\":1,\"479\":1,\"487\":1,\"493\":1,\"499\":1,\"506\":1,\"513\":1,\"534\":1,\"540\":1,\"552\":1,\"557\":1,\"562\":1,\"575\":1,\"581\":1,\"588\":1,\"593\":1,\"603\":1,\"615\":1,\"622\":1,\"628\":1,\"633\":1,\"639\":1,\"645\":1,\"655\":1,\"663\":1,\"668\":1,\"673\":1,\"689\":1,\"694\":1,\"701\":1,\"707\":1,\"739\":1,\"749\":1,\"762\":1,\"770\":1,\"775\":1,\"791\":1,\"801\":1,\"806\":1,\"813\":1,\"820\":1,\"835\":1,\"841\":1,\"847\":1,\"858\":1,\"865\":1,\"875\":1,\"881\":1,\"888\":1,\"896\":1,\"902\":1,\"921\":1,\"926\":1,\"934\":1,\"939\":1,\"944\":1,\"951\":1,\"958\":1,\"964\":1,\"971\":1,\"991\":1,\"997\":1,\"1006\":1,\"1012\":1,\"1018\":1,\"1035\":1,\"1043\":1,\"1048\":1,\"1056\":1,\"1065\":1,\"1074\":1,\"1081\":1,\"1088\":1,\"1093\":1,\"1102\":1,\"1107\":1,\"1115\":1,\"1122\":1,\"1130\":1,\"1141\":1,\"1147\":1,\"1157\":1,\"1163\":1,\"1175\":1,\"1186\":1,\"1196\":1,\"1211\":1,\"1217\":1,\"1226\":1,\"1232\":1,\"1239\":1,\"1245\":1,\"1260\":1,\"1267\":1,\"1272\":1,\"1285\":1,\"1293\":1,\"1299\":1,\"1305\":1,\"1311\":1,\"1317\":1,\"1323\":1,\"1329\":1,\"1335\":1,\"1341\":1,\"1350\":1,\"1369\":1,\"1378\":1,\"1393\":1,\"1409\":1,\"1414\":1,\"1426\":1,\"1434\":1,\"1442\":1,\"1460\":1,\"1478\":1,\"1484\":1,\"1495\":1,\"1505\":1,\"1510\":1,\"1521\":1,\"1539\":1,\"1550\":1,\"1555\":1,\"1560\":1,\"1565\":1,\"1571\":1,\"1575\":1,\"1579\":1,\"1583\":1,\"1587\":1,\"1592\":1,\"1597\":1,\"1629\":1,\"1639\":1,\"1650\":1,\"1660\":1,\"1691\":1,\"1745\":1},\"1\":{\"41\":1,\"47\":1,\"58\":1,\"237\":1,\"238\":1,\"376\":1,\"398\":1,\"474\":2,\"608\":1,\"859\":1,\"868\":1,\"908\":1,\"997\":1,\"1226\":1,\"1278\":1,\"1405\":1,\"1650\":3}}],[\"example\",{\"1\":{\"38\":4,\"39\":2,\"40\":1,\"41\":1,\"46\":1,\"47\":4,\"50\":1,\"56\":4,\"57\":2,\"61\":2,\"111\":1,\"150\":2,\"201\":1,\"217\":1,\"219\":1,\"228\":1,\"241\":1,\"244\":1,\"252\":2,\"261\":1,\"269\":1,\"270\":1,\"276\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"304\":2,\"311\":1,\"312\":1,\"316\":1,\"324\":1,\"331\":1,\"338\":1,\"345\":1,\"376\":1,\"387\":1,\"391\":1,\"395\":1,\"397\":3,\"402\":1,\"423\":1,\"434\":2,\"436\":3,\"437\":1,\"438\":2,\"439\":2,\"440\":1,\"442\":3,\"443\":2,\"444\":2,\"445\":1,\"447\":1,\"455\":1,\"487\":2,\"488\":1,\"515\":1,\"516\":1,\"526\":7,\"535\":1,\"544\":1,\"545\":1,\"546\":1,\"596\":1,\"643\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":4,\"681\":1,\"710\":1,\"742\":1,\"743\":2,\"747\":1,\"751\":1,\"755\":1,\"756\":2,\"778\":1,\"781\":2,\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"801\":5,\"808\":1,\"815\":1,\"823\":1,\"824\":1,\"825\":4,\"827\":1,\"875\":1,\"897\":1,\"910\":1,\"911\":1,\"912\":4,\"914\":1,\"921\":4,\"956\":1,\"989\":1,\"997\":2,\"999\":6,\"1012\":2,\"1022\":8,\"1023\":1,\"1043\":1,\"1056\":3,\"1058\":6,\"1069\":1,\"1097\":1,\"1102\":1,\"1141\":2,\"1154\":3,\"1178\":1,\"1199\":1,\"1200\":1,\"1201\":4,\"1203\":1,\"1211\":2,\"1217\":5,\"1219\":6,\"1226\":1,\"1248\":1,\"1272\":1,\"1285\":1,\"1297\":1,\"1321\":1,\"1350\":1,\"1366\":1,\"1400\":1,\"1405\":1,\"1416\":1,\"1428\":1,\"1436\":1,\"1461\":1,\"1496\":1,\"1505\":1,\"1513\":2,\"1542\":3,\"1565\":3,\"1566\":2,\"1571\":1,\"1575\":2,\"1578\":1,\"1583\":1,\"1592\":1,\"1601\":2,\"1602\":1,\"1639\":1,\"1641\":2,\"1647\":1,\"1650\":1,\"1660\":1,\"1664\":1,\"1666\":2,\"1674\":3,\"1691\":2,\"1702\":1,\"1706\":1,\"1708\":5,\"1716\":3,\"1719\":1,\"1722\":1,\"1731\":1,\"1745\":4,\"1756\":2,\"1764\":3,\"1765\":2,\"1770\":1,\"1780\":5,\"1783\":1,\"1789\":1,\"1793\":1,\"1807\":1}}],[\"exactly\",{\"1\":{\"42\":1,\"218\":1,\"231\":1,\"438\":1,\"480\":1,\"780\":1,\"1505\":1,\"1592\":1}}],[\"exact\",{\"1\":{\"15\":1,\"26\":1,\"383\":1,\"419\":1,\"530\":1,\"797\":1,\"941\":1,\"942\":1,\"1061\":1,\"1084\":1,\"1116\":1,\"1137\":1,\"1192\":1,\"1222\":1}}],[\"exe=uname\",{\"1\":{\"653\":2}}],[\"exe\",{\"0\":{\"988\":1,\"1766\":1},\"1\":{\"15\":1,\"26\":1,\"113\":1,\"197\":3,\"208\":1,\"441\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"989\":1,\"990\":1,\"991\":1,\"992\":1,\"1241\":1}}],[\"execcmdline\",{\"0\":{\"440\":1},\"1\":{\"431\":1,\"440\":4}}],[\"execs\",{\"1\":{\"95\":1}}],[\"executing\",{\"1\":{\"121\":1,\"123\":1,\"519\":1,\"653\":1,\"682\":1,\"722\":1,\"727\":1,\"828\":1,\"915\":1,\"999\":1,\"1058\":1,\"1167\":1,\"1178\":5,\"1204\":1,\"1219\":1,\"1324\":1,\"1330\":1,\"1347\":1,\"1746\":1,\"1773\":1,\"1776\":1}}],[\"execution\",{\"0\":{\"250\":1,\"1386\":1},\"1\":{\"15\":2,\"26\":2,\"122\":1,\"182\":2,\"251\":1,\"252\":1,\"484\":1,\"485\":1,\"532\":1,\"536\":1,\"584\":1,\"589\":1,\"664\":1,\"745\":1,\"758\":1,\"766\":1,\"787\":1,\"1098\":1,\"1139\":1,\"1143\":1,\"1255\":1,\"1290\":1,\"1321\":1,\"1386\":1,\"1497\":1,\"1749\":1,\"1808\":1}}],[\"executes\",{\"1\":{\"605\":1,\"905\":1,\"1037\":2,\"1378\":1,\"1482\":1,\"1513\":1,\"1708\":1}}],[\"executed\",{\"1\":{\"90\":1,\"162\":1,\"218\":1,\"391\":3,\"438\":1,\"440\":1,\"526\":5,\"527\":1,\"528\":1,\"605\":1,\"710\":3,\"785\":3,\"905\":1,\"1097\":3,\"1161\":2,\"1248\":4,\"1251\":1,\"1252\":2,\"1253\":2,\"1294\":1,\"1339\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1708\":4,\"1746\":1,\"1775\":1,\"1776\":1}}],[\"execute\",{\"1\":{\"15\":2,\"26\":2,\"54\":1,\"111\":1,\"164\":1,\"182\":1,\"217\":1,\"393\":1,\"412\":1,\"440\":1,\"469\":1,\"471\":1,\"489\":1,\"502\":1,\"536\":1,\"611\":1,\"659\":1,\"695\":4,\"703\":1,\"704\":1,\"705\":1,\"708\":3,\"723\":1,\"728\":1,\"735\":1,\"741\":1,\"743\":1,\"745\":1,\"756\":1,\"758\":1,\"787\":1,\"850\":1,\"917\":1,\"1008\":1,\"1024\":1,\"1031\":1,\"1039\":1,\"1093\":1,\"1098\":1,\"1210\":3,\"1211\":3,\"1213\":1,\"1255\":1,\"1284\":2,\"1319\":1,\"1325\":1,\"1331\":1,\"1360\":1,\"1513\":1,\"1641\":1,\"1708\":1,\"1771\":1,\"1782\":1}}],[\"executables\",{\"0\":{\"240\":1,\"244\":1},\"1\":{\"15\":1,\"26\":1,\"46\":1,\"113\":1,\"244\":1,\"450\":2,\"451\":1,\"659\":1,\"682\":2,\"722\":1,\"723\":1,\"727\":1,\"728\":1,\"730\":1,\"735\":1,\"828\":2,\"915\":2,\"988\":1,\"989\":1,\"1204\":2,\"1241\":1,\"1624\":1,\"1725\":1}}],[\"executable\",{\"1\":{\"10\":1,\"15\":1,\"26\":1,\"46\":1,\"90\":1,\"98\":1,\"129\":1,\"164\":1,\"202\":1,\"208\":1,\"244\":1,\"387\":1,\"390\":1,\"391\":1,\"393\":1,\"475\":1,\"652\":1,\"653\":1,\"692\":1,\"710\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"775\":1,\"785\":1,\"787\":1,\"973\":1,\"999\":1,\"1024\":1,\"1058\":1,\"1097\":1,\"1098\":1,\"1207\":1,\"1213\":1,\"1219\":1,\"1241\":1,\"1295\":1,\"1497\":1,\"1769\":1}}],[\"exec\",{\"0\":{\"652\":1},\"1\":{\"10\":1,\"15\":1,\"26\":1,\"95\":1,\"103\":1,\"162\":1,\"164\":1,\"244\":4,\"387\":1,\"390\":1,\"391\":1,\"393\":1,\"475\":1,\"575\":1,\"653\":2,\"654\":3,\"655\":2,\"656\":3,\"657\":1,\"658\":1,\"682\":3,\"710\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"775\":1,\"785\":1,\"787\":1,\"828\":3,\"915\":3,\"1023\":1,\"1024\":1,\"1097\":1,\"1098\":1,\"1204\":3,\"1207\":1,\"1213\":1,\"1241\":1,\"1295\":1,\"1461\":3,\"1496\":2,\"1497\":1}}],[\"existent\",{\"1\":{\"499\":1,\"1323\":1,\"1329\":1}}],[\"existed\",{\"1\":{\"95\":1}}],[\"existing\",{\"1\":{\"15\":1,\"26\":1,\"57\":1,\"88\":1,\"89\":1,\"97\":1,\"98\":1,\"150\":1,\"202\":1,\"214\":2,\"260\":1,\"303\":1,\"315\":1,\"323\":1,\"330\":1,\"398\":1,\"430\":1,\"736\":1,\"743\":1,\"756\":1,\"758\":1,\"766\":1,\"833\":1,\"956\":1,\"1345\":1,\"1641\":1,\"1717\":1}}],[\"exist\",{\"1\":{\"15\":1,\"26\":1,\"52\":1,\"113\":1,\"115\":2,\"224\":1,\"225\":1,\"253\":1,\"408\":1,\"423\":1,\"464\":1,\"582\":1,\"656\":1,\"659\":1,\"661\":1,\"723\":1,\"728\":1,\"735\":1,\"791\":2,\"858\":3,\"869\":1,\"984\":1,\"1186\":4,\"1237\":1,\"1241\":1,\"1564\":1,\"1703\":2}}],[\"exists\",{\"1\":{\"15\":2,\"26\":2,\"108\":1,\"120\":2,\"182\":1,\"399\":1,\"483\":2,\"618\":2,\"679\":1,\"791\":2,\"825\":1,\"832\":1,\"833\":1,\"837\":1,\"838\":1,\"839\":1,\"843\":1,\"858\":2,\"912\":1,\"932\":1,\"975\":2,\"1052\":2,\"1103\":2,\"1126\":2,\"1201\":1,\"1301\":2,\"1568\":2,\"1774\":2}}],[\"exiting\",{\"1\":{\"487\":2}}],[\"exited\",{\"1\":{\"162\":1}}],[\"exits\",{\"1\":{\"15\":2,\"26\":2,\"94\":1,\"120\":1,\"181\":1,\"183\":1,\"410\":2,\"412\":1,\"489\":1,\"502\":1,\"536\":1,\"861\":1,\"1037\":2,\"1039\":1,\"1138\":1,\"1171\":1,\"1255\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1557\":1,\"1562\":1,\"1774\":1,\"1777\":1,\"1778\":1,\"1779\":1}}],[\"exitnum\",{\"0\":{\"665\":1,\"1358\":1},\"1\":{\"15\":1,\"26\":1,\"142\":1,\"347\":1,\"575\":1,\"667\":1,\"668\":1,\"1141\":1,\"1143\":1,\"1352\":1,\"1772\":1}}],[\"exit\",{\"0\":{\"253\":1,\"660\":1},\"1\":{\"15\":5,\"26\":5,\"99\":1,\"103\":2,\"121\":1,\"252\":2,\"253\":1,\"409\":1,\"412\":1,\"421\":1,\"423\":2,\"487\":2,\"488\":1,\"489\":2,\"500\":1,\"535\":1,\"536\":2,\"584\":3,\"585\":1,\"586\":1,\"589\":2,\"645\":1,\"660\":1,\"661\":3,\"662\":2,\"663\":2,\"664\":1,\"665\":1,\"666\":1,\"703\":1,\"861\":1,\"1003\":1,\"1004\":1,\"1036\":1,\"1039\":1,\"1043\":2,\"1139\":1,\"1140\":1,\"1141\":2,\"1142\":1,\"1143\":3,\"1163\":1,\"1251\":2,\"1255\":1,\"1319\":1,\"1324\":1,\"1330\":1,\"1358\":1,\"1707\":1,\"1772\":1,\"1777\":2,\"1778\":2,\"1811\":1}}],[\"expansions\",{\"1\":{\"375\":2,\"1404\":2}}],[\"expansion\",{\"0\":{\"239\":1,\"1532\":1},\"1\":{\"238\":2,\"239\":1,\"375\":3,\"376\":1,\"1404\":3,\"1405\":1}}],[\"expands\",{\"1\":{\"228\":1}}],[\"expanded\",{\"1\":{\"24\":3,\"121\":1,\"228\":1,\"229\":1,\"239\":1,\"682\":1,\"828\":1,\"915\":1,\"1020\":1,\"1204\":1,\"1502\":3,\"1506\":1,\"1507\":3,\"1508\":1,\"1509\":1,\"1518\":2,\"1536\":3,\"1540\":3,\"1547\":3,\"1548\":1,\"1549\":1,\"1552\":2,\"1585\":1,\"1586\":1,\"1589\":2,\"1593\":3,\"1594\":3,\"1598\":2,\"1599\":3,\"1675\":1}}],[\"expand\",{\"1\":{\"15\":1,\"24\":2,\"26\":1,\"116\":1,\"121\":3,\"130\":1,\"214\":1,\"237\":1,\"239\":1,\"443\":1,\"458\":1,\"459\":1,\"462\":1,\"683\":1,\"829\":1,\"916\":1,\"1205\":1,\"1502\":2,\"1503\":1,\"1504\":1,\"1506\":1,\"1507\":1,\"1518\":2,\"1547\":2,\"1552\":2,\"1589\":2,\"1590\":1,\"1591\":1,\"1593\":1,\"1594\":1,\"1599\":2,\"1771\":2,\"1774\":2}}],[\"expensive\",{\"1\":{\"121\":1}}],[\"experimental\",{\"1\":{\"71\":3,\"76\":1,\"115\":1,\"117\":4,\"123\":6,\"129\":1,\"176\":1,\"197\":1,\"198\":2,\"202\":1,\"204\":1,\"1488\":1}}],[\"experiences\",{\"1\":{\"1717\":1}}],[\"experienced\",{\"1\":{\"208\":1}}],[\"experience\",{\"1\":{\"70\":1,\"86\":1,\"90\":1,\"115\":1,\"125\":1,\"197\":1,\"199\":1,\"202\":1,\"211\":1}}],[\"expecting\",{\"1\":{\"755\":1,\"1628\":1}}],[\"expect\",{\"1\":{\"153\":1,\"162\":1,\"198\":1,\"354\":1,\"361\":1,\"743\":1,\"756\":1,\"1578\":1,\"1628\":1,\"1641\":1,\"1690\":1,\"1696\":1,\"1717\":1}}],[\"expects\",{\"1\":{\"153\":1,\"304\":1,\"387\":1,\"1721\":1}}],[\"expectation\",{\"1\":{\"117\":1,\"217\":1}}],[\"expectations\",{\"1\":{\"50\":1}}],[\"expected\",{\"1\":{\"3\":1,\"8\":1,\"103\":1,\"147\":1,\"151\":1,\"163\":1,\"433\":1,\"438\":1,\"439\":1,\"1347\":1}}],[\"explaining\",{\"1\":{\"1601\":1}}],[\"explicit\",{\"1\":{\"109\":1,\"340\":1}}],[\"explicitly\",{\"1\":{\"42\":1,\"1244\":1,\"1591\":1}}],[\"explore\",{\"1\":{\"33\":1,\"34\":1,\"36\":1,\"37\":1,\"39\":1,\"45\":1,\"54\":1}}],[\"expressed\",{\"1\":{\"262\":1,\"285\":1,\"299\":1,\"305\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1}}],[\"expression\",{\"0\":{\"1133\":1},\"1\":{\"129\":1,\"217\":2,\"244\":1,\"688\":1,\"926\":2,\"1129\":1,\"1131\":1,\"1134\":2,\"1773\":1}}],[\"expressions\",{\"0\":{\"217\":1},\"1\":{\"15\":1,\"26\":1,\"37\":1,\"41\":1,\"59\":1,\"121\":2,\"122\":1,\"123\":1,\"127\":2,\"183\":1,\"217\":3,\"222\":1,\"224\":1,\"227\":1,\"611\":1,\"685\":1,\"686\":1,\"831\":1,\"917\":1,\"956\":1,\"962\":1,\"1134\":1,\"1159\":1,\"1207\":1,\"1520\":1,\"1536\":1,\"1538\":1,\"1540\":1,\"1772\":1,\"1798\":1}}],[\"expr\",{\"0\":{\"686\":1},\"1\":{\"15\":1,\"26\":1,\"121\":1,\"122\":1,\"183\":1,\"601\":1,\"611\":1,\"685\":1,\"688\":1,\"831\":1,\"900\":1,\"917\":1,\"1159\":1,\"1207\":1,\"1536\":1,\"1540\":1}}],[\"expose\",{\"1\":{\"181\":1}}],[\"exposes\",{\"1\":{\"103\":1,\"119\":1}}],[\"exposed\",{\"1\":{\"10\":1,\"781\":1}}],[\"exports\",{\"1\":{\"1176\":1,\"1258\":1,\"1610\":1}}],[\"exported\",{\"1\":{\"681\":1,\"827\":1,\"914\":1,\"1203\":1}}],[\"exporting\",{\"0\":{\"676\":1}}],[\"export\",{\"0\":{\"670\":1},\"1\":{\"15\":1,\"26\":1,\"127\":1,\"226\":1,\"391\":1,\"393\":1,\"611\":1,\"672\":2,\"673\":2,\"675\":1,\"676\":3,\"677\":1,\"678\":3,\"681\":2,\"684\":2,\"710\":1,\"785\":1,\"787\":1,\"823\":1,\"824\":3,\"827\":2,\"831\":1,\"910\":1,\"911\":3,\"914\":2,\"917\":1,\"1097\":1,\"1098\":1,\"1175\":1,\"1182\":1,\"1199\":1,\"1200\":3,\"1203\":2,\"1207\":1,\"1750\":1,\"1754\":1,\"1772\":3,\"1773\":1}}],[\"b0j27d29bnf6pf7m7vm0000gn\",{\"1\":{\"1299\":1}}],[\"bmp\",{\"1\":{\"1010\":1}}],[\"bkey\",{\"1\":{\"318\":4,\"326\":4,\"333\":4}}],[\"bs\",{\"1\":{\"1701\":2}}],[\"bs=\",{\"1\":{\"447\":1}}],[\"bsds\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"bsd\",{\"0\":{\"191\":1},\"1\":{\"188\":1,\"204\":1,\"208\":1,\"544\":1,\"722\":1,\"727\":1,\"897\":1,\"1403\":1,\"1448\":1}}],[\"bson\",{\"1\":{\"104\":1,\"121\":1}}],[\"black\",{\"1\":{\"1701\":4}}],[\"blank\",{\"1\":{\"1116\":1}}],[\"blink\",{\"1\":{\"1701\":1}}],[\"blinking\",{\"1\":{\"138\":1}}],[\"blended\",{\"1\":{\"399\":1}}],[\"blue\",{\"1\":{\"108\":1,\"984\":1,\"1237\":1,\"1701\":4,\"1716\":1,\"1723\":1,\"1724\":2,\"1797\":1}}],[\"blog\",{\"0\":{\"31\":1,\"36\":1,\"45\":1,\"55\":1},\"1\":{\"86\":1},\"2\":{\"35\":1}}],[\"blocks\",{\"0\":{\"1532\":1,\"1544\":1},\"1\":{\"15\":2,\"23\":1,\"26\":2,\"54\":1,\"108\":1,\"115\":1,\"119\":1,\"121\":1,\"124\":1,\"135\":1,\"368\":1,\"375\":1,\"406\":1,\"407\":1,\"409\":1,\"410\":4,\"412\":1,\"440\":2,\"457\":1,\"489\":1,\"502\":2,\"526\":1,\"536\":1,\"611\":1,\"679\":4,\"680\":1,\"703\":1,\"741\":2,\"745\":1,\"754\":1,\"758\":1,\"765\":1,\"825\":4,\"826\":1,\"850\":1,\"859\":1,\"861\":1,\"912\":4,\"913\":1,\"917\":1,\"937\":1,\"1008\":1,\"1033\":1,\"1034\":1,\"1036\":1,\"1037\":4,\"1039\":1,\"1161\":3,\"1167\":1,\"1169\":1,\"1170\":1,\"1201\":4,\"1202\":1,\"1215\":1,\"1242\":1,\"1248\":1,\"1249\":1,\"1250\":1,\"1255\":1,\"1280\":1,\"1319\":1,\"1321\":1,\"1325\":2,\"1327\":1,\"1331\":2,\"1343\":1,\"1347\":1,\"1360\":1,\"1404\":1,\"1518\":1,\"1542\":1,\"1547\":1,\"1672\":2,\"1674\":1,\"1675\":1,\"1708\":3,\"1727\":1,\"1756\":2,\"1771\":2,\"1780\":2,\"1781\":1,\"1782\":2,\"1794\":1}}],[\"block\",{\"0\":{\"410\":1,\"1037\":1,\"1674\":1,\"1708\":1},\"1\":{\"15\":11,\"23\":1,\"24\":1,\"26\":11,\"61\":1,\"77\":1,\"94\":2,\"98\":1,\"115\":2,\"116\":1,\"118\":1,\"120\":4,\"121\":2,\"122\":2,\"130\":1,\"135\":1,\"162\":4,\"181\":1,\"182\":1,\"183\":2,\"237\":1,\"251\":2,\"252\":2,\"366\":2,\"393\":3,\"397\":3,\"407\":4,\"409\":1,\"410\":1,\"412\":3,\"422\":1,\"423\":1,\"438\":2,\"440\":1,\"457\":3,\"471\":1,\"472\":2,\"484\":1,\"485\":2,\"486\":1,\"487\":1,\"488\":1,\"489\":3,\"498\":3,\"502\":2,\"509\":1,\"512\":1,\"526\":5,\"527\":1,\"528\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"535\":1,\"536\":3,\"584\":1,\"589\":1,\"644\":1,\"651\":2,\"664\":1,\"679\":2,\"695\":1,\"703\":1,\"713\":3,\"738\":1,\"743\":2,\"745\":1,\"747\":1,\"748\":6,\"749\":4,\"752\":1,\"754\":1,\"755\":1,\"756\":2,\"758\":1,\"761\":3,\"765\":1,\"766\":1,\"772\":1,\"773\":1,\"774\":2,\"779\":1,\"787\":3,\"802\":1,\"825\":2,\"847\":3,\"853\":1,\"855\":1,\"857\":1,\"859\":2,\"861\":3,\"912\":2,\"937\":1,\"938\":2,\"954\":2,\"982\":2,\"983\":1,\"985\":1,\"1002\":1,\"1008\":1,\"1010\":1,\"1027\":2,\"1032\":1,\"1034\":4,\"1036\":1,\"1037\":1,\"1039\":2,\"1061\":1,\"1090\":1,\"1092\":1,\"1098\":3,\"1139\":1,\"1143\":4,\"1161\":2,\"1171\":4,\"1175\":2,\"1182\":3,\"1201\":2,\"1208\":1,\"1209\":1,\"1210\":2,\"1211\":3,\"1213\":3,\"1214\":1,\"1215\":1,\"1217\":1,\"1222\":1,\"1243\":1,\"1244\":3,\"1249\":1,\"1250\":1,\"1255\":4,\"1284\":2,\"1290\":1,\"1291\":1,\"1292\":1,\"1295\":1,\"1319\":1,\"1320\":1,\"1321\":1,\"1322\":2,\"1325\":1,\"1326\":1,\"1327\":1,\"1328\":2,\"1331\":1,\"1337\":4,\"1339\":2,\"1340\":4,\"1343\":1,\"1348\":1,\"1360\":2,\"1367\":1,\"1376\":1,\"1391\":1,\"1497\":2,\"1502\":1,\"1518\":2,\"1541\":1,\"1542\":1,\"1547\":1,\"1552\":1,\"1556\":1,\"1557\":2,\"1562\":2,\"1589\":1,\"1641\":2,\"1674\":2,\"1675\":2,\"1707\":1,\"1708\":4,\"1709\":1,\"1714\":1,\"1727\":2,\"1739\":2,\"1743\":1,\"1756\":1,\"1771\":2,\"1773\":1,\"1774\":2,\"1777\":1,\"1778\":1,\"1779\":2,\"1780\":3,\"1782\":3,\"1794\":2}}],[\"b\",{\"1\":{\"59\":1,\"60\":1,\"61\":3,\"111\":1,\"239\":2,\"260\":1,\"283\":2,\"297\":2,\"304\":2,\"311\":2,\"312\":4,\"318\":7,\"326\":6,\"333\":7,\"338\":2,\"340\":18,\"345\":4,\"347\":4,\"352\":1,\"353\":2,\"354\":2,\"361\":2,\"375\":3,\"398\":1,\"399\":3,\"423\":2,\"465\":1,\"540\":1,\"695\":1,\"847\":1,\"896\":1,\"942\":3,\"958\":4,\"999\":3,\"1058\":3,\"1116\":1,\"1219\":3,\"1404\":3,\"1409\":2,\"1421\":1,\"1434\":1,\"1532\":5,\"1725\":1,\"1772\":1,\"1805\":2}}],[\"bit\",{\"1\":{\"873\":1,\"1021\":1,\"1107\":2,\"1270\":1,\"1620\":1,\"1634\":1,\"1677\":1,\"1728\":1}}],[\"bitmap\",{\"1\":{\"15\":1,\"26\":1,\"87\":1,\"1009\":1,\"1480\":1}}],[\"bib\",{\"1\":{\"375\":1,\"1404\":1}}],[\"bigfile\",{\"1\":{\"1102\":2}}],[\"biggest\",{\"1\":{\"605\":1,\"905\":1}}],[\"big\",{\"1\":{\"74\":1,\"93\":1,\"742\":1}}],[\"bindings\",{\"1\":{\"1797\":1,\"1798\":1}}],[\"binaries\",{\"0\":{\"205\":1},\"1\":{\"119\":1}}],[\"binary\",{\"1\":{\"113\":1,\"189\":1,\"205\":1,\"208\":1,\"1021\":1,\"1401\":1,\"1432\":1,\"1461\":1,\"1496\":1}}],[\"bin\",{\"1\":{\"46\":1,\"56\":2,\"201\":1,\"423\":1,\"681\":1,\"827\":1,\"865\":1,\"914\":1,\"1102\":2,\"1203\":1}}],[\"bottom\",{\"1\":{\"1802\":1}}],[\"both\",{\"1\":{\"2\":1,\"48\":1,\"52\":1,\"70\":1,\"125\":1,\"201\":1,\"284\":1,\"298\":1,\"443\":1,\"488\":1,\"535\":1,\"596\":2,\"656\":1,\"678\":1,\"824\":1,\"851\":1,\"858\":1,\"911\":1,\"1176\":1,\"1200\":1,\"1339\":1,\"1520\":1,\"1628\":1,\"1647\":1,\"1664\":1,\"1716\":1,\"1798\":1}}],[\"bold\",{\"1\":{\"1701\":1}}],[\"body\",{\"1\":{\"781\":1,\"808\":2,\"1067\":1,\"1068\":1}}],[\"bob\",{\"1\":{\"224\":1,\"249\":1,\"375\":1,\"382\":2,\"417\":3,\"781\":3,\"808\":1,\"815\":1,\"1069\":1,\"1082\":3,\"1404\":1,\"1511\":1,\"1513\":3,\"1597\":1,\"1598\":3,\"1772\":3}}],[\"box\",{\"0\":{\"1799\":1},\"1\":{\"174\":1,\"1795\":1,\"1797\":2,\"1798\":2,\"1799\":10}}],[\"bounds\",{\"1\":{\"123\":1,\"147\":1,\"488\":1,\"535\":1}}],[\"bourne\",{\"1\":{\"46\":1,\"48\":1}}],[\"boilerplate\",{\"1\":{\"42\":1}}],[\"bool`\",{\"1\":{\"423\":1}}],[\"boolean5\",{\"1\":{\"1772\":1}}],[\"boolean\",{\"0\":{\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"440\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"523\":1,\"608\":1,\"908\":1,\"1247\":1,\"1249\":1},\"1\":{\"28\":1,\"103\":1,\"121\":1,\"129\":1,\"167\":1,\"292\":1,\"333\":3,\"340\":3,\"406\":1,\"431\":14,\"574\":1,\"576\":2,\"677\":1,\"823\":1,\"910\":1,\"953\":1,\"1033\":1,\"1199\":1,\"1249\":1,\"1278\":7,\"1284\":1,\"1520\":1,\"1538\":1,\"1603\":1,\"1604\":1,\"1759\":1,\"1760\":1,\"1761\":1,\"1762\":1}}],[\"bool\",{\"0\":{\"1604\":1,\"1759\":1,\"1760\":1,\"1761\":1,\"1762\":1},\"1\":{\"28\":1,\"278\":1,\"292\":1,\"333\":4,\"340\":8,\"347\":2,\"423\":8,\"593\":1,\"596\":4,\"597\":2,\"677\":2,\"743\":4,\"756\":4,\"823\":2,\"865\":1,\"910\":2,\"1022\":3,\"1199\":2,\"1487\":4,\"1601\":1,\"1603\":1,\"1641\":4}}],[\"bz2\",{\"0\":{\"1464\":1},\"1\":{\"16\":2,\"27\":2,\"1456\":2,\"1463\":2,\"1464\":1,\"1465\":2,\"1466\":1,\"1467\":1,\"1468\":1,\"1474\":2}}],[\"bracket\",{\"1\":{\"237\":1,\"780\":1,\"1805\":1}}],[\"brackets\",{\"1\":{\"232\":1,\"375\":1,\"780\":1,\"1404\":1,\"1720\":1,\"1742\":1,\"1807\":1}}],[\"braces\",{\"1\":{\"47\":1,\"52\":2,\"423\":1,\"480\":2,\"565\":1,\"1542\":2,\"1544\":1,\"1545\":1,\"1700\":1}}],[\"brace\",{\"0\":{\"239\":1,\"476\":1,\"1508\":1,\"1541\":1},\"1\":{\"15\":1,\"24\":2,\"26\":1,\"163\":1,\"222\":1,\"239\":1,\"611\":1,\"618\":1,\"685\":1,\"831\":1,\"917\":1,\"975\":1,\"1052\":1,\"1126\":1,\"1207\":1,\"1307\":1,\"1313\":1,\"1502\":2,\"1507\":2,\"1509\":4,\"1516\":1,\"1517\":2,\"1518\":2,\"1536\":1,\"1540\":1,\"1542\":5,\"1546\":1,\"1547\":2,\"1552\":3,\"1589\":3,\"1593\":1,\"1594\":2,\"1598\":1,\"1599\":2,\"1675\":2,\"1705\":1,\"1708\":1,\"1709\":1,\"1727\":1,\"1794\":1,\"1805\":2}}],[\"broken\",{\"1\":{\"1372\":1,\"1674\":2}}],[\"brother\",{\"1\":{\"1245\":1}}],[\"brown\",{\"1\":{\"545\":2,\"546\":2}}],[\"brought\",{\"1\":{\"69\":1,\"109\":1,\"131\":1}}],[\"broad\",{\"1\":{\"3\":1}}],[\"brew\",{\"1\":{\"119\":1}}],[\"brevity\",{\"1\":{\"47\":1,\"1486\":1}}],[\"breaking\",{\"0\":{\"89\":1,\"98\":1,\"107\":1,\"126\":1,\"133\":1,\"137\":1,\"141\":1,\"145\":1,\"149\":1,\"153\":1,\"157\":1,\"161\":1,\"166\":1,\"172\":1,\"176\":1,\"180\":1},\"1\":{\"27\":1,\"64\":1,\"67\":1,\"77\":1,\"78\":1,\"80\":1,\"82\":1,\"83\":1,\"88\":1,\"93\":1,\"95\":2,\"97\":1,\"106\":1,\"111\":1,\"113\":3,\"115\":2,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"165\":1,\"741\":1,\"1347\":1,\"1491\":1,\"1538\":1}}],[\"breakdown\",{\"1\":{\"23\":2,\"94\":1,\"96\":1,\"110\":1,\"463\":1,\"876\":1,\"982\":1,\"1273\":1,\"1360\":1,\"1705\":1,\"1718\":1,\"1740\":1,\"1749\":1,\"1774\":1,\"1794\":1}}],[\"break\",{\"0\":{\"252\":1,\"484\":1},\"1\":{\"15\":1,\"26\":1,\"52\":1,\"89\":1,\"98\":1,\"121\":2,\"122\":1,\"126\":1,\"176\":1,\"208\":1,\"252\":7,\"347\":1,\"376\":1,\"433\":1,\"485\":3,\"486\":1,\"487\":4,\"488\":3,\"536\":1,\"584\":1,\"589\":1,\"664\":1,\"745\":1,\"758\":1,\"766\":1,\"787\":1,\"1098\":1,\"1139\":1,\"1143\":1,\"1255\":1}}],[\"breaks\",{\"1\":{\"3\":1,\"90\":1,\"111\":1,\"237\":1,\"270\":1,\"277\":1,\"1691\":1,\"1747\":1}}],[\"bright\",{\"1\":{\"1701\":16}}],[\"bring\",{\"1\":{\"72\":1,\"90\":1,\"98\":1,\"103\":1,\"119\":1,\"121\":1,\"162\":1,\"1806\":1,\"1808\":1}}],[\"brings\",{\"1\":{\"67\":1,\"72\":1,\"74\":1,\"93\":1,\"102\":1,\"121\":2,\"165\":1,\"1509\":1}}],[\"bringing\",{\"1\":{\"46\":1}}],[\"bridging\",{\"1\":{\"51\":1}}],[\"brief\",{\"0\":{\"46\":1}}],[\"bg\",{\"0\":{\"470\":1},\"1\":{\"3\":1,\"15\":1,\"26\":1,\"90\":1,\"92\":1,\"108\":1,\"471\":1,\"472\":5,\"473\":2,\"474\":1,\"616\":1,\"618\":1,\"659\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"781\":1,\"783\":1,\"921\":1,\"922\":1,\"997\":1,\"999\":3,\"1002\":1,\"1056\":1,\"1058\":3,\"1061\":1,\"1178\":4,\"1219\":3,\"1701\":16,\"1747\":1,\"1748\":1,\"1772\":3}}],[\"bycolumnname\",{\"1\":{\"347\":7}}],[\"bycolumnnumber\",{\"1\":{\"347\":11}}],[\"byrownumber\",{\"1\":{\"347\":11}}],[\"byte\",{\"1\":{\"39\":2,\"41\":1,\"42\":1,\"50\":2,\"57\":2,\"59\":1,\"214\":1,\"259\":1,\"261\":1,\"269\":1,\"270\":2,\"271\":2,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"302\":1,\"309\":1,\"311\":2,\"312\":1,\"316\":2,\"318\":21,\"319\":3,\"324\":2,\"326\":22,\"327\":3,\"331\":2,\"333\":16,\"334\":2,\"338\":1,\"340\":12,\"341\":1,\"345\":4,\"347\":10,\"348\":1,\"354\":1,\"360\":1,\"361\":1,\"596\":1,\"814\":1,\"1016\":1,\"1300\":2,\"1701\":2,\"1702\":1,\"1746\":1,\"1773\":1}}],[\"bytes\",{\"1\":{\"15\":1,\"26\":1,\"39\":1,\"50\":1,\"57\":1,\"269\":3,\"345\":2,\"483\":1,\"618\":1,\"1052\":1,\"1099\":1,\"1110\":1,\"1601\":1,\"1702\":1,\"1777\":1,\"1778\":1}}],[\"bypassing\",{\"1\":{\"15\":1,\"26\":1,\"164\":1,\"226\":1,\"393\":1,\"469\":1,\"659\":1,\"704\":1,\"705\":1,\"723\":1,\"728\":1,\"735\":1,\"787\":1,\"1024\":1,\"1031\":1,\"1098\":1,\"1213\":1}}],[\"by\",{\"0\":{\"751\":1,\"1248\":1,\"1249\":1,\"1791\":1},\"1\":{\"3\":2,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"15\":2,\"20\":1,\"23\":1,\"26\":2,\"27\":1,\"29\":2,\"38\":3,\"39\":1,\"42\":1,\"47\":2,\"48\":1,\"50\":1,\"56\":3,\"66\":1,\"77\":1,\"86\":2,\"95\":2,\"99\":2,\"108\":1,\"111\":1,\"113\":4,\"115\":5,\"116\":1,\"117\":1,\"118\":1,\"119\":2,\"120\":1,\"121\":6,\"129\":1,\"135\":1,\"142\":1,\"151\":1,\"162\":1,\"168\":1,\"170\":1,\"182\":2,\"183\":1,\"208\":1,\"209\":1,\"214\":1,\"219\":1,\"226\":1,\"227\":1,\"229\":1,\"232\":1,\"254\":1,\"255\":1,\"256\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"304\":1,\"308\":1,\"391\":1,\"395\":2,\"398\":1,\"403\":1,\"409\":1,\"412\":1,\"421\":1,\"424\":1,\"437\":1,\"442\":1,\"443\":1,\"452\":1,\"453\":2,\"459\":1,\"462\":2,\"468\":1,\"496\":1,\"497\":1,\"508\":1,\"509\":1,\"518\":1,\"526\":1,\"605\":4,\"606\":1,\"611\":1,\"616\":1,\"647\":2,\"653\":1,\"661\":2,\"676\":1,\"677\":1,\"679\":1,\"682\":1,\"685\":1,\"692\":2,\"694\":2,\"701\":1,\"710\":1,\"727\":1,\"730\":1,\"733\":1,\"743\":1,\"747\":1,\"749\":1,\"754\":1,\"756\":1,\"765\":1,\"779\":1,\"780\":1,\"785\":1,\"787\":1,\"802\":1,\"823\":1,\"825\":1,\"828\":1,\"831\":1,\"861\":1,\"865\":1,\"869\":1,\"873\":1,\"875\":1,\"904\":3,\"905\":4,\"906\":1,\"910\":1,\"912\":1,\"915\":1,\"917\":1,\"956\":1,\"984\":1,\"1022\":2,\"1029\":1,\"1036\":1,\"1039\":1,\"1049\":1,\"1097\":1,\"1115\":1,\"1125\":2,\"1151\":1,\"1161\":1,\"1171\":1,\"1175\":1,\"1176\":2,\"1179\":1,\"1199\":1,\"1201\":1,\"1204\":1,\"1207\":1,\"1237\":1,\"1255\":1,\"1258\":2,\"1262\":1,\"1264\":1,\"1265\":1,\"1267\":2,\"1272\":1,\"1294\":2,\"1297\":1,\"1312\":2,\"1317\":1,\"1324\":1,\"1325\":1,\"1330\":1,\"1331\":1,\"1343\":1,\"1360\":1,\"1374\":1,\"1375\":1,\"1387\":1,\"1389\":1,\"1400\":1,\"1401\":1,\"1428\":1,\"1432\":1,\"1436\":1,\"1484\":2,\"1505\":1,\"1545\":1,\"1571\":1,\"1574\":1,\"1575\":1,\"1583\":1,\"1592\":1,\"1594\":1,\"1601\":2,\"1628\":1,\"1631\":1,\"1641\":1,\"1672\":1,\"1674\":1,\"1704\":1,\"1707\":1,\"1716\":4,\"1719\":1,\"1721\":1,\"1724\":2,\"1726\":1,\"1746\":3,\"1751\":1,\"1753\":1,\"1755\":1,\"1770\":1,\"1773\":1,\"1775\":1,\"1781\":1,\"1782\":1,\"1783\":1,\"1784\":2,\"1786\":1,\"1791\":1,\"1798\":2}}],[\"baloo\",{\"1\":{\"865\":1}}],[\"balance\",{\"1\":{\"216\":1}}],[\"bananas\",{\"1\":{\"217\":1,\"224\":1,\"248\":1}}],[\"bang\",{\"0\":{\"219\":1,\"1706\":1},\"1\":{\"23\":2,\"30\":1,\"123\":1,\"219\":2,\"232\":1,\"265\":1,\"272\":1,\"279\":1,\"284\":1,\"286\":3,\"293\":1,\"294\":1,\"298\":1,\"300\":2,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"390\":1,\"409\":1,\"500\":1,\"591\":1,\"675\":1,\"778\":1,\"794\":1,\"822\":1,\"1036\":1,\"1134\":3,\"1189\":1,\"1198\":1,\"1612\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1706\":3,\"1748\":2,\"1761\":1,\"1771\":2}}],[\"baz\",{\"1\":{\"186\":1,\"1534\":2,\"1539\":2}}],[\"bad\",{\"1\":{\"52\":1,\"387\":1,\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"bare\",{\"1\":{\"965\":1}}],[\"bareword\",{\"1\":{\"126\":1,\"129\":1,\"217\":1}}],[\"barewords\",{\"0\":{\"216\":1,\"1529\":1},\"1\":{\"121\":1,\"127\":1,\"129\":1,\"216\":3,\"222\":1,\"1593\":1}}],[\"bar<\",{\"1\":{\"633\":2}}],[\"bars\",{\"1\":{\"163\":1}}],[\"bar\",{\"0\":{\"186\":1},\"1\":{\"38\":3,\"56\":3,\"113\":1,\"119\":1,\"121\":3,\"127\":1,\"225\":1,\"226\":1,\"353\":2,\"360\":2,\"397\":4,\"436\":2,\"437\":1,\"442\":2,\"443\":2,\"444\":1,\"445\":1,\"488\":4,\"535\":4,\"633\":2,\"683\":2,\"743\":8,\"756\":8,\"829\":2,\"916\":2,\"1141\":1,\"1205\":2,\"1248\":4,\"1505\":2,\"1506\":4,\"1515\":2,\"1529\":2,\"1530\":2,\"1533\":2,\"1534\":2,\"1539\":4,\"1544\":2,\"1551\":2,\"1588\":2,\"1592\":2,\"1641\":8,\"1750\":1,\"1772\":11,\"1773\":1,\"1780\":1}}],[\"backup\",{\"1\":{\"979\":1}}],[\"backtick\",{\"1\":{\"606\":1,\"906\":1}}],[\"backticks\",{\"1\":{\"237\":1}}],[\"backspace\",{\"1\":{\"174\":1,\"1116\":1}}],[\"backslashes\",{\"1\":{\"38\":1,\"56\":1}}],[\"backslash\",{\"1\":{\"38\":1,\"56\":1}}],[\"backend\",{\"1\":{\"86\":1,\"128\":1}}],[\"backed\",{\"1\":{\"66\":1,\"170\":1}}],[\"back\",{\"1\":{\"47\":1,\"52\":1,\"90\":1,\"103\":1,\"251\":1,\"468\":1,\"626\":1,\"743\":2,\"756\":2,\"1021\":1,\"1023\":1,\"1403\":1,\"1448\":1,\"1641\":2,\"1808\":2}}],[\"backgrounding\",{\"1\":{\"474\":1}}],[\"background\",{\"0\":{\"1741\":1,\"1762\":1},\"1\":{\"15\":2,\"26\":2,\"90\":3,\"92\":2,\"101\":1,\"103\":1,\"119\":1,\"264\":1,\"470\":1,\"471\":1,\"475\":1,\"618\":1,\"659\":2,\"713\":2,\"714\":1,\"718\":1,\"723\":2,\"728\":2,\"732\":3,\"733\":1,\"735\":2,\"783\":2,\"922\":1,\"999\":1,\"1002\":1,\"1058\":1,\"1061\":1,\"1219\":1,\"1347\":1,\"1701\":1,\"1728\":1,\"1747\":1,\"1748\":1,\"1756\":1,\"1762\":1,\"1772\":1,\"1808\":2}}],[\"backwards\",{\"1\":{\"3\":1,\"72\":1,\"111\":2,\"121\":1,\"162\":1,\"375\":1,\"1403\":1,\"1404\":1,\"1448\":1,\"1516\":1,\"1701\":1,\"1802\":4}}],[\"basically\",{\"1\":{\"47\":1}}],[\"basic\",{\"0\":{\"221\":1},\"1\":{\"38\":1,\"46\":1,\"56\":1,\"749\":1}}],[\"bases\",{\"1\":{\"371\":1,\"377\":1,\"1401\":1,\"1410\":1,\"1430\":1,\"1431\":1,\"1432\":1,\"1535\":1}}],[\"base\",{\"1\":{\"40\":1,\"50\":1,\"86\":1,\"88\":1,\"97\":1,\"111\":1,\"113\":1,\"874\":1,\"1271\":1,\"1401\":3,\"1432\":3,\"1753\":1}}],[\"base64\",{\"0\":{\"1457\":1},\"1\":{\"16\":2,\"27\":2,\"50\":1,\"1300\":1,\"1456\":2,\"1457\":1,\"1458\":1,\"1459\":2,\"1460\":4,\"1461\":4,\"1462\":2,\"1469\":2,\"1474\":2}}],[\"based\",{\"1\":{\"3\":1,\"15\":1,\"26\":1,\"46\":2,\"103\":1,\"190\":1,\"210\":1,\"211\":1,\"304\":1,\"369\":1,\"452\":1,\"548\":2,\"791\":1,\"794\":1,\"814\":1,\"878\":1,\"879\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1118\":1,\"1137\":1,\"1186\":1,\"1189\":1,\"1476\":1,\"1634\":1,\"1741\":1,\"1794\":1,\"1799\":1}}],[\"bashrc\",{\"1\":{\"1752\":1}}],[\"bashism\",{\"1\":{\"23\":1,\"54\":1,\"124\":1,\"1772\":1,\"1814\":1}}],[\"bash\",{\"0\":{\"38\":1,\"40\":1},\"1\":{\"12\":1,\"36\":2,\"38\":3,\"39\":3,\"40\":2,\"41\":1,\"42\":1,\"43\":1,\"46\":1,\"48\":2,\"50\":2,\"51\":3,\"52\":2,\"56\":5,\"57\":3,\"59\":1,\"108\":1,\"121\":1,\"162\":3,\"220\":2,\"239\":1,\"241\":1,\"371\":1,\"376\":1,\"459\":1,\"474\":1,\"657\":1,\"683\":1,\"711\":1,\"779\":1,\"829\":1,\"873\":1,\"916\":1,\"1205\":1,\"1270\":1,\"1321\":1,\"1401\":1,\"1403\":1,\"1405\":1,\"1412\":1,\"1440\":1,\"1453\":1,\"1500\":1,\"1505\":1,\"1520\":1,\"1529\":1,\"1564\":1,\"1570\":1,\"1582\":1,\"1592\":1,\"1728\":2,\"1745\":1,\"1752\":2,\"1772\":8,\"1773\":3}}],[\"bumped\",{\"1\":{\"596\":1}}],[\"bufio\",{\"1\":{\"269\":2,\"276\":2}}],[\"buffers\",{\"1\":{\"174\":1}}],[\"buffered\",{\"1\":{\"127\":1,\"182\":1,\"309\":1,\"748\":1,\"761\":1}}],[\"buffer\",{\"1\":{\"123\":2,\"129\":1,\"147\":1,\"361\":2,\"1716\":1}}],[\"buffering\",{\"1\":{\"113\":1}}],[\"buggy\",{\"1\":{\"1710\":1}}],[\"bug\",{\"0\":{\"129\":1,\"135\":1,\"139\":1,\"143\":1,\"147\":1,\"151\":1,\"155\":1,\"159\":1,\"163\":1,\"168\":1,\"174\":1,\"178\":1,\"182\":1},\"1\":{\"69\":1,\"71\":1,\"74\":1,\"82\":1,\"83\":1,\"86\":1,\"88\":2,\"90\":1,\"93\":2,\"95\":7,\"97\":2,\"99\":1,\"103\":2,\"108\":2,\"111\":3,\"113\":2,\"115\":1,\"117\":1,\"119\":2,\"121\":1,\"123\":3,\"129\":1,\"131\":1,\"147\":1,\"596\":1,\"795\":1,\"1190\":1,\"1491\":1}}],[\"bugs\",{\"1\":{\"8\":1,\"68\":1,\"79\":1,\"95\":1,\"108\":1,\"111\":2,\"115\":1,\"119\":1,\"160\":1,\"199\":1,\"228\":1,\"1489\":1,\"1710\":1}}],[\"builders\",{\"1\":{\"1593\":2}}],[\"builds\",{\"1\":{\"121\":1,\"189\":1,\"190\":1,\"197\":2,\"198\":1,\"201\":3}}],[\"building\",{\"1\":{\"113\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"build\",{\"1\":{\"15\":3,\"26\":3,\"27\":1,\"44\":1,\"78\":1,\"90\":2,\"110\":3,\"113\":2,\"122\":2,\"198\":1,\"202\":1,\"208\":1,\"209\":2,\"369\":2,\"370\":1,\"378\":2,\"383\":2,\"419\":2,\"548\":3,\"569\":1,\"599\":2,\"743\":1,\"745\":2,\"756\":1,\"758\":2,\"871\":2,\"872\":1,\"877\":2,\"884\":2,\"891\":2,\"898\":2,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"1002\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":3,\"1150\":2,\"1235\":2,\"1269\":1,\"1274\":2,\"1403\":1,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1507\":1,\"1536\":3,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1,\"1628\":1,\"1634\":1,\"1641\":1}}],[\"builtins\",{\"0\":{\"14\":1,\"16\":1,\"26\":1,\"27\":1,\"209\":1,\"1455\":1},\"1\":{\"10\":1,\"13\":1,\"14\":1,\"15\":2,\"21\":2,\"26\":2,\"27\":2,\"30\":1,\"46\":1,\"48\":1,\"66\":1,\"79\":2,\"90\":3,\"103\":2,\"111\":4,\"120\":1,\"122\":1,\"170\":1,\"208\":1,\"209\":3,\"218\":1,\"219\":2,\"259\":1,\"264\":1,\"267\":3,\"274\":3,\"281\":1,\"288\":3,\"295\":1,\"302\":1,\"308\":3,\"391\":2,\"403\":1,\"450\":1,\"464\":1,\"465\":1,\"468\":2,\"659\":2,\"682\":1,\"710\":2,\"713\":1,\"722\":2,\"723\":2,\"727\":2,\"728\":2,\"730\":1,\"733\":2,\"735\":2,\"743\":1,\"756\":1,\"785\":2,\"828\":1,\"915\":1,\"930\":1,\"935\":1,\"968\":1,\"969\":1,\"982\":1,\"987\":1,\"999\":2,\"1058\":2,\"1097\":2,\"1174\":3,\"1176\":1,\"1181\":1,\"1204\":1,\"1219\":2,\"1241\":3,\"1261\":1,\"1400\":1,\"1451\":2,\"1453\":2,\"1454\":1,\"1455\":1,\"1500\":2,\"1546\":3,\"1601\":1,\"1641\":1,\"1672\":1,\"1706\":1,\"1719\":1,\"1791\":1}}],[\"builtin\",{\"0\":{\"25\":1,\"59\":1,\"60\":1,\"1401\":1},\"1\":{\"10\":2,\"14\":1,\"21\":1,\"30\":2,\"41\":1,\"46\":1,\"79\":1,\"80\":1,\"90\":2,\"93\":1,\"103\":1,\"106\":1,\"108\":2,\"111\":3,\"113\":1,\"115\":2,\"119\":2,\"121\":6,\"123\":1,\"151\":1,\"162\":5,\"181\":3,\"182\":1,\"219\":1,\"244\":2,\"260\":2,\"265\":2,\"272\":2,\"279\":2,\"280\":1,\"281\":1,\"286\":1,\"293\":2,\"294\":1,\"295\":1,\"300\":1,\"303\":2,\"313\":2,\"320\":2,\"328\":2,\"335\":2,\"337\":1,\"342\":2,\"344\":1,\"349\":2,\"354\":2,\"361\":2,\"371\":1,\"468\":1,\"515\":1,\"656\":1,\"707\":1,\"708\":2,\"711\":2,\"712\":1,\"717\":1,\"733\":1,\"779\":1,\"869\":1,\"873\":2,\"956\":2,\"958\":1,\"962\":1,\"1010\":1,\"1023\":1,\"1108\":1,\"1161\":1,\"1175\":3,\"1176\":11,\"1270\":1,\"1276\":1,\"1291\":1,\"1309\":1,\"1400\":2,\"1401\":1,\"1403\":1,\"1451\":1,\"1455\":1,\"1458\":1,\"1461\":2,\"1465\":1,\"1471\":1,\"1476\":1,\"1479\":1,\"1489\":1,\"1493\":1,\"1496\":1,\"1612\":2,\"1628\":1,\"1632\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1690\":1,\"1694\":2,\"1696\":1,\"1699\":2,\"1708\":2,\"1751\":1,\"1775\":1}}],[\"built\",{\"1\":{\"3\":1,\"8\":1,\"42\":1,\"104\":1,\"113\":1,\"515\":1,\"1628\":1,\"1634\":1,\"1716\":1}}],[\"but\",{\"0\":{\"39\":1,\"57\":1},\"1\":{\"3\":3,\"15\":1,\"26\":1,\"27\":1,\"34\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":2,\"40\":1,\"41\":1,\"42\":1,\"45\":1,\"46\":1,\"47\":1,\"50\":2,\"52\":3,\"53\":1,\"56\":1,\"57\":3,\"59\":2,\"69\":2,\"75\":1,\"76\":2,\"82\":1,\"91\":1,\"95\":1,\"97\":1,\"99\":2,\"100\":1,\"103\":1,\"110\":1,\"111\":4,\"115\":1,\"117\":3,\"119\":3,\"121\":1,\"131\":2,\"155\":1,\"159\":1,\"162\":1,\"163\":1,\"207\":1,\"211\":1,\"214\":1,\"219\":1,\"249\":1,\"376\":1,\"397\":1,\"437\":1,\"443\":1,\"445\":1,\"452\":1,\"516\":1,\"544\":1,\"559\":1,\"655\":1,\"656\":1,\"675\":1,\"679\":2,\"683\":1,\"694\":1,\"741\":1,\"755\":1,\"780\":1,\"819\":1,\"825\":2,\"829\":1,\"873\":1,\"897\":1,\"912\":2,\"916\":1,\"926\":2,\"962\":2,\"1110\":1,\"1123\":1,\"1141\":1,\"1178\":2,\"1195\":1,\"1201\":2,\"1205\":1,\"1217\":1,\"1270\":1,\"1321\":1,\"1378\":1,\"1405\":1,\"1422\":1,\"1448\":2,\"1450\":1,\"1488\":1,\"1513\":2,\"1538\":1,\"1593\":2,\"1598\":1,\"1614\":1,\"1628\":1,\"1631\":1,\"1654\":1,\"1682\":1,\"1686\":1,\"1691\":1,\"1706\":1,\"1708\":2,\"1712\":1,\"1723\":1,\"1726\":1,\"1728\":1,\"1737\":1,\"1741\":1,\"1744\":1,\"1746\":1,\"1747\":1,\"1753\":1,\"1780\":2,\"1788\":2,\"1793\":1}}],[\"bespoke\",{\"1\":{\"1716\":1}}],[\"besides\",{\"1\":{\"1542\":1}}],[\"best\",{\"0\":{\"607\":1,\"907\":1},\"1\":{\"59\":1,\"1717\":1}}],[\"beyond\",{\"1\":{\"857\":1,\"1741\":1}}],[\"beginning\",{\"1\":{\"162\":1,\"1802\":2,\"1805\":2}}],[\"benchmarks\",{\"1\":{\"109\":1}}],[\"benefits\",{\"1\":{\"1509\":1}}],[\"benefit\",{\"1\":{\"39\":1,\"50\":2}}],[\"ber\",{\"1\":{\"59\":4}}],[\"beta\",{\"1\":{\"986\":1,\"1022\":2,\"1335\":2,\"1654\":1,\"1691\":1}}],[\"better\",{\"0\":{\"742\":1},\"1\":{\"51\":1,\"80\":1,\"89\":1,\"93\":1,\"106\":1,\"108\":3,\"115\":2,\"129\":2,\"742\":1,\"755\":1,\"764\":2,\"1654\":1}}],[\"between\",{\"1\":{\"34\":1,\"45\":1,\"51\":1,\"52\":1,\"69\":1,\"95\":1,\"103\":1,\"111\":1,\"131\":1,\"216\":1,\"446\":1,\"526\":1,\"605\":1,\"780\":1,\"905\":1,\"1107\":2,\"1108\":1,\"1218\":1,\"1227\":1,\"1245\":1,\"1659\":1,\"1700\":1,\"1708\":1}}],[\"bell\",{\"1\":{\"1701\":1,\"1746\":1}}],[\"believe\",{\"1\":{\"46\":1}}],[\"belongs\",{\"1\":{\"1750\":1}}],[\"belonging\",{\"1\":{\"15\":1,\"26\":1,\"457\":1,\"1002\":1,\"1061\":1,\"1214\":1,\"1360\":1,\"1743\":1}}],[\"below\",{\"1\":{\"14\":1,\"47\":1,\"86\":1,\"189\":1,\"207\":1,\"208\":2,\"431\":1,\"520\":1,\"545\":1,\"546\":1,\"727\":1,\"743\":1,\"756\":1,\"777\":1,\"779\":1,\"942\":1,\"1095\":1,\"1276\":1,\"1375\":1,\"1383\":1,\"1421\":1,\"1449\":1,\"1455\":1,\"1487\":1,\"1516\":1,\"1546\":1,\"1554\":1,\"1559\":2,\"1615\":1,\"1628\":1,\"1641\":1,\"1650\":1,\"1666\":1,\"1674\":1,\"1701\":1,\"1716\":2,\"1723\":1,\"1735\":1,\"1747\":1,\"1756\":1,\"1772\":1,\"1797\":1,\"1798\":1}}],[\"behaving\",{\"1\":{\"375\":1,\"1404\":1}}],[\"behavioral\",{\"1\":{\"808\":1,\"815\":1,\"1069\":1}}],[\"behaviors\",{\"1\":{\"453\":1}}],[\"behavior\",{\"1\":{\"104\":1,\"117\":1,\"202\":1,\"219\":1,\"224\":1,\"252\":1,\"340\":1,\"347\":1,\"391\":1,\"436\":1,\"449\":1,\"453\":1,\"487\":1,\"532\":1,\"605\":1,\"653\":2,\"679\":1,\"710\":1,\"785\":1,\"795\":1,\"825\":1,\"869\":1,\"905\":1,\"912\":1,\"1097\":1,\"1190\":1,\"1201\":1,\"1244\":1,\"1250\":1,\"1276\":1,\"1321\":1,\"1487\":1,\"1498\":1,\"1561\":1,\"1706\":2,\"1725\":1,\"1741\":1,\"1798\":1}}],[\"behavioural\",{\"1\":{\"109\":2,\"208\":1}}],[\"behaviour\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"163\":1,\"182\":1,\"502\":1,\"508\":1,\"541\":1,\"643\":2,\"760\":1,\"1160\":1,\"1161\":1,\"1325\":1,\"1331\":1,\"1347\":1,\"1774\":1,\"1779\":1}}],[\"behave\",{\"1\":{\"218\":1,\"595\":1,\"681\":1,\"827\":1,\"867\":1,\"914\":1,\"1203\":1,\"1719\":1}}],[\"behaves\",{\"1\":{\"117\":1,\"241\":1,\"399\":1,\"487\":1,\"1154\":1,\"1564\":1,\"1570\":1,\"1578\":1,\"1582\":1}}],[\"behind\",{\"1\":{\"46\":1,\"55\":1,\"103\":1,\"202\":1,\"354\":1,\"361\":1,\"682\":1,\"808\":2,\"815\":1,\"828\":1,\"915\":1,\"956\":1,\"1067\":1,\"1069\":1,\"1178\":1,\"1204\":1,\"1723\":1}}],[\"being\",{\"1\":{\"42\":1,\"50\":2,\"53\":1,\"72\":1,\"93\":2,\"108\":1,\"111\":2,\"113\":1,\"119\":1,\"121\":1,\"142\":1,\"147\":2,\"153\":1,\"174\":1,\"182\":1,\"208\":1,\"214\":1,\"229\":1,\"231\":1,\"246\":1,\"264\":1,\"341\":1,\"438\":1,\"439\":2,\"442\":1,\"454\":1,\"511\":1,\"526\":5,\"605\":1,\"653\":1,\"682\":1,\"741\":1,\"755\":1,\"828\":1,\"905\":1,\"915\":1,\"1023\":1,\"1161\":2,\"1204\":1,\"1224\":1,\"1226\":1,\"1354\":1,\"1488\":1,\"1601\":1,\"1708\":1,\"1712\":1,\"1716\":1,\"1728\":1,\"1737\":1,\"1760\":1}}],[\"became\",{\"1\":{\"46\":1,\"147\":1}}],[\"because\",{\"1\":{\"3\":2,\"8\":1,\"10\":2,\"47\":4,\"50\":1,\"60\":1,\"95\":1,\"103\":1,\"121\":1,\"172\":1,\"182\":1,\"201\":1,\"223\":1,\"237\":1,\"247\":1,\"264\":1,\"274\":1,\"304\":1,\"315\":1,\"323\":1,\"330\":1,\"387\":1,\"423\":1,\"433\":1,\"440\":1,\"445\":2,\"523\":1,\"544\":1,\"545\":1,\"576\":1,\"596\":4,\"606\":1,\"656\":1,\"677\":2,\"679\":2,\"682\":1,\"733\":1,\"737\":1,\"742\":1,\"755\":2,\"795\":1,\"823\":2,\"825\":2,\"828\":1,\"897\":1,\"906\":1,\"910\":2,\"912\":2,\"915\":1,\"981\":1,\"999\":1,\"1058\":1,\"1096\":1,\"1131\":2,\"1178\":1,\"1190\":1,\"1199\":2,\"1201\":2,\"1204\":1,\"1219\":1,\"1248\":4,\"1251\":3,\"1252\":3,\"1253\":5,\"1267\":1,\"1280\":1,\"1387\":1,\"1400\":1,\"1403\":1,\"1448\":1,\"1451\":2,\"1461\":1,\"1509\":1,\"1513\":1,\"1554\":1,\"1555\":2,\"1559\":1,\"1560\":2,\"1561\":1,\"1628\":1,\"1631\":1,\"1650\":1,\"1690\":1,\"1696\":1,\"1717\":1,\"1773\":1,\"1778\":1,\"1780\":1,\"1808\":1}}],[\"becomes\",{\"1\":{\"511\":1,\"1265\":1}}],[\"become\",{\"1\":{\"39\":1,\"40\":1,\"52\":1,\"57\":1,\"76\":1,\"117\":1}}],[\"before|after|abort|eof\",{\"1\":{\"1376\":1}}],[\"beforehand\",{\"1\":{\"108\":1}}],[\"before\",{\"1\":{\"38\":1,\"47\":1,\"48\":1,\"56\":1,\"70\":1,\"78\":1,\"103\":1,\"113\":1,\"115\":1,\"119\":1,\"125\":1,\"147\":1,\"162\":2,\"163\":1,\"182\":1,\"304\":2,\"391\":1,\"516\":1,\"605\":1,\"710\":1,\"785\":1,\"905\":1,\"965\":1,\"1097\":1,\"1113\":1,\"1167\":1,\"1376\":1,\"1377\":2,\"1378\":3,\"1386\":1,\"1488\":1,\"1516\":1,\"1654\":1,\"1712\":1,\"1716\":1,\"1728\":1,\"1737\":1,\"1750\":2,\"1805\":1}}],[\"bexists\",{\"0\":{\"464\":1},\"1\":{\"15\":1,\"26\":1,\"465\":2,\"466\":1,\"467\":1,\"468\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"1241\":1}}],[\"be\",{\"0\":{\"1793\":1},\"1\":{\"3\":2,\"10\":2,\"13\":1,\"27\":1,\"33\":2,\"36\":2,\"38\":2,\"39\":1,\"40\":2,\"43\":1,\"46\":3,\"47\":6,\"50\":1,\"51\":2,\"53\":2,\"54\":2,\"56\":2,\"57\":1,\"59\":2,\"60\":1,\"61\":1,\"69\":2,\"78\":1,\"90\":2,\"93\":1,\"99\":1,\"103\":2,\"104\":1,\"108\":1,\"111\":3,\"113\":4,\"115\":4,\"117\":1,\"119\":4,\"121\":7,\"123\":3,\"127\":2,\"128\":1,\"129\":2,\"131\":2,\"135\":1,\"138\":1,\"142\":1,\"153\":2,\"162\":1,\"163\":2,\"182\":3,\"197\":1,\"198\":1,\"202\":2,\"207\":1,\"208\":1,\"209\":3,\"210\":1,\"211\":1,\"217\":2,\"219\":1,\"222\":1,\"223\":2,\"224\":1,\"225\":1,\"226\":1,\"228\":2,\"231\":1,\"235\":1,\"239\":1,\"246\":1,\"252\":1,\"254\":1,\"255\":1,\"256\":1,\"267\":1,\"270\":1,\"271\":1,\"274\":1,\"277\":1,\"278\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"312\":1,\"315\":2,\"323\":2,\"330\":2,\"337\":1,\"340\":3,\"344\":1,\"348\":1,\"354\":4,\"361\":4,\"377\":1,\"387\":1,\"391\":1,\"395\":1,\"397\":1,\"398\":1,\"403\":2,\"421\":1,\"431\":1,\"432\":1,\"433\":2,\"438\":2,\"439\":2,\"440\":4,\"445\":3,\"448\":1,\"449\":1,\"459\":1,\"468\":1,\"471\":1,\"485\":2,\"487\":1,\"497\":1,\"499\":1,\"500\":1,\"516\":2,\"517\":1,\"520\":2,\"523\":1,\"526\":1,\"544\":2,\"546\":1,\"560\":1,\"563\":1,\"566\":1,\"567\":1,\"576\":1,\"596\":3,\"605\":1,\"606\":1,\"609\":1,\"616\":1,\"643\":2,\"677\":1,\"679\":3,\"680\":1,\"682\":1,\"710\":1,\"730\":3,\"742\":1,\"747\":1,\"749\":2,\"751\":1,\"755\":3,\"760\":2,\"780\":4,\"781\":2,\"784\":1,\"785\":1,\"795\":1,\"801\":1,\"808\":1,\"815\":1,\"823\":1,\"825\":3,\"826\":1,\"828\":1,\"833\":1,\"839\":1,\"851\":1,\"857\":1,\"882\":2,\"897\":2,\"905\":1,\"906\":1,\"909\":1,\"910\":1,\"912\":3,\"913\":1,\"915\":1,\"921\":1,\"929\":2,\"949\":1,\"977\":2,\"981\":1,\"999\":5,\"1000\":2,\"1020\":1,\"1023\":1,\"1043\":2,\"1049\":1,\"1058\":5,\"1059\":2,\"1069\":1,\"1091\":2,\"1093\":1,\"1097\":1,\"1110\":2,\"1113\":1,\"1123\":2,\"1125\":5,\"1131\":1,\"1141\":1,\"1153\":1,\"1154\":4,\"1161\":1,\"1173\":1,\"1175\":1,\"1176\":2,\"1178\":2,\"1190\":1,\"1199\":1,\"1201\":3,\"1202\":1,\"1204\":1,\"1209\":1,\"1217\":2,\"1219\":5,\"1220\":2,\"1226\":2,\"1244\":1,\"1249\":1,\"1258\":1,\"1276\":1,\"1287\":1,\"1294\":1,\"1297\":1,\"1312\":3,\"1321\":1,\"1323\":1,\"1329\":1,\"1339\":1,\"1359\":1,\"1366\":2,\"1385\":1,\"1392\":1,\"1400\":1,\"1403\":2,\"1417\":2,\"1444\":2,\"1451\":4,\"1454\":1,\"1476\":1,\"1479\":1,\"1489\":1,\"1505\":2,\"1509\":2,\"1516\":1,\"1520\":4,\"1535\":1,\"1538\":4,\"1545\":2,\"1549\":3,\"1570\":1,\"1582\":1,\"1586\":2,\"1591\":1,\"1592\":2,\"1593\":4,\"1598\":2,\"1601\":1,\"1614\":1,\"1620\":2,\"1628\":2,\"1631\":1,\"1650\":1,\"1659\":1,\"1666\":1,\"1674\":1,\"1677\":1,\"1690\":1,\"1696\":1,\"1706\":2,\"1708\":3,\"1712\":2,\"1716\":1,\"1721\":1,\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1,\"1728\":1,\"1729\":2,\"1733\":1,\"1737\":2,\"1741\":1,\"1744\":2,\"1750\":2,\"1752\":2,\"1755\":1,\"1756\":1,\"1757\":1,\"1763\":1,\"1766\":1,\"1770\":2,\"1772\":3,\"1773\":2,\"1776\":1,\"1780\":1,\"1781\":1,\"1783\":2,\"1784\":2,\"1786\":1,\"1787\":3,\"1788\":1,\"1789\":2,\"1798\":3,\"1799\":1,\"1806\":1}}],[\"been\",{\"1\":{\"0\":1,\"1\":1,\"8\":1,\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"66\":1,\"90\":3,\"91\":1,\"99\":1,\"100\":1,\"108\":4,\"109\":1,\"113\":5,\"119\":2,\"121\":3,\"123\":1,\"162\":2,\"163\":1,\"166\":1,\"170\":1,\"312\":1,\"465\":1,\"468\":2,\"608\":1,\"762\":1,\"779\":1,\"873\":1,\"908\":1,\"920\":1,\"965\":1,\"978\":1,\"1113\":1,\"1142\":1,\"1254\":1,\"1366\":2,\"1647\":1,\"1664\":1,\"1672\":1,\"1784\":1}}],[\"hugely\",{\"1\":{\"1488\":1}}],[\"humans\",{\"1\":{\"1631\":1}}],[\"human\",{\"1\":{\"15\":1,\"26\":1,\"261\":1,\"445\":1,\"618\":1,\"762\":1,\"929\":1,\"947\":1,\"967\":1,\"1085\":1,\"1086\":1,\"1137\":1,\"1175\":2,\"1178\":1,\"1182\":1,\"1276\":1,\"1280\":1,\"1285\":1,\"1307\":1,\"1313\":1,\"1628\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1647\":1,\"1657\":1,\"1664\":1,\"1670\":1,\"1675\":1,\"1701\":1}}],[\"h1\",{\"1\":{\"633\":4}}],[\"h1>\",{\"1\":{\"633\":2}}],[\"h\",{\"1\":{\"432\":1,\"1300\":3,\"1805\":1}}],[\"hw\",{\"1\":{\"387\":2,\"390\":4,\"673\":1,\"682\":1,\"775\":5,\"820\":1,\"828\":1,\"915\":1,\"1093\":4,\"1196\":1,\"1204\":1}}],[\"hw=out\",{\"1\":{\"387\":1,\"390\":1}}],[\"hw=\",{\"1\":{\"387\":1,\"673\":1,\"820\":1,\"1196\":1}}],[\"hyphen\",{\"1\":{\"103\":2,\"389\":1,\"780\":1,\"929\":1}}],[\"hcl\",{\"0\":{\"1627\":1},\"1\":{\"28\":2,\"104\":1,\"1175\":1,\"1603\":2,\"1627\":1,\"1628\":6,\"1629\":1,\"1630\":5,\"1631\":8,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2}}],[\"hex\",{\"1\":{\"1300\":2,\"1401\":2,\"1432\":2}}],[\"he\",{\"1\":{\"881\":1}}],[\"heavily\",{\"1\":{\"1000\":1,\"1059\":1,\"1220\":1,\"1513\":1}}],[\"heavy\",{\"1\":{\"53\":1,\"216\":2}}],[\"head\",{\"1\":{\"205\":1,\"304\":1,\"367\":1,\"865\":1,\"1115\":1,\"1175\":1,\"1260\":3,\"1267\":4,\"1725\":1}}],[\"header\",{\"1\":{\"113\":1,\"227\":1,\"814\":1,\"1016\":1,\"1021\":1}}],[\"headers\",{\"1\":{\"90\":1,\"397\":1,\"808\":1,\"1022\":2,\"1067\":1}}],[\"headline\",{\"1\":{\"74\":1,\"93\":1}}],[\"headings\",{\"1\":{\"15\":1,\"26\":1,\"111\":1,\"347\":8,\"379\":1,\"419\":1,\"431\":1,\"520\":1,\"1084\":1,\"1487\":6}}],[\"heritage\",{\"1\":{\"48\":1}}],[\"here\",{\"1\":{\"40\":1,\"41\":1,\"47\":1,\"60\":1,\"64\":1,\"99\":1,\"103\":1,\"111\":1,\"437\":1,\"653\":2,\"679\":2,\"783\":1,\"825\":2,\"912\":2,\"1123\":1,\"1201\":2,\"1404\":1,\"1602\":1,\"1610\":1,\"1650\":1,\"1758\":1,\"1780\":1,\"1800\":1}}],[\"held\",{\"1\":{\"397\":1,\"1790\":1}}],[\"hello\",{\"1\":{\"41\":1,\"42\":1,\"115\":1,\"126\":1,\"217\":1,\"218\":1,\"223\":2,\"247\":1,\"353\":2,\"360\":2,\"387\":5,\"390\":2,\"438\":2,\"439\":2,\"479\":9,\"499\":1,\"575\":3,\"581\":1,\"582\":1,\"615\":2,\"655\":2,\"673\":4,\"682\":2,\"744\":9,\"757\":9,\"775\":2,\"781\":6,\"783\":5,\"784\":4,\"820\":4,\"828\":2,\"881\":1,\"915\":2,\"999\":5,\"1006\":1,\"1048\":4,\"1058\":5,\"1093\":1,\"1122\":2,\"1163\":2,\"1196\":4,\"1204\":2,\"1211\":6,\"1219\":5,\"1239\":2,\"1285\":3,\"1299\":2,\"1323\":1,\"1329\":1,\"1378\":3,\"1460\":2,\"1461\":2,\"1478\":2,\"1505\":4,\"1512\":2,\"1513\":3,\"1517\":2,\"1550\":2,\"1565\":2,\"1571\":7,\"1575\":7,\"1583\":7,\"1587\":2,\"1592\":4,\"1593\":8,\"1642\":9,\"1772\":26}}],[\"helping\",{\"1\":{\"1719\":1}}],[\"helper\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"helps\",{\"1\":{\"103\":1,\"1570\":1,\"1628\":1}}],[\"helpful\",{\"1\":{\"38\":1,\"56\":1}}],[\"help\",{\"1\":{\"15\":1,\"26\":1,\"43\":1,\"103\":1,\"121\":1,\"143\":1,\"220\":1,\"231\":1,\"432\":1,\"457\":1,\"708\":2,\"732\":1,\"930\":1,\"935\":1,\"972\":1,\"974\":1,\"984\":1,\"1175\":2,\"1176\":1,\"1179\":1,\"1236\":1,\"1237\":1,\"1278\":3,\"1280\":3,\"1784\":1}}],[\"hide\",{\"1\":{\"1797\":1,\"1798\":1}}],[\"hiding\",{\"1\":{\"1489\":1,\"1746\":1}}],[\"hidd\",{\"1\":{\"1484\":1}}],[\"hidden\",{\"1\":{\"354\":1,\"361\":1,\"682\":1,\"828\":1,\"915\":1,\"1204\":1,\"1799\":1}}],[\"hit\",{\"1\":{\"1377\":1,\"1378\":1}}],[\"hitting\",{\"1\":{\"121\":1}}],[\"hierarchy\",{\"1\":{\"208\":1}}],[\"hinttext=\",{\"1\":{\"648\":1}}],[\"hints\",{\"1\":{\"522\":1,\"1278\":1}}],[\"hint\",{\"0\":{\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1},\"1\":{\"95\":4,\"104\":1,\"108\":1,\"121\":1,\"129\":2,\"143\":1,\"174\":1,\"182\":1,\"439\":1,\"454\":1,\"743\":1,\"756\":1,\"1278\":1,\"1280\":1,\"1359\":1,\"1385\":1,\"1641\":1,\"1715\":4,\"1716\":1,\"1723\":2,\"1724\":4,\"1725\":2,\"1726\":1,\"1797\":1,\"1798\":1}}],[\"hinted\",{\"1\":{\"48\":1}}],[\"highest\",{\"1\":{\"1108\":1}}],[\"higherlower\",{\"1\":{\"1245\":1}}],[\"higher\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"207\":1,\"502\":1,\"1160\":1,\"1245\":1,\"1325\":1,\"1331\":1,\"1774\":1,\"1779\":1}}],[\"highpri\",{\"1\":{\"865\":1}}],[\"highlight\",{\"0\":{\"185\":1},\"1\":{\"743\":1,\"756\":1,\"1641\":1,\"1716\":1,\"1719\":1,\"1797\":3,\"1798\":3}}],[\"highlighted\",{\"1\":{\"174\":1,\"596\":1,\"1721\":1,\"1797\":1,\"1798\":1,\"1799\":1}}],[\"highlighter\",{\"1\":{\"103\":1,\"135\":1}}],[\"highlighting|data\",{\"1\":{\"597\":1}}],[\"highlighting>data\",{\"1\":{\"596\":2}}],[\"highlighting\",{\"0\":{\"1721\":1},\"1\":{\"103\":1,\"108\":1,\"593\":2,\"596\":6,\"597\":1,\"865\":4,\"1297\":1,\"1715\":1,\"1716\":1,\"1721\":2,\"1724\":1}}],[\"high\",{\"1\":{\"72\":1,\"121\":1,\"1245\":1}}],[\"history\",{\"0\":{\"46\":1,\"844\":1,\"1800\":1},\"1\":{\"15\":2,\"26\":2,\"64\":1,\"95\":1,\"507\":1,\"743\":2,\"756\":2,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"848\":2,\"1641\":2,\"1668\":1,\"1795\":1,\"1800\":3,\"1802\":1}}],[\"https\",{\"0\":{\"205\":1},\"1\":{\"86\":5,\"108\":1,\"167\":1,\"189\":1,\"201\":1,\"208\":1,\"986\":1,\"1018\":1,\"1022\":1,\"1102\":1,\"1731\":1,\"1733\":1,\"1767\":1}}],[\"httpd\",{\"1\":{\"28\":1,\"1603\":1,\"1608\":1,\"1609\":1}}],[\"http\",{\"0\":{\"1022\":1},\"1\":{\"15\":3,\"26\":3,\"113\":2,\"122\":1,\"210\":1,\"227\":1,\"397\":1,\"515\":2,\"516\":2,\"517\":2,\"530\":3,\"635\":3,\"641\":3,\"803\":1,\"804\":1,\"808\":3,\"809\":2,\"810\":1,\"814\":2,\"815\":2,\"816\":2,\"1016\":2,\"1021\":1,\"1022\":3,\"1024\":3,\"1062\":1,\"1063\":1,\"1068\":1,\"1069\":2,\"1070\":2,\"1102\":1,\"1103\":3,\"1731\":1,\"1733\":1}}],[\"html\",{\"1\":{\"15\":1,\"26\":1,\"167\":1,\"624\":1,\"629\":1,\"630\":1,\"631\":2,\"641\":1,\"1463\":1,\"1469\":1,\"1474\":1}}],[\"harry\",{\"1\":{\"1093\":2}}],[\"hardcoded\",{\"1\":{\"1725\":1}}],[\"harder\",{\"1\":{\"60\":1}}],[\"hard\",{\"1\":{\"33\":1,\"36\":1,\"54\":1,\"89\":2,\"108\":1}}],[\"hang\",{\"1\":{\"376\":1,\"1405\":1}}],[\"handing\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"handy\",{\"1\":{\"255\":1,\"340\":1,\"347\":1,\"1591\":1}}],[\"handling\",{\"1\":{\"75\":1,\"99\":1,\"115\":1,\"119\":1,\"159\":1,\"421\":1,\"606\":1,\"906\":1,\"1554\":1,\"1559\":1,\"1561\":1}}],[\"handled\",{\"1\":{\"127\":1,\"129\":1,\"147\":1,\"168\":1}}],[\"handlers\",{\"1\":{\"270\":1,\"277\":1,\"1016\":1,\"1176\":1}}],[\"handler\",{\"1\":{\"15\":2,\"26\":2,\"30\":2,\"87\":1,\"110\":2,\"116\":1,\"123\":1,\"164\":1,\"265\":2,\"270\":1,\"272\":2,\"277\":1,\"279\":2,\"280\":1,\"286\":1,\"293\":2,\"294\":1,\"300\":1,\"313\":2,\"320\":2,\"328\":2,\"335\":2,\"342\":2,\"349\":2,\"530\":1,\"651\":1,\"656\":1,\"713\":1,\"816\":1,\"1014\":1,\"1015\":1,\"1024\":1,\"1025\":1,\"1026\":1,\"1027\":2,\"1029\":1,\"1031\":1,\"1182\":2,\"1301\":1,\"1612\":2,\"1626\":1,\"1632\":3,\"1636\":1,\"1645\":3,\"1657\":3,\"1670\":3,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":3,\"1699\":3,\"1782\":1}}],[\"handles\",{\"1\":{\"3\":1,\"15\":2,\"26\":2,\"94\":1,\"120\":1,\"412\":2,\"496\":1,\"497\":1,\"502\":1,\"861\":2,\"1039\":2,\"1116\":1,\"1171\":2,\"1255\":2,\"1320\":1,\"1325\":1,\"1331\":2,\"1557\":1,\"1562\":1,\"1774\":1,\"1779\":1}}],[\"handle\",{\"1\":{\"3\":2,\"111\":1,\"421\":1,\"643\":1,\"795\":1,\"1190\":1,\"1647\":1,\"1664\":1}}],[\"hand\",{\"1\":{\"24\":8,\"105\":4,\"837\":6,\"843\":6,\"954\":2,\"1502\":8,\"1554\":2,\"1557\":2,\"1559\":2,\"1562\":2,\"1568\":6,\"1569\":2,\"1572\":6,\"1573\":2,\"1574\":1,\"1576\":6,\"1577\":2,\"1580\":6,\"1581\":2,\"1584\":6,\"1727\":4,\"1748\":8,\"1773\":1,\"1779\":8}}],[\"hatch\",{\"1\":{\"255\":1}}],[\"halved\",{\"1\":{\"182\":1}}],[\"hacks\",{\"1\":{\"182\":1}}],[\"haywire\",{\"1\":{\"93\":1}}],[\"had\",{\"1\":{\"46\":1,\"47\":1,\"50\":1,\"93\":1,\"113\":2,\"978\":1,\"1366\":1}}],[\"happy\",{\"1\":{\"40\":9,\"41\":1,\"48\":1,\"1772\":1}}],[\"happens\",{\"1\":{\"42\":1,\"95\":1,\"596\":1,\"1366\":1,\"1546\":1,\"1778\":1,\"1780\":1}}],[\"happening\",{\"1\":{\"40\":1,\"41\":1}}],[\"happen\",{\"1\":{\"8\":1,\"95\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1,\"468\":1,\"986\":1,\"1719\":1}}],[\"having\",{\"1\":{\"40\":1,\"42\":1,\"162\":1,\"204\":1,\"462\":1,\"741\":1,\"956\":1,\"1509\":1,\"1741\":1}}],[\"haven\",{\"1\":{\"108\":1,\"347\":2}}],[\"have\",{\"1\":{\"3\":1,\"8\":1,\"34\":1,\"39\":2,\"41\":1,\"45\":1,\"47\":1,\"48\":1,\"50\":1,\"51\":1,\"57\":2,\"59\":1,\"69\":1,\"89\":1,\"90\":4,\"91\":2,\"100\":2,\"109\":1,\"113\":2,\"121\":1,\"131\":1,\"162\":1,\"166\":1,\"167\":1,\"174\":1,\"201\":2,\"208\":1,\"210\":1,\"211\":1,\"217\":1,\"231\":1,\"251\":1,\"292\":1,\"340\":1,\"368\":1,\"375\":3,\"387\":1,\"398\":1,\"440\":2,\"445\":1,\"452\":1,\"455\":1,\"465\":1,\"468\":1,\"526\":1,\"545\":1,\"608\":1,\"643\":3,\"655\":1,\"755\":1,\"779\":1,\"780\":1,\"808\":1,\"859\":1,\"908\":1,\"929\":1,\"965\":1,\"986\":1,\"1068\":1,\"1102\":1,\"1131\":1,\"1142\":1,\"1245\":3,\"1267\":1,\"1276\":1,\"1350\":1,\"1387\":1,\"1400\":1,\"1404\":3,\"1479\":2,\"1505\":2,\"1509\":1,\"1592\":2,\"1610\":1,\"1647\":1,\"1664\":1,\"1712\":1,\"1713\":1,\"1716\":1,\"1731\":1,\"1737\":1,\"1738\":1,\"1750\":1,\"1770\":1,\"1780\":1,\"1789\":1,\"1793\":1}}],[\"hassuffix\",{\"1\":{\"1021\":1}}],[\"haskell\",{\"1\":{\"211\":1}}],[\"hasklig\",{\"1\":{\"211\":1}}],[\"hasn\",{\"1\":{\"108\":1,\"113\":2}}],[\"hashed\",{\"1\":{\"1712\":1,\"1737\":1}}],[\"hashes\",{\"1\":{\"60\":1,\"1772\":1}}],[\"hash\",{\"1\":{\"223\":1,\"395\":1,\"1300\":1,\"1673\":1,\"1712\":3,\"1737\":3}}],[\"hashtags\",{\"1\":{\"115\":1}}],[\"hashicorp\",{\"1\":{\"28\":1,\"1603\":1,\"1627\":1,\"1628\":2,\"1629\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1}}],[\"has\",{\"1\":{\"0\":2,\"1\":1,\"3\":1,\"40\":1,\"42\":1,\"48\":1,\"50\":1,\"60\":1,\"66\":1,\"68\":1,\"77\":1,\"78\":1,\"90\":1,\"93\":1,\"98\":1,\"103\":1,\"108\":2,\"109\":1,\"111\":1,\"113\":3,\"115\":1,\"119\":3,\"121\":5,\"123\":1,\"160\":1,\"162\":1,\"163\":1,\"170\":1,\"174\":1,\"223\":1,\"312\":1,\"371\":1,\"468\":2,\"545\":1,\"567\":1,\"571\":1,\"645\":1,\"743\":1,\"756\":1,\"762\":1,\"808\":1,\"814\":1,\"815\":1,\"873\":2,\"920\":1,\"1069\":1,\"1113\":1,\"1142\":1,\"1254\":1,\"1270\":1,\"1347\":1,\"1365\":1,\"1366\":3,\"1377\":1,\"1387\":1,\"1393\":1,\"1401\":1,\"1554\":1,\"1559\":1,\"1561\":1,\"1641\":1,\"1672\":1,\"1706\":1,\"1725\":1,\"1728\":1,\"1732\":1,\"1746\":1,\"1749\":1,\"1784\":1,\"1790\":1}}],[\"hotkey\",{\"1\":{\"1808\":1}}],[\"hotkeys\",{\"0\":{\"1718\":1,\"1795\":1,\"1803\":1},\"1\":{\"2\":1,\"23\":2,\"130\":2,\"162\":1,\"164\":2,\"172\":1,\"181\":2,\"183\":2,\"1388\":2,\"1715\":1,\"1718\":1,\"1727\":2,\"1774\":2,\"1795\":2,\"1800\":1,\"1801\":1}}],[\"hook\",{\"1\":{\"1693\":2}}],[\"hooks\",{\"0\":{\"1606\":1,\"1611\":1,\"1617\":1,\"1621\":1,\"1625\":1,\"1631\":1,\"1635\":1,\"1644\":1,\"1656\":1,\"1669\":1,\"1678\":1,\"1683\":1,\"1687\":1,\"1693\":1,\"1698\":1},\"1\":{\"526\":1,\"814\":1,\"1602\":1}}],[\"holds\",{\"1\":{\"162\":1,\"397\":1,\"516\":1,\"1766\":1}}],[\"honoring\",{\"1\":{\"121\":1}}],[\"honoured\",{\"1\":{\"3\":1,\"440\":1}}],[\"homebrew\",{\"1\":{\"119\":1,\"162\":1,\"190\":1}}],[\"home\",{\"1\":{\"24\":1,\"436\":6,\"506\":1,\"865\":1,\"1175\":1,\"1226\":1,\"1502\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":2,\"1598\":3,\"1639\":1,\"1701\":2,\"1710\":2,\"1746\":1,\"1750\":1,\"1752\":1,\"1753\":4,\"1802\":1}}],[\"hostname\",{\"0\":{\"1768\":1},\"1\":{\"1768\":1}}],[\"hosted\",{\"1\":{\"1629\":1,\"1733\":1}}],[\"host\",{\"1\":{\"15\":1,\"26\":1,\"42\":1,\"553\":1,\"554\":1,\"555\":1,\"989\":1,\"993\":1,\"1043\":1,\"1044\":1,\"1300\":1}}],[\"hosts\",{\"1\":{\"15\":1,\"26\":1,\"113\":1,\"549\":1,\"550\":1,\"558\":1,\"993\":1,\"1044\":1,\"1691\":1}}],[\"howdie\",{\"1\":{\"247\":1}}],[\"however\",{\"1\":{\"8\":1,\"10\":1,\"33\":1,\"36\":1,\"39\":1,\"40\":1,\"41\":1,\"47\":3,\"50\":3,\"54\":1,\"58\":1,\"72\":1,\"90\":2,\"95\":1,\"103\":1,\"108\":1,\"109\":1,\"111\":1,\"117\":1,\"121\":2,\"126\":1,\"142\":1,\"153\":1,\"182\":1,\"198\":1,\"199\":1,\"207\":1,\"209\":1,\"211\":1,\"218\":1,\"223\":1,\"227\":1,\"244\":1,\"264\":1,\"291\":1,\"304\":1,\"376\":1,\"387\":1,\"391\":2,\"395\":2,\"397\":1,\"398\":1,\"399\":1,\"403\":1,\"430\":1,\"433\":1,\"440\":2,\"445\":1,\"468\":1,\"474\":1,\"480\":1,\"491\":1,\"518\":1,\"566\":1,\"591\":1,\"596\":1,\"607\":1,\"608\":1,\"616\":1,\"643\":1,\"653\":1,\"656\":1,\"679\":1,\"681\":1,\"701\":1,\"710\":2,\"730\":1,\"737\":1,\"755\":1,\"764\":1,\"780\":2,\"782\":1,\"785\":2,\"795\":1,\"825\":1,\"827\":1,\"857\":1,\"859\":1,\"869\":1,\"882\":1,\"907\":1,\"908\":1,\"912\":1,\"914\":1,\"929\":1,\"984\":1,\"989\":1,\"1000\":1,\"1059\":1,\"1097\":2,\"1125\":1,\"1153\":1,\"1166\":1,\"1167\":1,\"1175\":1,\"1179\":1,\"1190\":1,\"1201\":1,\"1203\":1,\"1220\":1,\"1237\":1,\"1267\":1,\"1287\":1,\"1294\":1,\"1312\":1,\"1317\":1,\"1339\":1,\"1387\":1,\"1400\":1,\"1403\":1,\"1405\":1,\"1448\":1,\"1461\":1,\"1486\":1,\"1505\":1,\"1516\":1,\"1538\":1,\"1545\":1,\"1549\":1,\"1592\":1,\"1593\":1,\"1628\":1,\"1638\":1,\"1650\":1,\"1654\":1,\"1666\":1,\"1690\":1,\"1696\":1,\"1708\":1,\"1719\":1,\"1725\":1,\"1741\":1,\"1753\":1,\"1757\":1,\"1783\":1,\"1789\":1,\"1798\":1,\"1799\":1}}],[\"how\",{\"0\":{\"1702\":1,\"1789\":1},\"1\":{\"3\":4,\"23\":4,\"33\":2,\"34\":1,\"36\":2,\"39\":1,\"41\":1,\"45\":1,\"47\":1,\"49\":1,\"50\":1,\"51\":1,\"54\":2,\"57\":1,\"59\":1,\"78\":1,\"87\":1,\"90\":2,\"93\":1,\"94\":2,\"110\":1,\"113\":1,\"183\":1,\"207\":4,\"227\":1,\"235\":1,\"354\":1,\"361\":1,\"387\":2,\"454\":1,\"487\":1,\"516\":1,\"563\":1,\"605\":1,\"611\":1,\"685\":1,\"743\":1,\"749\":1,\"756\":1,\"802\":1,\"831\":1,\"905\":1,\"917\":1,\"929\":1,\"986\":1,\"999\":1,\"1031\":1,\"1058\":1,\"1163\":1,\"1207\":1,\"1219\":1,\"1227\":1,\"1424\":1,\"1487\":1,\"1505\":1,\"1513\":1,\"1516\":1,\"1518\":1,\"1547\":1,\"1579\":1,\"1592\":1,\"1593\":1,\"1615\":1,\"1641\":1,\"1675\":1,\"1708\":2,\"1710\":1,\"1727\":2,\"1739\":1,\"1753\":1,\"1770\":1,\"1771\":1,\"1772\":1,\"1780\":1,\"1783\":1,\"1784\":1,\"1793\":1,\"1794\":1,\"1814\":1}}],[\"w$\",{\"1\":{\"1505\":1,\"1592\":1}}],[\"wq\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"www\",{\"1\":{\"1022\":4}}],[\"w\",{\"1\":{\"311\":7,\"312\":12,\"695\":2,\"1805\":2}}],[\"wget\",{\"1\":{\"201\":1}}],[\"wsl\",{\"1\":{\"113\":3,\"121\":1,\"197\":1,\"202\":3}}],[\"wc\",{\"1\":{\"108\":1,\"544\":5,\"897\":5}}],[\"wraps\",{\"1\":{\"1278\":2,\"1280\":1}}],[\"wrap\",{\"1\":{\"315\":1,\"323\":1,\"330\":1}}],[\"wrapper\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"wrappers\",{\"1\":{\"57\":1}}],[\"wrapped\",{\"1\":{\"93\":1,\"1091\":1}}],[\"wrong\",{\"1\":{\"108\":1,\"182\":1}}],[\"wrote\",{\"1\":{\"50\":1,\"677\":1,\"823\":1,\"910\":1,\"1199\":1,\"1716\":1}}],[\"writing\",{\"0\":{\"743\":1,\"750\":1,\"756\":1,\"1641\":1},\"1\":{\"47\":2,\"111\":1,\"115\":1,\"127\":1,\"260\":1,\"264\":1,\"270\":1,\"277\":1,\"303\":1,\"354\":1,\"361\":1,\"447\":1,\"522\":1,\"677\":1,\"742\":1,\"743\":1,\"755\":1,\"756\":1,\"791\":2,\"814\":1,\"823\":1,\"857\":1,\"910\":1,\"924\":1,\"999\":1,\"1026\":1,\"1058\":1,\"1186\":1,\"1199\":1,\"1217\":1,\"1219\":1,\"1386\":1,\"1487\":1,\"1571\":1,\"1575\":1,\"1583\":1,\"1641\":1,\"1666\":1,\"1725\":1}}],[\"written\",{\"1\":{\"15\":1,\"26\":1,\"50\":1,\"72\":1,\"95\":1,\"99\":2,\"104\":1,\"115\":1,\"121\":1,\"153\":1,\"214\":1,\"354\":1,\"361\":1,\"445\":1,\"483\":1,\"576\":1,\"618\":1,\"730\":1,\"857\":1,\"999\":1,\"1052\":1,\"1058\":1,\"1099\":1,\"1100\":1,\"1141\":1,\"1217\":1,\"1219\":1,\"1245\":1,\"1249\":1,\"1276\":1,\"1294\":3,\"1359\":1,\"1366\":1,\"1371\":1,\"1377\":1,\"1385\":1,\"1401\":2,\"1432\":2,\"1488\":1,\"1631\":1,\"1772\":1,\"1777\":1,\"1778\":1}}],[\"writeln\",{\"1\":{\"311\":2,\"340\":9,\"345\":1,\"347\":15}}],[\"writer\",{\"1\":{\"113\":1,\"311\":6,\"312\":7}}],[\"writearray\",{\"0\":{\"307\":1},\"1\":{\"30\":1,\"265\":1,\"272\":1,\"279\":1,\"286\":1,\"293\":1,\"300\":1,\"309\":1,\"310\":2,\"311\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"953\":2,\"1175\":3,\"1176\":2,\"1617\":1,\"1625\":1,\"1631\":1,\"1632\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1683\":1,\"1687\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"writestring\",{\"1\":{\"309\":1,\"311\":1,\"312\":1}}],[\"writes\",{\"1\":{\"15\":3,\"26\":3,\"120\":2,\"121\":2,\"308\":1,\"309\":1,\"483\":3,\"618\":3,\"748\":3,\"761\":2,\"832\":1,\"837\":1,\"838\":1,\"843\":1,\"975\":2,\"1016\":1,\"1052\":3,\"1099\":1,\"1100\":1,\"1103\":2,\"1126\":2,\"1297\":1,\"1301\":2,\"1568\":2,\"1617\":1,\"1625\":1,\"1644\":1,\"1683\":1,\"1687\":1,\"1774\":2}}],[\"write\",{\"0\":{\"1789\":1},\"1\":{\"15\":2,\"26\":2,\"30\":2,\"34\":2,\"41\":1,\"42\":1,\"45\":2,\"47\":4,\"48\":2,\"50\":3,\"51\":2,\"53\":2,\"90\":1,\"93\":1,\"121\":1,\"259\":1,\"264\":1,\"265\":1,\"267\":1,\"272\":1,\"274\":1,\"279\":1,\"281\":1,\"286\":1,\"288\":1,\"293\":1,\"295\":1,\"300\":1,\"302\":1,\"307\":1,\"308\":2,\"309\":1,\"311\":1,\"312\":3,\"319\":1,\"320\":1,\"327\":1,\"328\":1,\"334\":1,\"335\":1,\"340\":15,\"342\":1,\"349\":1,\"353\":1,\"360\":1,\"361\":2,\"432\":1,\"476\":1,\"477\":1,\"478\":1,\"508\":1,\"526\":3,\"611\":1,\"613\":1,\"614\":1,\"618\":1,\"685\":1,\"695\":4,\"743\":2,\"749\":1,\"752\":1,\"756\":2,\"763\":1,\"831\":1,\"837\":1,\"843\":1,\"917\":1,\"956\":1,\"975\":1,\"996\":1,\"999\":2,\"1016\":1,\"1043\":1,\"1046\":1,\"1047\":1,\"1052\":1,\"1058\":2,\"1093\":1,\"1125\":2,\"1126\":1,\"1207\":1,\"1219\":2,\"1284\":1,\"1296\":1,\"1300\":2,\"1303\":1,\"1304\":1,\"1307\":1,\"1312\":2,\"1313\":1,\"1366\":1,\"1478\":1,\"1507\":1,\"1513\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1632\":1,\"1641\":2,\"1645\":1,\"1647\":1,\"1657\":1,\"1664\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1705\":1,\"1732\":2,\"1772\":4,\"1789\":2}}],[\"werner\",{\"1\":{\"1691\":1}}],[\"were\",{\"1\":{\"46\":3,\"47\":2,\"61\":1,\"90\":1,\"108\":1,\"151\":1,\"182\":1,\"468\":2,\"499\":1,\"722\":1,\"727\":1,\"733\":1,\"1123\":1,\"1141\":1,\"1253\":1,\"1311\":2,\"1719\":1}}],[\"webp\",{\"1\":{\"1010\":1}}],[\"website\",{\"1\":{\"90\":1,\"95\":1,\"113\":1,\"115\":1,\"119\":2,\"121\":1}}],[\"wednesnight\",{\"1\":{\"1133\":1}}],[\"wednes\",{\"1\":{\"888\":1}}],[\"wednesdayfoobar\",{\"1\":{\"1232\":1}}],[\"wednesday\",{\"1\":{\"40\":2,\"41\":1,\"42\":1,\"376\":1,\"416\":1,\"438\":1,\"439\":1,\"750\":1,\"875\":1,\"888\":2,\"944\":1,\"964\":2,\"1074\":1,\"1132\":1,\"1147\":2,\"1232\":1,\"1272\":1,\"1400\":4,\"1403\":4,\"1405\":1,\"1421\":1,\"1445\":2,\"1446\":2,\"1447\":2,\"1448\":3,\"1449\":1}}],[\"wed\",{\"1\":{\"750\":1,\"944\":4,\"1449\":1,\"1505\":2,\"1579\":10,\"1592\":2}}],[\"weekdays\",{\"1\":{\"377\":1,\"1422\":1,\"1439\":1,\"1535\":1,\"1536\":1,\"1540\":1}}],[\"week\",{\"1\":{\"371\":1,\"437\":1,\"439\":5}}],[\"weeks\",{\"1\":{\"68\":1,\"160\":1}}],[\"weird\",{\"1\":{\"103\":1,\"742\":1}}],[\"weights\",{\"1\":{\"53\":1}}],[\"well\",{\"1\":{\"39\":1,\"47\":2,\"48\":1,\"51\":1,\"59\":1,\"70\":1,\"89\":1,\"108\":1,\"125\":1,\"127\":1,\"174\":1,\"207\":1,\"211\":1,\"214\":1,\"226\":1,\"252\":1,\"261\":1,\"372\":1,\"421\":1,\"764\":1,\"851\":1,\"859\":1,\"882\":1,\"1327\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1,\"1593\":1,\"1598\":1,\"1659\":1,\"1781\":1}}],[\"welcome\",{\"1\":{\"8\":1}}],[\"we\",{\"1\":{\"37\":1,\"40\":4,\"41\":1,\"42\":2,\"52\":1,\"60\":1,\"153\":1,\"201\":1,\"214\":1,\"216\":1,\"261\":1,\"304\":2,\"347\":3,\"423\":2,\"443\":1,\"488\":2,\"526\":1,\"535\":2,\"606\":1,\"743\":1,\"756\":1,\"762\":2,\"888\":1,\"906\":1,\"1141\":1,\"1161\":1,\"1267\":1,\"1350\":1,\"1513\":1,\"1641\":1,\"1716\":1,\"1719\":1,\"1759\":1}}],[\"waning\",{\"1\":{\"1449\":2}}],[\"wanted\",{\"1\":{\"59\":1,\"444\":1,\"653\":1,\"655\":1,\"779\":1}}],[\"want\",{\"1\":{\"50\":1,\"52\":1,\"113\":1,\"215\":1,\"219\":1,\"304\":1,\"347\":1,\"440\":1,\"452\":2,\"455\":1,\"480\":1,\"494\":1,\"616\":1,\"626\":1,\"682\":2,\"749\":1,\"794\":1,\"814\":1,\"828\":2,\"915\":2,\"924\":1,\"942\":1,\"989\":2,\"1023\":1,\"1043\":2,\"1189\":1,\"1204\":2,\"1300\":1,\"1387\":1,\"1403\":1,\"1448\":1,\"1461\":1,\"1496\":1,\"1634\":1,\"1677\":1,\"1708\":1,\"1723\":2,\"1772\":1,\"1788\":1,\"1789\":2}}],[\"waxing\",{\"1\":{\"1449\":2}}],[\"waking\",{\"1\":{\"1293\":2}}],[\"waiting\",{\"1\":{\"921\":1}}],[\"wait\",{\"1\":{\"516\":1,\"920\":2,\"921\":1,\"1397\":1}}],[\"warning\",{\"1\":{\"176\":1,\"1110\":1,\"1716\":2,\"1750\":1}}],[\"warnings\",{\"1\":{\"139\":1}}],[\"warn\",{\"1\":{\"113\":1}}],[\"warts\",{\"1\":{\"52\":1}}],[\"watched\",{\"1\":{\"1362\":1}}],[\"watch\",{\"1\":{\"29\":1,\"647\":1,\"1361\":1,\"1368\":1}}],[\"wasn\",{\"1\":{\"46\":1,\"113\":1,\"121\":3,\"182\":1,\"444\":1}}],[\"was\",{\"1\":{\"23\":1,\"37\":2,\"42\":1,\"46\":4,\"47\":2,\"50\":1,\"52\":1,\"86\":1,\"90\":1,\"94\":1,\"103\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":2,\"113\":1,\"119\":1,\"121\":4,\"147\":1,\"151\":1,\"162\":1,\"176\":1,\"180\":1,\"182\":4,\"183\":1,\"211\":2,\"223\":1,\"227\":1,\"423\":1,\"468\":1,\"499\":1,\"730\":1,\"755\":1,\"783\":1,\"1031\":1,\"1142\":1,\"1251\":1,\"1253\":1,\"1372\":1,\"1400\":2,\"1403\":1,\"1416\":1,\"1448\":1,\"1710\":4,\"1716\":1,\"1728\":1,\"1735\":1,\"1739\":1,\"1746\":1,\"1761\":1}}],[\"ways\",{\"1\":{\"43\":1,\"50\":1,\"62\":1,\"222\":1,\"246\":1,\"387\":1,\"605\":1,\"749\":1,\"858\":1,\"905\":1,\"986\":1}}],[\"way\",{\"1\":{\"3\":2,\"15\":3,\"26\":3,\"38\":1,\"44\":1,\"48\":1,\"51\":1,\"56\":1,\"61\":1,\"110\":3,\"113\":1,\"117\":1,\"122\":2,\"154\":1,\"218\":1,\"228\":1,\"304\":1,\"369\":2,\"370\":1,\"378\":2,\"383\":2,\"387\":1,\"419\":2,\"432\":1,\"433\":1,\"445\":1,\"468\":1,\"548\":3,\"569\":1,\"582\":1,\"597\":1,\"599\":2,\"605\":1,\"682\":1,\"692\":1,\"720\":1,\"742\":1,\"745\":2,\"758\":2,\"828\":1,\"871\":2,\"872\":1,\"877\":2,\"884\":2,\"891\":2,\"898\":2,\"905\":1,\"915\":1,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"977\":1,\"1002\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":3,\"1150\":2,\"1204\":1,\"1218\":1,\"1235\":2,\"1269\":1,\"1274\":2,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1507\":1,\"1520\":1,\"1536\":3,\"1538\":1,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1,\"1719\":2,\"1723\":1,\"1728\":5,\"1729\":1,\"1731\":1,\"1760\":1,\"1775\":1,\"1799\":1}}],[\"why\",{\"0\":{\"55\":1},\"1\":{\"46\":1,\"48\":1,\"119\":1,\"616\":1,\"1489\":1,\"1593\":1,\"1728\":1}}],[\"whose\",{\"1\":{\"1260\":1}}],[\"who\",{\"1\":{\"43\":2,\"48\":3,\"51\":1,\"247\":1,\"1091\":1,\"1753\":2}}],[\"whole\",{\"1\":{\"28\":1,\"183\":1,\"253\":1,\"661\":1,\"926\":1,\"1154\":2,\"1603\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1633\":1,\"1634\":2,\"1677\":1,\"1679\":1,\"1688\":1,\"1803\":1}}],[\"whenever\",{\"1\":{\"1362\":1,\"1520\":1,\"1538\":1}}],[\"when\",{\"0\":{\"743\":1,\"755\":1,\"756\":1,\"795\":1,\"1190\":1,\"1250\":1,\"1641\":1},\"1\":{\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"47\":1,\"48\":1,\"50\":1,\"52\":1,\"56\":1,\"57\":1,\"93\":1,\"95\":1,\"103\":3,\"111\":2,\"113\":5,\"115\":2,\"117\":4,\"119\":1,\"121\":7,\"127\":1,\"129\":1,\"134\":1,\"135\":1,\"139\":2,\"142\":1,\"147\":2,\"151\":1,\"162\":1,\"163\":1,\"167\":1,\"174\":2,\"182\":2,\"227\":1,\"259\":1,\"264\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"302\":1,\"308\":1,\"337\":1,\"344\":1,\"409\":1,\"421\":1,\"441\":1,\"442\":1,\"444\":1,\"445\":1,\"448\":1,\"468\":1,\"491\":1,\"526\":4,\"527\":1,\"528\":1,\"568\":1,\"576\":1,\"605\":2,\"607\":2,\"626\":1,\"643\":1,\"677\":3,\"683\":2,\"732\":2,\"743\":4,\"747\":1,\"755\":1,\"756\":4,\"764\":2,\"781\":1,\"782\":1,\"783\":3,\"784\":1,\"795\":1,\"808\":1,\"823\":3,\"829\":2,\"865\":1,\"905\":2,\"907\":2,\"910\":3,\"916\":2,\"942\":1,\"965\":1,\"999\":1,\"1022\":1,\"1026\":1,\"1036\":1,\"1043\":5,\"1058\":1,\"1068\":1,\"1158\":2,\"1169\":1,\"1170\":1,\"1175\":1,\"1178\":3,\"1180\":1,\"1190\":1,\"1199\":3,\"1205\":2,\"1217\":1,\"1219\":1,\"1278\":1,\"1287\":1,\"1353\":1,\"1364\":1,\"1382\":1,\"1383\":1,\"1387\":1,\"1396\":1,\"1429\":1,\"1432\":1,\"1437\":1,\"1461\":1,\"1487\":4,\"1496\":1,\"1509\":1,\"1554\":1,\"1559\":1,\"1566\":1,\"1574\":1,\"1624\":1,\"1641\":4,\"1644\":2,\"1666\":2,\"1672\":1,\"1691\":1,\"1708\":4,\"1710\":1,\"1712\":1,\"1716\":3,\"1719\":1,\"1723\":1,\"1737\":1,\"1773\":1,\"1776\":1,\"1798\":2,\"1802\":1,\"1806\":1}}],[\"whereas\",{\"1\":{\"42\":1,\"53\":1,\"214\":1,\"217\":1,\"218\":1,\"222\":1,\"526\":1,\"605\":1,\"905\":1,\"1591\":1,\"1654\":1}}],[\"whereby\",{\"1\":{\"40\":1}}],[\"where\",{\"1\":{\"23\":1,\"39\":1,\"42\":3,\"50\":3,\"52\":1,\"57\":1,\"60\":1,\"78\":1,\"90\":2,\"94\":1,\"95\":1,\"99\":2,\"103\":1,\"108\":3,\"110\":1,\"111\":3,\"113\":4,\"115\":2,\"121\":2,\"123\":1,\"138\":1,\"147\":1,\"151\":1,\"183\":1,\"228\":1,\"231\":2,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"380\":1,\"387\":1,\"399\":2,\"431\":1,\"439\":1,\"441\":1,\"447\":1,\"491\":1,\"516\":1,\"520\":1,\"526\":1,\"605\":2,\"606\":1,\"607\":1,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"653\":1,\"678\":1,\"679\":1,\"680\":1,\"733\":1,\"737\":1,\"755\":2,\"779\":1,\"824\":1,\"825\":1,\"826\":1,\"868\":1,\"905\":2,\"906\":1,\"907\":1,\"911\":1,\"912\":1,\"913\":1,\"999\":1,\"1000\":1,\"1031\":1,\"1058\":1,\"1059\":1,\"1131\":1,\"1200\":1,\"1201\":1,\"1202\":1,\"1217\":1,\"1219\":1,\"1220\":1,\"1321\":1,\"1327\":1,\"1329\":1,\"1339\":1,\"1403\":1,\"1448\":1,\"1483\":2,\"1509\":1,\"1549\":2,\"1570\":1,\"1586\":2,\"1591\":1,\"1602\":1,\"1672\":1,\"1706\":3,\"1710\":1,\"1712\":1,\"1716\":1,\"1722\":1,\"1728\":1,\"1735\":1,\"1737\":1,\"1739\":1,\"1741\":1,\"1746\":1,\"1747\":1,\"1751\":1,\"1753\":1,\"1773\":1,\"1776\":1,\"1777\":1,\"1783\":1,\"1797\":2}}],[\"whether\",{\"1\":{\"15\":2,\"26\":2,\"43\":1,\"210\":1,\"218\":1,\"405\":1,\"406\":1,\"412\":1,\"488\":1,\"523\":1,\"535\":1,\"575\":1,\"703\":2,\"861\":2,\"1008\":2,\"1032\":1,\"1033\":1,\"1039\":1,\"1155\":1,\"1255\":2,\"1267\":1,\"1319\":2,\"1706\":1,\"1707\":2,\"1719\":1,\"1759\":1,\"1760\":1,\"1761\":1,\"1762\":1,\"1778\":1}}],[\"whatever\",{\"1\":{\"47\":1}}],[\"what\",{\"0\":{\"39\":1,\"57\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1729\":1,\"1781\":1},\"1\":{\"23\":3,\"33\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"47\":1,\"54\":2,\"56\":1,\"59\":2,\"60\":1,\"87\":1,\"94\":1,\"103\":2,\"110\":1,\"112\":1,\"130\":1,\"164\":1,\"183\":1,\"201\":1,\"211\":1,\"403\":1,\"423\":1,\"431\":1,\"433\":1,\"440\":1,\"520\":1,\"743\":2,\"756\":2,\"784\":2,\"924\":1,\"949\":1,\"954\":1,\"979\":1,\"981\":1,\"1029\":1,\"1031\":1,\"1061\":1,\"1122\":2,\"1153\":1,\"1163\":1,\"1171\":1,\"1222\":1,\"1245\":1,\"1261\":1,\"1388\":1,\"1557\":1,\"1562\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1641\":2,\"1706\":1,\"1707\":1,\"1708\":1,\"1709\":1,\"1710\":2,\"1715\":1,\"1719\":1,\"1721\":1,\"1728\":4,\"1735\":1,\"1739\":1,\"1744\":1,\"1771\":1,\"1773\":1,\"1779\":1,\"1780\":1,\"1793\":1,\"1794\":1,\"1799\":1,\"1814\":1}}],[\"whitelist\",{\"1\":{\"440\":1}}],[\"whitelisted\",{\"1\":{\"440\":1}}],[\"white\",{\"1\":{\"178\":1,\"942\":1,\"1278\":1,\"1574\":1,\"1701\":4}}],[\"whitespace\",{\"0\":{\"1526\":1,\"1529\":1},\"1\":{\"40\":1,\"95\":1,\"692\":1,\"882\":1,\"1116\":1,\"1520\":1,\"1545\":1,\"1575\":1,\"1773\":1,\"1805\":3}}],[\"while$i\",{\"1\":{\"1341\":2}}],[\"while\",{\"0\":{\"1338\":1},\"1\":{\"15\":1,\"26\":1,\"38\":4,\"40\":2,\"46\":2,\"47\":1,\"48\":2,\"56\":4,\"72\":1,\"90\":1,\"103\":1,\"113\":3,\"114\":1,\"121\":1,\"123\":1,\"162\":1,\"164\":1,\"177\":1,\"208\":1,\"238\":1,\"251\":1,\"252\":1,\"269\":1,\"276\":1,\"284\":1,\"298\":1,\"354\":2,\"361\":2,\"447\":1,\"459\":2,\"474\":1,\"545\":1,\"560\":2,\"582\":1,\"643\":1,\"653\":1,\"745\":1,\"758\":1,\"766\":1,\"873\":1,\"882\":1,\"956\":1,\"965\":1,\"999\":2,\"1037\":1,\"1058\":2,\"1110\":1,\"1219\":2,\"1245\":1,\"1255\":1,\"1339\":2,\"1340\":4,\"1341\":4,\"1344\":2,\"1377\":2,\"1401\":1,\"1432\":1,\"1509\":1,\"1570\":1,\"1582\":1,\"1601\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1723\":1,\"1741\":1,\"1753\":1,\"1773\":1,\"1797\":2,\"1798\":3,\"1799\":2,\"1804\":1,\"1808\":1,\"1810\":1}}],[\"whichever\",{\"1\":{\"945\":1,\"1135\":1,\"1806\":1}}],[\"which\",{\"1\":{\"3\":1,\"12\":2,\"15\":1,\"26\":1,\"38\":1,\"39\":2,\"42\":1,\"46\":4,\"48\":1,\"50\":1,\"56\":1,\"57\":1,\"71\":1,\"79\":1,\"86\":1,\"90\":2,\"95\":1,\"103\":1,\"104\":1,\"111\":2,\"113\":1,\"115\":3,\"117\":1,\"119\":1,\"123\":1,\"127\":1,\"181\":3,\"189\":1,\"209\":1,\"223\":1,\"231\":2,\"255\":1,\"270\":2,\"277\":2,\"292\":1,\"304\":1,\"315\":1,\"323\":1,\"330\":1,\"354\":2,\"361\":2,\"376\":1,\"391\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"444\":1,\"447\":2,\"464\":1,\"465\":1,\"468\":2,\"471\":1,\"488\":1,\"515\":1,\"535\":1,\"591\":1,\"605\":1,\"616\":1,\"643\":1,\"659\":1,\"677\":1,\"679\":1,\"710\":2,\"722\":2,\"723\":1,\"727\":2,\"728\":1,\"735\":1,\"747\":1,\"749\":1,\"754\":1,\"765\":1,\"785\":2,\"808\":1,\"814\":1,\"815\":1,\"823\":1,\"825\":1,\"905\":1,\"910\":1,\"912\":1,\"937\":1,\"942\":1,\"977\":1,\"978\":1,\"981\":1,\"999\":1,\"1010\":1,\"1021\":1,\"1029\":1,\"1058\":1,\"1069\":1,\"1097\":2,\"1110\":2,\"1153\":1,\"1161\":3,\"1176\":7,\"1179\":1,\"1188\":1,\"1199\":1,\"1201\":1,\"1218\":1,\"1219\":1,\"1241\":1,\"1245\":4,\"1267\":1,\"1291\":1,\"1297\":1,\"1300\":1,\"1324\":1,\"1327\":1,\"1330\":1,\"1343\":1,\"1350\":1,\"1356\":2,\"1357\":2,\"1400\":1,\"1448\":1,\"1453\":2,\"1476\":1,\"1479\":1,\"1489\":1,\"1493\":1,\"1500\":2,\"1513\":1,\"1546\":2,\"1566\":1,\"1578\":1,\"1600\":1,\"1601\":1,\"1602\":1,\"1628\":2,\"1654\":1,\"1690\":2,\"1696\":2,\"1706\":1,\"1710\":1,\"1719\":1,\"1725\":1,\"1729\":1,\"1731\":1,\"1732\":1,\"1735\":1,\"1746\":1,\"1749\":1,\"1755\":1,\"1756\":1,\"1761\":1,\"1775\":1,\"1780\":1,\"1781\":1,\"1783\":1,\"1784\":1,\"1786\":1,\"1790\":1}}],[\"wont\",{\"1\":{\"1451\":1}}],[\"wonky\",{\"1\":{\"202\":1}}],[\"worry\",{\"1\":{\"859\":1,\"1600\":1}}],[\"wor\",{\"1\":{\"438\":2,\"439\":2,\"881\":1}}],[\"word3\",{\"1\":{\"1790\":1}}],[\"word2\",{\"1\":{\"1790\":1}}],[\"word1\",{\"1\":{\"1790\":1}}],[\"word\",{\"0\":{\"1793\":1},\"1\":{\"127\":1,\"162\":2,\"181\":2,\"545\":1,\"546\":1,\"1505\":2,\"1592\":2,\"1634\":1,\"1802\":6,\"1805\":3,\"1807\":3}}],[\"words\",{\"0\":{\"1807\":1},\"1\":{\"47\":1,\"52\":1,\"93\":1,\"121\":1,\"1789\":2,\"1790\":1,\"1791\":6,\"1795\":1,\"1798\":1}}],[\"worse\",{\"1\":{\"48\":1}}],[\"worth\",{\"1\":{\"41\":1,\"72\":1,\"119\":1,\"121\":1,\"264\":1,\"526\":1,\"576\":1,\"679\":1,\"825\":1,\"912\":1,\"1201\":1,\"1601\":1,\"1724\":1}}],[\"world$\",{\"1\":{\"1285\":1}}],[\"world\",{\"1\":{\"39\":1,\"57\":1,\"387\":5,\"390\":2,\"479\":8,\"499\":1,\"575\":3,\"581\":1,\"582\":1,\"615\":2,\"655\":2,\"673\":4,\"682\":2,\"775\":2,\"820\":4,\"828\":2,\"881\":1,\"915\":2,\"999\":3,\"1006\":1,\"1021\":1,\"1048\":4,\"1058\":3,\"1093\":1,\"1196\":4,\"1204\":2,\"1211\":6,\"1219\":3,\"1239\":2,\"1285\":2,\"1299\":2,\"1323\":1,\"1329\":1,\"1378\":3,\"1460\":2,\"1461\":2,\"1478\":2,\"1505\":3,\"1512\":2,\"1517\":2,\"1550\":2,\"1565\":2,\"1571\":8,\"1575\":10,\"1583\":8,\"1587\":1,\"1592\":3,\"1593\":4,\"1772\":3}}],[\"workaround\",{\"1\":{\"1561\":1}}],[\"works\",{\"1\":{\"3\":1,\"23\":1,\"61\":1,\"90\":1,\"99\":2,\"119\":1,\"174\":1,\"231\":1,\"237\":1,\"433\":1,\"491\":1,\"605\":1,\"611\":1,\"682\":1,\"685\":1,\"727\":1,\"802\":1,\"828\":1,\"831\":1,\"873\":1,\"905\":1,\"915\":1,\"917\":1,\"962\":1,\"999\":1,\"1058\":1,\"1204\":1,\"1207\":1,\"1217\":1,\"1219\":1,\"1270\":1,\"1505\":1,\"1592\":1,\"1617\":1,\"1625\":1,\"1631\":6,\"1644\":6,\"1656\":4,\"1659\":1,\"1669\":4,\"1693\":2,\"1698\":6,\"1771\":1,\"1780\":1}}],[\"working\",{\"0\":{\"1400\":1},\"1\":{\"3\":1,\"15\":1,\"26\":1,\"39\":1,\"40\":1,\"57\":1,\"70\":1,\"96\":1,\"115\":1,\"123\":1,\"125\":1,\"459\":1,\"503\":1,\"504\":1,\"507\":1,\"655\":1,\"979\":1,\"1188\":1,\"1369\":1,\"1719\":1}}],[\"worked\",{\"1\":{\"3\":1,\"172\":1,\"1516\":2}}],[\"work\",{\"1\":{\"2\":1,\"8\":1,\"33\":1,\"36\":1,\"43\":2,\"50\":1,\"54\":1,\"59\":1,\"95\":1,\"119\":1,\"121\":1,\"139\":1,\"147\":1,\"163\":1,\"182\":1,\"208\":2,\"214\":2,\"304\":1,\"372\":1,\"380\":1,\"474\":2,\"591\":1,\"653\":1,\"764\":1,\"945\":1,\"956\":2,\"999\":1,\"1058\":1,\"1135\":1,\"1219\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1,\"1448\":1,\"1515\":1,\"1544\":1,\"1551\":1,\"1588\":1,\"1611\":1,\"1750\":1,\"1789\":1}}],[\"wouldn\",{\"1\":{\"3\":1,\"121\":1,\"653\":1,\"1387\":1,\"1593\":1}}],[\"would\",{\"1\":{\"3\":1,\"10\":1,\"40\":1,\"41\":1,\"46\":1,\"47\":1,\"61\":1,\"90\":2,\"95\":1,\"121\":1,\"138\":1,\"151\":1,\"153\":1,\"182\":2,\"211\":1,\"228\":1,\"232\":2,\"259\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"302\":1,\"304\":1,\"308\":1,\"376\":1,\"387\":1,\"438\":1,\"439\":1,\"440\":1,\"448\":1,\"455\":1,\"487\":1,\"534\":1,\"544\":3,\"596\":4,\"605\":1,\"643\":2,\"733\":1,\"741\":1,\"755\":1,\"779\":1,\"780\":2,\"897\":3,\"905\":1,\"949\":1,\"999\":1,\"1043\":2,\"1058\":1,\"1141\":3,\"1153\":1,\"1154\":4,\"1161\":1,\"1217\":1,\"1219\":1,\"1260\":1,\"1267\":2,\"1321\":1,\"1386\":1,\"1392\":1,\"1400\":2,\"1403\":2,\"1405\":1,\"1448\":3,\"1505\":1,\"1513\":1,\"1545\":1,\"1566\":1,\"1570\":1,\"1578\":1,\"1582\":1,\"1591\":1,\"1592\":1,\"1601\":1,\"1634\":2,\"1708\":2,\"1781\":1,\"1805\":1}}],[\"wikipedia\",{\"1\":{\"1639\":1,\"1647\":1,\"1664\":1,\"1667\":1,\"1691\":1,\"1741\":1,\"1746\":1}}],[\"wins\",{\"1\":{\"1652\":4,\"1662\":4}}],[\"winter\",{\"1\":{\"1403\":1,\"1440\":1,\"1442\":2,\"1449\":1}}],[\"win10\",{\"1\":{\"202\":1}}],[\"window\",{\"1\":{\"115\":1}}],[\"windowserver\",{\"1\":{\"1484\":1}}],[\"windows\",{\"0\":{\"3\":1,\"197\":1,\"202\":1},\"1\":{\"0\":1,\"3\":7,\"10\":1,\"27\":1,\"42\":1,\"43\":1,\"67\":1,\"79\":1,\"99\":1,\"111\":1,\"113\":6,\"115\":1,\"119\":1,\"121\":3,\"165\":1,\"168\":1,\"188\":2,\"197\":5,\"198\":1,\"202\":3,\"207\":1,\"208\":2,\"474\":2,\"717\":1,\"956\":1,\"1043\":2,\"1372\":1,\"1403\":1,\"1741\":1}}],[\"width\",{\"1\":{\"159\":1}}],[\"wider\",{\"1\":{\"239\":1}}],[\"wide\",{\"1\":{\"127\":1,\"129\":1,\"515\":1,\"1773\":1}}],[\"wildcards\",{\"0\":{\"238\":1},\"1\":{\"46\":1,\"459\":1,\"794\":1,\"1189\":1,\"1772\":1}}],[\"will\",{\"0\":{\"744\":1,\"757\":1,\"1642\":1},\"1\":{\"3\":1,\"33\":1,\"36\":1,\"38\":1,\"41\":1,\"48\":2,\"50\":1,\"54\":1,\"56\":1,\"58\":1,\"59\":1,\"69\":2,\"77\":1,\"78\":1,\"90\":1,\"95\":1,\"99\":2,\"103\":5,\"108\":4,\"111\":3,\"113\":6,\"115\":2,\"117\":1,\"119\":4,\"121\":2,\"123\":2,\"126\":1,\"131\":2,\"139\":1,\"142\":1,\"163\":1,\"182\":1,\"190\":1,\"202\":1,\"207\":1,\"208\":2,\"209\":2,\"210\":2,\"211\":1,\"214\":2,\"218\":1,\"219\":1,\"220\":1,\"224\":1,\"227\":1,\"231\":1,\"251\":1,\"252\":1,\"253\":1,\"255\":1,\"271\":1,\"278\":1,\"312\":1,\"375\":1,\"397\":2,\"421\":1,\"431\":1,\"433\":1,\"434\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"440\":5,\"441\":2,\"442\":1,\"445\":1,\"450\":2,\"451\":1,\"452\":1,\"471\":1,\"474\":1,\"480\":1,\"485\":3,\"488\":1,\"499\":1,\"518\":2,\"519\":1,\"520\":1,\"526\":1,\"532\":2,\"535\":1,\"543\":1,\"544\":2,\"545\":1,\"572\":1,\"573\":1,\"596\":1,\"606\":1,\"643\":5,\"656\":3,\"661\":1,\"677\":1,\"679\":3,\"680\":2,\"682\":1,\"683\":2,\"692\":1,\"720\":1,\"722\":1,\"725\":1,\"727\":1,\"743\":1,\"747\":2,\"751\":1,\"754\":2,\"755\":5,\"756\":1,\"760\":2,\"765\":2,\"781\":2,\"782\":3,\"783\":1,\"795\":1,\"801\":2,\"808\":1,\"814\":1,\"823\":1,\"825\":3,\"826\":2,\"828\":1,\"829\":2,\"833\":1,\"839\":1,\"859\":1,\"879\":1,\"882\":3,\"894\":1,\"897\":1,\"906\":1,\"910\":1,\"912\":3,\"913\":2,\"915\":1,\"916\":2,\"924\":1,\"929\":1,\"945\":1,\"958\":1,\"981\":1,\"992\":1,\"995\":1,\"1010\":1,\"1013\":1,\"1016\":4,\"1023\":1,\"1068\":1,\"1113\":1,\"1123\":1,\"1125\":5,\"1135\":1,\"1139\":1,\"1142\":1,\"1153\":1,\"1154\":1,\"1155\":2,\"1173\":1,\"1175\":1,\"1178\":1,\"1179\":1,\"1180\":1,\"1190\":1,\"1199\":1,\"1201\":3,\"1202\":2,\"1204\":1,\"1205\":2,\"1226\":1,\"1251\":2,\"1252\":1,\"1276\":2,\"1294\":1,\"1312\":4,\"1321\":2,\"1323\":1,\"1327\":1,\"1329\":1,\"1343\":2,\"1350\":1,\"1366\":1,\"1369\":1,\"1378\":2,\"1401\":1,\"1403\":3,\"1404\":1,\"1416\":2,\"1417\":2,\"1432\":1,\"1444\":2,\"1448\":1,\"1461\":2,\"1486\":1,\"1489\":1,\"1496\":1,\"1505\":2,\"1520\":1,\"1529\":1,\"1538\":1,\"1554\":1,\"1559\":1,\"1564\":1,\"1566\":1,\"1592\":2,\"1600\":1,\"1601\":2,\"1641\":1,\"1650\":1,\"1654\":1,\"1674\":1,\"1701\":1,\"1702\":2,\"1704\":1,\"1706\":3,\"1708\":1,\"1712\":4,\"1713\":1,\"1719\":3,\"1720\":1,\"1724\":2,\"1737\":4,\"1738\":1,\"1750\":1,\"1752\":1,\"1756\":1,\"1757\":1,\"1763\":1,\"1770\":2,\"1780\":1,\"1783\":1,\"1784\":1,\"1787\":1,\"1788\":2,\"1789\":1,\"1793\":1,\"1797\":1,\"1798\":7,\"1799\":2,\"1802\":2,\"1804\":1,\"1806\":1,\"1808\":2,\"1810\":1,\"1811\":2,\"1813\":1}}],[\"wish\",{\"1\":{\"50\":1,\"123\":1,\"189\":1,\"205\":1,\"209\":1,\"262\":1,\"355\":1,\"368\":1,\"407\":1,\"437\":1,\"455\":1,\"485\":1,\"643\":1,\"677\":1,\"754\":1,\"765\":1,\"795\":1,\"823\":1,\"910\":1,\"929\":1,\"981\":1,\"984\":1,\"1034\":1,\"1190\":1,\"1199\":1,\"1237\":1,\"1343\":1,\"1753\":1}}],[\"wishing\",{\"1\":{\"30\":1,\"264\":1,\"1728\":1}}],[\"wise\",{\"1\":{\"8\":1}}],[\"withing\",{\"1\":{\"1141\":1}}],[\"within\",{\"0\":{\"1534\":1},\"1\":{\"10\":1,\"15\":4,\"23\":1,\"26\":4,\"38\":1,\"40\":1,\"56\":1,\"92\":1,\"110\":1,\"112\":1,\"122\":2,\"142\":1,\"202\":1,\"218\":1,\"243\":1,\"251\":1,\"348\":1,\"354\":3,\"361\":3,\"387\":1,\"394\":1,\"395\":1,\"437\":1,\"475\":2,\"484\":1,\"488\":1,\"489\":1,\"522\":1,\"531\":1,\"535\":1,\"536\":1,\"584\":1,\"589\":1,\"611\":1,\"616\":1,\"659\":2,\"664\":1,\"679\":1,\"685\":1,\"713\":1,\"718\":2,\"722\":1,\"723\":2,\"727\":1,\"728\":2,\"729\":1,\"733\":2,\"735\":1,\"745\":1,\"751\":1,\"758\":1,\"766\":1,\"779\":1,\"787\":1,\"802\":1,\"825\":1,\"831\":1,\"912\":1,\"917\":1,\"940\":1,\"960\":1,\"1098\":1,\"1110\":1,\"1118\":1,\"1142\":1,\"1143\":2,\"1169\":1,\"1170\":1,\"1171\":1,\"1182\":1,\"1201\":1,\"1207\":1,\"1241\":1,\"1250\":1,\"1255\":1,\"1262\":1,\"1268\":1,\"1278\":1,\"1321\":1,\"1325\":1,\"1331\":1,\"1400\":3,\"1402\":1,\"1407\":1,\"1628\":1,\"1638\":2,\"1690\":1,\"1696\":1,\"1702\":2,\"1708\":1,\"1741\":1,\"1756\":1,\"1764\":1,\"1765\":1,\"1771\":1,\"1775\":1,\"1780\":2,\"1794\":1}}],[\"without\",{\"1\":{\"3\":1,\"15\":3,\"26\":3,\"27\":1,\"40\":1,\"44\":1,\"50\":1,\"63\":1,\"103\":1,\"111\":1,\"112\":1,\"113\":1,\"117\":1,\"162\":1,\"383\":1,\"394\":1,\"404\":1,\"419\":1,\"432\":1,\"447\":1,\"462\":1,\"476\":1,\"483\":1,\"490\":1,\"591\":1,\"611\":1,\"618\":2,\"655\":1,\"676\":1,\"685\":1,\"749\":1,\"758\":1,\"771\":1,\"783\":1,\"784\":1,\"799\":1,\"831\":1,\"917\":1,\"940\":1,\"956\":1,\"960\":1,\"964\":1,\"975\":2,\"1052\":2,\"1084\":1,\"1091\":1,\"1118\":1,\"1126\":2,\"1141\":1,\"1207\":1,\"1218\":1,\"1226\":1,\"1262\":2,\"1268\":2,\"1303\":1,\"1307\":2,\"1313\":2,\"1335\":1,\"1480\":1,\"1507\":1,\"1516\":1,\"1518\":1,\"1538\":1,\"1547\":1,\"1552\":1,\"1579\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1647\":1,\"1654\":1,\"1657\":1,\"1664\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1705\":1,\"1723\":1,\"1794\":1,\"1797\":1}}],[\"with\",{\"0\":{\"376\":1,\"657\":1,\"711\":1,\"1400\":1,\"1405\":1,\"1654\":1,\"1792\":1},\"1\":{\"3\":2,\"15\":4,\"20\":1,\"26\":4,\"30\":1,\"33\":1,\"36\":1,\"37\":1,\"38\":4,\"39\":3,\"40\":4,\"42\":2,\"43\":2,\"46\":3,\"47\":3,\"48\":3,\"50\":3,\"51\":1,\"52\":2,\"54\":1,\"56\":4,\"57\":1,\"59\":2,\"60\":1,\"61\":3,\"70\":2,\"76\":2,\"83\":1,\"84\":1,\"86\":1,\"87\":1,\"88\":1,\"90\":3,\"95\":1,\"98\":1,\"103\":2,\"108\":3,\"110\":1,\"111\":1,\"113\":4,\"117\":2,\"119\":1,\"121\":3,\"125\":2,\"134\":1,\"135\":1,\"151\":1,\"162\":2,\"163\":1,\"164\":1,\"166\":1,\"172\":1,\"174\":1,\"178\":1,\"181\":1,\"182\":1,\"199\":1,\"201\":1,\"204\":1,\"207\":2,\"208\":2,\"211\":1,\"214\":3,\"216\":1,\"219\":1,\"223\":3,\"226\":2,\"231\":2,\"239\":1,\"265\":1,\"272\":1,\"279\":1,\"315\":1,\"322\":1,\"323\":1,\"329\":1,\"330\":1,\"334\":1,\"337\":2,\"344\":2,\"372\":2,\"375\":1,\"380\":1,\"390\":1,\"398\":1,\"399\":1,\"421\":1,\"432\":1,\"433\":1,\"436\":1,\"439\":1,\"440\":2,\"441\":1,\"442\":1,\"445\":2,\"446\":1,\"449\":1,\"453\":2,\"454\":2,\"455\":1,\"459\":1,\"462\":1,\"483\":1,\"489\":1,\"495\":1,\"497\":1,\"500\":1,\"507\":1,\"508\":1,\"514\":1,\"530\":2,\"536\":1,\"584\":1,\"585\":1,\"586\":1,\"591\":1,\"605\":2,\"607\":1,\"613\":1,\"618\":1,\"629\":1,\"635\":1,\"641\":1,\"651\":1,\"653\":2,\"656\":2,\"657\":1,\"661\":1,\"664\":1,\"675\":2,\"677\":1,\"679\":2,\"680\":1,\"683\":1,\"692\":1,\"695\":2,\"701\":1,\"711\":1,\"713\":1,\"722\":1,\"727\":1,\"730\":1,\"742\":2,\"743\":3,\"747\":1,\"749\":1,\"752\":1,\"755\":1,\"756\":3,\"758\":1,\"760\":1,\"762\":1,\"774\":1,\"778\":1,\"780\":4,\"781\":1,\"795\":1,\"808\":1,\"809\":1,\"816\":2,\"822\":1,\"823\":1,\"825\":2,\"826\":1,\"829\":1,\"904\":2,\"905\":2,\"907\":1,\"910\":1,\"912\":2,\"913\":1,\"916\":1,\"920\":4,\"922\":1,\"927\":1,\"929\":1,\"956\":3,\"962\":1,\"965\":1,\"975\":1,\"977\":1,\"981\":1,\"995\":1,\"999\":2,\"1000\":2,\"1014\":1,\"1015\":1,\"1016\":1,\"1020\":1,\"1024\":2,\"1031\":1,\"1043\":2,\"1045\":1,\"1046\":1,\"1048\":1,\"1058\":2,\"1059\":2,\"1061\":1,\"1062\":1,\"1067\":1,\"1072\":1,\"1089\":1,\"1103\":1,\"1125\":1,\"1126\":1,\"1141\":1,\"1143\":1,\"1155\":1,\"1171\":1,\"1176\":4,\"1179\":1,\"1182\":1,\"1190\":1,\"1198\":1,\"1199\":1,\"1201\":2,\"1202\":1,\"1205\":1,\"1218\":1,\"1219\":2,\"1220\":2,\"1222\":1,\"1224\":1,\"1230\":1,\"1245\":1,\"1248\":1,\"1251\":1,\"1254\":1,\"1276\":1,\"1278\":3,\"1284\":1,\"1300\":1,\"1301\":1,\"1307\":1,\"1313\":1,\"1317\":1,\"1335\":2,\"1339\":1,\"1345\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1386\":1,\"1387\":2,\"1403\":1,\"1404\":1,\"1408\":2,\"1413\":2,\"1425\":2,\"1433\":2,\"1441\":2,\"1448\":1,\"1451\":2,\"1461\":1,\"1479\":1,\"1491\":1,\"1496\":1,\"1506\":1,\"1507\":1,\"1513\":1,\"1518\":1,\"1520\":3,\"1538\":2,\"1542\":1,\"1547\":1,\"1552\":1,\"1557\":1,\"1561\":1,\"1562\":1,\"1570\":2,\"1572\":1,\"1576\":1,\"1582\":2,\"1584\":1,\"1589\":1,\"1591\":1,\"1594\":1,\"1599\":1,\"1611\":2,\"1626\":1,\"1628\":2,\"1631\":4,\"1632\":1,\"1634\":1,\"1636\":1,\"1641\":3,\"1644\":4,\"1645\":2,\"1647\":2,\"1650\":1,\"1656\":2,\"1657\":1,\"1659\":1,\"1664\":2,\"1669\":2,\"1670\":1,\"1673\":2,\"1674\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1698\":4,\"1699\":2,\"1700\":1,\"1702\":1,\"1705\":1,\"1706\":2,\"1708\":3,\"1710\":1,\"1716\":1,\"1719\":3,\"1720\":1,\"1728\":2,\"1729\":1,\"1735\":1,\"1747\":2,\"1753\":2,\"1761\":1,\"1772\":1,\"1773\":1,\"1778\":2,\"1780\":1,\"1784\":3,\"1789\":1,\"1793\":1,\"1800\":1}}],[\"nz\",{\"0\":{\"1793\":1},\"1\":{\"1793\":1}}],[\"n1\",{\"1\":{\"1725\":1}}],[\"ndjson\",{\"1\":{\"1667\":1,\"1668\":5}}],[\"nday\",{\"1\":{\"1147\":1}}],[\"nsurlsessiond\",{\"1\":{\"1484\":1}}],[\"nstring\",{\"1\":{\"622\":1}}],[\"ny\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"n2\",{\"1\":{\"1175\":1}}],[\"n3\",{\"1\":{\"1115\":2}}],[\"n5\",{\"1\":{\"865\":1,\"1260\":3,\"1267\":4}}],[\"nrk2\",{\"1\":{\"865\":1}}],[\"nline\",{\"1\":{\"622\":1}}],[\"nly\",{\"1\":{\"34\":1}}],[\"nworld\",{\"1\":{\"479\":1}}],[\"nc\",{\"1\":{\"398\":1}}],[\"nbar\",{\"1\":{\"544\":3,\"897\":3,\"1505\":1,\"1592\":1}}],[\"nb\",{\"1\":{\"398\":1}}],[\"nine\",{\"1\":{\"1807\":2}}],[\"night\",{\"1\":{\"1133\":1}}],[\"nifty\",{\"1\":{\"873\":1,\"1270\":1}}],[\"nil\",{\"0\":{\"525\":1,\"526\":1},\"1\":{\"103\":1,\"121\":1,\"269\":2,\"276\":2,\"283\":2,\"297\":2,\"304\":2,\"311\":2,\"312\":4,\"318\":22,\"326\":15,\"333\":30,\"338\":2,\"340\":29,\"345\":1,\"347\":14,\"353\":1,\"354\":4,\"360\":1,\"361\":10,\"1300\":4}}],[\"nice\",{\"1\":{\"247\":1}}],[\"nicely\",{\"1\":{\"48\":1,\"50\":1}}],[\"niche\",{\"1\":{\"48\":1,\"737\":1}}],[\"n\",{\"1\":{\"37\":1,\"40\":1,\"47\":2,\"367\":1,\"423\":2,\"622\":1,\"780\":2,\"1116\":1,\"1122\":1,\"1175\":10,\"1285\":2,\"1390\":1,\"1505\":1,\"1592\":1,\"1648\":1,\"1649\":1,\"1665\":1,\"1666\":1,\"1674\":4,\"1708\":2,\"1770\":3,\"1772\":10,\"1805\":1}}],[\"nuisances\",{\"1\":{\"421\":1}}],[\"num`\",{\"1\":{\"423\":1}}],[\"num+1\",{\"1\":{\"347\":1}}],[\"numerical\",{\"1\":{\"181\":1}}],[\"numeric\",{\"0\":{\"1523\":1},\"1\":{\"111\":1,\"389\":1,\"399\":1,\"423\":1,\"956\":1,\"1116\":1,\"1520\":1,\"1538\":1,\"1591\":1,\"1634\":1,\"1677\":1,\"1772\":1}}],[\"numerous\",{\"1\":{\"21\":1,\"228\":1,\"1276\":1}}],[\"num\",{\"0\":{\"1676\":1,\"1757\":1,\"1758\":1},\"1\":{\"28\":1,\"182\":1,\"183\":1,\"347\":15,\"423\":6,\"607\":1,\"904\":9,\"907\":1,\"1108\":1,\"1336\":1,\"1603\":1,\"1607\":1,\"1620\":1,\"1622\":1,\"1626\":1,\"1634\":1,\"1636\":1,\"1688\":1,\"1701\":1}}],[\"numbered\",{\"1\":{\"779\":1,\"1267\":1,\"1683\":1,\"1687\":1}}],[\"numbers\",{\"0\":{\"1428\":1,\"1436\":1},\"1\":{\"143\":1,\"397\":1,\"742\":1,\"780\":1,\"956\":1,\"1105\":1,\"1110\":1,\"1153\":1,\"1260\":1,\"1428\":1,\"1436\":1,\"1564\":1,\"1620\":1,\"1634\":1,\"1677\":2}}],[\"number\",{\"0\":{\"1619\":1,\"1676\":1},\"1\":{\"1\":1,\"15\":5,\"16\":1,\"26\":5,\"27\":1,\"28\":5,\"50\":1,\"61\":1,\"68\":1,\"72\":1,\"76\":1,\"79\":1,\"106\":1,\"111\":2,\"117\":1,\"121\":2,\"160\":1,\"162\":1,\"183\":4,\"246\":1,\"333\":2,\"340\":5,\"371\":1,\"377\":2,\"409\":1,\"412\":1,\"417\":1,\"421\":1,\"440\":1,\"468\":1,\"493\":2,\"500\":1,\"540\":1,\"541\":2,\"545\":1,\"546\":1,\"553\":1,\"554\":1,\"555\":1,\"565\":1,\"584\":1,\"585\":1,\"586\":1,\"607\":1,\"661\":1,\"662\":1,\"664\":1,\"665\":1,\"666\":1,\"703\":1,\"743\":1,\"754\":1,\"755\":1,\"756\":1,\"765\":1,\"793\":1,\"808\":1,\"815\":1,\"861\":1,\"886\":1,\"904\":1,\"907\":1,\"953\":1,\"993\":1,\"1003\":1,\"1004\":1,\"1018\":1,\"1036\":1,\"1039\":1,\"1043\":3,\"1044\":1,\"1069\":1,\"1082\":1,\"1088\":2,\"1107\":1,\"1108\":1,\"1113\":2,\"1139\":1,\"1140\":1,\"1141\":2,\"1142\":1,\"1143\":1,\"1145\":1,\"1151\":1,\"1153\":1,\"1154\":2,\"1226\":6,\"1245\":1,\"1251\":1,\"1255\":1,\"1295\":1,\"1319\":1,\"1324\":1,\"1330\":1,\"1333\":1,\"1343\":1,\"1358\":1,\"1386\":1,\"1401\":2,\"1410\":1,\"1430\":1,\"1431\":1,\"1432\":2,\"1456\":1,\"1487\":1,\"1492\":1,\"1493\":1,\"1509\":1,\"1535\":2,\"1601\":1,\"1603\":5,\"1607\":2,\"1618\":1,\"1619\":1,\"1620\":1,\"1622\":3,\"1626\":3,\"1633\":1,\"1634\":1,\"1636\":2,\"1639\":3,\"1641\":1,\"1676\":1,\"1677\":1,\"1679\":1,\"1688\":3,\"1707\":1,\"1772\":2}}],[\"null>`\",{\"1\":{\"423\":1}}],[\"null>\",{\"1\":{\"232\":2,\"423\":1,\"1725\":1}}],[\"null\",{\"0\":{\"442\":1,\"446\":1,\"578\":1},\"1\":{\"15\":3,\"26\":3,\"121\":2,\"232\":3,\"333\":1,\"340\":3,\"423\":2,\"431\":2,\"575\":4,\"578\":2,\"579\":3,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"589\":3,\"664\":3,\"859\":1,\"1175\":2,\"1226\":1,\"1601\":1,\"1639\":1,\"1742\":1,\"1772\":1}}],[\"navigation\",{\"0\":{\"1802\":1},\"1\":{\"1795\":1}}],[\"nano\",{\"1\":{\"1245\":2}}],[\"naughty\",{\"1\":{\"741\":1}}],[\"naked\",{\"1\":{\"387\":1,\"1598\":1,\"1602\":1,\"1693\":2}}],[\"naming\",{\"1\":{\"119\":1}}],[\"name|\",{\"1\":{\"1284\":1}}],[\"name++\",{\"1\":{\"901\":1}}],[\"name=seconds\",{\"1\":{\"1391\":1}}],[\"name=\",{\"1\":{\"1376\":1,\"1772\":1}}],[\"name=path\",{\"1\":{\"1367\":1}}],[\"name=command\",{\"1\":{\"1348\":1}}],[\"name=evaluation\",{\"1\":{\"901\":1}}],[\"name=data\",{\"1\":{\"672\":1,\"819\":2,\"1195\":2}}],[\"name=interrupt\",{\"1\":{\"643\":1,\"644\":1}}],[\"namespacing\",{\"0\":{\"1387\":1},\"1\":{\"1387\":2,\"1728\":1,\"1732\":1}}],[\"namespaced\",{\"1\":{\"1381\":1,\"1387\":1}}],[\"namespace\",{\"1\":{\"225\":1,\"226\":2,\"243\":1,\"1000\":1,\"1059\":1,\"1091\":1,\"1220\":1}}],[\"namespaces\",{\"0\":{\"1000\":1,\"1059\":1,\"1220\":1},\"1\":{\"119\":1}}],[\"names\",{\"0\":{\"682\":1,\"779\":1,\"828\":1,\"915\":1,\"1204\":1},\"1\":{\"42\":1,\"89\":1,\"111\":2,\"127\":1,\"216\":1,\"228\":1,\"389\":1,\"515\":1,\"596\":2,\"597\":1,\"675\":1,\"682\":2,\"692\":1,\"774\":1,\"777\":1,\"780\":2,\"822\":1,\"828\":2,\"915\":2,\"1020\":1,\"1021\":1,\"1095\":1,\"1175\":1,\"1198\":1,\"1204\":2,\"1386\":1,\"1387\":1,\"1505\":3,\"1591\":1,\"1592\":3,\"1745\":1,\"1753\":2,\"1791\":3,\"1793\":1}}],[\"name\",{\"0\":{\"1353\":1,\"1364\":1,\"1381\":1,\"1382\":1,\"1396\":1,\"1486\":1},\"1\":{\"15\":1,\"26\":1,\"42\":2,\"95\":1,\"98\":1,\"108\":3,\"113\":1,\"115\":2,\"135\":1,\"139\":1,\"180\":1,\"201\":1,\"224\":1,\"225\":2,\"226\":1,\"227\":1,\"228\":2,\"232\":1,\"249\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1,\"382\":2,\"421\":1,\"422\":1,\"452\":1,\"455\":1,\"485\":2,\"486\":1,\"513\":1,\"515\":1,\"533\":1,\"553\":1,\"558\":1,\"575\":1,\"597\":1,\"605\":6,\"643\":5,\"644\":1,\"653\":1,\"656\":2,\"672\":1,\"675\":2,\"676\":2,\"682\":1,\"683\":1,\"695\":1,\"744\":3,\"757\":3,\"774\":2,\"779\":1,\"781\":4,\"783\":2,\"784\":3,\"801\":1,\"819\":4,\"822\":1,\"828\":1,\"829\":1,\"901\":1,\"904\":1,\"905\":6,\"915\":1,\"916\":1,\"920\":5,\"924\":1,\"950\":1,\"951\":1,\"956\":1,\"962\":1,\"992\":1,\"993\":1,\"1000\":2,\"1022\":8,\"1040\":1,\"1041\":1,\"1055\":2,\"1059\":2,\"1092\":1,\"1093\":3,\"1121\":3,\"1122\":4,\"1123\":1,\"1125\":2,\"1139\":1,\"1163\":2,\"1175\":1,\"1195\":4,\"1198\":1,\"1204\":1,\"1205\":1,\"1220\":2,\"1245\":3,\"1284\":3,\"1285\":1,\"1300\":4,\"1310\":2,\"1312\":2,\"1335\":2,\"1336\":2,\"1348\":1,\"1349\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1363\":1,\"1364\":1,\"1367\":1,\"1376\":1,\"1380\":2,\"1381\":2,\"1382\":1,\"1387\":3,\"1391\":1,\"1395\":1,\"1396\":1,\"1511\":1,\"1513\":2,\"1545\":1,\"1549\":2,\"1586\":1,\"1642\":3,\"1647\":1,\"1651\":1,\"1652\":4,\"1661\":1,\"1662\":4,\"1664\":1,\"1691\":1,\"1700\":1,\"1702\":1,\"1708\":1,\"1716\":1,\"1753\":2,\"1764\":2,\"1765\":1,\"1769\":1,\"1772\":18}}],[\"namedpipetest\",{\"1\":{\"575\":1}}],[\"namedpipeerr\",{\"1\":{\"575\":1}}],[\"namedpipeout\",{\"1\":{\"575\":1}}],[\"named\",{\"0\":{\"994\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1740\":1,\"1747\":1},\"1\":{\"15\":3,\"23\":2,\"26\":3,\"41\":1,\"52\":1,\"108\":1,\"111\":2,\"112\":3,\"237\":2,\"238\":1,\"423\":1,\"440\":1,\"488\":1,\"535\":1,\"582\":1,\"616\":1,\"618\":3,\"695\":2,\"801\":1,\"802\":1,\"837\":3,\"843\":3,\"859\":1,\"926\":1,\"994\":1,\"995\":2,\"999\":5,\"1000\":1,\"1001\":2,\"1002\":1,\"1053\":1,\"1054\":1,\"1058\":5,\"1059\":1,\"1061\":4,\"1175\":1,\"1176\":3,\"1182\":1,\"1218\":1,\"1219\":5,\"1220\":1,\"1222\":3,\"1289\":2,\"1301\":1,\"1350\":1,\"1356\":3,\"1357\":3,\"1360\":4,\"1386\":2,\"1564\":1,\"1568\":2,\"1572\":2,\"1576\":2,\"1580\":2,\"1584\":2,\"1740\":1,\"1741\":6,\"1742\":3,\"1743\":2,\"1746\":1,\"1747\":2,\"1753\":1,\"1774\":2,\"1780\":1}}],[\"nature\",{\"1\":{\"270\":1,\"277\":1,\"929\":1,\"1161\":1}}],[\"naturally\",{\"1\":{\"50\":1,\"1719\":1}}],[\"native\",{\"1\":{\"113\":1,\"121\":1,\"278\":1,\"656\":1,\"1400\":1,\"1791\":1}}],[\"natively\",{\"1\":{\"10\":1,\"40\":1,\"41\":1,\"58\":1,\"113\":1,\"1400\":1,\"1600\":1}}],[\"neatly\",{\"1\":{\"1747\":1}}],[\"nearest\",{\"0\":{\"1153\":1,\"1154\":1,\"1155\":1},\"1\":{\"1153\":1,\"1154\":2,\"1155\":3,\"1157\":1,\"1158\":2}}],[\"nearly\",{\"1\":{\"121\":1}}],[\"nesday\",{\"1\":{\"1147\":1}}],[\"nestable\",{\"1\":{\"480\":1}}],[\"nest\",{\"1\":{\"442\":1,\"1513\":2}}],[\"nesting\",{\"1\":{\"222\":1,\"1509\":1,\"1772\":1}}],[\"nestedcommand\",{\"0\":{\"455\":1},\"1\":{\"431\":1}}],[\"nested\",{\"0\":{\"1513\":1,\"1533\":1,\"1652\":1,\"1662\":1},\"1\":{\"15\":1,\"26\":1,\"40\":1,\"118\":1,\"151\":1,\"162\":1,\"251\":1,\"286\":1,\"300\":1,\"315\":1,\"323\":1,\"330\":1,\"378\":1,\"383\":1,\"404\":1,\"419\":1,\"455\":1,\"480\":1,\"530\":1,\"548\":1,\"590\":1,\"591\":1,\"611\":1,\"758\":1,\"809\":1,\"831\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"917\":1,\"940\":1,\"960\":1,\"1070\":1,\"1084\":1,\"1118\":1,\"1207\":1,\"1227\":1,\"1228\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1281\":1,\"1347\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1509\":1,\"1533\":1,\"1534\":1,\"1539\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1648\":1,\"1649\":1,\"1657\":1,\"1665\":1,\"1666\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1714\":1,\"1772\":1,\"1774\":1}}],[\"neither\",{\"1\":{\"984\":1,\"1110\":1,\"1123\":1,\"1237\":1,\"1554\":1,\"1559\":1}}],[\"necessary\",{\"1\":{\"433\":1,\"447\":1}}],[\"negative\",{\"0\":{\"855\":1,\"856\":1,\"1448\":1},\"1\":{\"134\":1,\"340\":1,\"886\":1,\"1145\":1,\"1403\":1,\"1448\":1,\"1634\":2,\"1706\":1}}],[\"negatively\",{\"1\":{\"95\":1}}],[\"never\",{\"1\":{\"109\":1,\"121\":1,\"180\":1,\"182\":1}}],[\"netbios\",{\"1\":{\"1484\":1}}],[\"netbsd\",{\"0\":{\"6\":1,\"194\":1},\"1\":{\"0\":1,\"188\":1,\"194\":4}}],[\"networkd\",{\"1\":{\"1484\":1}}],[\"network\",{\"1\":{\"232\":1,\"965\":1,\"999\":1,\"1058\":1,\"1219\":1}}],[\"net\",{\"1\":{\"39\":1,\"42\":1,\"50\":7,\"57\":2,\"210\":1}}],[\"needing\",{\"1\":{\"354\":1,\"361\":1}}],[\"needed\",{\"1\":{\"78\":1,\"113\":1,\"119\":1,\"121\":1,\"376\":1,\"449\":1,\"653\":1,\"1287\":1,\"1405\":1}}],[\"needs\",{\"1\":{\"43\":1,\"47\":2,\"48\":1,\"437\":1,\"576\":1,\"1161\":1,\"1297\":1,\"1708\":1,\"1783\":1,\"1784\":1,\"1787\":1}}],[\"need\",{\"1\":{\"34\":2,\"39\":1,\"40\":1,\"42\":1,\"45\":2,\"47\":2,\"50\":2,\"57\":2,\"78\":1,\"90\":1,\"113\":2,\"126\":1,\"127\":1,\"154\":1,\"190\":1,\"207\":1,\"208\":1,\"216\":1,\"227\":1,\"228\":2,\"231\":1,\"237\":1,\"244\":1,\"312\":1,\"440\":1,\"441\":1,\"452\":1,\"480\":2,\"526\":1,\"544\":1,\"596\":1,\"605\":1,\"606\":2,\"692\":1,\"754\":1,\"755\":1,\"765\":1,\"780\":2,\"801\":1,\"859\":2,\"897\":1,\"905\":1,\"906\":2,\"958\":1,\"995\":1,\"1023\":1,\"1093\":1,\"1161\":1,\"1170\":1,\"1321\":1,\"1343\":1,\"1421\":1,\"1428\":1,\"1436\":1,\"1461\":1,\"1486\":1,\"1496\":1,\"1505\":1,\"1520\":2,\"1538\":2,\"1545\":1,\"1564\":1,\"1592\":1,\"1600\":1,\"1601\":1,\"1610\":1,\"1650\":1,\"1704\":1,\"1728\":1,\"1747\":1,\"1750\":1,\"1753\":1,\"1772\":1,\"1784\":1,\"1786\":1,\"1788\":1,\"1789\":2,\"1793\":1}}],[\"next\",{\"1\":{\"24\":2,\"79\":1,\"90\":1,\"94\":2,\"111\":1,\"115\":1,\"116\":2,\"121\":1,\"251\":2,\"433\":4,\"437\":1,\"454\":1,\"1167\":1,\"1251\":1,\"1252\":1,\"1502\":2,\"1553\":1,\"1558\":1,\"1746\":1,\"1774\":2,\"1788\":1,\"1797\":1,\"1798\":1,\"1802\":1,\"1805\":4}}],[\"newspellchecker\",{\"1\":{\"1789\":1}}],[\"newscanner\",{\"1\":{\"269\":1,\"276\":1}}],[\"newarraywriter\",{\"1\":{\"311\":1,\"312\":1}}],[\"newlinestring\",{\"1\":{\"347\":2}}],[\"newline\",{\"1\":{\"108\":1,\"1647\":1,\"1664\":1}}],[\"newer\",{\"1\":{\"72\":1,\"103\":1,\"113\":1,\"119\":1,\"121\":1}}],[\"new\",{\"0\":{\"55\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"1781\":1},\"1\":{\"15\":2,\"26\":2,\"37\":1,\"38\":1,\"51\":1,\"55\":1,\"56\":1,\"64\":1,\"66\":1,\"70\":2,\"71\":1,\"72\":2,\"73\":1,\"74\":1,\"75\":1,\"79\":1,\"80\":1,\"86\":1,\"88\":1,\"90\":2,\"93\":1,\"95\":3,\"97\":1,\"103\":1,\"104\":2,\"106\":2,\"108\":1,\"109\":3,\"111\":6,\"113\":1,\"115\":5,\"117\":2,\"119\":7,\"121\":9,\"123\":1,\"125\":2,\"127\":2,\"129\":1,\"135\":2,\"142\":1,\"158\":1,\"162\":3,\"167\":2,\"170\":1,\"181\":4,\"237\":1,\"340\":8,\"347\":3,\"354\":2,\"361\":2,\"397\":1,\"428\":1,\"440\":1,\"476\":1,\"477\":1,\"483\":1,\"489\":1,\"494\":1,\"495\":1,\"512\":1,\"528\":1,\"536\":1,\"544\":3,\"606\":1,\"611\":1,\"613\":1,\"616\":1,\"618\":2,\"629\":1,\"685\":1,\"758\":1,\"760\":1,\"762\":1,\"780\":3,\"831\":1,\"833\":1,\"839\":1,\"897\":3,\"906\":1,\"917\":1,\"922\":1,\"975\":2,\"978\":1,\"981\":1,\"989\":2,\"999\":1,\"1024\":1,\"1045\":1,\"1046\":1,\"1052\":1,\"1058\":1,\"1061\":1,\"1081\":2,\"1089\":1,\"1126\":2,\"1143\":1,\"1171\":1,\"1207\":1,\"1219\":1,\"1222\":1,\"1226\":1,\"1300\":1,\"1303\":1,\"1307\":2,\"1313\":2,\"1345\":1,\"1369\":1,\"1400\":1,\"1416\":2,\"1449\":1,\"1505\":1,\"1507\":2,\"1518\":2,\"1538\":1,\"1545\":1,\"1547\":2,\"1552\":2,\"1557\":1,\"1562\":1,\"1572\":1,\"1576\":1,\"1584\":1,\"1589\":2,\"1591\":1,\"1592\":1,\"1594\":2,\"1599\":2,\"1617\":5,\"1625\":5,\"1639\":1,\"1647\":1,\"1650\":1,\"1654\":1,\"1664\":1,\"1666\":2,\"1683\":5,\"1687\":8,\"1705\":2,\"1717\":1,\"1719\":1,\"1731\":2,\"1776\":1,\"1781\":3}}],[\"nov\",{\"1\":{\"1449\":1}}],[\"november\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":3,\"1449\":1}}],[\"noise\",{\"1\":{\"882\":1}}],[\"node\",{\"1\":{\"402\":1,\"1224\":1,\"1745\":1}}],[\"nor\",{\"1\":{\"108\":1,\"111\":1,\"113\":1,\"244\":1,\"451\":1,\"474\":1,\"480\":1,\"656\":1,\"682\":1,\"717\":1,\"743\":1,\"756\":1,\"828\":1,\"859\":1,\"915\":1,\"956\":1,\"1022\":1,\"1091\":1,\"1110\":1,\"1123\":1,\"1176\":1,\"1204\":1,\"1372\":1,\"1554\":2,\"1559\":2,\"1561\":1,\"1641\":1,\"1752\":1,\"1755\":1}}],[\"normally\",{\"1\":{\"228\":1,\"448\":1,\"605\":1,\"905\":1,\"984\":1,\"1237\":1,\"1339\":1,\"1706\":1,\"1717\":1}}],[\"normal\",{\"0\":{\"1776\":1},\"1\":{\"95\":1,\"231\":1,\"244\":1,\"375\":1,\"780\":1,\"795\":1,\"964\":1,\"1178\":3,\"1190\":1,\"1404\":1,\"1554\":1,\"1559\":1,\"1706\":1,\"1777\":1,\"1804\":1}}],[\"none\",{\"1\":{\"93\":1,\"95\":1,\"117\":1,\"119\":1,\"123\":2,\"133\":1,\"137\":1,\"141\":1,\"145\":1,\"149\":1,\"157\":1,\"161\":1,\"173\":1}}],[\"non\",{\"0\":{\"91\":1,\"100\":1,\"104\":1,\"109\":1,\"128\":1,\"608\":1,\"908\":1,\"1431\":1,\"1711\":1,\"1736\":1},\"1\":{\"47\":1,\"70\":1,\"79\":1,\"93\":1,\"103\":1,\"111\":2,\"113\":1,\"121\":1,\"123\":1,\"125\":1,\"198\":1,\"377\":2,\"421\":1,\"474\":1,\"499\":1,\"742\":1,\"965\":1,\"1323\":1,\"1324\":1,\"1329\":1,\"1330\":1,\"1350\":1,\"1410\":2,\"1430\":2,\"1431\":1,\"1505\":1,\"1535\":2,\"1592\":1,\"1682\":1,\"1686\":1,\"1750\":1,\"1777\":1,\"1778\":1,\"1798\":1}}],[\"now\",{\"0\":{\"568\":1},\"1\":{\"39\":1,\"40\":3,\"48\":1,\"50\":1,\"59\":1,\"77\":1,\"78\":1,\"89\":1,\"90\":2,\"93\":4,\"95\":4,\"99\":1,\"103\":2,\"104\":2,\"108\":7,\"111\":10,\"113\":6,\"115\":6,\"117\":5,\"119\":3,\"121\":9,\"123\":1,\"126\":2,\"127\":4,\"129\":2,\"134\":1,\"138\":1,\"142\":3,\"151\":2,\"154\":1,\"155\":1,\"163\":1,\"168\":1,\"174\":3,\"177\":1,\"181\":3,\"182\":1,\"459\":1,\"562\":1,\"563\":1,\"755\":2,\"1300\":1,\"1309\":1}}],[\"nots\",{\"1\":{\"1037\":1}}],[\"notification\",{\"1\":{\"1123\":1}}],[\"notice\",{\"1\":{\"387\":1,\"656\":1,\"965\":1}}],[\"noticeable\",{\"1\":{\"354\":1,\"361\":1}}],[\"noting\",{\"1\":{\"41\":1,\"410\":1,\"526\":1,\"576\":1,\"1724\":1}}],[\"noted\",{\"1\":{\"1110\":1}}],[\"notepad\",{\"1\":{\"441\":1}}],[\"note\",{\"0\":{\"857\":1},\"1\":{\"202\":1,\"222\":1,\"397\":1,\"436\":1,\"441\":1,\"446\":1,\"518\":1,\"544\":1,\"591\":1,\"680\":1,\"743\":1,\"749\":1,\"756\":1,\"762\":1,\"801\":1,\"826\":1,\"863\":1,\"873\":1,\"875\":1,\"897\":1,\"904\":1,\"913\":1,\"986\":1,\"999\":1,\"1043\":1,\"1058\":1,\"1113\":1,\"1175\":1,\"1202\":1,\"1219\":1,\"1260\":1,\"1267\":1,\"1272\":1,\"1276\":1,\"1384\":1,\"1401\":2,\"1429\":1,\"1432\":2,\"1437\":1,\"1505\":1,\"1574\":1,\"1592\":1,\"1641\":1,\"1708\":1,\"1724\":1,\"1787\":1}}],[\"notes\",{\"1\":{\"69\":1,\"78\":1,\"113\":1,\"131\":1}}],[\"nothing\",{\"1\":{\"121\":2,\"695\":1}}],[\"notation\",{\"1\":{\"28\":1,\"127\":1,\"369\":1,\"697\":1,\"758\":1,\"766\":1,\"877\":1,\"1603\":1,\"1632\":1,\"1637\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1694\":1,\"1699\":1,\"1700\":1,\"1794\":1}}],[\"not\",{\"0\":{\"1003\":1,\"1761\":1},\"1\":{\"3\":1,\"15\":2,\"24\":1,\"26\":2,\"40\":1,\"47\":1,\"53\":1,\"90\":1,\"95\":2,\"111\":1,\"113\":1,\"115\":3,\"119\":3,\"129\":1,\"135\":1,\"147\":1,\"151\":1,\"174\":1,\"182\":2,\"208\":2,\"209\":1,\"214\":2,\"216\":1,\"217\":1,\"224\":1,\"229\":1,\"231\":1,\"253\":2,\"261\":1,\"270\":1,\"277\":1,\"312\":1,\"315\":1,\"323\":1,\"330\":1,\"340\":20,\"347\":1,\"387\":1,\"390\":1,\"397\":1,\"406\":1,\"409\":1,\"412\":2,\"421\":2,\"423\":2,\"440\":3,\"443\":1,\"445\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"459\":1,\"474\":1,\"477\":1,\"480\":1,\"518\":1,\"544\":1,\"563\":1,\"568\":1,\"596\":2,\"616\":5,\"661\":2,\"675\":1,\"677\":1,\"679\":5,\"680\":1,\"703\":2,\"717\":1,\"722\":1,\"727\":1,\"730\":1,\"733\":1,\"737\":1,\"742\":1,\"743\":1,\"752\":1,\"756\":1,\"775\":1,\"780\":3,\"781\":1,\"783\":1,\"791\":2,\"795\":4,\"823\":1,\"825\":5,\"826\":1,\"858\":3,\"859\":1,\"861\":2,\"869\":1,\"873\":1,\"897\":1,\"904\":1,\"910\":1,\"912\":5,\"913\":1,\"926\":1,\"956\":1,\"958\":1,\"1003\":1,\"1004\":1,\"1013\":1,\"1021\":2,\"1033\":1,\"1036\":1,\"1039\":2,\"1043\":1,\"1065\":1,\"1096\":1,\"1108\":1,\"1125\":1,\"1153\":1,\"1158\":2,\"1170\":1,\"1176\":1,\"1178\":3,\"1186\":2,\"1190\":4,\"1199\":1,\"1201\":5,\"1202\":1,\"1244\":1,\"1248\":2,\"1255\":2,\"1305\":2,\"1306\":1,\"1312\":1,\"1319\":2,\"1341\":1,\"1421\":1,\"1451\":1,\"1486\":1,\"1488\":1,\"1502\":1,\"1505\":1,\"1507\":1,\"1518\":1,\"1520\":1,\"1536\":1,\"1538\":1,\"1540\":1,\"1542\":1,\"1547\":1,\"1552\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1564\":1,\"1585\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1599\":1,\"1600\":1,\"1602\":1,\"1610\":1,\"1611\":1,\"1614\":1,\"1620\":1,\"1628\":2,\"1641\":1,\"1656\":1,\"1669\":1,\"1690\":2,\"1691\":1,\"1696\":2,\"1701\":11,\"1703\":1,\"1706\":1,\"1707\":2,\"1708\":2,\"1724\":1,\"1725\":1,\"1741\":1,\"1745\":1,\"1752\":1,\"1753\":1,\"1756\":1,\"1761\":1,\"1765\":1,\"1770\":1,\"1780\":1,\"1781\":2,\"1783\":1,\"1789\":1,\"1791\":1,\"1798\":2,\"1800\":1}}],[\"no\",{\"0\":{\"755\":1,\"1793\":1},\"1\":{\"1\":1,\"3\":1,\"8\":1,\"50\":1,\"90\":1,\"91\":1,\"93\":1,\"99\":1,\"100\":1,\"103\":3,\"107\":1,\"108\":1,\"115\":1,\"121\":4,\"123\":1,\"126\":1,\"129\":1,\"154\":1,\"158\":1,\"228\":1,\"231\":1,\"232\":1,\"361\":2,\"430\":1,\"440\":1,\"453\":1,\"488\":1,\"499\":1,\"535\":1,\"543\":1,\"576\":1,\"661\":1,\"682\":1,\"692\":1,\"717\":1,\"743\":1,\"756\":1,\"783\":1,\"794\":1,\"828\":1,\"915\":1,\"924\":2,\"1016\":1,\"1021\":1,\"1022\":1,\"1125\":1,\"1142\":1,\"1178\":2,\"1189\":1,\"1204\":1,\"1312\":1,\"1327\":1,\"1335\":2,\"1336\":1,\"1350\":1,\"1467\":1,\"1554\":1,\"1559\":1,\"1561\":2,\"1611\":1,\"1641\":1,\"1644\":1,\"1647\":1,\"1664\":1,\"1708\":1,\"1712\":1,\"1725\":1,\"1737\":1,\"1741\":1,\"1770\":1,\"1784\":1,\"1804\":1}}],[\"sgvsbg8sifdvcmxkiqo=\",{\"1\":{\"1460\":2,\"1461\":2}}],[\"sgr\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1,\"1701\":1}}],[\"ss\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"ssh\",{\"1\":{\"113\":2,\"127\":1,\"142\":1,\"182\":2,\"1175\":6}}],[\"sday\",{\"1\":{\"1147\":3}}],[\"sbin\",{\"1\":{\"1260\":2,\"1267\":4}}],[\"sb\",{\"1\":{\"942\":1}}],[\"square\",{\"1\":{\"375\":1,\"780\":2,\"1404\":1,\"1807\":1}}],[\"sqlite3\",{\"1\":{\"90\":2,\"113\":1,\"1482\":1,\"1487\":3,\"1488\":1,\"1610\":1}}],[\"sql\",{\"1\":{\"16\":1,\"27\":1,\"83\":1,\"88\":1,\"90\":1,\"92\":1,\"112\":1,\"113\":2,\"114\":1,\"1456\":1,\"1481\":1,\"1482\":1,\"1486\":3,\"1491\":1,\"1618\":1}}],[\"skip\",{\"1\":{\"121\":1,\"534\":1}}],[\"skills\",{\"1\":{\"43\":1}}],[\"src\",{\"1\":{\"90\":1,\"208\":2,\"209\":1}}],[\"svg\",{\"1\":{\"86\":2}}],[\"smith\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"smaller\",{\"1\":{\"1732\":2}}],[\"small\",{\"1\":{\"437\":1,\"737\":1,\"1672\":1}}],[\"smart\",{\"0\":{\"377\":1},\"1\":{\"814\":1,\"1016\":1,\"1387\":1}}],[\"smarter\",{\"1\":{\"84\":1,\"86\":1,\"1176\":1}}],[\"smoother\",{\"1\":{\"70\":1,\"125\":1}}],[\"slow\",{\"1\":{\"270\":1,\"277\":1,\"742\":1}}],[\"slower\",{\"1\":{\"95\":2,\"737\":1}}],[\"slice\",{\"1\":{\"259\":1,\"271\":1,\"285\":1,\"299\":1,\"302\":1,\"341\":1,\"348\":2}}],[\"slightly\",{\"1\":{\"90\":1,\"155\":2,\"241\":1,\"1719\":1}}],[\"slides\",{\"1\":{\"50\":1}}],[\"sleeps\",{\"1\":{\"1495\":1}}],[\"sleep\",{\"0\":{\"1492\":1},\"1\":{\"16\":1,\"27\":1,\"437\":1,\"473\":2,\"921\":2,\"1293\":4,\"1295\":1,\"1456\":1,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":3}}],[\"swaps\",{\"1\":{\"1574\":1}}],[\"swiss\",{\"1\":{\"1276\":1}}],[\"swivelled\",{\"1\":{\"1260\":1,\"1267\":1}}],[\"swivel\",{\"0\":{\"1257\":1,\"1264\":1},\"1\":{\"1258\":1,\"1259\":1,\"1260\":2,\"1262\":1,\"1265\":1,\"1266\":1,\"1267\":2,\"1268\":1}}],[\"switched\",{\"1\":{\"115\":1}}],[\"switch\",{\"0\":{\"247\":1,\"1242\":1},\"1\":{\"15\":1,\"26\":1,\"123\":1,\"124\":1,\"247\":3,\"318\":2,\"326\":2,\"333\":2,\"340\":7,\"347\":4,\"440\":2,\"457\":1,\"502\":1,\"861\":1,\"1021\":1,\"1243\":1,\"1244\":2,\"1245\":5,\"1248\":4,\"1249\":1,\"1250\":3,\"1251\":2,\"1252\":1,\"1253\":1,\"1325\":1,\"1331\":1,\"1771\":1,\"1781\":1,\"1782\":1,\"1804\":1,\"1808\":1}}],[\"swear\",{\"1\":{\"48\":1}}],[\"said\",{\"1\":{\"1708\":1}}],[\"sample\",{\"1\":{\"1708\":1}}],[\"same\",{\"1\":{\"14\":1,\"41\":1,\"42\":1,\"47\":1,\"48\":1,\"50\":1,\"90\":1,\"107\":1,\"113\":1,\"117\":2,\"121\":1,\"127\":1,\"162\":1,\"218\":2,\"225\":1,\"226\":1,\"231\":1,\"235\":1,\"244\":1,\"297\":1,\"376\":1,\"387\":1,\"397\":1,\"399\":1,\"423\":1,\"432\":1,\"434\":1,\"438\":1,\"442\":1,\"446\":2,\"454\":1,\"468\":1,\"519\":1,\"616\":1,\"620\":2,\"631\":2,\"637\":2,\"676\":1,\"679\":2,\"680\":1,\"722\":1,\"727\":2,\"742\":1,\"755\":4,\"825\":2,\"826\":1,\"882\":1,\"886\":1,\"912\":2,\"913\":1,\"942\":1,\"945\":1,\"997\":1,\"999\":1,\"1022\":1,\"1056\":1,\"1058\":1,\"1072\":1,\"1110\":1,\"1135\":1,\"1139\":1,\"1141\":1,\"1145\":1,\"1153\":1,\"1154\":1,\"1201\":2,\"1202\":1,\"1219\":1,\"1230\":1,\"1250\":1,\"1278\":1,\"1387\":2,\"1405\":1,\"1455\":1,\"1482\":1,\"1505\":1,\"1564\":1,\"1579\":1,\"1592\":1,\"1601\":1,\"1620\":1,\"1647\":1,\"1664\":1,\"1706\":1,\"1712\":2,\"1737\":2,\"1741\":1,\"1756\":1,\"1757\":1,\"1780\":2,\"1805\":1,\"1812\":1}}],[\"sake\",{\"1\":{\"1486\":1,\"1744\":1}}],[\"satisfied\",{\"1\":{\"1783\":1}}],[\"satisfies\",{\"1\":{\"309\":1}}],[\"sat\",{\"1\":{\"1449\":1}}],[\"saturnight\",{\"1\":{\"1133\":1}}],[\"saturday\",{\"1\":{\"40\":2,\"41\":1,\"42\":1,\"376\":1,\"416\":1,\"875\":1,\"1132\":1,\"1272\":1,\"1400\":4,\"1403\":2,\"1405\":1,\"1448\":1,\"1449\":1}}],[\"sally\",{\"1\":{\"225\":2,\"247\":1,\"249\":1,\"744\":5,\"757\":5,\"762\":3,\"784\":2,\"1245\":2,\"1642\":5,\"1772\":2}}],[\"salute\",{\"1\":{\"48\":1}}],[\"safer\",{\"1\":{\"126\":1}}],[\"safe\",{\"1\":{\"109\":1,\"409\":1,\"440\":6,\"513\":2,\"1036\":1,\"1276\":1}}],[\"safety\",{\"1\":{\"77\":1,\"115\":1,\"653\":1}}],[\"saying\",{\"1\":{\"443\":1,\"1350\":1}}],[\"say\",{\"1\":{\"59\":2,\"742\":1}}],[\"saner\",{\"1\":{\"560\":1}}],[\"sane\",{\"1\":{\"51\":1,\"208\":1,\"440\":1,\"808\":1,\"815\":1,\"1069\":1}}],[\"saves\",{\"1\":{\"237\":1,\"1509\":1}}],[\"saved\",{\"1\":{\"47\":1}}],[\"save\",{\"1\":{\"47\":1,\"52\":1,\"241\":1}}],[\"syscall\",{\"1\":{\"199\":1}}],[\"systems\",{\"1\":{\"38\":1,\"40\":1,\"56\":1,\"62\":1,\"111\":2,\"113\":1,\"199\":1,\"207\":2,\"214\":1,\"474\":1,\"656\":1,\"677\":1,\"717\":1,\"730\":1,\"733\":1,\"823\":1,\"910\":1,\"1016\":1,\"1023\":2,\"1199\":1,\"1372\":1,\"1451\":1,\"1628\":2,\"1741\":1,\"1746\":1,\"1773\":1,\"1793\":1}}],[\"system\",{\"0\":{\"350\":1,\"357\":1},\"1\":{\"15\":3,\"26\":3,\"30\":2,\"50\":1,\"94\":3,\"162\":1,\"208\":1,\"263\":2,\"265\":2,\"306\":2,\"356\":1,\"363\":1,\"393\":1,\"463\":3,\"472\":1,\"474\":1,\"515\":1,\"643\":2,\"681\":1,\"691\":1,\"692\":2,\"697\":2,\"787\":1,\"788\":1,\"797\":2,\"827\":1,\"837\":1,\"843\":1,\"891\":2,\"914\":1,\"1077\":2,\"1098\":1,\"1150\":2,\"1183\":1,\"1188\":1,\"1192\":2,\"1203\":1,\"1235\":2,\"1628\":1,\"1728\":2,\"1741\":1,\"1746\":1}}],[\"sync\",{\"1\":{\"354\":1,\"361\":1}}],[\"syntactic\",{\"1\":{\"119\":1,\"235\":1,\"1566\":1,\"1741\":1}}],[\"syntaxes\",{\"1\":{\"43\":1}}],[\"syntax\",{\"0\":{\"221\":1,\"375\":1,\"741\":1,\"780\":1,\"1404\":1,\"1517\":1,\"1523\":1,\"1720\":1,\"1721\":1},\"1\":{\"12\":1,\"23\":1,\"40\":2,\"42\":1,\"46\":2,\"47\":6,\"50\":1,\"51\":1,\"52\":2,\"54\":1,\"59\":1,\"69\":1,\"70\":1,\"72\":2,\"84\":1,\"86\":2,\"95\":1,\"103\":1,\"108\":1,\"111\":2,\"121\":7,\"124\":1,\"125\":1,\"126\":1,\"131\":1,\"135\":1,\"216\":1,\"220\":1,\"225\":1,\"239\":1,\"371\":1,\"372\":1,\"375\":1,\"376\":1,\"417\":1,\"526\":1,\"560\":3,\"593\":2,\"596\":5,\"597\":1,\"741\":1,\"743\":1,\"756\":1,\"779\":1,\"780\":1,\"865\":4,\"873\":1,\"1082\":1,\"1113\":2,\"1153\":1,\"1154\":1,\"1155\":1,\"1249\":1,\"1270\":1,\"1297\":1,\"1401\":1,\"1404\":1,\"1405\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1,\"1453\":1,\"1500\":1,\"1516\":2,\"1566\":1,\"1629\":1,\"1641\":1,\"1715\":2,\"1716\":2,\"1721\":3,\"1724\":1,\"1772\":1,\"1814\":1}}],[\"synonyms\",{\"0\":{\"392\":1,\"411\":1,\"418\":1,\"482\":1,\"501\":1,\"529\":1,\"547\":1,\"583\":1,\"598\":1,\"610\":1,\"623\":1,\"634\":1,\"640\":1,\"650\":1,\"658\":1,\"684\":1,\"712\":1,\"734\":1,\"786\":1,\"796\":1,\"830\":1,\"836\":1,\"842\":1,\"860\":1,\"870\":1,\"883\":1,\"890\":1,\"946\":1,\"959\":1,\"966\":1,\"974\":1,\"1001\":1,\"1007\":1,\"1030\":1,\"1038\":1,\"1051\":1,\"1060\":1,\"1076\":1,\"1083\":1,\"1117\":1,\"1136\":1,\"1149\":1,\"1181\":1,\"1191\":1,\"1206\":1,\"1212\":1,\"1221\":1,\"1234\":1,\"1240\":1,\"1288\":1,\"1344\":1,\"1462\":1,\"1468\":1,\"1473\":1,\"1490\":1},\"1\":{\"113\":1,\"432\":1}}],[\"symlinks\",{\"1\":{\"238\":1,\"692\":1,\"694\":1,\"695\":5,\"1772\":1}}],[\"symlink\",{\"1\":{\"209\":1}}],[\"symlinked\",{\"1\":{\"90\":1}}],[\"symbol\",{\"1\":{\"38\":1,\"56\":1,\"151\":1,\"223\":1}}],[\"score\",{\"1\":{\"1651\":1,\"1661\":1}}],[\"scoping\",{\"0\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1,\"1780\":1},\"1\":{\"15\":1,\"23\":2,\"26\":1,\"94\":1,\"119\":1,\"120\":1,\"502\":1,\"611\":2,\"678\":1,\"685\":2,\"802\":2,\"824\":1,\"831\":2,\"911\":1,\"917\":2,\"1160\":1,\"1200\":1,\"1207\":2,\"1325\":1,\"1331\":1,\"1756\":2,\"1771\":2,\"1774\":1,\"1779\":1,\"1780\":3,\"1781\":1}}],[\"scoped\",{\"0\":{\"518\":1},\"1\":{\"292\":1,\"391\":1,\"515\":1,\"518\":2,\"523\":2,\"679\":3,\"680\":2,\"710\":1,\"785\":1,\"825\":3,\"826\":2,\"900\":1,\"912\":3,\"913\":2,\"1097\":1,\"1201\":3,\"1202\":2}}],[\"scopes\",{\"1\":{\"52\":1}}],[\"scope\",{\"0\":{\"518\":1,\"1758\":1,\"1781\":1},\"1\":{\"15\":2,\"26\":2,\"115\":1,\"119\":1,\"122\":1,\"181\":1,\"183\":1,\"252\":1,\"253\":1,\"484\":1,\"488\":2,\"489\":1,\"535\":2,\"536\":2,\"584\":1,\"589\":1,\"661\":1,\"664\":1,\"679\":1,\"745\":1,\"758\":1,\"766\":1,\"787\":1,\"825\":1,\"912\":1,\"1091\":1,\"1098\":1,\"1138\":1,\"1139\":2,\"1142\":1,\"1143\":1,\"1178\":4,\"1201\":1,\"1255\":1,\"1747\":1,\"1756\":3,\"1757\":3,\"1758\":2,\"1760\":1,\"1762\":1,\"1763\":1,\"1764\":1,\"1765\":1,\"1780\":1,\"1781\":2}}],[\"scenario\",{\"1\":{\"1448\":1}}],[\"scenarios\",{\"1\":{\"50\":1}}],[\"sc\",{\"1\":{\"942\":1}}],[\"scans\",{\"1\":{\"989\":2}}],[\"scan\",{\"1\":{\"269\":1,\"276\":1,\"989\":1}}],[\"scanner\",{\"1\":{\"269\":5,\"276\":5}}],[\"scalar\",{\"1\":{\"139\":1}}],[\"scalars\",{\"0\":{\"228\":1},\"1\":{\"127\":1,\"139\":1}}],[\"schemas\",{\"1\":{\"428\":1,\"452\":1,\"1176\":1}}],[\"schema\",{\"1\":{\"426\":1,\"428\":1,\"431\":1,\"433\":1,\"456\":1,\"1179\":1,\"1672\":1}}],[\"schemes\",{\"1\":{\"103\":1}}],[\"schedulers\",{\"0\":{\"1775\":1},\"1\":{\"23\":2,\"94\":2,\"120\":2,\"502\":2,\"1161\":1,\"1171\":2,\"1325\":2,\"1331\":2,\"1554\":1,\"1557\":2,\"1559\":1,\"1562\":2,\"1709\":2,\"1748\":2,\"1775\":2}}],[\"scheduler\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"502\":1,\"1160\":1,\"1161\":1,\"1325\":1,\"1331\":1,\"1774\":1,\"1776\":1,\"1777\":1,\"1778\":1,\"1779\":1}}],[\"scroll\",{\"1\":{\"1799\":6}}],[\"scrolls\",{\"1\":{\"174\":1}}],[\"screen\",{\"0\":{\"1806\":1,\"1813\":1},\"1\":{\"162\":1,\"1795\":2,\"1802\":1,\"1813\":1}}],[\"screenshots\",{\"0\":{\"18\":1}}],[\"script\",{\"1\":{\"51\":1,\"90\":1,\"238\":1,\"391\":1,\"421\":1,\"710\":1,\"737\":1,\"785\":1,\"977\":1,\"1029\":1,\"1097\":1,\"1121\":1,\"1122\":1,\"1125\":1,\"1178\":2,\"1179\":1,\"1712\":1,\"1729\":1,\"1737\":1,\"1750\":1}}],[\"scripts\",{\"0\":{\"1178\":1},\"1\":{\"15\":2,\"26\":2,\"47\":2,\"48\":2,\"51\":1,\"75\":1,\"103\":1,\"108\":2,\"116\":1,\"119\":3,\"169\":1,\"183\":2,\"231\":1,\"238\":1,\"264\":1,\"391\":2,\"421\":1,\"468\":1,\"530\":1,\"577\":1,\"642\":1,\"669\":1,\"682\":1,\"710\":2,\"713\":1,\"741\":1,\"785\":2,\"828\":1,\"861\":1,\"915\":1,\"956\":1,\"977\":1,\"1061\":1,\"1097\":2,\"1171\":1,\"1178\":1,\"1182\":2,\"1204\":1,\"1217\":1,\"1282\":1,\"1283\":1,\"1347\":2,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1570\":1,\"1582\":1,\"1729\":1,\"1739\":1,\"1743\":1,\"1775\":1,\"1782\":1}}],[\"scripting\",{\"1\":{\"15\":1,\"26\":1,\"37\":1,\"46\":4,\"48\":2,\"53\":1,\"70\":1,\"72\":1,\"108\":1,\"115\":1,\"121\":1,\"125\":1,\"216\":1,\"420\":1,\"576\":1,\"787\":1,\"808\":1,\"1067\":1,\"1213\":1,\"1337\":1,\"1716\":1,\"1772\":1}}],[\"s\",{\"0\":{\"13\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"191\":1,\"399\":1,\"744\":2,\"757\":2,\"1454\":1,\"1501\":1,\"1642\":2,\"1715\":1},\"1\":{\"12\":1,\"15\":11,\"21\":1,\"23\":4,\"26\":11,\"28\":1,\"29\":1,\"30\":2,\"37\":1,\"38\":3,\"40\":1,\"41\":3,\"44\":1,\"47\":4,\"50\":1,\"51\":2,\"52\":2,\"54\":4,\"56\":3,\"59\":1,\"63\":1,\"69\":1,\"87\":4,\"90\":1,\"93\":1,\"94\":1,\"96\":1,\"98\":1,\"103\":1,\"108\":1,\"111\":1,\"112\":1,\"113\":1,\"115\":2,\"119\":1,\"120\":1,\"121\":2,\"124\":1,\"130\":3,\"131\":1,\"164\":3,\"183\":2,\"188\":1,\"201\":1,\"210\":1,\"211\":1,\"215\":1,\"224\":1,\"231\":2,\"232\":1,\"252\":1,\"262\":1,\"264\":1,\"265\":2,\"267\":1,\"269\":2,\"274\":1,\"276\":2,\"281\":1,\"285\":1,\"286\":2,\"288\":1,\"295\":1,\"299\":1,\"300\":2,\"305\":1,\"308\":1,\"311\":2,\"312\":2,\"319\":2,\"320\":2,\"327\":2,\"328\":2,\"334\":2,\"335\":2,\"336\":1,\"340\":18,\"341\":1,\"342\":1,\"343\":1,\"345\":2,\"347\":2,\"348\":1,\"349\":1,\"354\":1,\"355\":1,\"360\":2,\"361\":4,\"362\":1,\"371\":1,\"375\":1,\"376\":1,\"383\":1,\"387\":2,\"389\":1,\"391\":1,\"393\":3,\"396\":1,\"397\":1,\"400\":1,\"404\":1,\"412\":2,\"419\":1,\"423\":1,\"433\":1,\"436\":1,\"438\":1,\"439\":1,\"447\":2,\"454\":1,\"483\":2,\"490\":1,\"495\":1,\"502\":1,\"512\":1,\"515\":1,\"518\":2,\"526\":2,\"527\":1,\"545\":1,\"546\":2,\"548\":1,\"560\":1,\"567\":1,\"576\":2,\"577\":1,\"601\":1,\"605\":1,\"609\":1,\"611\":4,\"618\":2,\"647\":1,\"653\":1,\"656\":2,\"659\":1,\"661\":1,\"669\":1,\"670\":1,\"675\":2,\"677\":1,\"679\":1,\"685\":2,\"690\":1,\"694\":1,\"695\":2,\"701\":1,\"702\":1,\"703\":2,\"710\":1,\"737\":2,\"741\":1,\"742\":1,\"743\":4,\"745\":1,\"747\":1,\"749\":1,\"755\":7,\"756\":4,\"758\":1,\"760\":1,\"766\":1,\"771\":2,\"779\":1,\"781\":1,\"785\":1,\"787\":3,\"802\":2,\"804\":1,\"808\":2,\"814\":1,\"815\":2,\"817\":1,\"823\":1,\"825\":1,\"831\":2,\"844\":1,\"845\":1,\"861\":3,\"873\":1,\"876\":1,\"905\":1,\"909\":1,\"910\":1,\"912\":1,\"917\":3,\"932\":1,\"949\":1,\"954\":3,\"956\":1,\"962\":2,\"965\":1,\"975\":2,\"976\":1,\"977\":2,\"979\":2,\"1003\":2,\"1004\":2,\"1016\":1,\"1022\":1,\"1029\":1,\"1039\":2,\"1052\":2,\"1061\":1,\"1063\":1,\"1069\":2,\"1084\":1,\"1089\":1,\"1091\":1,\"1097\":1,\"1098\":3,\"1100\":1,\"1102\":2,\"1111\":1,\"1113\":1,\"1116\":1,\"1126\":2,\"1133\":1,\"1134\":1,\"1160\":1,\"1164\":1,\"1173\":1,\"1176\":2,\"1182\":4,\"1188\":1,\"1193\":1,\"1199\":1,\"1201\":1,\"1207\":2,\"1215\":1,\"1224\":1,\"1227\":1,\"1228\":1,\"1253\":1,\"1255\":3,\"1260\":2,\"1262\":1,\"1267\":4,\"1268\":1,\"1270\":1,\"1273\":1,\"1278\":2,\"1280\":1,\"1282\":1,\"1284\":1,\"1291\":1,\"1294\":2,\"1302\":1,\"1303\":1,\"1307\":1,\"1313\":2,\"1317\":1,\"1318\":1,\"1319\":2,\"1321\":1,\"1325\":1,\"1331\":1,\"1345\":2,\"1346\":1,\"1350\":1,\"1387\":1,\"1388\":4,\"1400\":1,\"1401\":1,\"1404\":1,\"1453\":1,\"1479\":1,\"1480\":1,\"1487\":1,\"1500\":1,\"1501\":1,\"1507\":1,\"1518\":1,\"1547\":2,\"1549\":1,\"1552\":1,\"1571\":3,\"1575\":4,\"1583\":3,\"1586\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1603\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1628\":2,\"1629\":1,\"1632\":1,\"1636\":1,\"1641\":4,\"1645\":2,\"1647\":1,\"1657\":2,\"1659\":2,\"1664\":1,\"1666\":1,\"1667\":1,\"1670\":2,\"1675\":2,\"1679\":1,\"1688\":1,\"1689\":1,\"1690\":1,\"1694\":1,\"1696\":1,\"1699\":1,\"1705\":1,\"1707\":3,\"1708\":3,\"1714\":1,\"1715\":2,\"1716\":3,\"1725\":2,\"1728\":2,\"1729\":2,\"1731\":1,\"1733\":1,\"1739\":2,\"1743\":1,\"1746\":1,\"1751\":1,\"1754\":2,\"1771\":1,\"1772\":1,\"1774\":1,\"1779\":1,\"1782\":1,\"1789\":2,\"1790\":1,\"1794\":4,\"1801\":1,\"1814\":4}}],[\"shaping\",{\"1\":{\"1746\":1}}],[\"sharing\",{\"0\":{\"1733\":1}}],[\"shares\",{\"1\":{\"1043\":1}}],[\"shared\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1,\"1708\":1}}],[\"share\",{\"1\":{\"10\":1,\"46\":1,\"423\":1,\"1712\":1,\"1728\":1,\"1737\":1}}],[\"shift+f5\",{\"1\":{\"1807\":1}}],[\"shift+f2\",{\"1\":{\"1807\":1}}],[\"shift+f12\",{\"1\":{\"1807\":1}}],[\"shift+f1\",{\"1\":{\"172\":1,\"1807\":2}}],[\"shift+tab\",{\"1\":{\"1797\":1,\"1798\":1}}],[\"shifting\",{\"1\":{\"421\":1}}],[\"ship\",{\"1\":{\"208\":1,\"1451\":1}}],[\"shipped\",{\"1\":{\"108\":1,\"1654\":1}}],[\"shebang\",{\"1\":{\"111\":1}}],[\"shells\",{\"0\":{\"38\":1,\"237\":1},\"1\":{\"36\":1,\"39\":1,\"40\":1,\"43\":1,\"46\":3,\"48\":4,\"49\":1,\"50\":2,\"51\":1,\"52\":1,\"53\":1,\"57\":1,\"121\":1,\"214\":2,\"216\":1,\"226\":1,\"228\":1,\"237\":3,\"238\":1,\"387\":1,\"653\":1,\"657\":1,\"675\":1,\"679\":1,\"711\":1,\"825\":1,\"912\":1,\"1048\":1,\"1201\":1,\"1509\":1,\"1513\":1,\"1529\":1,\"1570\":1,\"1582\":1,\"1591\":1,\"1717\":1,\"1753\":1,\"1772\":1,\"1773\":1}}],[\"shell\",{\"0\":{\"14\":1,\"34\":1,\"45\":1,\"55\":1,\"321\":1,\"892\":1,\"1256\":1,\"1263\":1,\"1455\":1,\"1680\":1,\"1715\":1,\"1800\":1},\"1\":{\"1\":1,\"3\":1,\"14\":1,\"15\":4,\"16\":2,\"21\":1,\"23\":2,\"26\":4,\"27\":2,\"29\":1,\"34\":1,\"37\":1,\"38\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":11,\"47\":3,\"50\":2,\"51\":4,\"54\":2,\"55\":1,\"56\":1,\"70\":1,\"72\":1,\"87\":2,\"90\":1,\"92\":1,\"95\":2,\"103\":1,\"108\":3,\"112\":1,\"114\":1,\"115\":3,\"116\":1,\"119\":2,\"121\":4,\"123\":5,\"125\":1,\"130\":2,\"162\":2,\"163\":2,\"164\":2,\"169\":2,\"182\":1,\"183\":2,\"208\":1,\"214\":1,\"215\":1,\"217\":2,\"226\":1,\"231\":2,\"237\":3,\"238\":3,\"253\":1,\"255\":1,\"391\":1,\"395\":1,\"397\":6,\"402\":4,\"420\":1,\"421\":1,\"436\":2,\"440\":2,\"449\":1,\"459\":1,\"462\":2,\"508\":2,\"513\":1,\"515\":1,\"530\":1,\"576\":1,\"577\":1,\"593\":2,\"596\":7,\"597\":1,\"606\":1,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"642\":1,\"647\":1,\"661\":1,\"669\":1,\"679\":2,\"680\":1,\"682\":1,\"710\":1,\"713\":1,\"722\":2,\"727\":2,\"733\":3,\"743\":5,\"756\":5,\"785\":1,\"787\":1,\"825\":2,\"826\":1,\"828\":1,\"861\":1,\"865\":4,\"906\":1,\"912\":2,\"913\":1,\"915\":1,\"954\":2,\"984\":1,\"992\":1,\"1020\":1,\"1021\":1,\"1029\":1,\"1061\":1,\"1097\":1,\"1125\":1,\"1171\":1,\"1178\":2,\"1182\":2,\"1201\":2,\"1202\":1,\"1204\":1,\"1213\":1,\"1237\":1,\"1282\":1,\"1283\":1,\"1295\":1,\"1312\":1,\"1337\":1,\"1347\":1,\"1360\":2,\"1373\":1,\"1374\":1,\"1375\":1,\"1388\":3,\"1398\":1,\"1400\":1,\"1455\":1,\"1456\":2,\"1463\":1,\"1469\":1,\"1474\":1,\"1481\":1,\"1492\":1,\"1493\":1,\"1513\":2,\"1570\":1,\"1582\":1,\"1600\":1,\"1618\":1,\"1628\":1,\"1641\":5,\"1659\":1,\"1690\":1,\"1696\":1,\"1704\":1,\"1708\":1,\"1712\":2,\"1713\":1,\"1715\":1,\"1716\":1,\"1717\":1,\"1719\":1,\"1721\":1,\"1724\":2,\"1725\":1,\"1726\":1,\"1728\":2,\"1737\":2,\"1738\":1,\"1739\":1,\"1741\":1,\"1743\":1,\"1766\":2,\"1772\":3,\"1775\":1,\"1776\":1,\"1782\":1,\"1786\":2,\"1787\":2,\"1788\":1,\"1790\":3,\"1794\":2,\"1795\":1,\"1798\":1,\"1800\":1,\"1808\":1,\"1811\":1,\"1812\":1,\"1814\":2}}],[\"shown\",{\"1\":{\"1804\":1}}],[\"showing\",{\"1\":{\"103\":1}}],[\"show\",{\"1\":{\"103\":1,\"115\":1,\"437\":1,\"441\":1,\"656\":1,\"732\":1,\"1798\":3}}],[\"shortcut\",{\"1\":{\"1706\":2}}],[\"shortcuts\",{\"1\":{\"61\":1}}],[\"shorthand\",{\"1\":{\"242\":1,\"927\":1,\"1158\":2,\"1706\":1}}],[\"shortlist\",{\"1\":{\"231\":1}}],[\"shorter\",{\"1\":{\"69\":1,\"131\":1}}],[\"short\",{\"1\":{\"47\":1,\"108\":2,\"182\":1,\"857\":1,\"1163\":1,\"1335\":2,\"1336\":1}}],[\"shouldn\",{\"1\":{\"95\":1,\"115\":1,\"121\":1,\"153\":1,\"244\":1,\"354\":1,\"361\":1,\"780\":1,\"795\":1,\"965\":1,\"1190\":1,\"1788\":1}}],[\"should\",{\"1\":{\"33\":1,\"36\":1,\"40\":1,\"47\":1,\"51\":1,\"52\":1,\"54\":1,\"90\":1,\"104\":1,\"111\":4,\"115\":6,\"119\":2,\"121\":1,\"126\":1,\"129\":2,\"135\":3,\"139\":1,\"162\":1,\"163\":1,\"174\":1,\"182\":1,\"197\":1,\"198\":1,\"207\":1,\"208\":1,\"225\":1,\"235\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"304\":1,\"309\":1,\"310\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"344\":1,\"354\":1,\"361\":1,\"395\":1,\"433\":1,\"438\":1,\"439\":2,\"447\":1,\"546\":1,\"563\":1,\"677\":1,\"780\":2,\"784\":1,\"795\":1,\"823\":1,\"910\":1,\"1000\":1,\"1021\":1,\"1059\":1,\"1110\":1,\"1178\":1,\"1190\":1,\"1199\":1,\"1220\":1,\"1244\":1,\"1300\":3,\"1593\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1698\":1,\"1728\":1,\"1750\":2,\"1752\":1,\"1788\":2,\"1808\":1}}],[\"seven\",{\"1\":{\"1807\":2}}],[\"several\",{\"1\":{\"9\":1,\"75\":1,\"108\":1,\"119\":1,\"1749\":1}}],[\"self\",{\"0\":{\"1756\":1}}],[\"selects\",{\"1\":{\"1797\":1,\"1798\":1}}],[\"selecting\",{\"1\":{\"1716\":1,\"1797\":1}}],[\"selected\",{\"1\":{\"347\":2,\"1400\":1,\"1716\":1}}],[\"select\",{\"0\":{\"1481\":1},\"1\":{\"16\":1,\"27\":2,\"78\":1,\"79\":1,\"90\":2,\"92\":1,\"111\":7,\"112\":1,\"113\":2,\"114\":1,\"205\":1,\"269\":1,\"276\":1,\"318\":6,\"333\":9,\"1402\":1,\"1456\":1,\"1482\":1,\"1483\":2,\"1484\":2,\"1487\":2,\"1488\":2,\"1490\":1,\"1618\":1}}],[\"semantics\",{\"1\":{\"1741\":1}}],[\"semi\",{\"1\":{\"47\":1,\"596\":1}}],[\"seq\",{\"1\":{\"1655\":5}}],[\"sequenced\",{\"1\":{\"1744\":1}}],[\"sequence\",{\"1\":{\"1702\":1,\"1708\":1}}],[\"sequences\",{\"0\":{\"1704\":1,\"1786\":1},\"1\":{\"23\":1,\"110\":1,\"129\":1,\"483\":1,\"618\":1,\"743\":1,\"756\":1,\"760\":1,\"1010\":1,\"1052\":1,\"1307\":1,\"1547\":1,\"1641\":1,\"1700\":2,\"1701\":1,\"1704\":1,\"1709\":1,\"1727\":1,\"1786\":1,\"1794\":1}}],[\"sequentially\",{\"1\":{\"347\":1,\"743\":1,\"756\":1,\"1641\":1,\"1747\":1,\"1778\":1}}],[\"sequential\",{\"0\":{\"1488\":1},\"1\":{\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"1488\":1}}],[\"server\",{\"1\":{\"1691\":1}}],[\"servers\",{\"1\":{\"1628\":1,\"1691\":3}}],[\"service\",{\"1\":{\"1629\":1}}],[\"series\",{\"1\":{\"1258\":1,\"1321\":1,\"1601\":1}}],[\"serialised\",{\"1\":{\"1257\":1,\"1258\":1,\"1268\":1}}],[\"serialization\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"seriously\",{\"1\":{\"3\":1}}],[\"sexp\",{\"1\":{\"956\":1,\"1175\":1}}],[\"seamlessly\",{\"1\":{\"1672\":1}}],[\"seasons\",{\"1\":{\"377\":1,\"1422\":1,\"1439\":1,\"1535\":1,\"1536\":1,\"1540\":1}}],[\"searching\",{\"1\":{\"1716\":1,\"1798\":1}}],[\"searches\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"search\",{\"0\":{\"1800\":1},\"1\":{\"119\":1,\"924\":1,\"942\":2,\"943\":4,\"1113\":2,\"1116\":1,\"1795\":1,\"1798\":10,\"1800\":1,\"1802\":1}}],[\"sep\",{\"1\":{\"1449\":1}}],[\"separators\",{\"0\":{\"596\":1},\"1\":{\"402\":1,\"596\":2}}],[\"separator\",{\"1\":{\"95\":1,\"402\":1,\"447\":1,\"596\":2,\"1226\":6,\"1227\":3,\"1278\":1,\"1615\":1,\"1650\":1,\"1654\":1,\"1773\":2}}],[\"separater\",{\"1\":{\"395\":1}}],[\"separated\",{\"0\":{\"1526\":1,\"1529\":1},\"1\":{\"375\":1,\"544\":1,\"897\":1,\"1400\":1,\"1404\":1,\"1545\":1,\"1614\":1,\"1683\":1,\"1687\":2}}],[\"separate\",{\"1\":{\"47\":1,\"113\":1,\"181\":1,\"616\":1,\"741\":1,\"780\":1,\"795\":1,\"1170\":1,\"1190\":1,\"1339\":1,\"1538\":1,\"1546\":1}}],[\"separately\",{\"1\":{\"40\":1}}],[\"september\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":2,\"1449\":1}}],[\"sees\",{\"1\":{\"70\":1,\"88\":1,\"97\":1,\"125\":1}}],[\"seeing\",{\"1\":{\"53\":1}}],[\"seems\",{\"1\":{\"86\":1}}],[\"seem\",{\"1\":{\"53\":1}}],[\"seen\",{\"1\":{\"42\":1,\"46\":1,\"93\":1,\"202\":1,\"1021\":1,\"1712\":1,\"1716\":3,\"1719\":1,\"1737\":1}}],[\"see\",{\"0\":{\"44\":1,\"54\":1,\"63\":1,\"87\":1,\"92\":1,\"94\":1,\"96\":1,\"101\":1,\"105\":1,\"110\":1,\"112\":1,\"114\":1,\"116\":1,\"118\":1,\"120\":1,\"122\":1,\"124\":1,\"130\":1,\"164\":1,\"169\":1,\"183\":1,\"263\":1,\"272\":1,\"279\":1,\"286\":1,\"293\":1,\"300\":1,\"306\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"356\":1,\"363\":1,\"369\":1,\"378\":1,\"383\":1,\"393\":1,\"404\":1,\"412\":1,\"419\":1,\"424\":1,\"457\":1,\"463\":1,\"469\":1,\"475\":1,\"483\":1,\"489\":1,\"495\":1,\"502\":1,\"509\":1,\"530\":1,\"536\":1,\"548\":1,\"553\":1,\"558\":1,\"569\":1,\"577\":1,\"584\":1,\"589\":1,\"599\":1,\"611\":1,\"618\":1,\"624\":1,\"629\":1,\"635\":1,\"641\":1,\"651\":1,\"659\":1,\"664\":1,\"669\":1,\"685\":1,\"690\":1,\"697\":1,\"703\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"745\":1,\"758\":1,\"766\":1,\"771\":1,\"787\":1,\"797\":1,\"802\":1,\"809\":1,\"816\":1,\"831\":1,\"837\":1,\"843\":1,\"849\":1,\"861\":1,\"871\":1,\"877\":1,\"884\":1,\"891\":1,\"898\":1,\"917\":1,\"922\":1,\"930\":1,\"935\":1,\"940\":1,\"947\":1,\"954\":1,\"960\":1,\"967\":1,\"975\":1,\"982\":1,\"987\":1,\"993\":1,\"1002\":1,\"1008\":1,\"1014\":1,\"1024\":1,\"1031\":1,\"1039\":1,\"1044\":1,\"1052\":1,\"1061\":1,\"1070\":1,\"1077\":1,\"1084\":1,\"1089\":1,\"1098\":1,\"1103\":1,\"1111\":1,\"1118\":1,\"1126\":1,\"1137\":1,\"1143\":1,\"1150\":1,\"1159\":1,\"1171\":1,\"1182\":1,\"1192\":1,\"1207\":1,\"1213\":1,\"1222\":1,\"1228\":1,\"1235\":1,\"1241\":1,\"1255\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1281\":1,\"1289\":1,\"1295\":1,\"1301\":1,\"1307\":1,\"1313\":1,\"1319\":1,\"1325\":1,\"1331\":1,\"1337\":1,\"1345\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1463\":1,\"1469\":1,\"1474\":1,\"1480\":1,\"1491\":1,\"1497\":1,\"1507\":1,\"1518\":1,\"1536\":1,\"1540\":1,\"1547\":1,\"1552\":1,\"1557\":1,\"1562\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1607\":1,\"1612\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1684\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1705\":1,\"1707\":1,\"1709\":1,\"1714\":1,\"1727\":1,\"1739\":1,\"1743\":1,\"1748\":1,\"1754\":1,\"1771\":1,\"1774\":1,\"1779\":1,\"1782\":1,\"1794\":1,\"1814\":1},\"1\":{\"40\":2,\"42\":1,\"86\":1,\"95\":1,\"103\":1,\"113\":1,\"207\":1,\"217\":1,\"260\":1,\"303\":1,\"354\":1,\"361\":1,\"376\":1,\"439\":1,\"526\":1,\"607\":1,\"653\":1,\"777\":1,\"778\":1,\"779\":1,\"907\":1,\"995\":1,\"999\":1,\"1058\":1,\"1095\":1,\"1141\":1,\"1155\":1,\"1219\":1,\"1267\":1,\"1276\":1,\"1324\":1,\"1330\":1,\"1350\":1,\"1366\":1,\"1405\":1,\"1487\":1,\"1546\":1,\"1554\":1,\"1559\":2,\"1615\":1,\"1629\":1,\"1634\":2,\"1666\":1,\"1722\":1,\"1735\":1,\"1744\":1,\"1745\":1,\"1756\":1,\"1780\":1,\"1784\":1,\"1797\":1,\"1798\":1}}],[\"sent\",{\"1\":{\"643\":1,\"722\":1,\"727\":1}}],[\"sensitivity\",{\"0\":{\"1417\":1,\"1444\":1}}],[\"sensitive\",{\"1\":{\"217\":1,\"1798\":1}}],[\"sense\",{\"1\":{\"39\":1,\"47\":1,\"48\":1,\"52\":1,\"57\":1,\"607\":1,\"907\":1,\"1773\":2}}],[\"sender\",{\"1\":{\"1647\":1,\"1664\":1}}],[\"send\",{\"1\":{\"182\":1,\"722\":2,\"727\":2,\"1022\":2,\"1808\":1,\"1811\":1}}],[\"sending\",{\"1\":{\"93\":1,\"255\":1,\"1746\":1}}],[\"sends\",{\"1\":{\"3\":1,\"15\":1,\"26\":1,\"92\":1,\"101\":1,\"115\":1,\"475\":1,\"659\":1,\"713\":1,\"714\":1,\"715\":1,\"723\":1,\"728\":1,\"735\":1}}],[\"se\",{\"1\":{\"39\":1,\"57\":1,\"1115\":1}}],[\"sed\",{\"1\":{\"38\":4,\"39\":1,\"40\":1,\"48\":1,\"56\":4,\"57\":1}}],[\"secrets\",{\"1\":{\"1122\":1,\"1123\":1}}],[\"secure\",{\"1\":{\"1110\":1}}],[\"security\",{\"0\":{\"1110\":1},\"1\":{\"95\":1,\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"secondly\",{\"1\":{\"48\":1}}],[\"second\",{\"1\":{\"42\":1,\"50\":1,\"61\":1,\"115\":1,\"439\":1,\"447\":1,\"645\":1,\"741\":2,\"749\":1,\"808\":1,\"937\":1,\"1068\":1,\"1555\":2,\"1560\":2,\"1746\":1,\"1807\":1}}],[\"seconds\",{\"1\":{\"16\":1,\"27\":1,\"119\":1,\"437\":3,\"921\":1,\"1022\":1,\"1295\":1,\"1390\":1,\"1392\":2,\"1393\":1,\"1456\":1,\"1492\":1,\"1493\":1,\"1495\":1}}],[\"sections\",{\"1\":{\"607\":1,\"907\":1}}],[\"section\",{\"1\":{\"10\":1,\"21\":1,\"39\":1,\"48\":1,\"264\":1,\"1375\":1,\"1451\":1,\"1498\":1,\"1600\":1,\"1784\":1,\"1788\":1}}],[\"session\",{\"1\":{\"15\":1,\"26\":1,\"92\":1,\"110\":1,\"202\":1,\"226\":1,\"255\":1,\"475\":2,\"659\":2,\"713\":1,\"718\":2,\"723\":2,\"728\":2,\"729\":1,\"730\":1,\"733\":2,\"735\":1,\"981\":3,\"1171\":1,\"1182\":1,\"1241\":1,\"1325\":1,\"1331\":1,\"1651\":1,\"1661\":1,\"1808\":1,\"1811\":1}}],[\"sets\",{\"0\":{\"1602\":1},\"1\":{\"371\":1,\"1169\":1,\"1170\":1,\"1479\":1,\"1780\":1}}],[\"setting\",{\"1\":{\"111\":1,\"121\":2,\"433\":1,\"436\":1,\"437\":1,\"445\":1,\"512\":4,\"516\":1,\"517\":1,\"523\":1,\"527\":1,\"528\":1,\"782\":1,\"811\":1,\"1141\":1,\"1753\":1,\"1780\":1}}],[\"settings\",{\"1\":{\"15\":1,\"26\":1,\"87\":1,\"96\":1,\"110\":1,\"112\":1,\"114\":1,\"116\":1,\"120\":1,\"122\":1,\"164\":1,\"169\":1,\"183\":1,\"404\":1,\"457\":1,\"463\":1,\"510\":1,\"511\":1,\"512\":1,\"515\":6,\"518\":5,\"519\":2,\"522\":1,\"523\":2,\"599\":1,\"809\":1,\"816\":1,\"849\":1,\"871\":1,\"935\":1,\"982\":1,\"987\":1,\"1024\":1,\"1070\":1,\"1182\":1,\"1213\":1,\"1241\":1,\"1289\":1,\"1337\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1491\":1,\"1618\":1,\"1675\":1,\"1707\":1,\"1727\":1,\"1771\":1,\"1782\":1,\"1794\":1}}],[\"setdatatype\",{\"1\":{\"99\":2,\"340\":15,\"1300\":1}}],[\"set\",{\"0\":{\"1193\":1},\"1\":{\"15\":6,\"26\":6,\"71\":1,\"93\":1,\"94\":1,\"95\":2,\"96\":3,\"108\":7,\"111\":3,\"112\":3,\"113\":1,\"114\":1,\"115\":4,\"118\":1,\"119\":3,\"120\":1,\"121\":1,\"123\":5,\"139\":1,\"151\":1,\"162\":1,\"169\":1,\"182\":1,\"183\":1,\"207\":2,\"214\":1,\"347\":1,\"367\":1,\"391\":1,\"393\":4,\"409\":1,\"423\":3,\"425\":1,\"427\":1,\"428\":1,\"434\":2,\"437\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":2,\"442\":1,\"443\":2,\"444\":1,\"445\":1,\"447\":1,\"448\":1,\"449\":2,\"452\":1,\"462\":1,\"483\":1,\"495\":1,\"508\":1,\"512\":3,\"526\":1,\"528\":1,\"543\":1,\"548\":1,\"563\":1,\"605\":4,\"606\":2,\"611\":5,\"618\":1,\"628\":1,\"653\":2,\"659\":2,\"670\":1,\"675\":1,\"676\":2,\"677\":7,\"678\":4,\"679\":9,\"680\":1,\"682\":2,\"685\":3,\"690\":2,\"694\":1,\"710\":1,\"713\":1,\"745\":2,\"762\":2,\"766\":2,\"771\":1,\"780\":1,\"785\":1,\"787\":4,\"801\":1,\"802\":3,\"808\":1,\"814\":1,\"815\":1,\"817\":1,\"819\":1,\"823\":7,\"824\":4,\"825\":9,\"826\":1,\"828\":2,\"831\":3,\"869\":1,\"900\":1,\"905\":4,\"906\":2,\"910\":7,\"911\":4,\"912\":9,\"913\":1,\"915\":2,\"917\":4,\"954\":1,\"975\":1,\"1027\":1,\"1036\":1,\"1052\":1,\"1069\":1,\"1089\":1,\"1097\":1,\"1098\":4,\"1111\":2,\"1126\":1,\"1170\":1,\"1171\":1,\"1176\":1,\"1182\":5,\"1193\":1,\"1195\":7,\"1196\":2,\"1198\":1,\"1199\":7,\"1200\":4,\"1201\":9,\"1202\":1,\"1204\":2,\"1206\":2,\"1207\":2,\"1213\":1,\"1226\":2,\"1228\":2,\"1245\":1,\"1255\":2,\"1281\":1,\"1287\":1,\"1299\":1,\"1302\":1,\"1313\":1,\"1321\":1,\"1337\":1,\"1345\":3,\"1350\":1,\"1356\":1,\"1357\":1,\"1369\":1,\"1378\":1,\"1400\":1,\"1487\":2,\"1507\":2,\"1517\":1,\"1518\":2,\"1547\":3,\"1550\":1,\"1552\":2,\"1587\":1,\"1589\":2,\"1593\":1,\"1594\":2,\"1599\":2,\"1620\":1,\"1675\":1,\"1677\":1,\"1704\":1,\"1705\":1,\"1706\":3,\"1707\":2,\"1721\":1,\"1724\":1,\"1725\":2,\"1726\":1,\"1727\":1,\"1746\":1,\"1750\":1,\"1754\":1,\"1755\":1,\"1770\":3,\"1771\":2,\"1772\":2,\"1773\":1,\"1780\":5,\"1782\":3,\"1786\":1,\"1787\":1,\"1789\":2,\"1794\":2}}],[\"six\",{\"1\":{\"1807\":2}}],[\"side\",{\"1\":{\"1554\":2,\"1559\":2,\"1773\":1}}],[\"sister\",{\"1\":{\"1245\":1}}],[\"silent\",{\"1\":{\"701\":1,\"702\":1,\"869\":1,\"1317\":1,\"1318\":1}}],[\"sit\",{\"1\":{\"391\":1,\"710\":1,\"780\":1,\"785\":1,\"1097\":1,\"1161\":1}}],[\"site\",{\"1\":{\"202\":1}}],[\"sits\",{\"1\":{\"52\":1}}],[\"sized\",{\"1\":{\"1634\":1}}],[\"size\",{\"1\":{\"95\":1,\"189\":1,\"1634\":1}}],[\"since\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"52\":1,\"119\":1,\"121\":1,\"270\":1,\"277\":1,\"312\":1,\"468\":2,\"675\":1,\"722\":1,\"727\":1,\"958\":1,\"1359\":1,\"1385\":1,\"1400\":1,\"1506\":1,\"1593\":1,\"1602\":1,\"1620\":1}}],[\"single\",{\"0\":{\"1585\":1,\"1648\":1,\"1665\":1},\"1\":{\"3\":1,\"24\":1,\"117\":1,\"222\":1,\"223\":1,\"237\":1,\"354\":1,\"361\":1,\"375\":1,\"480\":1,\"683\":1,\"722\":1,\"727\":1,\"793\":1,\"829\":1,\"859\":1,\"916\":1,\"977\":1,\"1205\":1,\"1218\":1,\"1404\":1,\"1502\":1,\"1504\":1,\"1507\":1,\"1518\":1,\"1536\":1,\"1540\":1,\"1542\":1,\"1547\":1,\"1552\":1,\"1586\":2,\"1591\":1,\"1593\":1,\"1594\":1,\"1598\":1,\"1599\":1,\"1666\":1,\"1729\":1,\"1745\":1,\"1753\":1,\"1772\":1,\"1776\":1}}],[\"similiaries\",{\"1\":{\"1650\":1}}],[\"similiar\",{\"1\":{\"1561\":1}}],[\"similarities\",{\"0\":{\"1654\":1},\"1\":{\"1043\":1}}],[\"similarly\",{\"1\":{\"399\":1,\"605\":1,\"760\":1,\"905\":1,\"1564\":1,\"1789\":1}}],[\"similar\",{\"0\":{\"38\":1},\"1\":{\"15\":1,\"26\":1,\"36\":1,\"42\":1,\"103\":1,\"129\":1,\"135\":1,\"182\":1,\"223\":1,\"439\":1,\"454\":1,\"459\":1,\"468\":1,\"532\":1,\"578\":1,\"589\":1,\"664\":1,\"720\":1,\"743\":1,\"756\":1,\"1115\":2,\"1321\":2,\"1461\":1,\"1496\":1,\"1570\":1,\"1582\":1,\"1641\":1,\"1721\":1,\"1752\":1,\"1766\":1,\"1777\":1,\"1810\":1}}],[\"simplicity\",{\"1\":{\"1746\":1}}],[\"simplistic\",{\"1\":{\"1461\":1,\"1496\":1}}],[\"simplifying\",{\"1\":{\"1243\":1}}],[\"simplified\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"simply\",{\"1\":{\"15\":1,\"26\":1,\"110\":1,\"122\":1,\"235\":1,\"369\":1,\"378\":1,\"383\":1,\"419\":1,\"548\":1,\"599\":1,\"745\":1,\"758\":1,\"814\":1,\"871\":1,\"872\":1,\"884\":1,\"891\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1002\":1,\"1077\":1,\"1084\":1,\"1118\":1,\"1137\":1,\"1150\":1,\"1235\":1,\"1249\":1,\"1274\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1507\":1,\"1536\":1,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1,\"1647\":2,\"1664\":2}}],[\"simple\",{\"1\":{\"15\":2,\"26\":2,\"40\":1,\"44\":1,\"59\":1,\"110\":2,\"122\":1,\"309\":1,\"369\":1,\"370\":1,\"378\":1,\"383\":1,\"419\":1,\"447\":1,\"548\":2,\"569\":1,\"599\":1,\"605\":1,\"745\":1,\"758\":1,\"871\":1,\"877\":2,\"884\":1,\"891\":1,\"898\":1,\"905\":1,\"940\":1,\"947\":2,\"960\":1,\"967\":2,\"1002\":1,\"1077\":1,\"1084\":1,\"1118\":1,\"1137\":2,\"1150\":1,\"1217\":1,\"1235\":1,\"1269\":1,\"1274\":1,\"1410\":2,\"1422\":2,\"1430\":2,\"1438\":2,\"1450\":2,\"1461\":1,\"1536\":2,\"1789\":1}}],[\"siginfo\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"sigint\",{\"0\":{\"254\":1},\"1\":{\"1808\":1}}],[\"sigquit\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"sigwinch\",{\"1\":{\"123\":1}}],[\"sigstop\",{\"1\":{\"115\":1}}],[\"sigstsp\",{\"1\":{\"3\":1}}],[\"sigtstp\",{\"0\":{\"256\":1},\"1\":{\"115\":1}}],[\"sigterm\",{\"1\":{\"115\":2}}],[\"sign\",{\"1\":{\"801\":1}}],[\"signal\",{\"0\":{\"254\":1,\"255\":1,\"256\":1},\"1\":{\"123\":1,\"722\":2,\"727\":2}}],[\"signals\",{\"1\":{\"3\":1,\"8\":1,\"95\":2,\"474\":1,\"717\":1}}],[\"significantly\",{\"1\":{\"86\":1,\"956\":1}}],[\"significant\",{\"1\":{\"48\":1,\"69\":1,\"70\":1,\"72\":1,\"81\":1,\"102\":1,\"121\":1,\"125\":1,\"131\":1}}],[\"sockets\",{\"1\":{\"695\":3,\"999\":1,\"1058\":1,\"1219\":1}}],[\"solitary\",{\"1\":{\"859\":1,\"1744\":1}}],[\"solution\",{\"1\":{\"616\":1}}],[\"solve\",{\"1\":{\"246\":1,\"247\":1,\"1161\":1}}],[\"solves\",{\"1\":{\"90\":1,\"121\":1}}],[\"solving\",{\"1\":{\"216\":1}}],[\"solaris\",{\"0\":{\"198\":1},\"1\":{\"188\":1,\"198\":2}}],[\"sort\",{\"1\":{\"865\":1,\"956\":3,\"959\":1,\"1745\":1}}],[\"sorted\",{\"1\":{\"115\":1}}],[\"sorting\",{\"1\":{\"103\":1,\"956\":1}}],[\"sorts\",{\"1\":{\"15\":1,\"26\":1,\"369\":1,\"383\":1,\"419\":1,\"548\":1,\"884\":1,\"898\":1,\"947\":1,\"955\":1,\"956\":1,\"967\":1,\"1084\":1,\"1137\":1}}],[\"software\",{\"0\":{\"1784\":1},\"1\":{\"1784\":1,\"1793\":1}}],[\"softwareupdate\",{\"1\":{\"1484\":1}}],[\"soft\",{\"1\":{\"89\":2,\"90\":1,\"182\":1}}],[\"sophisticated\",{\"1\":{\"15\":3,\"26\":3,\"44\":1,\"110\":3,\"122\":2,\"369\":2,\"370\":1,\"371\":1,\"378\":2,\"383\":2,\"419\":2,\"548\":3,\"569\":1,\"599\":2,\"745\":2,\"758\":2,\"871\":2,\"872\":1,\"873\":1,\"877\":2,\"884\":2,\"891\":2,\"898\":2,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"1002\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":3,\"1150\":2,\"1235\":2,\"1269\":1,\"1270\":1,\"1274\":2,\"1401\":1,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1507\":1,\"1536\":3,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1}}],[\"sourced\",{\"1\":{\"1710\":1,\"1712\":2,\"1737\":2}}],[\"sources\",{\"1\":{\"15\":2,\"26\":2,\"364\":1,\"365\":1,\"369\":1,\"548\":1,\"884\":2,\"898\":1,\"936\":1,\"947\":2,\"967\":2,\"1137\":2,\"1175\":1,\"1176\":2}}],[\"source\",{\"0\":{\"13\":1,\"207\":1,\"208\":1,\"318\":1,\"326\":1,\"333\":1,\"340\":1,\"347\":1,\"1208\":1,\"1454\":1,\"1501\":1,\"1712\":1,\"1737\":1},\"1\":{\"13\":1,\"15\":2,\"26\":2,\"112\":1,\"113\":1,\"135\":1,\"181\":1,\"189\":1,\"208\":6,\"211\":1,\"236\":1,\"354\":1,\"361\":1,\"391\":1,\"393\":1,\"394\":1,\"509\":1,\"576\":1,\"707\":1,\"710\":1,\"713\":1,\"785\":1,\"787\":1,\"940\":1,\"960\":1,\"1091\":2,\"1096\":1,\"1097\":1,\"1098\":1,\"1116\":2,\"1118\":1,\"1175\":4,\"1179\":1,\"1182\":1,\"1209\":1,\"1210\":5,\"1211\":5,\"1212\":1,\"1226\":1,\"1262\":1,\"1268\":1,\"1295\":1,\"1337\":1,\"1421\":1,\"1449\":1,\"1454\":1,\"1497\":1,\"1501\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1701\":2,\"1710\":2,\"1712\":2,\"1714\":1,\"1737\":2,\"1739\":1,\"1781\":1,\"1782\":1,\"1794\":1}}],[\"so\",{\"1\":{\"3\":1,\"15\":1,\"26\":1,\"37\":1,\"39\":3,\"40\":4,\"47\":4,\"48\":1,\"49\":1,\"50\":2,\"52\":1,\"57\":3,\"59\":2,\"69\":1,\"72\":1,\"76\":1,\"90\":1,\"95\":1,\"104\":1,\"108\":2,\"111\":2,\"117\":1,\"121\":4,\"131\":1,\"153\":1,\"198\":1,\"211\":1,\"216\":1,\"223\":1,\"228\":1,\"231\":1,\"232\":1,\"354\":1,\"361\":1,\"376\":1,\"397\":1,\"409\":1,\"423\":1,\"440\":1,\"446\":1,\"447\":2,\"480\":2,\"517\":1,\"526\":1,\"545\":1,\"596\":1,\"605\":1,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"679\":1,\"680\":1,\"747\":1,\"754\":1,\"755\":1,\"760\":1,\"762\":1,\"765\":1,\"783\":1,\"825\":1,\"826\":1,\"857\":1,\"859\":1,\"882\":1,\"905\":1,\"912\":1,\"913\":1,\"945\":1,\"962\":1,\"999\":1,\"1021\":1,\"1036\":1,\"1058\":1,\"1096\":1,\"1100\":1,\"1135\":1,\"1201\":1,\"1202\":1,\"1219\":1,\"1265\":1,\"1343\":1,\"1359\":1,\"1372\":1,\"1385\":1,\"1386\":1,\"1405\":1,\"1416\":1,\"1428\":1,\"1436\":1,\"1463\":1,\"1469\":1,\"1474\":1,\"1479\":1,\"1489\":1,\"1513\":1,\"1571\":1,\"1575\":2,\"1583\":1,\"1650\":1,\"1702\":1,\"1703\":1,\"1708\":1,\"1728\":1,\"1731\":1,\"1746\":1,\"1766\":1,\"1773\":1,\"1789\":1}}],[\"someone\",{\"1\":{\"1708\":1}}],[\"somefiles\",{\"1\":{\"1186\":2}}],[\"somefile\",{\"1\":{\"791\":2,\"858\":3}}],[\"sometimes\",{\"1\":{\"95\":1,\"218\":1,\"227\":1,\"440\":1,\"924\":1,\"995\":1,\"1366\":1,\"1505\":1,\"1592\":1,\"1667\":1,\"1706\":2,\"1791\":1}}],[\"something\",{\"1\":{\"34\":2,\"45\":2,\"47\":1,\"52\":1,\"59\":1,\"115\":4,\"126\":1,\"238\":1,\"246\":2,\"252\":1,\"447\":1,\"487\":1,\"781\":1,\"956\":1,\"1513\":1,\"1702\":1,\"1708\":1,\"1725\":1,\"1746\":1,\"1788\":1,\"1789\":1}}],[\"somewhere\",{\"1\":{\"52\":1}}],[\"some\",{\"1\":{\"3\":1,\"46\":1,\"47\":2,\"52\":1,\"79\":1,\"83\":1,\"86\":1,\"88\":1,\"89\":1,\"90\":2,\"91\":2,\"95\":4,\"98\":1,\"100\":2,\"102\":1,\"103\":2,\"108\":2,\"109\":1,\"111\":1,\"115\":1,\"119\":1,\"143\":1,\"182\":1,\"201\":1,\"202\":1,\"208\":2,\"209\":1,\"210\":1,\"214\":1,\"218\":1,\"219\":1,\"264\":1,\"312\":1,\"347\":1,\"387\":1,\"423\":1,\"508\":1,\"525\":1,\"607\":1,\"743\":2,\"756\":2,\"907\":1,\"1023\":1,\"1176\":1,\"1178\":1,\"1179\":1,\"1403\":1,\"1416\":1,\"1440\":1,\"1479\":1,\"1488\":1,\"1491\":1,\"1546\":1,\"1602\":2,\"1628\":1,\"1641\":2,\"1648\":1,\"1649\":1,\"1665\":1,\"1666\":2,\"1667\":1,\"1690\":1,\"1696\":1,\"1706\":1,\"1722\":1,\"1753\":1,\"1757\":1}}],[\"spotlight\",{\"1\":{\"1484\":1}}],[\"spouse\",{\"1\":{\"1226\":3,\"1639\":1}}],[\"spring\",{\"1\":{\"1403\":1,\"1440\":1,\"1449\":1}}],[\"sprintf\",{\"1\":{\"347\":1,\"1175\":1,\"1285\":1}}],[\"sprint\",{\"1\":{\"318\":2,\"326\":2,\"333\":2,\"340\":1,\"360\":1}}],[\"spans\",{\"1\":{\"1802\":1}}],[\"sparingly\",{\"1\":{\"607\":1,\"907\":1,\"1808\":1}}],[\"spared\",{\"1\":{\"468\":1}}],[\"spawn\",{\"1\":{\"526\":1}}],[\"spawns\",{\"1\":{\"123\":1}}],[\"space\",{\"1\":{\"40\":1,\"942\":1,\"1278\":3,\"1487\":1,\"1505\":1,\"1549\":1,\"1574\":1,\"1586\":1,\"1592\":1}}],[\"spaces\",{\"1\":{\"3\":2,\"103\":1,\"178\":1,\"228\":2,\"1591\":2,\"1691\":1}}],[\"spliting\",{\"1\":{\"1278\":1}}],[\"splitting\",{\"1\":{\"60\":1}}],[\"split\",{\"0\":{\"34\":1,\"45\":1},\"1\":{\"34\":1,\"45\":1,\"49\":1,\"117\":1,\"345\":1,\"879\":1,\"883\":1,\"1021\":1,\"1278\":5,\"1280\":1,\"1505\":1,\"1592\":1}}],[\"splits\",{\"1\":{\"15\":1,\"26\":1,\"369\":1,\"548\":2,\"878\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"1118\":1,\"1137\":1,\"1794\":1}}],[\"spelt\",{\"1\":{\"1703\":2}}],[\"spellcheckers\",{\"1\":{\"1788\":1,\"1789\":1}}],[\"spellchecker\",{\"0\":{\"1722\":1,\"1784\":1},\"1\":{\"93\":1,\"99\":1,\"1715\":1,\"1784\":1,\"1788\":1,\"1789\":2}}],[\"spellchecking\",{\"1\":{\"23\":1,\"84\":1,\"86\":2,\"87\":1,\"94\":1,\"210\":2,\"1722\":1,\"1727\":1,\"1783\":2,\"1814\":1}}],[\"spellcheck\",{\"0\":{\"1783\":1,\"1787\":1,\"1788\":1,\"1789\":1},\"1\":{\"23\":1,\"86\":1,\"87\":1,\"94\":1,\"98\":3,\"121\":1,\"1722\":1,\"1727\":1,\"1787\":3,\"1788\":1,\"1789\":1,\"1790\":3,\"1814\":1}}],[\"speaking\",{\"1\":{\"720\":1}}],[\"speeding\",{\"1\":{\"182\":1}}],[\"speed\",{\"1\":{\"111\":1}}],[\"spectrum\",{\"1\":{\"50\":1}}],[\"specify\",{\"1\":{\"749\":1,\"764\":1,\"1139\":1,\"1153\":1,\"1155\":1,\"1297\":1,\"1401\":1,\"1432\":1}}],[\"specifying\",{\"1\":{\"676\":1,\"808\":1,\"1068\":1}}],[\"specifies\",{\"1\":{\"456\":1,\"868\":2,\"1108\":2}}],[\"specified\",{\"1\":{\"38\":1,\"56\":1,\"121\":1,\"661\":1,\"749\":1,\"768\":1,\"1022\":1,\"1142\":1,\"1353\":1,\"1364\":1,\"1382\":1,\"1383\":2,\"1396\":1}}],[\"specifically\",{\"1\":{\"121\":1,\"956\":1,\"1451\":1,\"1628\":1,\"1634\":1,\"1677\":1,\"1708\":1,\"1719\":1}}],[\"specifications\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"specification\",{\"1\":{\"50\":1,\"743\":1,\"756\":1,\"1641\":1,\"1753\":2}}],[\"specific\",{\"1\":{\"1\":1,\"71\":1,\"123\":1,\"151\":1,\"163\":1,\"208\":2,\"597\":1,\"643\":1,\"692\":1,\"743\":1,\"756\":1,\"762\":1,\"808\":1,\"956\":1,\"1067\":1,\"1400\":1,\"1448\":1,\"1451\":1,\"1546\":1,\"1602\":1,\"1641\":1,\"1745\":1,\"1746\":1,\"1747\":2,\"1752\":1,\"1793\":1,\"1798\":1}}],[\"special\",{\"0\":{\"1403\":1,\"1439\":1,\"1531\":1},\"1\":{\"23\":1,\"116\":1,\"118\":1,\"120\":1,\"168\":1,\"377\":1,\"395\":1,\"424\":1,\"509\":1,\"611\":1,\"685\":1,\"787\":1,\"802\":1,\"831\":1,\"917\":1,\"1207\":1,\"1403\":3,\"1422\":1,\"1440\":1,\"1444\":1,\"1448\":2,\"1531\":2,\"1535\":1,\"1536\":1,\"1540\":1,\"1594\":1,\"1707\":1,\"1741\":1,\"1753\":1,\"1755\":2,\"1782\":1}}],[\"suspend\",{\"1\":{\"1808\":1}}],[\"suspends\",{\"1\":{\"16\":1,\"27\":1,\"1295\":1,\"1456\":1,\"1492\":1,\"1493\":1}}],[\"sunnight\",{\"1\":{\"1133\":1}}],[\"sun\",{\"1\":{\"1131\":1,\"1403\":1,\"1440\":1,\"1449\":1}}],[\"sunday\",{\"1\":{\"40\":2,\"41\":3,\"42\":1,\"376\":2,\"416\":2,\"875\":2,\"1131\":1,\"1132\":3,\"1133\":1,\"1272\":2,\"1400\":4,\"1403\":4,\"1405\":2,\"1440\":1,\"1448\":1,\"1449\":1}}],[\"sufficient\",{\"1\":{\"784\":1}}],[\"suffixed\",{\"1\":{\"1230\":1}}],[\"suffix\",{\"0\":{\"1229\":1},\"1\":{\"15\":1,\"26\":1,\"113\":1,\"891\":1,\"947\":1,\"967\":1,\"1077\":1,\"1137\":1,\"1150\":1,\"1231\":1,\"1232\":1,\"1234\":2}}],[\"sudo\",{\"1\":{\"455\":2,\"1350\":3}}],[\"suggested\",{\"1\":{\"525\":1}}],[\"suggests\",{\"1\":{\"436\":2,\"675\":1}}],[\"suggest\",{\"1\":{\"121\":1,\"434\":1}}],[\"suggestion\",{\"1\":{\"433\":3,\"439\":4,\"442\":2,\"445\":1,\"446\":1,\"1570\":1,\"1797\":3,\"1798\":2,\"1799\":1}}],[\"suggestions\",{\"1\":{\"66\":1,\"90\":1,\"95\":1,\"103\":2,\"108\":1,\"111\":2,\"113\":2,\"115\":4,\"117\":1,\"119\":1,\"129\":3,\"170\":1,\"182\":1,\"231\":1,\"426\":1,\"437\":1,\"438\":2,\"440\":2,\"445\":1,\"450\":1,\"451\":1,\"452\":1,\"454\":4,\"455\":1,\"525\":1,\"743\":1,\"756\":1,\"986\":1,\"1123\":1,\"1176\":1,\"1641\":1,\"1716\":1,\"1719\":1,\"1797\":6,\"1798\":6,\"1804\":1}}],[\"suggesting\",{\"1\":{\"103\":1}}],[\"sugar\",{\"1\":{\"119\":1,\"121\":3,\"235\":1,\"1566\":1,\"1741\":1}}],[\"subtly\",{\"1\":{\"1244\":1,\"1250\":1}}],[\"subtle\",{\"1\":{\"211\":1}}],[\"subtract\",{\"1\":{\"904\":2}}],[\"subtilty\",{\"1\":{\"643\":1}}],[\"sub\",{\"0\":{\"237\":1},\"1\":{\"237\":5,\"238\":1,\"1513\":2,\"1772\":3,\"1798\":1}}],[\"subjective\",{\"1\":{\"211\":1}}],[\"subject\",{\"1\":{\"113\":1,\"115\":1,\"656\":1,\"1178\":1}}],[\"subshell\",{\"1\":{\"440\":1,\"459\":1,\"526\":1,\"1773\":1}}],[\"subshells\",{\"1\":{\"3\":1,\"77\":1,\"115\":3,\"1505\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1773\":1,\"1781\":1}}],[\"substantially\",{\"1\":{\"1741\":1}}],[\"substituting\",{\"1\":{\"1134\":1}}],[\"substitution\",{\"1\":{\"605\":1,\"905\":1}}],[\"substitute\",{\"0\":{\"1133\":1},\"1\":{\"904\":1}}],[\"substituted\",{\"1\":{\"223\":1,\"1716\":1}}],[\"substring\",{\"1\":{\"15\":2,\"26\":2,\"758\":1,\"885\":1,\"886\":1,\"891\":1,\"1077\":2,\"1144\":1,\"1145\":1,\"1150\":1,\"1235\":2}}],[\"subsystem\",{\"1\":{\"197\":1}}],[\"subsequent\",{\"1\":{\"95\":1,\"121\":1}}],[\"subset\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"122\":1,\"369\":1,\"378\":1,\"419\":1,\"548\":1,\"569\":1,\"599\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"940\":1,\"960\":1,\"1112\":1,\"1113\":1,\"1274\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1672\":1,\"1774\":1}}],[\"summer\",{\"1\":{\"1442\":2,\"1449\":1}}],[\"summaries\",{\"1\":{\"95\":3,\"121\":1,\"1176\":2,\"1239\":1}}],[\"summary\",{\"0\":{\"931\":1,\"1236\":1},\"1\":{\"15\":4,\"26\":4,\"457\":2,\"930\":4,\"931\":1,\"932\":2,\"933\":1,\"934\":1,\"935\":2,\"972\":1,\"984\":2,\"1175\":2,\"1236\":1,\"1237\":2,\"1238\":4,\"1239\":4,\"1240\":2}}],[\"sum\",{\"0\":{\"399\":1},\"1\":{\"111\":1,\"396\":1,\"399\":1,\"400\":3,\"1300\":1}}],[\"surrounded\",{\"1\":{\"1505\":1,\"1592\":1}}],[\"surface\",{\"1\":{\"103\":1,\"163\":1}}],[\"sure\",{\"1\":{\"59\":1,\"402\":1,\"596\":1,\"1122\":1}}],[\"super\",{\"1\":{\"1654\":1}}],[\"superseded\",{\"1\":{\"873\":1}}],[\"superficially\",{\"1\":{\"720\":1,\"762\":1}}],[\"superfluous\",{\"1\":{\"52\":1}}],[\"supercharged\",{\"1\":{\"108\":1}}],[\"supercharges\",{\"1\":{\"79\":1,\"111\":1}}],[\"supply\",{\"1\":{\"616\":1,\"1175\":1,\"1248\":1}}],[\"supplied\",{\"1\":{\"15\":1,\"26\":1,\"134\":1,\"395\":1,\"403\":1,\"412\":1,\"661\":1,\"703\":1,\"861\":1,\"942\":2,\"1008\":1,\"1032\":1,\"1153\":1,\"1154\":2,\"1255\":1,\"1319\":1,\"1707\":1}}],[\"suppressing\",{\"1\":{\"423\":1}}],[\"suppress\",{\"1\":{\"139\":1,\"582\":1,\"701\":1,\"1317\":1}}],[\"suppressed\",{\"1\":{\"111\":1,\"121\":1}}],[\"supporting\",{\"1\":{\"46\":1,\"217\":1,\"717\":1,\"962\":1,\"1546\":1}}],[\"supports\",{\"1\":{\"41\":1,\"58\":1,\"93\":2,\"95\":1,\"108\":2,\"111\":4,\"113\":1,\"115\":2,\"117\":1,\"127\":2,\"229\":1,\"231\":1,\"239\":1,\"246\":1,\"247\":2,\"371\":1,\"377\":1,\"407\":1,\"443\":2,\"471\":1,\"481\":1,\"511\":1,\"565\":1,\"608\":1,\"617\":1,\"648\":1,\"755\":1,\"904\":1,\"908\":1,\"1034\":1,\"1050\":1,\"1134\":1,\"1152\":1,\"1306\":1,\"1359\":1,\"1385\":1,\"1403\":1,\"1412\":1,\"1440\":1,\"1488\":1,\"1535\":1,\"1609\":1,\"1654\":2,\"1664\":1,\"1672\":1,\"1706\":1,\"1722\":1,\"1724\":1,\"1783\":1,\"1797\":1,\"1798\":1}}],[\"supported\",{\"0\":{\"204\":1,\"403\":1,\"647\":1,\"1421\":1,\"1449\":1,\"1523\":1,\"1606\":1,\"1611\":1,\"1617\":1,\"1621\":1,\"1625\":1,\"1631\":1,\"1635\":1,\"1644\":1,\"1656\":1,\"1669\":1,\"1678\":1,\"1683\":1,\"1687\":1,\"1693\":1,\"1698\":1,\"1805\":1},\"1\":{\"2\":1,\"3\":2,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"15\":1,\"26\":1,\"46\":1,\"51\":1,\"103\":1,\"105\":1,\"108\":1,\"113\":1,\"121\":2,\"123\":1,\"142\":1,\"164\":1,\"204\":1,\"208\":1,\"219\":1,\"231\":2,\"238\":1,\"393\":1,\"403\":1,\"474\":1,\"568\":1,\"675\":1,\"692\":2,\"717\":1,\"752\":1,\"780\":1,\"787\":1,\"876\":1,\"889\":1,\"904\":1,\"924\":1,\"948\":1,\"953\":1,\"999\":1,\"1020\":1,\"1043\":1,\"1048\":1,\"1058\":1,\"1075\":1,\"1098\":1,\"1108\":1,\"1148\":1,\"1153\":1,\"1158\":2,\"1175\":1,\"1176\":2,\"1182\":1,\"1219\":1,\"1233\":1,\"1273\":1,\"1401\":1,\"1421\":2,\"1432\":1,\"1449\":1,\"1516\":1,\"1606\":2,\"1611\":5,\"1617\":2,\"1621\":2,\"1625\":2,\"1631\":2,\"1635\":2,\"1644\":1,\"1656\":4,\"1666\":2,\"1669\":4,\"1672\":1,\"1678\":2,\"1683\":2,\"1687\":2,\"1693\":4,\"1698\":2,\"1701\":11,\"1718\":1,\"1727\":1,\"1772\":1,\"1773\":1,\"1789\":1,\"1795\":1}}],[\"support\",{\"0\":{\"1516\":1},\"1\":{\"0\":1,\"8\":1,\"51\":1,\"67\":1,\"83\":1,\"86\":1,\"88\":1,\"93\":2,\"95\":3,\"108\":1,\"115\":4,\"119\":2,\"121\":4,\"123\":1,\"127\":2,\"128\":1,\"129\":2,\"142\":1,\"150\":1,\"165\":1,\"168\":1,\"190\":1,\"202\":1,\"214\":1,\"219\":1,\"231\":1,\"232\":1,\"267\":1,\"274\":1,\"281\":1,\"284\":1,\"288\":1,\"295\":1,\"298\":1,\"308\":1,\"430\":1,\"443\":1,\"566\":2,\"567\":1,\"591\":1,\"596\":1,\"677\":1,\"717\":1,\"823\":1,\"910\":1,\"958\":1,\"999\":2,\"1058\":2,\"1134\":2,\"1175\":1,\"1176\":4,\"1199\":1,\"1219\":2,\"1249\":1,\"1400\":1,\"1467\":1,\"1488\":1,\"1491\":1,\"1516\":1,\"1546\":2,\"1564\":1,\"1570\":1,\"1578\":2,\"1593\":1,\"1602\":1,\"1628\":1,\"1690\":1,\"1693\":2,\"1696\":1,\"1706\":1,\"1717\":1,\"1746\":1,\"1753\":1,\"1789\":1}}],[\"suitable\",{\"1\":{\"653\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"suite\",{\"1\":{\"211\":1}}],[\"suit\",{\"1\":{\"43\":1}}],[\"succeeds\",{\"1\":{\"851\":1}}],[\"success\",{\"1\":{\"142\":1,\"445\":1}}],[\"successful\",{\"1\":{\"15\":1,\"26\":1,\"115\":1,\"406\":1,\"410\":1,\"412\":1,\"703\":1,\"861\":1,\"1008\":1,\"1032\":1,\"1033\":1,\"1037\":2,\"1255\":1,\"1319\":1,\"1707\":1}}],[\"succinct\",{\"1\":{\"47\":1,\"52\":1,\"1719\":1}}],[\"such\",{\"1\":{\"8\":1,\"40\":1,\"48\":1,\"60\":1,\"162\":1,\"209\":1,\"217\":1,\"228\":1,\"315\":1,\"323\":1,\"330\":1,\"395\":1,\"397\":1,\"433\":1,\"596\":1,\"607\":1,\"692\":1,\"747\":1,\"760\":1,\"907\":1,\"1113\":1,\"1179\":1,\"1257\":1,\"1258\":1,\"1260\":1,\"1268\":1,\"1429\":1,\"1437\":1,\"1617\":1,\"1625\":1,\"1634\":1,\"1638\":1,\"1706\":1,\"1800\":1}}],[\"sts\",{\"1\":{\"1629\":1}}],[\"studio\",{\"1\":{\"865\":2}}],[\"stuck\",{\"1\":{\"207\":1}}],[\"stick\",{\"1\":{\"111\":1}}],[\"still\",{\"1\":{\"41\":1,\"47\":1,\"48\":1,\"103\":3,\"111\":1,\"115\":1,\"121\":1,\"123\":1,\"154\":1,\"163\":1,\"214\":1,\"251\":1,\"253\":1,\"264\":1,\"304\":1,\"408\":1,\"421\":1,\"440\":1,\"661\":1,\"679\":2,\"743\":1,\"756\":1,\"825\":2,\"912\":2,\"986\":1,\"1166\":1,\"1201\":2,\"1276\":1,\"1516\":1,\"1538\":1,\"1545\":1,\"1628\":1,\"1641\":1,\"1654\":1,\"1690\":1,\"1696\":1,\"1741\":1,\"1746\":1,\"1753\":1,\"1756\":1,\"1776\":1,\"1780\":1}}],[\"style\",{\"1\":{\"52\":2,\"121\":1,\"139\":1,\"223\":1,\"741\":1,\"779\":1,\"1249\":1,\"1487\":1,\"1520\":1,\"1659\":1}}],[\"steal\",{\"1\":{\"95\":1}}],[\"step<int>\",{\"1\":{\"752\":1}}],[\"step\",{\"1\":{\"90\":1,\"162\":1,\"742\":1,\"751\":3,\"752\":1}}],[\"steps\",{\"0\":{\"208\":1,\"751\":1},\"1\":{\"20\":1,\"208\":1,\"752\":1,\"1722\":1}}],[\"stem\",{\"1\":{\"48\":1}}],[\"storing\",{\"1\":{\"1659\":1}}],[\"stored\",{\"1\":{\"38\":1,\"56\":1,\"375\":1,\"397\":1,\"526\":2,\"754\":1,\"765\":1,\"1021\":1,\"1125\":1,\"1343\":1,\"1404\":1,\"1520\":1,\"1538\":1,\"1591\":1,\"1708\":1,\"1710\":1,\"1731\":1,\"1735\":1,\"1773\":1,\"1806\":1}}],[\"stores\",{\"1\":{\"38\":2,\"56\":2}}],[\"store\",{\"1\":{\"15\":2,\"26\":2,\"116\":1,\"975\":1,\"999\":1,\"1052\":2,\"1058\":1,\"1119\":1,\"1123\":1,\"1125\":1,\"1126\":1,\"1171\":1,\"1219\":1,\"1308\":1,\"1309\":1,\"1312\":1,\"1313\":1}}],[\"stop\",{\"1\":{\"743\":1,\"756\":1,\"1591\":1,\"1641\":1}}],[\"stopped\",{\"1\":{\"471\":1,\"474\":1,\"715\":1,\"732\":3,\"743\":1,\"756\":1,\"1641\":1}}],[\"stopping\",{\"0\":{\"250\":1},\"1\":{\"90\":1}}],[\"stone\",{\"0\":{\"220\":1,\"1772\":1},\"1\":{\"12\":1,\"23\":1,\"54\":1,\"124\":1,\"220\":1,\"1453\":1,\"1500\":1,\"1814\":1}}],[\"standalone\",{\"1\":{\"851\":1}}],[\"standardise\",{\"1\":{\"1403\":1}}],[\"standardising\",{\"1\":{\"340\":1,\"347\":1}}],[\"standards\",{\"1\":{\"214\":1}}],[\"standard\",{\"0\":{\"26\":1},\"1\":{\"3\":1,\"15\":2,\"21\":1,\"26\":2,\"76\":1,\"78\":1,\"113\":1,\"117\":1,\"122\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"340\":1,\"347\":1,\"530\":2,\"560\":1,\"635\":2,\"641\":2,\"803\":1,\"808\":1,\"809\":1,\"810\":1,\"815\":1,\"816\":1,\"965\":1,\"1024\":2,\"1056\":1,\"1069\":1,\"1070\":2,\"1103\":2,\"1188\":1,\"1638\":1,\"1741\":1,\"1746\":2,\"1750\":2,\"1752\":1,\"1753\":3}}],[\"stands\",{\"1\":{\"431\":1,\"465\":1}}],[\"stages\",{\"1\":{\"167\":1}}],[\"stage\",{\"1\":{\"155\":1,\"208\":1,\"1372\":1,\"1451\":1}}],[\"statistics\",{\"1\":{\"1100\":1}}],[\"static\",{\"1\":{\"526\":1}}],[\"stat\",{\"1\":{\"865\":1,\"1260\":2,\"1267\":4}}],[\"statuses\",{\"0\":{\"1725\":1},\"1\":{\"1715\":1}}],[\"status=\",{\"1\":{\"447\":1}}],[\"status\",{\"1\":{\"103\":2,\"743\":1,\"756\":1,\"806\":1,\"808\":1,\"978\":2,\"979\":2,\"981\":1,\"1065\":1,\"1067\":1,\"1641\":1,\"1716\":1,\"1723\":1,\"1725\":4,\"1777\":2,\"1778\":2}}],[\"states\",{\"1\":{\"390\":1,\"778\":1,\"1284\":1,\"1375\":1,\"1812\":1}}],[\"state\",{\"0\":{\"1247\":1,\"1249\":1},\"1\":{\"15\":2,\"26\":2,\"29\":1,\"94\":1,\"105\":1,\"110\":1,\"113\":1,\"120\":1,\"147\":1,\"169\":1,\"182\":1,\"262\":1,\"285\":1,\"299\":1,\"305\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1,\"404\":1,\"412\":1,\"469\":1,\"502\":1,\"523\":1,\"530\":1,\"575\":1,\"577\":1,\"643\":1,\"647\":1,\"651\":1,\"659\":1,\"669\":1,\"713\":1,\"723\":1,\"728\":1,\"735\":1,\"802\":1,\"849\":1,\"851\":1,\"861\":1,\"891\":1,\"954\":1,\"982\":1,\"987\":1,\"1002\":1,\"1031\":1,\"1039\":1,\"1061\":1,\"1077\":1,\"1150\":1,\"1171\":1,\"1172\":1,\"1173\":1,\"1175\":2,\"1176\":2,\"1178\":5,\"1213\":1,\"1222\":1,\"1226\":2,\"1235\":1,\"1241\":2,\"1249\":1,\"1255\":1,\"1262\":1,\"1284\":2,\"1325\":1,\"1326\":1,\"1327\":1,\"1337\":1,\"1360\":1,\"1374\":1,\"1375\":1,\"1557\":1,\"1562\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1639\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1714\":1,\"1727\":1,\"1774\":1,\"1779\":1}}],[\"statements\",{\"0\":{\"217\":1,\"246\":1,\"247\":1},\"1\":{\"217\":2,\"222\":1,\"244\":1,\"247\":1,\"857\":2,\"1243\":1,\"1244\":1,\"1250\":2,\"1253\":2,\"1520\":1,\"1538\":1}}],[\"statement\",{\"0\":{\"251\":1,\"252\":1,\"253\":1},\"1\":{\"15\":1,\"26\":1,\"42\":1,\"54\":1,\"95\":1,\"123\":2,\"217\":3,\"226\":1,\"412\":1,\"489\":1,\"502\":1,\"532\":1,\"536\":1,\"611\":1,\"703\":1,\"745\":1,\"758\":1,\"850\":1,\"917\":1,\"1008\":1,\"1039\":1,\"1251\":4,\"1252\":3,\"1255\":1,\"1319\":1,\"1325\":1,\"1331\":1,\"1360\":1,\"1629\":1,\"1771\":1,\"1782\":1}}],[\"stable\",{\"1\":{\"76\":1,\"117\":1,\"177\":1,\"197\":1,\"1178\":1,\"1276\":1}}],[\"staple\",{\"1\":{\"40\":1}}],[\"starttime\",{\"1\":{\"575\":1}}],[\"starting\",{\"1\":{\"202\":1,\"779\":1,\"1487\":1}}],[\"starts\",{\"1\":{\"108\":1,\"255\":1}}],[\"started\",{\"0\":{\"20\":1,\"213\":1},\"1\":{\"47\":3,\"202\":1,\"1746\":1}}],[\"start\",{\"1\":{\"15\":1,\"23\":1,\"26\":1,\"40\":1,\"50\":1,\"94\":1,\"95\":1,\"96\":1,\"107\":1,\"108\":1,\"110\":1,\"111\":1,\"119\":1,\"122\":1,\"123\":3,\"129\":1,\"208\":1,\"369\":1,\"372\":8,\"380\":1,\"383\":1,\"404\":1,\"419\":1,\"463\":1,\"468\":1,\"548\":1,\"595\":1,\"865\":1,\"867\":1,\"874\":6,\"884\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"982\":1,\"995\":1,\"1078\":1,\"1079\":1,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":1,\"1118\":1,\"1137\":1,\"1169\":1,\"1170\":1,\"1260\":2,\"1262\":1,\"1267\":4,\"1268\":1,\"1271\":6,\"1401\":2,\"1403\":1,\"1408\":8,\"1413\":8,\"1416\":4,\"1425\":8,\"1432\":2,\"1433\":8,\"1441\":8,\"1448\":1,\"1517\":1,\"1542\":2,\"1545\":1,\"1705\":1,\"1749\":1,\"1778\":2,\"1780\":1,\"1794\":1}}],[\"street\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"streetaddress\",{\"1\":{\"1226\":2,\"1639\":1}}],[\"streamed\",{\"1\":{\"347\":1}}],[\"streaming\",{\"1\":{\"121\":1,\"270\":1,\"277\":1,\"304\":1,\"376\":1,\"743\":3,\"755\":1,\"756\":3,\"965\":1,\"1405\":1,\"1641\":3,\"1647\":2,\"1664\":2}}],[\"streams\",{\"1\":{\"39\":2,\"41\":1,\"42\":1,\"50\":2,\"57\":2,\"59\":1,\"111\":1,\"214\":1,\"859\":1,\"1574\":1,\"1746\":2,\"1747\":1}}],[\"stream\",{\"1\":{\"24\":1,\"50\":1,\"60\":1,\"99\":2,\"113\":2,\"117\":1,\"270\":1,\"271\":1,\"277\":1,\"278\":1,\"292\":1,\"304\":1,\"312\":1,\"315\":1,\"319\":1,\"323\":1,\"327\":1,\"330\":1,\"334\":1,\"348\":1,\"376\":1,\"616\":3,\"814\":1,\"965\":1,\"1016\":1,\"1405\":1,\"1465\":1,\"1467\":1,\"1471\":1,\"1502\":1,\"1570\":2,\"1572\":1,\"1576\":1,\"1577\":1,\"1582\":2,\"1584\":1,\"1601\":2,\"1647\":1,\"1664\":1,\"1747\":1,\"1748\":1,\"1779\":1}}],[\"strptime\",{\"0\":{\"566\":1}}],[\"strftime\",{\"0\":{\"566\":1}}],[\"str`\",{\"1\":{\"423\":1}}],[\"strconv\",{\"1\":{\"340\":6,\"347\":7,\"417\":1,\"1082\":1,\"1300\":3}}],[\"strong\",{\"1\":{\"208\":1}}],[\"stronger\",{\"1\":{\"99\":1}}],[\"strokes\",{\"1\":{\"52\":1}}],[\"strictness\",{\"1\":{\"1600\":1}}],[\"stricter\",{\"1\":{\"1554\":1,\"1559\":1,\"1561\":1}}],[\"strict\",{\"1\":{\"80\":1,\"106\":1,\"108\":2,\"113\":2,\"115\":1,\"139\":1,\"743\":1,\"756\":1,\"1509\":1,\"1549\":1,\"1586\":1,\"1641\":1}}],[\"strictly\",{\"1\":{\"47\":1,\"354\":1,\"361\":1,\"1600\":1}}],[\"stripped\",{\"1\":{\"882\":1}}],[\"strip\",{\"1\":{\"40\":1,\"139\":1}}],[\"stringarray\",{\"1\":{\"111\":1}}],[\"strings\",{\"0\":{\"222\":1,\"445\":1,\"446\":1,\"526\":1,\"606\":1,\"906\":1,\"1528\":1,\"1711\":1,\"1736\":1},\"1\":{\"3\":1,\"15\":1,\"26\":1,\"47\":1,\"108\":2,\"121\":3,\"122\":1,\"139\":1,\"153\":1,\"217\":1,\"222\":2,\"237\":1,\"276\":2,\"340\":23,\"345\":2,\"347\":3,\"376\":1,\"383\":1,\"419\":1,\"431\":2,\"438\":1,\"441\":1,\"445\":1,\"606\":1,\"607\":1,\"677\":1,\"742\":1,\"797\":1,\"823\":1,\"875\":1,\"882\":1,\"906\":1,\"907\":1,\"910\":1,\"947\":1,\"956\":1,\"1021\":5,\"1084\":1,\"1105\":1,\"1110\":1,\"1127\":1,\"1128\":1,\"1192\":1,\"1199\":1,\"1248\":1,\"1272\":1,\"1360\":1,\"1366\":1,\"1400\":1,\"1405\":1,\"1429\":1,\"1437\":1,\"1506\":1,\"1509\":1,\"1520\":2,\"1538\":2,\"1549\":1,\"1572\":1,\"1576\":1,\"1584\":1,\"1586\":1,\"1593\":1,\"1700\":1,\"1712\":1,\"1737\":1,\"1772\":3,\"1773\":1}}],[\"string\",{\"0\":{\"432\":1,\"438\":1,\"439\":1,\"441\":1,\"447\":1,\"521\":1,\"522\":1,\"1429\":1,\"1437\":1,\"1522\":1,\"1590\":1,\"1681\":1,\"1685\":1},\"1\":{\"3\":3,\"15\":6,\"16\":1,\"24\":5,\"26\":6,\"27\":1,\"28\":2,\"42\":1,\"50\":1,\"93\":1,\"95\":1,\"103\":1,\"108\":1,\"115\":1,\"119\":1,\"121\":1,\"122\":1,\"126\":2,\"129\":1,\"130\":2,\"135\":1,\"139\":1,\"142\":1,\"154\":1,\"155\":1,\"163\":1,\"183\":1,\"222\":2,\"237\":1,\"259\":1,\"269\":2,\"276\":4,\"277\":1,\"278\":2,\"283\":1,\"285\":1,\"292\":1,\"297\":1,\"299\":1,\"303\":1,\"309\":1,\"311\":2,\"312\":3,\"318\":13,\"326\":28,\"327\":1,\"333\":34,\"334\":1,\"338\":1,\"340\":16,\"341\":1,\"345\":4,\"347\":20,\"348\":2,\"353\":2,\"354\":1,\"355\":1,\"360\":1,\"361\":2,\"362\":1,\"375\":1,\"376\":1,\"378\":2,\"397\":2,\"423\":2,\"431\":6,\"441\":2,\"444\":1,\"447\":4,\"452\":1,\"476\":1,\"478\":1,\"483\":2,\"489\":1,\"493\":2,\"495\":2,\"499\":1,\"526\":1,\"536\":1,\"544\":2,\"548\":1,\"563\":2,\"575\":1,\"605\":6,\"606\":3,\"607\":2,\"611\":2,\"614\":1,\"616\":1,\"618\":3,\"621\":2,\"622\":1,\"629\":1,\"632\":2,\"638\":2,\"677\":2,\"685\":2,\"686\":1,\"741\":1,\"755\":1,\"758\":1,\"771\":1,\"802\":1,\"808\":5,\"815\":1,\"819\":1,\"823\":2,\"831\":2,\"891\":2,\"897\":2,\"905\":6,\"906\":3,\"907\":2,\"910\":2,\"917\":2,\"922\":1,\"942\":2,\"943\":4,\"946\":1,\"947\":2,\"953\":3,\"967\":2,\"975\":3,\"1021\":3,\"1022\":1,\"1024\":1,\"1042\":1,\"1045\":1,\"1047\":1,\"1049\":1,\"1052\":2,\"1061\":1,\"1067\":4,\"1069\":1,\"1071\":1,\"1077\":1,\"1088\":2,\"1089\":2,\"1107\":1,\"1108\":3,\"1110\":1,\"1116\":1,\"1123\":1,\"1125\":5,\"1126\":3,\"1137\":2,\"1143\":1,\"1150\":2,\"1159\":1,\"1171\":1,\"1195\":1,\"1199\":2,\"1207\":2,\"1222\":1,\"1226\":1,\"1227\":1,\"1229\":1,\"1235\":1,\"1245\":1,\"1249\":1,\"1278\":2,\"1300\":4,\"1302\":1,\"1304\":1,\"1307\":2,\"1311\":2,\"1312\":4,\"1313\":3,\"1323\":1,\"1329\":1,\"1336\":1,\"1345\":1,\"1404\":1,\"1405\":1,\"1421\":1,\"1449\":7,\"1456\":1,\"1457\":1,\"1458\":1,\"1460\":2,\"1469\":1,\"1474\":1,\"1502\":5,\"1504\":2,\"1505\":2,\"1506\":1,\"1507\":7,\"1508\":1,\"1509\":1,\"1518\":6,\"1520\":1,\"1536\":4,\"1538\":1,\"1539\":1,\"1540\":4,\"1542\":1,\"1547\":8,\"1548\":1,\"1552\":6,\"1557\":1,\"1562\":1,\"1572\":1,\"1576\":1,\"1584\":1,\"1585\":1,\"1589\":6,\"1590\":1,\"1591\":4,\"1592\":2,\"1593\":1,\"1594\":5,\"1599\":7,\"1601\":2,\"1603\":2,\"1607\":2,\"1612\":2,\"1618\":2,\"1626\":2,\"1636\":2,\"1675\":1,\"1679\":2,\"1684\":2,\"1685\":1,\"1701\":2,\"1702\":1,\"1703\":1,\"1705\":3,\"1712\":2,\"1713\":2,\"1724\":1,\"1737\":2,\"1738\":2,\"1763\":1,\"1771\":2,\"1772\":5,\"1773\":1,\"1774\":2}}],[\"straight\",{\"1\":{\"40\":1,\"1652\":1,\"1662\":1}}],[\"str\",{\"0\":{\"1685\":1,\"1763\":1,\"1766\":1,\"1768\":1,\"1769\":1,\"1770\":1},\"1\":{\"28\":1,\"90\":1,\"126\":1,\"242\":1,\"376\":1,\"378\":1,\"423\":6,\"440\":1,\"526\":1,\"544\":1,\"575\":1,\"605\":1,\"606\":2,\"607\":1,\"677\":1,\"760\":1,\"780\":1,\"781\":2,\"782\":1,\"783\":1,\"784\":1,\"791\":1,\"823\":1,\"897\":1,\"905\":1,\"906\":2,\"907\":1,\"910\":1,\"956\":1,\"1022\":1,\"1073\":1,\"1107\":1,\"1108\":2,\"1123\":1,\"1125\":1,\"1175\":2,\"1199\":1,\"1231\":1,\"1285\":2,\"1404\":1,\"1603\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1615\":2,\"1618\":1,\"1626\":1,\"1636\":1,\"1679\":1,\"1683\":1,\"1684\":1,\"1687\":1}}],[\"structural\",{\"1\":{\"447\":1}}],[\"structures\",{\"0\":{\"245\":1},\"1\":{\"46\":1,\"111\":2,\"267\":1,\"270\":1,\"274\":1,\"277\":1,\"288\":1,\"308\":1,\"315\":1,\"323\":1,\"330\":1,\"399\":1,\"400\":1,\"591\":1,\"679\":3,\"743\":2,\"756\":2,\"825\":3,\"912\":3,\"1201\":3,\"1641\":2,\"1712\":1,\"1719\":1,\"1737\":1}}],[\"structured\",{\"0\":{\"58\":1,\"1400\":1},\"1\":{\"15\":1,\"26\":1,\"30\":6,\"37\":1,\"39\":1,\"41\":1,\"57\":1,\"58\":1,\"61\":1,\"62\":1,\"70\":1,\"112\":1,\"125\":1,\"258\":2,\"263\":4,\"265\":6,\"301\":2,\"306\":4,\"309\":1,\"340\":1,\"350\":1,\"356\":5,\"357\":1,\"363\":5,\"394\":1,\"395\":1,\"397\":1,\"616\":2,\"771\":4,\"891\":2,\"940\":1,\"960\":1,\"1077\":2,\"1118\":1,\"1150\":2,\"1224\":1,\"1235\":2,\"1262\":1,\"1268\":1,\"1400\":1,\"1607\":4,\"1612\":4,\"1618\":4,\"1622\":4,\"1626\":4,\"1628\":1,\"1632\":4,\"1636\":4,\"1638\":2,\"1645\":4,\"1657\":4,\"1659\":1,\"1670\":4,\"1675\":4,\"1679\":4,\"1688\":4,\"1694\":4,\"1699\":4,\"1794\":1}}],[\"structure\",{\"1\":{\"15\":2,\"26\":2,\"30\":2,\"61\":1,\"96\":1,\"117\":1,\"118\":1,\"208\":2,\"265\":2,\"272\":1,\"279\":1,\"286\":2,\"287\":1,\"297\":1,\"300\":2,\"304\":2,\"313\":1,\"320\":2,\"328\":2,\"335\":2,\"336\":1,\"341\":1,\"342\":1,\"349\":2,\"378\":1,\"383\":1,\"397\":2,\"398\":1,\"404\":1,\"419\":1,\"421\":1,\"423\":1,\"530\":1,\"548\":1,\"590\":1,\"611\":1,\"758\":1,\"762\":2,\"809\":1,\"831\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"917\":1,\"940\":1,\"960\":1,\"1070\":1,\"1084\":1,\"1118\":1,\"1207\":1,\"1223\":1,\"1224\":1,\"1227\":1,\"1228\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1276\":1,\"1281\":1,\"1400\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1601\":1,\"1612\":2,\"1618\":1,\"1626\":1,\"1632\":2,\"1636\":1,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":2,\"1699\":2,\"1708\":1,\"1714\":1,\"1774\":1}}],[\"struct\",{\"0\":{\"1223\":1},\"1\":{\"15\":1,\"26\":1,\"30\":2,\"95\":1,\"96\":1,\"108\":1,\"259\":1,\"265\":2,\"272\":2,\"279\":2,\"302\":1,\"309\":1,\"311\":1,\"312\":1,\"314\":1,\"322\":1,\"329\":1,\"403\":1,\"1224\":1,\"1225\":2,\"1226\":4,\"1645\":2,\"1699\":2}}],[\"std\",{\"1\":{\"1175\":2}}],[\"stdstream\",{\"1\":{\"99\":2}}],[\"stdio\",{\"1\":{\"30\":2,\"113\":1,\"258\":1,\"263\":1,\"265\":2,\"268\":1,\"269\":2,\"270\":2,\"271\":1,\"275\":1,\"276\":2,\"277\":2,\"278\":1,\"289\":1,\"290\":3,\"292\":1,\"306\":2,\"309\":1,\"310\":1,\"311\":4,\"312\":4,\"316\":2,\"318\":2,\"319\":1,\"324\":2,\"326\":2,\"327\":1,\"331\":2,\"333\":2,\"334\":1,\"350\":1,\"356\":1,\"363\":2,\"771\":1,\"891\":1,\"1077\":1,\"1150\":1,\"1235\":1,\"1601\":2,\"1607\":1,\"1612\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1}}],[\"stdin\",{\"0\":{\"744\":1,\"757\":1,\"1642\":1},\"1\":{\"3\":2,\"15\":6,\"16\":1,\"24\":4,\"26\":6,\"27\":1,\"60\":1,\"94\":1,\"105\":2,\"120\":3,\"122\":1,\"218\":2,\"271\":1,\"278\":1,\"283\":1,\"292\":1,\"297\":1,\"304\":3,\"319\":1,\"327\":1,\"334\":1,\"338\":1,\"345\":1,\"361\":2,\"369\":2,\"378\":1,\"403\":1,\"412\":1,\"419\":1,\"440\":4,\"457\":1,\"483\":2,\"494\":1,\"500\":1,\"528\":1,\"541\":1,\"544\":1,\"548\":3,\"561\":1,\"562\":1,\"563\":1,\"569\":1,\"575\":1,\"599\":1,\"618\":2,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"703\":1,\"747\":3,\"748\":1,\"749\":2,\"751\":1,\"755\":6,\"768\":1,\"795\":2,\"800\":1,\"801\":2,\"808\":1,\"819\":2,\"832\":1,\"837\":4,\"838\":1,\"843\":4,\"861\":1,\"871\":1,\"877\":1,\"878\":1,\"879\":1,\"884\":1,\"886\":1,\"894\":1,\"898\":2,\"940\":2,\"942\":1,\"945\":1,\"947\":1,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"960\":2,\"962\":1,\"965\":2,\"967\":1,\"975\":2,\"999\":2,\"1002\":1,\"1003\":1,\"1004\":1,\"1014\":1,\"1023\":1,\"1039\":1,\"1052\":2,\"1058\":2,\"1061\":1,\"1068\":1,\"1072\":1,\"1086\":1,\"1103\":2,\"1112\":1,\"1113\":1,\"1118\":1,\"1125\":1,\"1126\":2,\"1135\":1,\"1137\":1,\"1145\":1,\"1176\":1,\"1190\":2,\"1195\":1,\"1210\":1,\"1211\":1,\"1214\":1,\"1215\":1,\"1219\":2,\"1230\":1,\"1255\":1,\"1274\":1,\"1297\":1,\"1300\":1,\"1301\":2,\"1312\":1,\"1319\":1,\"1352\":1,\"1360\":1,\"1363\":1,\"1380\":1,\"1395\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1456\":1,\"1465\":1,\"1471\":1,\"1475\":1,\"1476\":1,\"1488\":1,\"1502\":4,\"1557\":1,\"1562\":1,\"1568\":5,\"1569\":1,\"1572\":3,\"1573\":1,\"1576\":3,\"1577\":1,\"1580\":3,\"1581\":1,\"1584\":3,\"1707\":1,\"1719\":1,\"1727\":2,\"1742\":1,\"1743\":1,\"1746\":1,\"1748\":4,\"1774\":3,\"1779\":4,\"1789\":2,\"1794\":1}}],[\"stderr\",{\"0\":{\"1357\":1,\"1573\":1},\"1\":{\"15\":1,\"24\":2,\"26\":1,\"115\":1,\"232\":8,\"345\":1,\"347\":6,\"361\":1,\"423\":1,\"440\":1,\"483\":1,\"575\":1,\"612\":1,\"613\":1,\"616\":2,\"837\":2,\"843\":2,\"859\":1,\"975\":1,\"999\":1,\"1052\":1,\"1058\":1,\"1100\":1,\"1126\":1,\"1219\":1,\"1294\":2,\"1307\":1,\"1313\":1,\"1324\":1,\"1330\":1,\"1345\":1,\"1350\":3,\"1352\":1,\"1357\":2,\"1502\":2,\"1547\":1,\"1554\":1,\"1557\":3,\"1559\":1,\"1562\":3,\"1568\":2,\"1570\":2,\"1571\":1,\"1572\":3,\"1573\":1,\"1574\":1,\"1575\":2,\"1576\":1,\"1580\":2,\"1582\":2,\"1583\":1,\"1584\":3,\"1705\":1,\"1742\":1,\"1748\":2,\"1772\":2,\"1777\":2,\"1778\":2,\"1779\":2}}],[\"stdouttype\",{\"1\":{\"1285\":1}}],[\"stdoutregex\",{\"1\":{\"1285\":2}}],[\"stdout\",{\"0\":{\"1356\":1,\"1359\":1,\"1371\":1,\"1385\":1},\"1\":{\"15\":3,\"24\":4,\"26\":3,\"105\":2,\"113\":5,\"120\":1,\"121\":2,\"123\":1,\"142\":1,\"232\":7,\"261\":2,\"283\":1,\"297\":1,\"338\":1,\"340\":39,\"347\":9,\"353\":1,\"360\":1,\"361\":1,\"397\":2,\"438\":1,\"439\":1,\"440\":1,\"476\":1,\"477\":1,\"483\":2,\"489\":1,\"495\":2,\"527\":1,\"536\":1,\"548\":1,\"563\":1,\"575\":1,\"582\":1,\"611\":1,\"616\":1,\"618\":3,\"629\":1,\"685\":1,\"747\":2,\"748\":2,\"752\":1,\"755\":1,\"758\":1,\"763\":1,\"771\":1,\"802\":1,\"811\":1,\"814\":2,\"831\":1,\"837\":2,\"843\":2,\"859\":2,\"917\":1,\"922\":1,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"975\":3,\"999\":2,\"1013\":1,\"1016\":3,\"1024\":1,\"1026\":1,\"1045\":1,\"1046\":1,\"1052\":2,\"1058\":2,\"1061\":1,\"1086\":1,\"1089\":2,\"1126\":3,\"1143\":1,\"1171\":1,\"1176\":1,\"1178\":2,\"1207\":1,\"1219\":2,\"1222\":1,\"1294\":1,\"1297\":1,\"1300\":2,\"1302\":1,\"1303\":1,\"1307\":2,\"1313\":3,\"1324\":1,\"1330\":1,\"1345\":1,\"1352\":1,\"1356\":2,\"1359\":1,\"1371\":1,\"1385\":1,\"1479\":1,\"1502\":4,\"1507\":2,\"1518\":2,\"1547\":3,\"1552\":2,\"1554\":1,\"1557\":1,\"1559\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1568\":2,\"1569\":1,\"1570\":1,\"1571\":1,\"1572\":3,\"1574\":1,\"1575\":1,\"1576\":4,\"1577\":1,\"1580\":2,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":3,\"1589\":2,\"1594\":2,\"1599\":2,\"1624\":1,\"1644\":1,\"1705\":3,\"1708\":1,\"1719\":1,\"1727\":2,\"1742\":1,\"1746\":1,\"1748\":3,\"1759\":1,\"1772\":2,\"1774\":1,\"1777\":1,\"1778\":1,\"1779\":3,\"1789\":1}}],[\"cmiodalassistants\",{\"1\":{\"1484\":1}}],[\"cmd3\",{\"1\":{\"1776\":1}}],[\"cmd2\",{\"1\":{\"1776\":1}}],[\"cmd1\",{\"1\":{\"1776\":1}}],[\"cmdline\",{\"0\":{\"1384\":1},\"1\":{\"1378\":1,\"1380\":1}}],[\"cmdtempfile\",{\"1\":{\"1300\":2}}],[\"cmd=grep\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"cmd\",{\"1\":{\"440\":1,\"575\":1,\"1745\":2}}],[\"cyan\",{\"1\":{\"1701\":4}}],[\"cycle\",{\"1\":{\"375\":1,\"1403\":2,\"1404\":1,\"1448\":2}}],[\"cygwin\",{\"1\":{\"3\":1}}],[\"ctkd\",{\"1\":{\"1484\":1}}],[\"ctx\",{\"1\":{\"269\":2,\"270\":2,\"276\":2,\"277\":2,\"316\":2,\"318\":19,\"331\":2,\"333\":20}}],[\"ctrl\",{\"1\":{\"127\":2,\"254\":1,\"255\":1,\"256\":1,\"1716\":1}}],[\"ctrl+\",{\"1\":{\"1808\":1}}],[\"ctrl+u\",{\"1\":{\"1803\":1,\"1810\":1}}],[\"ctrl+f\",{\"1\":{\"1797\":1,\"1798\":1}}],[\"ctrl+d\",{\"1\":{\"1123\":1,\"1377\":1,\"1811\":1}}],[\"ctrl+t\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"ctrl+g\",{\"1\":{\"162\":1,\"1812\":1}}],[\"ctrl+left\",{\"1\":{\"181\":1,\"1802\":1}}],[\"ctrl+l\",{\"1\":{\"162\":1,\"1813\":1}}],[\"ctrl+k\",{\"1\":{\"162\":1,\"1803\":1}}],[\"ctrl+e\",{\"1\":{\"162\":1,\"1802\":1}}],[\"ctrl+arrow\",{\"1\":{\"1799\":2}}],[\"ctrl+a\",{\"1\":{\"162\":1,\"168\":1,\"1802\":1}}],[\"ctrl+right\",{\"1\":{\"181\":1,\"1802\":1}}],[\"ctrl+r\",{\"1\":{\"123\":1,\"1800\":1}}],[\"ctrl+c\",{\"1\":{\"115\":1,\"1123\":1,\"1377\":1,\"1808\":2,\"1810\":1}}],[\"ctrl+z\",{\"1\":{\"90\":1,\"474\":1,\"743\":1,\"756\":1,\"1641\":1,\"1808\":1}}],[\"customizable\",{\"1\":{\"1724\":1}}],[\"custom\",{\"0\":{\"1725\":1},\"1\":{\"232\":1,\"242\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"340\":1,\"344\":1,\"347\":1,\"453\":1,\"661\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1278\":1,\"1715\":1,\"1717\":1,\"1753\":1}}],[\"curl\",{\"1\":{\"1102\":1,\"1772\":2}}],[\"curly\",{\"0\":{\"1541\":1},\"1\":{\"24\":1,\"52\":1,\"237\":1,\"480\":1,\"565\":1,\"1502\":1,\"1518\":1,\"1542\":6,\"1544\":1,\"1545\":1,\"1546\":1,\"1552\":1,\"1589\":1,\"1675\":1,\"1700\":1,\"1708\":1,\"1709\":1,\"1727\":1,\"1794\":1}}],[\"cursor\",{\"1\":{\"127\":1,\"138\":1,\"162\":1,\"440\":1,\"1701\":8,\"1802\":1,\"1803\":1}}],[\"currectly\",{\"1\":{\"115\":1}}],[\"currently\",{\"1\":{\"108\":1,\"111\":1,\"430\":1,\"446\":1,\"474\":1,\"596\":1,\"682\":1,\"730\":1,\"780\":1,\"828\":1,\"915\":1,\"1180\":1,\"1204\":1,\"1467\":1,\"1489\":1,\"1611\":2,\"1654\":1,\"1656\":1,\"1669\":1,\"1672\":1}}],[\"current\",{\"0\":{\"568\":1,\"1416\":1},\"1\":{\"15\":2,\"26\":2,\"53\":1,\"92\":1,\"108\":2,\"110\":1,\"183\":1,\"238\":1,\"255\":1,\"475\":2,\"489\":1,\"504\":1,\"536\":1,\"562\":1,\"659\":2,\"677\":1,\"713\":1,\"718\":2,\"722\":1,\"723\":2,\"727\":1,\"728\":2,\"729\":1,\"733\":1,\"735\":1,\"823\":1,\"910\":1,\"981\":2,\"1138\":1,\"1171\":1,\"1182\":1,\"1188\":1,\"1199\":1,\"1241\":1,\"1325\":1,\"1331\":1,\"1369\":1,\"1416\":2,\"1760\":1,\"1762\":1,\"1763\":1,\"1773\":1,\"1800\":1,\"1805\":1,\"1808\":1}}],[\"certificate\",{\"1\":{\"1022\":1}}],[\"certainly\",{\"1\":{\"1489\":1}}],[\"certain\",{\"1\":{\"52\":1}}],[\"centralised\",{\"1\":{\"511\":1}}],[\"centralized\",{\"1\":{\"468\":1}}],[\"cell\",{\"1\":{\"147\":1}}],[\"crlf\",{\"1\":{\"1701\":1}}],[\"crlftrim\",{\"1\":{\"318\":1,\"333\":1}}],[\"cr\",{\"1\":{\"1701\":1}}],[\"crypto\",{\"1\":{\"1300\":1}}],[\"cryptographically\",{\"1\":{\"1110\":1}}],[\"crude\",{\"1\":{\"605\":1,\"905\":1}}],[\"crescent\",{\"1\":{\"1449\":2}}],[\"crecords\",{\"1\":{\"345\":4,\"347\":12}}],[\"creative\",{\"1\":{\"1753\":1}}],[\"creation\",{\"1\":{\"1369\":1}}],[\"creationtime\",{\"1\":{\"575\":1}}],[\"creating\",{\"0\":{\"376\":1,\"1405\":1,\"1523\":1},\"1\":{\"42\":1,\"52\":1,\"55\":1,\"121\":3,\"208\":1,\"755\":1,\"1272\":1,\"1772\":2}}],[\"created\",{\"1\":{\"93\":1,\"99\":1,\"111\":2,\"438\":1,\"439\":1,\"679\":1,\"694\":1,\"755\":1,\"825\":1,\"833\":1,\"839\":1,\"912\":1,\"921\":1,\"999\":1,\"1000\":3,\"1023\":1,\"1058\":1,\"1059\":3,\"1201\":1,\"1219\":1,\"1220\":3,\"1366\":1,\"1429\":1,\"1437\":1,\"1486\":1,\"1564\":1,\"1708\":1,\"1713\":1,\"1738\":1,\"1750\":1,\"1757\":1}}],[\"creates\",{\"1\":{\"15\":2,\"16\":1,\"26\":2,\"27\":1,\"40\":1,\"41\":1,\"110\":1,\"116\":1,\"237\":2,\"369\":1,\"548\":1,\"884\":1,\"898\":1,\"936\":1,\"947\":1,\"967\":1,\"1014\":1,\"1024\":1,\"1025\":1,\"1026\":1,\"1054\":1,\"1137\":1,\"1182\":1,\"1297\":1,\"1456\":1,\"1475\":1,\"1708\":1,\"1782\":1}}],[\"create\",{\"0\":{\"55\":1,\"1519\":1,\"1537\":1},\"1\":{\"15\":4,\"24\":2,\"26\":4,\"40\":1,\"44\":1,\"52\":1,\"63\":1,\"96\":1,\"130\":2,\"164\":1,\"208\":1,\"232\":1,\"241\":1,\"242\":1,\"267\":1,\"270\":1,\"274\":1,\"277\":1,\"281\":1,\"288\":1,\"290\":1,\"295\":1,\"308\":1,\"316\":1,\"324\":1,\"331\":1,\"361\":1,\"364\":1,\"365\":1,\"377\":4,\"378\":1,\"384\":1,\"452\":1,\"457\":1,\"526\":1,\"616\":2,\"629\":1,\"643\":1,\"645\":1,\"676\":1,\"679\":1,\"713\":1,\"762\":1,\"787\":1,\"825\":1,\"837\":1,\"843\":1,\"877\":1,\"884\":1,\"912\":1,\"918\":1,\"919\":1,\"920\":1,\"947\":1,\"954\":1,\"967\":1,\"982\":1,\"1055\":1,\"1056\":2,\"1098\":1,\"1137\":1,\"1201\":1,\"1274\":1,\"1296\":1,\"1300\":1,\"1360\":1,\"1366\":1,\"1369\":1,\"1407\":1,\"1410\":2,\"1411\":1,\"1422\":1,\"1423\":1,\"1424\":1,\"1430\":1,\"1431\":1,\"1438\":1,\"1439\":1,\"1450\":1,\"1502\":2,\"1535\":4,\"1536\":2,\"1540\":2,\"1675\":2,\"1781\":2}}],[\"criteria\",{\"1\":{\"142\":1,\"440\":1,\"692\":3,\"1113\":2,\"1116\":1}}],[\"cropped\",{\"1\":{\"95\":1,\"159\":1,\"182\":1}}],[\"cross\",{\"1\":{\"90\":1,\"474\":2,\"560\":1}}],[\"clarity\",{\"1\":{\"1601\":1,\"1746\":1}}],[\"class\",{\"1\":{\"1638\":1,\"1691\":1}}],[\"classed\",{\"1\":{\"1516\":1}}],[\"classic\",{\"0\":{\"1125\":1},\"1\":{\"1121\":1,\"1122\":1}}],[\"clashes\",{\"1\":{\"1000\":1,\"1059\":1,\"1220\":1}}],[\"cluttering\",{\"1\":{\"1091\":1}}],[\"clues\",{\"1\":{\"1723\":1}}],[\"clue\",{\"1\":{\"231\":1}}],[\"clone\",{\"1\":{\"208\":3}}],[\"closes\",{\"1\":{\"1797\":1,\"1799\":1}}],[\"closely\",{\"1\":{\"1682\":1,\"1686\":1}}],[\"closer\",{\"1\":{\"1321\":1}}],[\"closed\",{\"1\":{\"174\":1,\"312\":1,\"965\":1}}],[\"close\",{\"1\":{\"111\":1,\"309\":1,\"311\":1,\"312\":1,\"345\":1,\"616\":1,\"1300\":1,\"1509\":1,\"1720\":1,\"1799\":1}}],[\"closing\",{\"1\":{\"95\":1,\"135\":1,\"304\":1,\"597\":1,\"743\":1,\"756\":1,\"780\":1,\"1641\":1}}],[\"clears\",{\"1\":{\"1803\":2}}],[\"clear\",{\"0\":{\"1813\":1},\"1\":{\"162\":2,\"847\":1,\"1593\":1,\"1795\":1,\"1810\":1,\"1813\":1}}],[\"cleaned\",{\"1\":{\"113\":1}}],[\"clean\",{\"1\":{\"50\":1,\"211\":2}}],[\"clicking\",{\"1\":{\"202\":1}}],[\"click\",{\"1\":{\"202\":1}}],[\"clients\",{\"1\":{\"1102\":1,\"1691\":1}}],[\"client\",{\"1\":{\"113\":2}}],[\"cli\",{\"0\":{\"1784\":1},\"1\":{\"50\":1,\"119\":1,\"648\":1,\"1784\":1}}],[\"csexp\",{\"1\":{\"1175\":1}}],[\"css\",{\"1\":{\"113\":1}}],[\"csh\",{\"1\":{\"47\":1}}],[\"csv\",{\"0\":{\"1613\":1},\"1\":{\"28\":2,\"41\":1,\"47\":2,\"59\":1,\"90\":1,\"92\":2,\"111\":1,\"304\":1,\"732\":2,\"735\":2,\"1260\":2,\"1267\":3,\"1400\":2,\"1491\":2,\"1601\":1,\"1603\":2,\"1613\":1,\"1614\":1,\"1615\":4,\"1616\":5,\"1617\":1,\"1638\":1,\"1651\":1,\"1657\":2,\"1661\":1,\"1670\":2}}],[\"c\",{\"1\":{\"47\":4,\"52\":1,\"60\":1,\"61\":2,\"90\":1,\"108\":1,\"111\":2,\"121\":1,\"207\":1,\"208\":1,\"223\":1,\"254\":1,\"398\":1,\"399\":2,\"540\":1,\"544\":3,\"695\":1,\"847\":1,\"896\":1,\"897\":3,\"942\":3,\"958\":4,\"1209\":1,\"1409\":4,\"1434\":1,\"1513\":3,\"1772\":1}}],[\"citizens\",{\"1\":{\"1638\":1}}],[\"city\",{\"1\":{\"1226\":2,\"1639\":1}}],[\"circleci\",{\"1\":{\"119\":1}}],[\"circumstances\",{\"1\":{\"95\":1,\"108\":1,\"1479\":1}}],[\"ci\",{\"1\":{\"40\":1,\"95\":1}}],[\"cd\",{\"0\":{\"503\":1,\"508\":1},\"1\":{\"15\":1,\"26\":1,\"40\":1,\"95\":1,\"96\":1,\"162\":3,\"208\":1,\"505\":1,\"506\":4,\"507\":2,\"508\":3,\"979\":1,\"1716\":2}}],[\"chiefly\",{\"1\":{\"1372\":1}}],[\"children\",{\"1\":{\"1226\":3,\"1639\":1}}],[\"child\",{\"1\":{\"115\":1,\"518\":1,\"679\":4,\"825\":4,\"912\":4,\"1201\":4}}],[\"chmod\",{\"1\":{\"201\":1,\"1366\":1}}],[\"choice\",{\"1\":{\"216\":1}}],[\"chose\",{\"1\":{\"48\":1}}],[\"chosen\",{\"1\":{\"34\":1,\"45\":1,\"223\":1}}],[\"choose\",{\"1\":{\"43\":1}}],[\"chopped\",{\"1\":{\"3\":1}}],[\"championed\",{\"1\":{\"1746\":1}}],[\"char\",{\"1\":{\"1116\":1}}],[\"chartoindex\",{\"1\":{\"347\":3}}],[\"characters\",{\"0\":{\"389\":1,\"777\":1,\"1095\":1},\"1\":{\"70\":1,\"93\":1,\"125\":1,\"127\":1,\"174\":1,\"389\":1,\"395\":1,\"402\":1,\"440\":1,\"480\":1,\"544\":2,\"596\":2,\"626\":1,\"777\":1,\"780\":4,\"793\":1,\"882\":1,\"886\":1,\"897\":2,\"1010\":1,\"1095\":1,\"1107\":1,\"1108\":1,\"1110\":1,\"1116\":1,\"1131\":2,\"1145\":1,\"1226\":1,\"1402\":1,\"1407\":1,\"1513\":1,\"1591\":1,\"1614\":1,\"1647\":1,\"1664\":1,\"1805\":3}}],[\"character\",{\"0\":{\"1402\":1,\"1406\":1},\"1\":{\"15\":1,\"26\":1,\"28\":1,\"92\":1,\"126\":1,\"129\":1,\"182\":1,\"377\":2,\"395\":1,\"402\":2,\"441\":1,\"447\":1,\"483\":1,\"489\":1,\"495\":1,\"536\":1,\"596\":3,\"613\":1,\"618\":1,\"629\":1,\"695\":1,\"735\":1,\"758\":1,\"793\":1,\"922\":1,\"975\":1,\"1024\":1,\"1045\":1,\"1046\":1,\"1061\":1,\"1089\":1,\"1116\":1,\"1121\":1,\"1126\":1,\"1143\":1,\"1171\":1,\"1179\":1,\"1222\":1,\"1226\":1,\"1303\":1,\"1307\":1,\"1313\":1,\"1345\":1,\"1406\":1,\"1430\":2,\"1438\":2,\"1491\":1,\"1505\":1,\"1507\":1,\"1509\":1,\"1517\":1,\"1518\":1,\"1535\":2,\"1542\":1,\"1547\":1,\"1549\":1,\"1552\":1,\"1557\":1,\"1562\":1,\"1572\":1,\"1575\":1,\"1576\":1,\"1584\":1,\"1586\":1,\"1589\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1599\":1,\"1603\":1,\"1613\":1,\"1647\":1,\"1657\":1,\"1664\":1,\"1666\":1,\"1670\":1,\"1705\":1,\"1773\":2,\"1805\":5}}],[\"changing\",{\"1\":{\"397\":1,\"398\":1,\"508\":1,\"676\":1,\"1226\":1}}],[\"changed\",{\"1\":{\"89\":1,\"98\":1,\"115\":1,\"119\":2,\"121\":1,\"163\":1,\"172\":1,\"616\":1,\"1049\":1,\"1798\":1}}],[\"changelog\",{\"0\":{\"64\":1},\"1\":{\"69\":1,\"131\":1}}],[\"changes\",{\"0\":{\"89\":1,\"90\":1,\"91\":1,\"98\":1,\"99\":1,\"100\":1,\"103\":1,\"104\":1,\"107\":1,\"108\":1,\"109\":1,\"126\":1,\"128\":1,\"133\":1,\"137\":1,\"141\":1,\"145\":1,\"149\":1,\"153\":1,\"157\":1,\"161\":1,\"166\":1,\"172\":1,\"176\":1,\"180\":1},\"1\":{\"29\":1,\"64\":1,\"72\":1,\"81\":1,\"91\":1,\"93\":2,\"95\":1,\"100\":1,\"102\":1,\"111\":3,\"113\":2,\"115\":2,\"117\":2,\"119\":2,\"121\":3,\"123\":2,\"169\":1,\"235\":1,\"504\":1,\"647\":1,\"979\":1,\"1360\":1,\"1374\":1,\"1375\":1,\"1790\":1}}],[\"change\",{\"0\":{\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"170\":1},\"1\":{\"15\":3,\"26\":3,\"67\":1,\"77\":1,\"78\":1,\"80\":1,\"82\":1,\"83\":1,\"88\":1,\"89\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"106\":1,\"108\":2,\"112\":2,\"113\":2,\"115\":2,\"121\":1,\"123\":1,\"138\":1,\"165\":1,\"394\":2,\"503\":1,\"507\":2,\"518\":2,\"605\":1,\"808\":1,\"815\":1,\"905\":1,\"940\":2,\"960\":2,\"986\":1,\"1069\":1,\"1118\":2,\"1178\":2,\"1262\":2,\"1268\":2,\"1276\":1,\"1362\":1,\"1491\":1,\"1787\":1,\"1793\":1,\"1794\":2}}],[\"channelling\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"channel\",{\"1\":{\"348\":1}}],[\"chan\",{\"1\":{\"345\":1,\"347\":3,\"348\":1}}],[\"chance\",{\"1\":{\"274\":1}}],[\"chains\",{\"1\":{\"247\":1}}],[\"chain\",{\"1\":{\"238\":1}}],[\"chained\",{\"1\":{\"159\":1,\"1708\":1,\"1746\":1}}],[\"chaining\",{\"1\":{\"115\":2,\"1218\":1,\"1772\":1}}],[\"checking\",{\"1\":{\"227\":1,\"791\":2,\"1029\":2,\"1186\":2}}],[\"checked\",{\"1\":{\"115\":1,\"182\":1,\"782\":1,\"1249\":1,\"1321\":1,\"1778\":1}}],[\"checks\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"151\":1,\"412\":1,\"502\":1,\"861\":1,\"1039\":1,\"1166\":1,\"1167\":1,\"1171\":1,\"1255\":1,\"1325\":1,\"1326\":1,\"1327\":1,\"1557\":1,\"1562\":1,\"1774\":1,\"1779\":1}}],[\"check\",{\"1\":{\"15\":1,\"26\":1,\"90\":1,\"95\":1,\"115\":1,\"123\":1,\"163\":1,\"182\":1,\"207\":1,\"347\":1,\"403\":1,\"423\":1,\"464\":1,\"500\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"858\":1,\"978\":1,\"1043\":2,\"1241\":1,\"1261\":1,\"1321\":1,\"1327\":1,\"1350\":1,\"1602\":1,\"1778\":1,\"1784\":1,\"1789\":1}}],[\"carriage\",{\"1\":{\"780\":2,\"882\":2,\"1306\":1}}],[\"carry\",{\"1\":{\"643\":1}}],[\"carefully\",{\"1\":{\"1509\":1,\"1716\":1}}],[\"careful\",{\"1\":{\"605\":1,\"905\":1}}],[\"captured\",{\"1\":{\"1708\":1}}],[\"capturing\",{\"1\":{\"123\":1}}],[\"captiveagent\",{\"1\":{\"1484\":1}}],[\"capital\",{\"1\":{\"1403\":1,\"1417\":1,\"1444\":1}}],[\"capability\",{\"1\":{\"337\":1,\"344\":1,\"376\":1,\"1405\":1}}],[\"caught\",{\"1\":{\"151\":1,\"499\":1}}],[\"causing\",{\"1\":{\"121\":1,\"163\":1}}],[\"caused\",{\"1\":{\"95\":1,\"182\":1}}],[\"cause\",{\"1\":{\"77\":1,\"108\":1,\"115\":1,\"626\":1,\"1321\":1}}],[\"calendar\",{\"0\":{\"1411\":1},\"1\":{\"377\":1,\"1450\":1,\"1535\":1}}],[\"calculating\",{\"1\":{\"147\":1}}],[\"calls\",{\"1\":{\"1708\":1}}],[\"callback\",{\"1\":{\"269\":2,\"270\":2,\"271\":2,\"276\":2,\"277\":2,\"278\":2,\"290\":2,\"292\":1,\"316\":2,\"318\":25,\"319\":1,\"324\":2,\"326\":25,\"327\":1,\"331\":2,\"333\":41,\"334\":1}}],[\"calling\",{\"1\":{\"50\":1,\"316\":1,\"324\":1,\"331\":1,\"338\":1,\"345\":1,\"488\":1,\"500\":1,\"535\":1,\"653\":1,\"851\":1,\"1513\":1}}],[\"call\",{\"1\":{\"46\":1,\"99\":2,\"291\":1,\"391\":2,\"605\":1,\"679\":1,\"682\":2,\"710\":2,\"785\":2,\"825\":1,\"828\":2,\"905\":1,\"912\":1,\"915\":2,\"1023\":1,\"1097\":2,\"1125\":1,\"1201\":1,\"1204\":2,\"1339\":1,\"1742\":1}}],[\"callers\",{\"1\":{\"252\":1}}],[\"caller\",{\"1\":{\"15\":1,\"26\":1,\"122\":1,\"485\":1,\"489\":1,\"518\":2,\"531\":1,\"532\":1,\"1143\":1}}],[\"called\",{\"1\":{\"10\":1,\"111\":2,\"182\":1,\"238\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"344\":1,\"354\":2,\"361\":2,\"518\":1,\"676\":1,\"679\":1,\"781\":1,\"784\":1,\"825\":1,\"848\":1,\"912\":1,\"956\":1,\"962\":1,\"1091\":2,\"1125\":1,\"1179\":1,\"1201\":1,\"1218\":1,\"1245\":3,\"1312\":1,\"1329\":1,\"1486\":1,\"1735\":1,\"1753\":1,\"1760\":1,\"1761\":1,\"1772\":1,\"1780\":1}}],[\"cachettl\",{\"0\":{\"437\":1},\"1\":{\"119\":1,\"431\":1,\"437\":2}}],[\"caches\",{\"1\":{\"108\":1,\"989\":1}}],[\"cache\",{\"1\":{\"95\":2,\"115\":1,\"119\":1,\"121\":1,\"312\":1,\"437\":3,\"981\":1}}],[\"cached\",{\"1\":{\"95\":1,\"108\":1,\"119\":1,\"181\":1,\"437\":1,\"1176\":1}}],[\"caching\",{\"1\":{\"95\":1,\"108\":1,\"129\":1}}],[\"cake\",{\"1\":{\"57\":1}}],[\"camp\",{\"1\":{\"48\":2}}],[\"came\",{\"1\":{\"46\":1,\"47\":1}}],[\"cat\",{\"1\":{\"47\":3,\"749\":1,\"791\":1,\"962\":1,\"1012\":1,\"1186\":1,\"1329\":1,\"1522\":1,\"1579\":4,\"1745\":1}}],[\"category\",{\"1\":{\"47\":1,\"515\":1}}],[\"categories\",{\"1\":{\"47\":1,\"1791\":1}}],[\"catch\",{\"0\":{\"496\":1,\"1254\":1},\"1\":{\"15\":1,\"26\":1,\"90\":1,\"111\":1,\"123\":2,\"412\":1,\"423\":2,\"440\":1,\"497\":1,\"498\":2,\"499\":2,\"500\":2,\"501\":2,\"679\":1,\"742\":1,\"825\":1,\"861\":1,\"912\":1,\"1039\":1,\"1171\":1,\"1201\":1,\"1254\":1,\"1255\":1,\"1325\":1,\"1331\":1,\"1725\":1,\"1772\":1}}],[\"cascades\",{\"1\":{\"1243\":1}}],[\"cascade\",{\"1\":{\"680\":1,\"826\":1,\"913\":1,\"1202\":1}}],[\"cascading\",{\"1\":{\"15\":1,\"26\":1,\"124\":1,\"457\":1,\"502\":1,\"861\":1,\"1242\":1,\"1325\":1,\"1331\":1,\"1771\":1,\"1782\":1}}],[\"case\",{\"0\":{\"1250\":1,\"1251\":1,\"1417\":1,\"1418\":1,\"1419\":1,\"1420\":1,\"1444\":1,\"1445\":1,\"1446\":1,\"1447\":1},\"1\":{\"113\":1,\"115\":1,\"121\":1,\"208\":1,\"216\":1,\"247\":3,\"269\":1,\"276\":1,\"318\":15,\"326\":9,\"333\":27,\"340\":30,\"347\":14,\"440\":1,\"487\":1,\"491\":1,\"653\":1,\"747\":1,\"780\":1,\"859\":1,\"926\":1,\"1021\":3,\"1023\":1,\"1244\":3,\"1245\":5,\"1248\":4,\"1250\":2,\"1251\":9,\"1403\":3,\"1417\":3,\"1444\":3,\"1591\":1,\"1666\":1,\"1706\":1,\"1798\":2}}],[\"cases\",{\"1\":{\"34\":1,\"45\":1,\"90\":1,\"208\":1,\"566\":1,\"956\":1,\"1021\":1,\"1628\":1,\"1666\":1,\"1667\":1,\"1690\":1,\"1696\":1}}],[\"casting\",{\"1\":{\"235\":1,\"616\":1,\"1049\":1}}],[\"cast\",{\"0\":{\"235\":1,\"490\":1,\"744\":1,\"757\":1,\"1642\":1},\"1\":{\"15\":1,\"26\":1,\"44\":1,\"60\":1,\"63\":1,\"151\":1,\"154\":1,\"235\":1,\"383\":1,\"404\":1,\"419\":1,\"440\":1,\"483\":1,\"491\":1,\"492\":1,\"493\":1,\"616\":1,\"618\":1,\"743\":3,\"755\":4,\"756\":3,\"758\":1,\"771\":1,\"975\":1,\"1049\":1,\"1052\":1,\"1084\":1,\"1126\":1,\"1175\":1,\"1262\":1,\"1268\":1,\"1285\":1,\"1303\":1,\"1307\":1,\"1313\":1,\"1479\":1,\"1480\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1641\":3,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1}}],[\"cancel\",{\"0\":{\"1810\":1,\"1812\":1},\"1\":{\"1795\":2,\"1798\":1,\"1800\":1}}],[\"cancellation\",{\"1\":{\"722\":1,\"727\":1}}],[\"can\",{\"0\":{\"1793\":1},\"1\":{\"3\":1,\"10\":2,\"13\":1,\"14\":1,\"27\":1,\"33\":1,\"36\":1,\"38\":4,\"40\":2,\"41\":1,\"42\":2,\"43\":2,\"50\":4,\"51\":2,\"52\":1,\"54\":1,\"56\":4,\"57\":1,\"71\":1,\"90\":2,\"95\":1,\"99\":1,\"103\":1,\"108\":2,\"111\":3,\"113\":2,\"115\":3,\"117\":2,\"119\":2,\"121\":3,\"123\":5,\"126\":1,\"127\":2,\"134\":2,\"167\":1,\"181\":1,\"182\":1,\"202\":1,\"208\":1,\"210\":1,\"216\":1,\"222\":1,\"223\":3,\"224\":1,\"225\":2,\"226\":2,\"227\":1,\"231\":3,\"232\":2,\"234\":1,\"238\":1,\"239\":2,\"241\":1,\"242\":1,\"246\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"256\":1,\"259\":1,\"270\":1,\"277\":1,\"302\":1,\"309\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"340\":1,\"344\":1,\"347\":2,\"354\":1,\"361\":1,\"368\":1,\"372\":1,\"375\":3,\"376\":3,\"377\":1,\"387\":1,\"389\":1,\"390\":1,\"391\":2,\"397\":1,\"398\":1,\"402\":1,\"403\":2,\"423\":1,\"430\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":1,\"440\":1,\"441\":1,\"443\":1,\"444\":1,\"449\":1,\"452\":1,\"453\":1,\"459\":2,\"471\":2,\"487\":1,\"500\":1,\"507\":1,\"508\":1,\"526\":1,\"560\":1,\"566\":1,\"567\":1,\"576\":1,\"591\":2,\"605\":2,\"607\":1,\"609\":1,\"616\":1,\"653\":1,\"675\":1,\"676\":1,\"677\":1,\"701\":1,\"710\":2,\"722\":1,\"727\":1,\"742\":2,\"743\":3,\"749\":3,\"751\":1,\"755\":1,\"756\":3,\"760\":1,\"762\":2,\"764\":2,\"777\":1,\"778\":1,\"782\":1,\"785\":2,\"794\":1,\"808\":1,\"815\":1,\"822\":1,\"823\":1,\"851\":1,\"859\":1,\"869\":1,\"889\":1,\"905\":2,\"907\":1,\"909\":1,\"910\":1,\"924\":1,\"926\":1,\"929\":1,\"953\":1,\"965\":1,\"977\":2,\"984\":1,\"989\":1,\"999\":6,\"1049\":1,\"1058\":6,\"1069\":1,\"1075\":1,\"1091\":1,\"1095\":1,\"1097\":2,\"1105\":1,\"1110\":1,\"1113\":2,\"1123\":1,\"1139\":1,\"1148\":1,\"1153\":1,\"1161\":1,\"1175\":1,\"1176\":1,\"1188\":1,\"1189\":1,\"1198\":1,\"1199\":1,\"1209\":1,\"1219\":6,\"1226\":1,\"1233\":1,\"1237\":1,\"1248\":1,\"1250\":1,\"1261\":1,\"1297\":1,\"1317\":1,\"1324\":1,\"1327\":1,\"1330\":1,\"1339\":1,\"1347\":1,\"1356\":1,\"1357\":1,\"1359\":1,\"1385\":1,\"1386\":1,\"1400\":2,\"1401\":1,\"1402\":1,\"1404\":3,\"1405\":3,\"1407\":1,\"1408\":1,\"1413\":1,\"1416\":1,\"1421\":1,\"1425\":1,\"1428\":1,\"1432\":1,\"1433\":1,\"1436\":1,\"1441\":1,\"1454\":1,\"1455\":1,\"1505\":1,\"1506\":1,\"1509\":1,\"1513\":1,\"1515\":1,\"1520\":2,\"1535\":1,\"1538\":1,\"1544\":1,\"1545\":1,\"1549\":2,\"1551\":1,\"1561\":1,\"1570\":1,\"1582\":1,\"1586\":1,\"1588\":1,\"1592\":1,\"1593\":1,\"1598\":1,\"1614\":1,\"1628\":1,\"1641\":3,\"1647\":2,\"1654\":1,\"1664\":2,\"1716\":1,\"1719\":1,\"1721\":1,\"1725\":1,\"1726\":1,\"1729\":2,\"1731\":2,\"1733\":2,\"1741\":2,\"1742\":1,\"1744\":1,\"1746\":1,\"1747\":1,\"1753\":2,\"1772\":1,\"1773\":2,\"1775\":1,\"1784\":1,\"1787\":1,\"1789\":2,\"1790\":1,\"1797\":1,\"1798\":2,\"1800\":1,\"1808\":1}}],[\"cannot\",{\"1\":{\"3\":2,\"111\":1,\"202\":1,\"252\":1,\"340\":3,\"347\":1,\"361\":2,\"387\":1,\"391\":2,\"417\":1,\"446\":1,\"488\":1,\"535\":1,\"596\":2,\"682\":1,\"710\":2,\"730\":1,\"733\":1,\"749\":1,\"762\":1,\"780\":2,\"782\":2,\"783\":1,\"785\":2,\"828\":1,\"915\":1,\"1082\":1,\"1091\":1,\"1093\":1,\"1097\":2,\"1125\":1,\"1161\":1,\"1204\":1,\"1217\":1,\"1312\":1,\"1347\":1,\"1350\":1,\"1387\":1,\"1403\":2,\"1448\":2,\"1506\":1,\"1509\":1,\"1549\":1,\"1586\":1,\"1593\":2,\"1598\":1,\"1672\":1,\"1755\":1,\"1766\":1}}],[\"caveats\",{\"1\":{\"596\":1}}],[\"caveat\",{\"1\":{\"3\":1,\"111\":1,\"1161\":1}}],[\"cooperating\",{\"1\":{\"1659\":1}}],[\"coordinates\",{\"1\":{\"1617\":2,\"1625\":2}}],[\"cookies\",{\"1\":{\"1022\":2}}],[\"covered\",{\"1\":{\"956\":1}}],[\"covers\",{\"1\":{\"722\":1,\"727\":1}}],[\"cover\",{\"1\":{\"566\":1,\"956\":1,\"1113\":1,\"1666\":1}}],[\"coverage\",{\"1\":{\"119\":1}}],[\"copy\",{\"1\":{\"109\":1,\"111\":1,\"209\":1,\"1300\":1,\"1356\":1,\"1357\":1,\"1529\":1,\"1805\":1}}],[\"copying\",{\"1\":{\"109\":1}}],[\"copied\",{\"1\":{\"90\":1,\"155\":1,\"226\":1}}],[\"copies\",{\"1\":{\"86\":1}}],[\"cost\",{\"1\":{\"69\":1,\"131\":1}}],[\"colnumber\",{\"1\":{\"575\":1}}],[\"col\",{\"1\":{\"347\":4}}],[\"column\",{\"1\":{\"111\":1,\"121\":1,\"348\":1,\"865\":1,\"956\":1,\"1175\":2,\"1260\":1,\"1267\":2,\"1278\":2,\"1280\":1,\"1487\":2,\"1710\":2}}],[\"columns`\",{\"1\":{\"1487\":2}}],[\"columns\",{\"1\":{\"99\":1,\"103\":1,\"123\":1,\"347\":2,\"764\":2,\"1400\":1,\"1487\":6,\"1625\":2}}],[\"colorized\",{\"1\":{\"1725\":1}}],[\"color\",{\"1\":{\"1704\":1,\"1724\":1,\"1786\":2}}],[\"color=auto\",{\"1\":{\"655\":1}}],[\"coloured\",{\"1\":{\"1724\":1}}],[\"colours\",{\"1\":{\"1701\":2,\"1716\":1}}],[\"colour\",{\"0\":{\"1724\":1},\"1\":{\"103\":2,\"655\":1,\"1010\":1,\"1715\":1,\"1716\":1,\"1724\":2}}],[\"colon\",{\"1\":{\"95\":1,\"139\":1,\"596\":1,\"780\":1,\"1538\":1}}],[\"colons\",{\"1\":{\"47\":1}}],[\"collection\",{\"0\":{\"309\":1},\"1\":{\"15\":1,\"26\":1,\"31\":1,\"44\":1,\"63\":1,\"164\":1,\"489\":1,\"536\":1,\"651\":1,\"745\":1,\"758\":1,\"759\":1,\"1180\":1,\"1182\":1,\"1228\":1,\"1281\":1,\"1345\":1,\"1756\":1,\"1780\":1}}],[\"couple\",{\"1\":{\"1601\":1}}],[\"couldn\",{\"1\":{\"40\":1,\"182\":1,\"1267\":1}}],[\"could\",{\"1\":{\"38\":1,\"50\":1,\"56\":1,\"59\":2,\"95\":1,\"109\":1,\"219\":1,\"238\":1,\"270\":1,\"277\":1,\"653\":1,\"730\":1,\"781\":1,\"857\":1,\"1217\":1,\"1249\":1,\"1272\":1,\"1366\":1,\"1650\":1,\"1728\":1,\"1772\":1,\"1776\":1}}],[\"course\",{\"1\":{\"38\":1,\"56\":1}}],[\"countdowns\",{\"1\":{\"1416\":1}}],[\"counted\",{\"1\":{\"591\":1,\"863\":1}}],[\"counterpart\",{\"1\":{\"620\":1,\"631\":1,\"637\":1,\"1249\":1,\"1461\":1,\"1496\":1}}],[\"counter\",{\"1\":{\"375\":1,\"1404\":1}}],[\"count=\",{\"1\":{\"447\":1}}],[\"counts\",{\"0\":{\"595\":1,\"867\":1},\"1\":{\"115\":1,\"886\":1,\"1145\":1}}],[\"count\",{\"0\":{\"537\":1},\"1\":{\"15\":2,\"26\":2,\"111\":1,\"112\":2,\"115\":2,\"129\":1,\"130\":2,\"134\":1,\"347\":2,\"369\":2,\"378\":2,\"383\":2,\"419\":2,\"537\":1,\"539\":1,\"540\":2,\"543\":1,\"544\":7,\"545\":1,\"546\":4,\"547\":1,\"599\":2,\"871\":2,\"877\":2,\"884\":2,\"888\":2,\"891\":2,\"897\":2,\"940\":2,\"947\":2,\"960\":2,\"967\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":2,\"1147\":2,\"1150\":2,\"1235\":2,\"1274\":2,\"1410\":2,\"1416\":2,\"1422\":2,\"1430\":2,\"1438\":2,\"1450\":2,\"1484\":4}}],[\"codes\",{\"0\":{\"566\":1,\"567\":1},\"1\":{\"566\":1,\"567\":1,\"1701\":1,\"1724\":1}}],[\"code><\",{\"1\":{\"99\":1,\"103\":1,\"108\":2}}],[\"code\",{\"0\":{\"13\":1,\"223\":1,\"410\":1,\"565\":1,\"1037\":1,\"1454\":1,\"1501\":1,\"1545\":1,\"1702\":1,\"1708\":1,\"1711\":1,\"1733\":1,\"1735\":1,\"1736\":1,\"1788\":1},\"1\":{\"15\":9,\"16\":1,\"23\":3,\"24\":1,\"26\":9,\"27\":1,\"41\":1,\"42\":1,\"54\":1,\"61\":1,\"72\":1,\"76\":1,\"88\":1,\"91\":1,\"94\":2,\"95\":1,\"97\":1,\"98\":1,\"99\":3,\"100\":2,\"104\":1,\"108\":1,\"109\":2,\"110\":1,\"111\":1,\"113\":1,\"117\":2,\"120\":1,\"121\":3,\"126\":1,\"128\":1,\"135\":1,\"143\":1,\"153\":3,\"155\":2,\"159\":1,\"162\":1,\"183\":1,\"199\":1,\"208\":2,\"211\":1,\"220\":2,\"237\":1,\"251\":1,\"255\":1,\"297\":1,\"340\":1,\"347\":1,\"354\":1,\"361\":1,\"366\":2,\"368\":1,\"393\":2,\"406\":1,\"407\":5,\"409\":1,\"410\":5,\"412\":4,\"432\":1,\"438\":1,\"440\":2,\"443\":1,\"447\":1,\"457\":1,\"472\":2,\"487\":2,\"488\":1,\"489\":1,\"496\":1,\"498\":3,\"502\":2,\"509\":2,\"512\":1,\"526\":5,\"527\":1,\"528\":1,\"534\":2,\"535\":1,\"536\":1,\"576\":1,\"605\":1,\"607\":1,\"611\":1,\"616\":4,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"644\":1,\"678\":1,\"679\":2,\"680\":1,\"682\":1,\"703\":2,\"713\":2,\"738\":1,\"741\":4,\"743\":1,\"745\":1,\"747\":1,\"748\":6,\"749\":4,\"755\":1,\"756\":1,\"758\":1,\"761\":3,\"773\":1,\"774\":2,\"779\":1,\"787\":2,\"806\":1,\"808\":1,\"824\":1,\"825\":2,\"826\":1,\"828\":1,\"850\":1,\"853\":1,\"855\":1,\"857\":1,\"859\":1,\"861\":3,\"865\":5,\"905\":1,\"907\":1,\"911\":1,\"912\":2,\"913\":1,\"915\":1,\"917\":1,\"937\":1,\"938\":2,\"956\":2,\"983\":1,\"985\":1,\"999\":1,\"1002\":1,\"1008\":2,\"1014\":1,\"1021\":1,\"1027\":2,\"1031\":1,\"1032\":1,\"1033\":1,\"1034\":5,\"1036\":1,\"1037\":5,\"1039\":3,\"1058\":1,\"1061\":1,\"1065\":1,\"1067\":1,\"1091\":1,\"1092\":1,\"1098\":2,\"1141\":2,\"1171\":2,\"1182\":2,\"1200\":1,\"1201\":2,\"1202\":1,\"1204\":1,\"1208\":2,\"1209\":2,\"1210\":2,\"1211\":1,\"1213\":1,\"1214\":1,\"1215\":1,\"1217\":2,\"1219\":1,\"1244\":3,\"1248\":1,\"1249\":1,\"1255\":4,\"1284\":2,\"1291\":1,\"1292\":1,\"1295\":2,\"1305\":2,\"1319\":2,\"1320\":1,\"1322\":2,\"1325\":2,\"1328\":2,\"1331\":3,\"1337\":3,\"1339\":3,\"1340\":4,\"1348\":1,\"1360\":2,\"1367\":1,\"1372\":1,\"1376\":1,\"1391\":1,\"1456\":1,\"1463\":1,\"1469\":1,\"1474\":1,\"1475\":1,\"1488\":1,\"1497\":2,\"1502\":1,\"1513\":2,\"1518\":3,\"1541\":1,\"1542\":3,\"1547\":2,\"1552\":1,\"1557\":1,\"1561\":1,\"1562\":1,\"1566\":2,\"1589\":1,\"1610\":1,\"1641\":1,\"1672\":2,\"1673\":1,\"1674\":1,\"1675\":3,\"1703\":1,\"1707\":1,\"1708\":7,\"1709\":1,\"1710\":2,\"1714\":2,\"1727\":3,\"1728\":1,\"1735\":1,\"1739\":3,\"1742\":1,\"1743\":1,\"1756\":1,\"1771\":1,\"1772\":1,\"1773\":1,\"1774\":1,\"1779\":1,\"1780\":1,\"1781\":3,\"1782\":3,\"1788\":1,\"1793\":1,\"1794\":3,\"1807\":1}}],[\"connection\",{\"1\":{\"1691\":1}}],[\"connections\",{\"1\":{\"232\":1}}],[\"conjunction\",{\"1\":{\"436\":1,\"441\":1,\"497\":1}}],[\"convenient\",{\"1\":{\"1659\":1}}],[\"conveniences\",{\"1\":{\"607\":1,\"907\":1}}],[\"convention\",{\"1\":{\"119\":1,\"779\":2,\"1700\":1}}],[\"conversation\",{\"1\":{\"1163\":1}}],[\"conversion\",{\"0\":{\"234\":1},\"1\":{\"15\":1,\"26\":1,\"42\":1,\"110\":1,\"397\":1,\"559\":1,\"1422\":1,\"1450\":1}}],[\"converted\",{\"1\":{\"129\":1,\"741\":1,\"1520\":1,\"1538\":1,\"1631\":2,\"1644\":2,\"1656\":2,\"1669\":2,\"1674\":1,\"1698\":2,\"1708\":1}}],[\"convertfrom\",{\"1\":{\"42\":2}}],[\"convert\",{\"1\":{\"42\":1,\"50\":1,\"108\":1,\"270\":1,\"277\":1,\"417\":1,\"562\":2,\"563\":1,\"743\":1,\"756\":1,\"782\":3,\"1082\":1,\"1421\":1,\"1641\":1}}],[\"converting\",{\"1\":{\"40\":1,\"155\":1}}],[\"converts\",{\"1\":{\"30\":4,\"121\":1,\"258\":1,\"263\":3,\"265\":4,\"301\":1,\"306\":3,\"350\":1,\"356\":3,\"357\":1,\"363\":3,\"771\":2,\"891\":2,\"1077\":2,\"1150\":2,\"1235\":2,\"1257\":1,\"1268\":1,\"1607\":2,\"1612\":2,\"1618\":2,\"1622\":2,\"1626\":2,\"1632\":2,\"1636\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2,\"1679\":2,\"1688\":2,\"1694\":2,\"1699\":2}}],[\"convinced\",{\"1\":{\"53\":1}}],[\"conforming\",{\"1\":{\"1753\":1}}],[\"confirm\",{\"1\":{\"692\":1}}],[\"configshellmax\",{\"1\":{\"90\":1}}],[\"configshell\",{\"1\":{\"89\":1,\"98\":1}}],[\"configured\",{\"1\":{\"808\":1,\"815\":1,\"1069\":1,\"1742\":1}}],[\"configurable\",{\"0\":{\"815\":1,\"1069\":1},\"1\":{\"108\":1,\"117\":1,\"292\":1,\"808\":1,\"1022\":1,\"1267\":1,\"1487\":1,\"1615\":1,\"1716\":1}}],[\"configuration\",{\"1\":{\"28\":1,\"1603\":1,\"1627\":1,\"1628\":3,\"1645\":1,\"1657\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1706\":2}}],[\"configuring\",{\"0\":{\"1724\":1},\"1\":{\"21\":1,\"1715\":1}}],[\"config\",{\"0\":{\"510\":1,\"1487\":1,\"1780\":1,\"1785\":1},\"1\":{\"15\":1,\"23\":1,\"26\":1,\"82\":1,\"83\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"108\":5,\"110\":1,\"111\":2,\"112\":1,\"113\":2,\"114\":1,\"115\":4,\"116\":1,\"119\":1,\"120\":1,\"121\":3,\"122\":1,\"123\":4,\"162\":4,\"164\":1,\"169\":1,\"176\":1,\"182\":3,\"183\":1,\"290\":3,\"292\":3,\"397\":8,\"402\":4,\"404\":1,\"436\":2,\"440\":3,\"449\":1,\"457\":1,\"462\":2,\"463\":1,\"467\":2,\"508\":1,\"511\":3,\"512\":9,\"513\":1,\"514\":1,\"516\":1,\"517\":1,\"518\":2,\"520\":1,\"523\":1,\"526\":5,\"529\":2,\"575\":1,\"593\":2,\"596\":7,\"597\":2,\"599\":1,\"611\":1,\"679\":1,\"685\":1,\"743\":2,\"756\":2,\"802\":1,\"808\":2,\"809\":1,\"815\":4,\"816\":1,\"825\":1,\"831\":1,\"849\":1,\"865\":3,\"869\":4,\"871\":1,\"912\":1,\"917\":1,\"935\":1,\"982\":1,\"987\":1,\"1020\":1,\"1021\":2,\"1022\":2,\"1024\":1,\"1069\":4,\"1070\":1,\"1175\":1,\"1176\":1,\"1182\":1,\"1201\":1,\"1207\":1,\"1213\":1,\"1241\":1,\"1267\":1,\"1284\":2,\"1287\":1,\"1289\":1,\"1337\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1487\":2,\"1491\":2,\"1615\":3,\"1618\":1,\"1641\":2,\"1672\":2,\"1675\":1,\"1704\":1,\"1706\":3,\"1707\":1,\"1721\":1,\"1724\":4,\"1725\":1,\"1726\":1,\"1727\":1,\"1750\":1,\"1752\":1,\"1753\":4,\"1756\":1,\"1771\":2,\"1780\":1,\"1781\":1,\"1782\":1,\"1786\":2,\"1787\":2,\"1788\":1,\"1790\":3,\"1791\":1,\"1794\":1}}],[\"conf\",{\"1\":{\"526\":4}}],[\"confusion\",{\"1\":{\"268\":1,\"275\":1,\"289\":1,\"310\":1}}],[\"conflicting\",{\"1\":{\"53\":1,\"956\":1}}],[\"conflict\",{\"1\":{\"51\":1,\"216\":1}}],[\"consult\",{\"1\":{\"1784\":1,\"1793\":1}}],[\"consistent\",{\"1\":{\"315\":1,\"323\":1,\"330\":1,\"1728\":1}}],[\"consistency\",{\"0\":{\"1731\":1},\"1\":{\"72\":1,\"121\":1,\"337\":1,\"344\":1,\"643\":1,\"1728\":1}}],[\"considered\",{\"1\":{\"177\":1,\"202\":1,\"204\":1,\"237\":1,\"252\":1,\"440\":3,\"468\":1,\"487\":1,\"682\":1,\"828\":1,\"915\":1,\"1110\":1,\"1204\":1,\"1611\":2,\"1628\":1,\"1690\":1,\"1696\":1,\"1773\":1}}],[\"considerably\",{\"1\":{\"68\":1,\"160\":1}}],[\"consider\",{\"1\":{\"48\":1}}],[\"consolidate\",{\"1\":{\"53\":1}}],[\"consoles\",{\"1\":{\"202\":1}}],[\"console\",{\"1\":{\"38\":2,\"56\":2,\"202\":2}}],[\"constant\",{\"1\":{\"1546\":1,\"1700\":1,\"1702\":1,\"1703\":2}}],[\"constants\",{\"0\":{\"481\":1,\"617\":1,\"648\":1,\"1050\":1,\"1546\":1,\"1700\":1,\"1701\":1,\"1703\":1},\"1\":{\"23\":2,\"110\":2,\"481\":1,\"483\":2,\"617\":1,\"618\":2,\"648\":1,\"1050\":1,\"1052\":2,\"1306\":1,\"1307\":2,\"1546\":2,\"1547\":2,\"1700\":2,\"1701\":2,\"1709\":2,\"1724\":1,\"1727\":2,\"1794\":2}}],[\"consts\",{\"1\":{\"1300\":2}}],[\"const\",{\"1\":{\"347\":1,\"953\":1}}],[\"construct\",{\"1\":{\"229\":1,\"1741\":1,\"1746\":1}}],[\"constructed\",{\"1\":{\"227\":1}}],[\"constructors\",{\"1\":{\"1672\":1}}],[\"constructor\",{\"0\":{\"1519\":1,\"1537\":1},\"1\":{\"24\":2,\"44\":1,\"63\":1,\"130\":1,\"378\":1,\"877\":1,\"1274\":1,\"1502\":2,\"1536\":1,\"1540\":1,\"1675\":1}}],[\"constructs\",{\"1\":{\"10\":1,\"60\":1}}],[\"concatenate\",{\"1\":{\"605\":2,\"905\":2,\"1278\":1}}],[\"concatenated\",{\"0\":{\"1648\":1,\"1649\":1,\"1664\":1,\"1665\":1,\"1666\":1},\"1\":{\"28\":1,\"117\":1,\"118\":1,\"942\":1,\"1487\":1,\"1603\":1,\"1645\":1,\"1646\":1,\"1647\":2,\"1650\":2,\"1654\":2,\"1655\":5,\"1664\":3,\"1666\":2,\"1670\":1,\"1675\":1}}],[\"concurrency\",{\"1\":{\"104\":1,\"965\":1,\"1321\":1}}],[\"concurrently\",{\"1\":{\"95\":1,\"1746\":1}}],[\"concurrent\",{\"1\":{\"93\":1}}],[\"conceptually\",{\"1\":{\"730\":1,\"743\":1,\"756\":1,\"1139\":1,\"1641\":1}}],[\"conceptual\",{\"1\":{\"219\":1}}],[\"concept\",{\"1\":{\"103\":1,\"446\":1,\"519\":1,\"808\":1,\"999\":1,\"1058\":1,\"1067\":1,\"1219\":1,\"1741\":2,\"1746\":1,\"1747\":2}}],[\"concerns\",{\"1\":{\"49\":1,\"53\":1}}],[\"conceded\",{\"1\":{\"48\":1}}],[\"conclusion\",{\"0\":{\"43\":1,\"53\":1,\"62\":1},\"1\":{\"36\":1}}],[\"conditionals\",{\"1\":{\"15\":1,\"26\":1,\"40\":1,\"124\":1,\"457\":1,\"502\":1,\"859\":1,\"861\":1,\"1242\":1,\"1248\":1,\"1325\":1,\"1331\":1,\"1771\":1,\"1782\":1}}],[\"conditional\",{\"1\":{\"15\":1,\"26\":1,\"54\":1,\"113\":1,\"412\":1,\"489\":1,\"502\":1,\"536\":1,\"611\":1,\"703\":1,\"738\":1,\"742\":1,\"745\":1,\"758\":1,\"850\":1,\"851\":2,\"859\":3,\"917\":1,\"1008\":1,\"1039\":1,\"1243\":1,\"1244\":2,\"1255\":1,\"1319\":1,\"1325\":1,\"1331\":1,\"1339\":2,\"1360\":1,\"1708\":2,\"1771\":1,\"1782\":1}}],[\"conditions\",{\"1\":{\"15\":1,\"26\":1,\"109\":1,\"405\":1,\"440\":2,\"694\":1,\"703\":1,\"861\":1,\"1008\":1,\"1039\":1,\"1255\":1,\"1319\":1,\"1347\":1,\"1707\":1}}],[\"condition\",{\"1\":{\"15\":3,\"26\":3,\"54\":1,\"95\":1,\"114\":1,\"164\":1,\"412\":2,\"489\":1,\"502\":1,\"536\":1,\"611\":1,\"703\":2,\"741\":1,\"745\":2,\"758\":2,\"766\":1,\"850\":1,\"851\":1,\"861\":1,\"917\":1,\"1003\":1,\"1004\":1,\"1008\":1,\"1039\":2,\"1255\":3,\"1319\":2,\"1325\":1,\"1331\":1,\"1338\":1,\"1339\":1,\"1340\":2,\"1360\":1,\"1486\":1,\"1707\":1,\"1771\":1,\"1782\":1}}],[\"continuing\",{\"1\":{\"251\":1}}],[\"continues\",{\"1\":{\"24\":2,\"94\":2,\"116\":2,\"1502\":2,\"1553\":1,\"1558\":1,\"1774\":2}}],[\"continue\",{\"0\":{\"251\":1,\"531\":1},\"1\":{\"15\":1,\"26\":1,\"121\":2,\"122\":1,\"251\":4,\"347\":2,\"489\":1,\"532\":2,\"533\":1,\"534\":3,\"535\":3,\"1143\":1,\"1276\":1}}],[\"content\",{\"1\":{\"113\":3,\"227\":1,\"605\":3,\"808\":1,\"814\":1,\"905\":3,\"1016\":1,\"1021\":1,\"1064\":1,\"1068\":1,\"1113\":1,\"1505\":1,\"1592\":1}}],[\"contents\",{\"1\":{\"0\":1,\"15\":3,\"21\":1,\"24\":1,\"26\":3,\"30\":2,\"36\":1,\"38\":3,\"56\":3,\"92\":1,\"120\":3,\"122\":1,\"188\":1,\"265\":2,\"272\":1,\"273\":1,\"279\":1,\"286\":1,\"287\":1,\"293\":1,\"300\":1,\"313\":2,\"320\":2,\"328\":1,\"335\":2,\"342\":2,\"349\":2,\"483\":2,\"491\":1,\"523\":1,\"530\":1,\"618\":2,\"635\":1,\"641\":1,\"653\":2,\"758\":1,\"795\":1,\"808\":1,\"809\":1,\"810\":1,\"832\":1,\"833\":2,\"837\":1,\"838\":1,\"839\":1,\"843\":1,\"962\":1,\"975\":2,\"1024\":1,\"1052\":2,\"1068\":1,\"1070\":1,\"1103\":3,\"1126\":2,\"1190\":1,\"1297\":1,\"1301\":2,\"1502\":1,\"1563\":1,\"1567\":1,\"1568\":2,\"1612\":1,\"1632\":1,\"1645\":2,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1708\":1,\"1715\":1,\"1774\":3,\"1795\":1,\"1799\":7}}],[\"context\",{\"1\":{\"90\":1,\"111\":1,\"121\":2,\"269\":3,\"270\":3,\"276\":3,\"277\":3,\"316\":3,\"318\":15,\"331\":3,\"333\":13,\"575\":2,\"722\":1,\"727\":1}}],[\"contribute\",{\"1\":{\"181\":1}}],[\"contrived\",{\"1\":{\"38\":1,\"56\":1,\"1513\":1}}],[\"contradicting\",{\"1\":{\"50\":1}}],[\"contradictory\",{\"1\":{\"47\":1}}],[\"control\",{\"0\":{\"245\":1,\"1808\":1},\"1\":{\"3\":1,\"8\":1,\"46\":1,\"679\":1,\"825\":1,\"851\":1,\"912\":1,\"1201\":1,\"1701\":1,\"1772\":1,\"1795\":1,\"1808\":1}}],[\"containing\",{\"1\":{\"271\":1,\"421\":1,\"1132\":1,\"1789\":1}}],[\"contain\",{\"1\":{\"38\":1,\"56\":1,\"98\":1,\"126\":1,\"347\":1,\"596\":1,\"859\":1,\"942\":1,\"1180\":1,\"1250\":1,\"1549\":1,\"1586\":1,\"1750\":1}}],[\"contains\",{\"1\":{\"21\":1,\"115\":1,\"438\":1,\"439\":1,\"795\":1,\"977\":1,\"1190\":1,\"1350\":1,\"1356\":1,\"1357\":1,\"1729\":1}}],[\"corresponding\",{\"1\":{\"1021\":1,\"1793\":1}}],[\"correlates\",{\"1\":{\"115\":1}}],[\"correctness\",{\"1\":{\"459\":1}}],[\"correction\",{\"1\":{\"129\":1}}],[\"correct\",{\"1\":{\"113\":3,\"182\":1,\"1035\":1,\"1245\":1}}],[\"corrected\",{\"1\":{\"108\":1}}],[\"correctly\",{\"1\":{\"3\":1,\"113\":1,\"115\":1,\"135\":1,\"147\":1,\"168\":1,\"174\":2,\"208\":1,\"795\":1,\"1190\":1,\"1703\":1}}],[\"coreaudiod\",{\"1\":{\"1484\":1}}],[\"coreutil\",{\"1\":{\"1461\":1,\"1496\":1}}],[\"coreutils\",{\"1\":{\"3\":1,\"99\":1,\"121\":3,\"202\":1}}],[\"core\",{\"1\":{\"39\":1,\"57\":1,\"79\":1,\"111\":1,\"387\":1,\"1453\":2,\"1500\":1}}],[\"cores\",{\"1\":{\"15\":1,\"26\":1,\"553\":1,\"554\":1,\"555\":1,\"993\":1,\"1044\":1}}],[\"combines\",{\"1\":{\"937\":1}}],[\"coming\",{\"1\":{\"162\":1}}],[\"com\",{\"1\":{\"91\":1,\"100\":1,\"108\":1,\"199\":1,\"202\":1,\"208\":5,\"261\":1,\"269\":2,\"270\":3,\"276\":2,\"277\":4,\"283\":2,\"290\":5,\"297\":2,\"304\":1,\"311\":1,\"312\":2,\"316\":3,\"318\":2,\"324\":3,\"326\":2,\"331\":3,\"333\":3,\"338\":2,\"340\":1,\"345\":1,\"347\":1,\"806\":1,\"808\":1,\"813\":1,\"815\":1,\"986\":1,\"1018\":1,\"1021\":1,\"1022\":8,\"1056\":1,\"1065\":1,\"1069\":1,\"1102\":1,\"1300\":3,\"1629\":1,\"1731\":1,\"1733\":1,\"1767\":1}}],[\"comes\",{\"1\":{\"76\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"117\":1,\"591\":1,\"606\":1,\"733\":1,\"906\":1,\"977\":1,\"1217\":1,\"1387\":1,\"1491\":1,\"1728\":1,\"1729\":1}}],[\"come\",{\"1\":{\"39\":1,\"51\":1,\"440\":1,\"1747\":1,\"1797\":1}}],[\"communication\",{\"1\":{\"1741\":1,\"1746\":1}}],[\"community\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":1}}],[\"commend\",{\"1\":{\"1505\":1,\"1592\":1}}],[\"comments\",{\"0\":{\"223\":1,\"1673\":1},\"1\":{\"121\":2,\"223\":2,\"526\":1,\"1615\":1,\"1672\":1,\"1673\":1,\"1772\":1}}],[\"comment\",{\"1\":{\"108\":1,\"121\":4,\"129\":1,\"223\":4,\"1615\":1,\"1772\":3}}],[\"commit`\",{\"1\":{\"242\":1}}],[\"commit\",{\"1\":{\"241\":1,\"242\":1}}],[\"commits\",{\"1\":{\"86\":1}}],[\"comma\",{\"1\":{\"375\":1,\"743\":1,\"756\":1,\"780\":3,\"1278\":2,\"1280\":1,\"1404\":1,\"1520\":1,\"1538\":2,\"1641\":1}}],[\"commas\",{\"1\":{\"47\":2,\"743\":1,\"756\":1,\"1641\":1}}],[\"commandtry\",{\"1\":{\"1772\":2}}],[\"commandline\",{\"1\":{\"78\":1,\"113\":1,\"119\":1,\"231\":1,\"440\":9,\"1355\":1,\"1384\":1,\"1570\":1}}],[\"command\",{\"0\":{\"10\":1,\"33\":1,\"36\":1,\"364\":1,\"370\":1,\"379\":1,\"384\":1,\"394\":1,\"405\":1,\"413\":1,\"420\":1,\"425\":1,\"458\":1,\"464\":1,\"470\":1,\"476\":1,\"484\":1,\"490\":1,\"496\":1,\"503\":1,\"510\":1,\"531\":1,\"537\":1,\"554\":1,\"559\":1,\"570\":1,\"578\":1,\"585\":1,\"590\":1,\"600\":1,\"612\":1,\"619\":1,\"625\":1,\"630\":1,\"636\":1,\"642\":1,\"652\":1,\"660\":1,\"665\":1,\"670\":1,\"686\":1,\"691\":1,\"698\":1,\"704\":1,\"714\":1,\"719\":1,\"724\":1,\"729\":1,\"736\":1,\"746\":1,\"759\":1,\"767\":1,\"772\":1,\"788\":1,\"798\":1,\"803\":1,\"810\":1,\"817\":1,\"832\":1,\"838\":1,\"844\":1,\"850\":1,\"862\":1,\"872\":1,\"878\":1,\"885\":1,\"893\":1,\"899\":1,\"918\":1,\"923\":1,\"931\":1,\"936\":1,\"941\":1,\"948\":1,\"955\":1,\"961\":1,\"968\":1,\"976\":1,\"983\":1,\"988\":1,\"994\":1,\"1003\":1,\"1009\":1,\"1015\":1,\"1025\":1,\"1032\":1,\"1040\":1,\"1045\":1,\"1053\":1,\"1062\":1,\"1071\":1,\"1078\":1,\"1085\":1,\"1090\":1,\"1099\":1,\"1104\":1,\"1112\":1,\"1119\":1,\"1127\":1,\"1138\":1,\"1144\":1,\"1151\":1,\"1160\":1,\"1172\":1,\"1183\":1,\"1193\":1,\"1208\":1,\"1214\":1,\"1223\":1,\"1229\":1,\"1236\":1,\"1242\":1,\"1257\":1,\"1264\":1,\"1269\":1,\"1275\":1,\"1282\":1,\"1290\":1,\"1296\":1,\"1302\":1,\"1308\":1,\"1314\":1,\"1320\":1,\"1326\":1,\"1332\":1,\"1338\":1,\"1354\":1,\"1451\":1,\"1457\":1,\"1464\":1,\"1470\":1,\"1475\":1,\"1481\":1,\"1492\":1,\"1796\":1},\"1\":{\"3\":2,\"10\":2,\"14\":1,\"15\":10,\"24\":8,\"26\":10,\"29\":1,\"33\":2,\"36\":2,\"38\":5,\"43\":2,\"50\":1,\"51\":1,\"54\":3,\"56\":5,\"57\":1,\"77\":1,\"78\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":2,\"99\":1,\"103\":1,\"105\":4,\"108\":1,\"111\":2,\"112\":1,\"113\":3,\"114\":1,\"115\":2,\"116\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"139\":2,\"142\":2,\"162\":2,\"164\":2,\"169\":1,\"181\":1,\"183\":3,\"214\":2,\"216\":2,\"217\":2,\"218\":3,\"223\":1,\"228\":2,\"231\":2,\"232\":2,\"237\":2,\"244\":1,\"260\":1,\"303\":1,\"384\":1,\"386\":1,\"387\":3,\"391\":1,\"393\":1,\"403\":1,\"420\":1,\"423\":1,\"425\":1,\"426\":1,\"427\":2,\"433\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"440\":1,\"445\":2,\"455\":4,\"457\":2,\"458\":1,\"459\":1,\"460\":1,\"462\":1,\"466\":1,\"469\":1,\"499\":1,\"508\":1,\"511\":1,\"525\":1,\"549\":1,\"562\":1,\"596\":1,\"605\":9,\"626\":1,\"629\":1,\"647\":1,\"656\":2,\"657\":1,\"658\":1,\"659\":1,\"704\":1,\"705\":1,\"706\":1,\"710\":1,\"713\":2,\"723\":1,\"728\":1,\"733\":1,\"735\":1,\"749\":2,\"774\":1,\"785\":1,\"787\":3,\"790\":1,\"808\":1,\"814\":1,\"815\":1,\"837\":6,\"843\":6,\"844\":1,\"845\":1,\"854\":1,\"856\":1,\"857\":1,\"865\":2,\"875\":1,\"905\":9,\"923\":1,\"924\":1,\"925\":1,\"929\":1,\"930\":2,\"931\":1,\"932\":1,\"933\":1,\"935\":2,\"954\":4,\"970\":1,\"972\":1,\"975\":1,\"982\":1,\"984\":1,\"986\":2,\"992\":1,\"995\":1,\"999\":1,\"1023\":2,\"1024\":1,\"1031\":1,\"1058\":1,\"1069\":1,\"1091\":1,\"1093\":1,\"1097\":1,\"1098\":2,\"1161\":3,\"1166\":1,\"1167\":2,\"1171\":1,\"1178\":5,\"1182\":1,\"1213\":3,\"1217\":2,\"1218\":1,\"1219\":1,\"1236\":1,\"1237\":1,\"1238\":2,\"1250\":1,\"1260\":2,\"1261\":1,\"1267\":4,\"1272\":1,\"1280\":1,\"1281\":1,\"1290\":1,\"1291\":1,\"1292\":1,\"1323\":1,\"1324\":1,\"1329\":1,\"1330\":1,\"1337\":2,\"1346\":1,\"1347\":1,\"1349\":1,\"1352\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1360\":1,\"1377\":1,\"1378\":4,\"1388\":1,\"1455\":1,\"1497\":1,\"1502\":8,\"1505\":1,\"1513\":2,\"1545\":1,\"1549\":2,\"1554\":2,\"1555\":4,\"1557\":2,\"1559\":2,\"1560\":4,\"1562\":2,\"1564\":1,\"1568\":6,\"1569\":2,\"1570\":1,\"1571\":1,\"1572\":6,\"1573\":2,\"1574\":1,\"1575\":1,\"1576\":6,\"1577\":2,\"1580\":6,\"1581\":2,\"1583\":1,\"1584\":6,\"1586\":1,\"1592\":1,\"1601\":1,\"1610\":1,\"1628\":1,\"1675\":1,\"1708\":3,\"1727\":5,\"1731\":1,\"1742\":3,\"1744\":1,\"1745\":1,\"1747\":1,\"1748\":8,\"1764\":1,\"1772\":14,\"1773\":1,\"1776\":2,\"1777\":1,\"1778\":4,\"1779\":8,\"1782\":1,\"1789\":1,\"1795\":1,\"1800\":1,\"1801\":1,\"1802\":2,\"1806\":1,\"1808\":1}}],[\"commands\",{\"0\":{\"14\":1,\"25\":1,\"1455\":1},\"1\":{\"3\":2,\"10\":1,\"14\":1,\"21\":1,\"42\":1,\"46\":2,\"47\":1,\"102\":1,\"103\":9,\"115\":2,\"121\":1,\"167\":1,\"208\":1,\"214\":1,\"217\":1,\"231\":2,\"241\":1,\"286\":2,\"300\":2,\"342\":1,\"349\":1,\"354\":1,\"361\":1,\"391\":2,\"440\":8,\"452\":1,\"453\":1,\"465\":1,\"468\":1,\"513\":2,\"591\":1,\"710\":2,\"785\":2,\"859\":1,\"898\":11,\"1097\":2,\"1166\":1,\"1176\":2,\"1218\":1,\"1238\":1,\"1239\":1,\"1262\":9,\"1268\":8,\"1294\":1,\"1347\":1,\"1455\":1,\"1509\":1,\"1549\":1,\"1570\":1,\"1578\":1,\"1586\":1,\"1706\":1,\"1708\":2,\"1719\":2,\"1744\":1,\"1772\":6,\"1775\":2,\"1776\":2,\"1777\":1,\"1778\":1,\"1791\":2}}],[\"commonly\",{\"1\":{\"37\":1,\"103\":1,\"882\":1,\"1701\":11}}],[\"commonlog\",{\"0\":{\"1608\":1},\"1\":{\"28\":1,\"1175\":1,\"1603\":1,\"1611\":1}}],[\"common\",{\"0\":{\"1792\":1},\"1\":{\"28\":1,\"37\":2,\"61\":1,\"95\":1,\"121\":1,\"181\":1,\"216\":1,\"241\":1,\"246\":1,\"421\":1,\"1591\":1,\"1603\":1,\"1608\":1,\"1609\":1,\"1712\":1,\"1737\":1,\"1772\":1}}],[\"computing\",{\"1\":{\"1741\":1}}],[\"computer\",{\"1\":{\"595\":1,\"867\":1,\"1746\":1}}],[\"compiling\",{\"0\":{\"207\":1},\"1\":{\"90\":2,\"208\":4}}],[\"compiler\",{\"1\":{\"207\":2,\"391\":2,\"710\":2,\"785\":2,\"1097\":2,\"1161\":2}}],[\"compiles\",{\"1\":{\"199\":1}}],[\"compiled\",{\"0\":{\"205\":1,\"649\":1},\"1\":{\"47\":1,\"90\":1,\"108\":1,\"111\":2,\"113\":1,\"189\":1,\"205\":1,\"208\":1,\"465\":1,\"468\":1,\"605\":1,\"649\":1,\"905\":1,\"962\":1,\"973\":1,\"1161\":1,\"1176\":2,\"1451\":1,\"1631\":1}}],[\"compile\",{\"1\":{\"3\":1,\"119\":1,\"208\":1,\"403\":1,\"441\":1,\"1261\":1,\"1566\":1,\"1628\":1,\"1690\":1,\"1696\":1}}],[\"compliant\",{\"1\":{\"198\":1,\"730\":1,\"1043\":1}}],[\"complications\",{\"1\":{\"40\":1,\"113\":1}}],[\"completed\",{\"1\":{\"1651\":1,\"1661\":1}}],[\"completely\",{\"1\":{\"121\":1,\"1628\":1}}],[\"completer\",{\"1\":{\"103\":1}}],[\"complete\",{\"1\":{\"39\":1,\"57\":1,\"72\":1,\"93\":1,\"95\":1,\"111\":1,\"121\":1,\"397\":1,\"743\":1,\"756\":1,\"781\":1,\"1641\":1}}],[\"completions\",{\"1\":{\"90\":1,\"95\":2,\"104\":1,\"111\":3,\"147\":1,\"174\":1,\"178\":1,\"743\":1,\"756\":1,\"1641\":1,\"1713\":1,\"1738\":1}}],[\"completion\",{\"0\":{\"1720\":1},\"1\":{\"15\":1,\"26\":1,\"29\":1,\"47\":1,\"84\":1,\"86\":2,\"94\":1,\"96\":1,\"111\":2,\"112\":1,\"114\":1,\"118\":1,\"119\":1,\"120\":1,\"129\":1,\"142\":1,\"169\":1,\"183\":2,\"425\":1,\"426\":1,\"445\":1,\"647\":1,\"713\":1,\"743\":1,\"756\":1,\"954\":1,\"989\":1,\"992\":2,\"1171\":1,\"1182\":1,\"1213\":1,\"1281\":1,\"1337\":1,\"1346\":1,\"1388\":1,\"1641\":1,\"1675\":1,\"1715\":1,\"1716\":3,\"1727\":1,\"1782\":1,\"1797\":1,\"1798\":2,\"1800\":1}}],[\"complexity\",{\"1\":{\"155\":1}}],[\"complex\",{\"1\":{\"34\":1,\"45\":1,\"48\":1,\"111\":1,\"433\":1,\"1217\":1,\"1400\":1,\"1451\":1,\"1601\":1,\"1610\":1}}],[\"compressing\",{\"1\":{\"1467\":1,\"1471\":1}}],[\"compress\",{\"1\":{\"16\":1,\"27\":1,\"1456\":1,\"1463\":1,\"1469\":1,\"1470\":1}}],[\"compatible\",{\"1\":{\"46\":1,\"51\":1,\"103\":2,\"199\":1,\"208\":1,\"1628\":1,\"1746\":1}}],[\"compatibility\",{\"0\":{\"657\":1,\"711\":1},\"1\":{\"3\":1,\"39\":1,\"52\":1,\"72\":2,\"111\":2,\"121\":2,\"123\":1,\"657\":1,\"675\":1,\"711\":1,\"1048\":1,\"1516\":1,\"1520\":1,\"1538\":1,\"1773\":1,\"1802\":2}}],[\"comparable\",{\"1\":{\"1752\":1}}],[\"compared\",{\"1\":{\"40\":1,\"61\":1,\"182\":1,\"1021\":1,\"1248\":1,\"1461\":1,\"1496\":1,\"1509\":1}}],[\"comparison\",{\"1\":{\"1772\":2}}],[\"comparisons\",{\"1\":{\"15\":1,\"26\":1,\"122\":1,\"183\":1,\"608\":1,\"611\":1,\"685\":1,\"686\":1,\"831\":1,\"908\":1,\"917\":1,\"1159\":1,\"1207\":1,\"1536\":1,\"1540\":1}}],[\"comparing\",{\"0\":{\"1247\":1},\"1\":{\"12\":1,\"607\":2,\"907\":2,\"1453\":1,\"1500\":1}}],[\"cpucount\",{\"0\":{\"554\":1},\"1\":{\"15\":1,\"26\":1,\"553\":1,\"556\":1,\"557\":1,\"993\":1,\"1044\":1}}],[\"cpuarch\",{\"1\":{\"15\":1,\"26\":1,\"549\":1,\"551\":1,\"552\":1,\"558\":1,\"993\":1,\"1044\":1}}],[\"cpu\",{\"0\":{\"9\":1},\"1\":{\"0\":1,\"9\":1,\"15\":2,\"26\":2,\"201\":1,\"202\":1,\"549\":1,\"550\":1,\"553\":1,\"554\":1,\"555\":1,\"558\":1,\"865\":1,\"993\":2,\"1044\":2,\"1260\":3,\"1267\":4,\"1634\":1}}],[\"9♠\",{\"1\":{\"1652\":1,\"1662\":1}}],[\"9223372036854775807\",{\"1\":{\"1634\":1}}],[\"9223372036854775808\",{\"1\":{\"1634\":1}}],[\"90\",{\"1\":{\"1258\":1,\"1262\":1,\"1264\":1,\"1265\":1}}],[\"9a\",{\"1\":{\"1021\":1,\"1285\":1}}],[\"91\",{\"1\":{\"1701\":74,\"1702\":2}}],[\"915710\",{\"1\":{\"865\":1}}],[\"915961\",{\"1\":{\"865\":1}}],[\"916184\",{\"1\":{\"865\":1}}],[\"999\",{\"1\":{\"742\":1,\"1153\":1}}],[\"9999\",{\"1\":{\"742\":1}}],[\"99\",{\"1\":{\"653\":1,\"1154\":1}}],[\"97\",{\"1\":{\"347\":1}}],[\"96\",{\"1\":{\"347\":1}}],[\"9\",{\"0\":{\"8\":1,\"75\":1,\"119\":1,\"199\":1},\"1\":{\"0\":1,\"8\":3,\"172\":1,\"188\":1,\"189\":1,\"198\":1,\"208\":1,\"347\":3,\"367\":1,\"371\":2,\"389\":1,\"462\":1,\"474\":1,\"534\":1,\"546\":1,\"593\":1,\"717\":1,\"751\":1,\"754\":1,\"765\":1,\"865\":5,\"873\":1,\"904\":1,\"1043\":4,\"1107\":2,\"1115\":1,\"1153\":1,\"1154\":2,\"1267\":1,\"1270\":1,\"1343\":1,\"1372\":1,\"1401\":3,\"1404\":1,\"1428\":4,\"1432\":1,\"1434\":1,\"1449\":2,\"1701\":3,\"1805\":1}}],[\"dc\",{\"1\":{\"1691\":2}}],[\"dt\",{\"1\":{\"1021\":3}}],[\"db\",{\"1\":{\"979\":1}}],[\"dd\",{\"1\":{\"447\":1,\"1421\":3}}],[\"dumb\",{\"1\":{\"1746\":1}}],[\"dump\",{\"1\":{\"1176\":1,\"1178\":1}}],[\"dumps\",{\"1\":{\"1173\":1,\"1179\":1}}],[\"duplicate\",{\"1\":{\"1278\":2,\"1451\":1,\"1701\":1}}],[\"duplicating\",{\"1\":{\"432\":1}}],[\"duplications\",{\"0\":{\"545\":2},\"1\":{\"539\":1,\"541\":2,\"545\":1}}],[\"duplication\",{\"1\":{\"103\":1}}],[\"duration\",{\"1\":{\"437\":1,\"1392\":1,\"1397\":1}}],[\"during\",{\"1\":{\"115\":1,\"1746\":1}}],[\"due\",{\"1\":{\"90\":1,\"99\":2,\"119\":1,\"121\":1,\"142\":1,\"147\":1,\"202\":2,\"217\":1,\"228\":2,\"229\":1,\"474\":1,\"605\":1,\"643\":1,\"682\":1,\"717\":1,\"741\":1,\"743\":1,\"756\":1,\"828\":1,\"905\":1,\"915\":1,\"929\":1,\"1161\":1,\"1204\":1,\"1641\":1,\"1712\":1,\"1737\":1}}],[\"dynamicdesc\",{\"0\":{\"439\":1},\"1\":{\"89\":1,\"90\":1,\"142\":1,\"167\":1,\"431\":1,\"437\":1,\"440\":3,\"446\":1,\"448\":1,\"1280\":1}}],[\"dynamic\",{\"0\":{\"438\":1,\"526\":1,\"527\":1,\"528\":1,\"1280\":1},\"1\":{\"89\":1,\"90\":1,\"108\":1,\"111\":3,\"117\":1,\"119\":1,\"128\":1,\"142\":1,\"167\":1,\"174\":1,\"181\":1,\"431\":1,\"436\":1,\"437\":3,\"438\":1,\"439\":2,\"440\":5,\"446\":1,\"448\":1,\"523\":2,\"526\":2,\"679\":1,\"743\":6,\"756\":6,\"825\":1,\"865\":1,\"912\":1,\"924\":1,\"1022\":7,\"1161\":1,\"1201\":1,\"1487\":4,\"1615\":2,\"1641\":6,\"1781\":1}}],[\"dynamically\",{\"1\":{\"41\":1,\"59\":1,\"113\":1,\"1280\":1,\"1775\":1}}],[\"d\",{\"0\":{\"545\":1},\"1\":{\"40\":1,\"47\":1,\"162\":1,\"181\":1,\"347\":1,\"387\":1,\"398\":2,\"440\":1,\"541\":1,\"605\":1,\"626\":1,\"695\":2,\"881\":1,\"905\":1,\"927\":1,\"1158\":1,\"1227\":1,\"1421\":1,\"1434\":1,\"1461\":1,\"1505\":1,\"1592\":1,\"1717\":1,\"1752\":1,\"1753\":1,\"1805\":2}}],[\"drifting\",{\"1\":{\"1701\":1}}],[\"drive\",{\"1\":{\"1153\":1}}],[\"drives\",{\"1\":{\"95\":1}}],[\"driven\",{\"1\":{\"15\":1,\"26\":1,\"52\":1,\"116\":1,\"142\":1,\"169\":1,\"183\":1,\"530\":1,\"642\":1,\"713\":1,\"1171\":1,\"1182\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1782\":1}}],[\"dropped\",{\"1\":{\"93\":1,\"121\":1,\"180\":1,\"1154\":1}}],[\"dragonfly\",{\"1\":{\"192\":1}}],[\"dragonflybsd\",{\"0\":{\"7\":1,\"192\":1},\"1\":{\"0\":1,\"188\":1}}],[\"drawback\",{\"1\":{\"182\":1,\"591\":1,\"1747\":1}}],[\"drawbacks\",{\"1\":{\"39\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"dramatically\",{\"1\":{\"113\":1}}],[\"dark\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"darwin\",{\"0\":{\"2\":1,\"190\":1},\"1\":{\"0\":1,\"95\":1,\"162\":1,\"188\":1,\"190\":2,\"201\":1,\"1043\":2}}],[\"daemonize\",{\"1\":{\"471\":1}}],[\"dangerous\",{\"1\":{\"440\":2}}],[\"damage\",{\"1\":{\"238\":1}}],[\"day\",{\"1\":{\"40\":1,\"41\":2,\"244\":2,\"439\":5,\"750\":1,\"1131\":1,\"1132\":2,\"1133\":1,\"1147\":1,\"1400\":1}}],[\"days\",{\"1\":{\"37\":2,\"46\":1,\"371\":1,\"437\":1,\"1131\":3,\"1400\":5,\"1416\":2}}],[\"dateformat\",{\"1\":{\"1421\":1}}],[\"datetype\",{\"1\":{\"560\":1}}],[\"datetime\",{\"0\":{\"559\":1},\"1\":{\"15\":1,\"26\":1,\"108\":2,\"110\":1,\"560\":1,\"561\":2,\"562\":3,\"565\":1,\"847\":3,\"1175\":2,\"1421\":2,\"1422\":1,\"1450\":1,\"1710\":2}}],[\"dates\",{\"1\":{\"108\":1,\"371\":1,\"377\":1,\"468\":1,\"1411\":1,\"1450\":1,\"1535\":1,\"1691\":1}}],[\"date\",{\"0\":{\"565\":1,\"568\":1,\"1411\":1,\"1416\":1,\"1421\":1},\"1\":{\"15\":2,\"26\":2,\"108\":4,\"110\":2,\"377\":1,\"559\":2,\"560\":2,\"561\":3,\"562\":1,\"563\":4,\"567\":1,\"1412\":1,\"1416\":2,\"1417\":1,\"1421\":1,\"1422\":2,\"1450\":3,\"1535\":1,\"1728\":1}}],[\"datadetectors\",{\"1\":{\"1484\":1}}],[\"datasets\",{\"1\":{\"1488\":1}}],[\"dataset\",{\"1\":{\"762\":1}}],[\"datatype\",{\"0\":{\"521\":1,\"1257\":1},\"1\":{\"260\":1,\"303\":1,\"326\":5,\"333\":5,\"352\":1,\"353\":2,\"354\":5,\"359\":1,\"360\":2,\"361\":7,\"526\":1,\"575\":1,\"819\":3,\"1121\":1,\"1123\":1,\"1125\":1,\"1195\":3,\"1258\":2,\"1259\":1,\"1260\":3,\"1268\":1,\"1309\":1}}],[\"database\",{\"1\":{\"90\":1,\"113\":1,\"978\":1,\"1482\":1,\"1610\":1,\"1691\":1,\"1731\":2}}],[\"data\",{\"0\":{\"28\":1,\"403\":1,\"755\":1,\"782\":1,\"1400\":1,\"1600\":1,\"1604\":1,\"1608\":1,\"1613\":1,\"1619\":1,\"1623\":1,\"1627\":1,\"1633\":1,\"1637\":1,\"1646\":1,\"1651\":1,\"1658\":1,\"1661\":1,\"1671\":1,\"1676\":1,\"1681\":1,\"1685\":1,\"1689\":1,\"1695\":1},\"1\":{\"15\":17,\"21\":1,\"26\":17,\"30\":13,\"33\":1,\"36\":1,\"37\":2,\"41\":1,\"43\":2,\"44\":2,\"50\":2,\"54\":1,\"58\":1,\"61\":1,\"62\":1,\"63\":2,\"70\":2,\"86\":1,\"87\":1,\"90\":1,\"92\":2,\"93\":1,\"94\":1,\"99\":3,\"100\":1,\"103\":3,\"105\":1,\"108\":1,\"110\":1,\"111\":2,\"112\":1,\"113\":5,\"117\":3,\"120\":1,\"121\":6,\"122\":4,\"123\":1,\"125\":2,\"127\":2,\"128\":1,\"134\":1,\"142\":1,\"154\":1,\"164\":2,\"214\":1,\"218\":1,\"224\":1,\"227\":2,\"231\":1,\"232\":1,\"234\":1,\"235\":2,\"236\":2,\"259\":1,\"260\":3,\"261\":2,\"262\":1,\"263\":2,\"265\":13,\"266\":1,\"267\":3,\"270\":1,\"272\":7,\"273\":2,\"274\":4,\"277\":1,\"278\":1,\"279\":7,\"280\":1,\"281\":2,\"282\":1,\"286\":6,\"287\":1,\"288\":3,\"292\":1,\"293\":6,\"294\":1,\"295\":2,\"296\":1,\"300\":6,\"302\":1,\"303\":2,\"304\":6,\"306\":2,\"307\":1,\"308\":3,\"312\":1,\"313\":6,\"314\":1,\"315\":1,\"318\":1,\"319\":2,\"320\":8,\"322\":2,\"323\":1,\"326\":1,\"327\":2,\"328\":6,\"329\":2,\"330\":1,\"333\":1,\"334\":3,\"335\":8,\"336\":1,\"337\":3,\"340\":1,\"341\":2,\"342\":7,\"344\":3,\"347\":3,\"348\":1,\"349\":8,\"350\":1,\"352\":1,\"353\":2,\"354\":3,\"355\":2,\"356\":1,\"357\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"363\":1,\"369\":5,\"372\":1,\"376\":1,\"378\":2,\"383\":4,\"393\":1,\"394\":1,\"395\":1,\"397\":6,\"400\":1,\"403\":3,\"404\":5,\"413\":1,\"414\":1,\"417\":1,\"419\":4,\"423\":2,\"431\":1,\"438\":1,\"439\":1,\"440\":1,\"457\":1,\"483\":3,\"489\":1,\"490\":1,\"491\":1,\"492\":1,\"494\":1,\"495\":3,\"520\":1,\"521\":1,\"526\":1,\"530\":2,\"536\":1,\"544\":1,\"548\":7,\"569\":1,\"579\":1,\"593\":2,\"596\":5,\"597\":1,\"599\":1,\"605\":1,\"607\":1,\"616\":3,\"618\":3,\"620\":2,\"631\":2,\"635\":1,\"637\":2,\"641\":1,\"651\":1,\"677\":2,\"681\":1,\"743\":6,\"744\":1,\"745\":1,\"747\":2,\"755\":15,\"756\":6,\"757\":1,\"758\":6,\"759\":1,\"760\":1,\"764\":1,\"767\":2,\"768\":3,\"769\":1,\"771\":2,\"774\":2,\"779\":2,\"780\":4,\"782\":3,\"787\":1,\"794\":1,\"798\":1,\"799\":2,\"801\":3,\"802\":1,\"809\":1,\"810\":1,\"811\":1,\"814\":1,\"819\":4,\"823\":2,\"827\":1,\"865\":4,\"871\":1,\"877\":2,\"884\":5,\"889\":1,\"891\":2,\"897\":1,\"898\":5,\"905\":1,\"907\":1,\"910\":2,\"914\":1,\"936\":1,\"940\":4,\"945\":3,\"947\":5,\"948\":1,\"949\":1,\"953\":3,\"955\":1,\"956\":3,\"960\":4,\"962\":2,\"967\":5,\"975\":2,\"999\":4,\"1009\":1,\"1016\":1,\"1021\":2,\"1022\":7,\"1024\":1,\"1026\":1,\"1027\":4,\"1049\":1,\"1052\":3,\"1058\":4,\"1070\":1,\"1075\":1,\"1077\":2,\"1078\":1,\"1079\":1,\"1082\":1,\"1084\":3,\"1089\":3,\"1098\":1,\"1099\":1,\"1103\":1,\"1105\":1,\"1106\":1,\"1111\":2,\"1112\":1,\"1113\":1,\"1118\":3,\"1120\":1,\"1121\":1,\"1123\":3,\"1125\":1,\"1126\":2,\"1128\":1,\"1135\":3,\"1137\":5,\"1148\":1,\"1150\":2,\"1175\":1,\"1176\":10,\"1182\":4,\"1189\":1,\"1195\":3,\"1199\":2,\"1203\":1,\"1218\":1,\"1219\":4,\"1224\":1,\"1228\":1,\"1233\":1,\"1235\":2,\"1257\":2,\"1259\":1,\"1260\":2,\"1261\":2,\"1262\":6,\"1267\":2,\"1268\":8,\"1269\":1,\"1271\":4,\"1274\":1,\"1276\":1,\"1281\":3,\"1302\":1,\"1303\":1,\"1304\":1,\"1307\":3,\"1309\":1,\"1310\":2,\"1313\":4,\"1336\":1,\"1345\":1,\"1400\":4,\"1408\":1,\"1410\":2,\"1413\":1,\"1422\":2,\"1425\":1,\"1430\":2,\"1433\":1,\"1438\":2,\"1441\":1,\"1448\":1,\"1450\":2,\"1479\":1,\"1480\":2,\"1482\":3,\"1487\":4,\"1488\":1,\"1536\":1,\"1547\":1,\"1578\":1,\"1580\":2,\"1591\":1,\"1600\":1,\"1601\":7,\"1602\":2,\"1610\":2,\"1611\":2,\"1612\":7,\"1614\":1,\"1615\":2,\"1618\":3,\"1620\":2,\"1624\":1,\"1626\":3,\"1629\":4,\"1631\":1,\"1632\":8,\"1634\":1,\"1636\":3,\"1638\":2,\"1641\":6,\"1642\":1,\"1644\":1,\"1645\":13,\"1654\":3,\"1656\":1,\"1657\":8,\"1659\":1,\"1666\":1,\"1667\":1,\"1669\":1,\"1670\":8,\"1672\":1,\"1675\":3,\"1677\":1,\"1679\":3,\"1681\":1,\"1682\":1,\"1686\":1,\"1688\":3,\"1691\":1,\"1694\":8,\"1699\":11,\"1705\":1,\"1708\":1,\"1712\":1,\"1716\":1,\"1719\":3,\"1727\":1,\"1737\":1,\"1747\":2,\"1755\":1,\"1772\":1,\"1774\":1,\"1784\":1,\"1789\":2,\"1794\":2}}],[\"degrees\",{\"1\":{\"1258\":1,\"1262\":1,\"1264\":1,\"1265\":1}}],[\"derived\",{\"1\":{\"851\":1,\"962\":1,\"1611\":2}}],[\"denotes\",{\"1\":{\"1401\":1,\"1432\":1,\"1773\":2}}],[\"denote\",{\"1\":{\"743\":1,\"756\":1,\"1505\":1,\"1542\":1,\"1592\":1,\"1641\":1}}],[\"denoting\",{\"1\":{\"121\":1}}],[\"dedicated\",{\"1\":{\"215\":1,\"284\":1,\"298\":1}}],[\"dedup\",{\"1\":{\"129\":1}}],[\"deallocator\",{\"1\":{\"675\":1}}],[\"deallocation\",{\"0\":{\"675\":1,\"822\":1,\"1198\":1},\"1\":{\"675\":1}}],[\"deallocates\",{\"1\":{\"671\":1,\"818\":1,\"1194\":1}}],[\"dealing\",{\"1\":{\"38\":1,\"56\":1}}],[\"deadlock\",{\"1\":{\"121\":1,\"163\":1}}],[\"de\",{\"1\":{\"103\":1,\"1753\":1}}],[\"demo\",{\"1\":{\"1716\":1}}],[\"demonstrate\",{\"1\":{\"1513\":1,\"1579\":1}}],[\"demonstrated\",{\"1\":{\"48\":1,\"121\":1,\"859\":1,\"868\":1}}],[\"demand\",{\"1\":{\"129\":1,\"605\":1,\"905\":1,\"1161\":1}}],[\"demands\",{\"1\":{\"53\":1}}],[\"dec18\",{\"1\":{\"865\":1}}],[\"declaring\",{\"1\":{\"780\":1}}],[\"declaration\",{\"1\":{\"779\":1,\"781\":1}}],[\"declares\",{\"1\":{\"1096\":1}}],[\"declare\",{\"1\":{\"741\":1,\"779\":1,\"781\":1}}],[\"declared\",{\"1\":{\"391\":2,\"710\":2,\"785\":2,\"1097\":2,\"1756\":1,\"1780\":1}}],[\"dec\",{\"1\":{\"544\":1,\"1401\":1,\"1403\":1,\"1412\":3,\"1414\":17,\"1432\":1,\"1440\":1,\"1449\":1}}],[\"decision\",{\"1\":{\"1372\":1,\"1403\":1,\"1448\":1}}],[\"decimals\",{\"1\":{\"1424\":1}}],[\"decimal\",{\"0\":{\"1153\":1,\"1423\":1,\"1431\":1},\"1\":{\"377\":4,\"1153\":4,\"1158\":2,\"1401\":1,\"1410\":4,\"1423\":1,\"1428\":1,\"1430\":2,\"1431\":1,\"1432\":1,\"1436\":1,\"1438\":2,\"1535\":4,\"1634\":1}}],[\"decided\",{\"1\":{\"47\":1,\"182\":1}}],[\"december\",{\"1\":{\"59\":4,\"1081\":2,\"1115\":7,\"1403\":1,\"1416\":9,\"1440\":1,\"1449\":1}}],[\"decades\",{\"1\":{\"47\":1}}],[\"decode\",{\"1\":{\"16\":1,\"27\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1460\":1,\"1469\":1,\"1474\":1}}],[\"decodes\",{\"1\":{\"15\":2,\"26\":2,\"624\":2,\"629\":2,\"630\":1,\"635\":1,\"636\":1,\"641\":1,\"1463\":2,\"1469\":2,\"1474\":2}}],[\"decompressing\",{\"1\":{\"1465\":1,\"1471\":1}}],[\"decompress\",{\"1\":{\"16\":2,\"27\":2,\"1456\":2,\"1463\":2,\"1464\":1,\"1469\":1,\"1470\":1,\"1474\":1}}],[\"decoupled\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"decouple\",{\"1\":{\"3\":1}}],[\"desired\",{\"1\":{\"1513\":1}}],[\"designed\",{\"1\":{\"46\":2,\"211\":1,\"380\":2,\"440\":1,\"497\":1,\"795\":1,\"956\":1,\"1188\":1,\"1190\":1,\"1280\":1,\"1600\":1,\"1631\":1,\"1672\":1,\"1716\":1}}],[\"design\",{\"1\":{\"39\":1,\"57\":1,\"119\":1,\"182\":2,\"387\":1,\"737\":1,\"1600\":1}}],[\"destroys\",{\"1\":{\"1026\":1,\"1054\":1}}],[\"destroy\",{\"1\":{\"643\":1,\"645\":1,\"1055\":1}}],[\"destination\",{\"1\":{\"261\":1}}],[\"despite\",{\"1\":{\"153\":1,\"677\":1,\"823\":1,\"910\":1,\"1199\":1,\"1600\":1,\"1780\":1}}],[\"desperately\",{\"1\":{\"113\":1}}],[\"descriptor\",{\"1\":{\"1564\":1}}],[\"description\",{\"0\":{\"259\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"302\":1,\"308\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"344\":1,\"351\":1,\"358\":1,\"365\":1,\"371\":1,\"380\":1,\"385\":1,\"395\":1,\"406\":1,\"414\":1,\"421\":1,\"426\":1,\"459\":1,\"465\":1,\"471\":1,\"477\":1,\"485\":1,\"491\":1,\"497\":1,\"504\":1,\"511\":1,\"522\":1,\"532\":1,\"538\":1,\"550\":1,\"555\":1,\"560\":1,\"571\":1,\"579\":1,\"586\":1,\"591\":1,\"601\":1,\"613\":1,\"620\":1,\"626\":1,\"631\":1,\"637\":1,\"643\":1,\"653\":1,\"661\":1,\"666\":1,\"671\":1,\"687\":1,\"692\":1,\"699\":1,\"705\":1,\"715\":1,\"720\":1,\"725\":1,\"730\":1,\"737\":1,\"747\":1,\"760\":1,\"768\":1,\"773\":1,\"784\":1,\"789\":1,\"799\":1,\"804\":1,\"811\":1,\"818\":1,\"833\":1,\"839\":1,\"845\":1,\"851\":1,\"863\":1,\"873\":1,\"879\":1,\"886\":1,\"894\":1,\"900\":1,\"919\":1,\"924\":1,\"932\":1,\"937\":1,\"942\":1,\"949\":1,\"956\":1,\"962\":1,\"969\":1,\"977\":1,\"984\":1,\"989\":1,\"995\":1,\"1004\":1,\"1010\":1,\"1016\":1,\"1026\":1,\"1033\":1,\"1041\":1,\"1046\":1,\"1054\":1,\"1063\":1,\"1072\":1,\"1079\":1,\"1086\":1,\"1091\":1,\"1100\":1,\"1105\":1,\"1113\":1,\"1120\":1,\"1128\":1,\"1139\":1,\"1145\":1,\"1152\":1,\"1161\":1,\"1173\":1,\"1184\":1,\"1194\":1,\"1209\":1,\"1215\":1,\"1224\":1,\"1230\":1,\"1237\":1,\"1243\":1,\"1258\":1,\"1265\":1,\"1270\":1,\"1276\":1,\"1283\":1,\"1291\":1,\"1297\":1,\"1303\":1,\"1309\":1,\"1315\":1,\"1321\":1,\"1327\":1,\"1333\":1,\"1339\":1,\"1347\":1,\"1362\":1,\"1375\":1,\"1390\":1,\"1407\":1,\"1412\":1,\"1424\":1,\"1432\":1,\"1440\":1,\"1458\":1,\"1465\":1,\"1471\":1,\"1476\":1,\"1482\":1,\"1493\":1,\"1504\":1,\"1509\":1,\"1520\":1,\"1538\":1,\"1542\":1,\"1549\":1,\"1554\":1,\"1559\":1,\"1564\":1,\"1570\":1,\"1574\":1,\"1578\":1,\"1582\":1,\"1586\":1,\"1591\":1,\"1596\":1,\"1605\":1,\"1609\":1,\"1614\":1,\"1620\":1,\"1624\":1,\"1628\":1,\"1634\":1,\"1638\":1,\"1647\":1,\"1659\":1,\"1672\":1,\"1677\":1,\"1682\":1,\"1686\":1,\"1690\":1,\"1696\":1},\"1\":{\"181\":1,\"354\":1,\"361\":1,\"397\":3,\"439\":3,\"446\":2,\"522\":1,\"526\":1,\"593\":1,\"743\":6,\"756\":6,\"774\":3,\"779\":2,\"780\":1,\"865\":4,\"972\":1,\"1022\":7,\"1238\":1,\"1487\":4,\"1601\":2,\"1615\":2,\"1628\":1,\"1641\":6,\"1647\":1,\"1659\":1,\"1772\":1,\"1797\":2}}],[\"descriptions\",{\"1\":{\"143\":1,\"178\":1,\"181\":1,\"454\":2,\"732\":1,\"784\":1,\"924\":1,\"925\":2,\"926\":1,\"927\":2}}],[\"descriptive\",{\"1\":{\"42\":1}}],[\"describe\",{\"1\":{\"89\":1,\"214\":1,\"261\":1,\"304\":1,\"1760\":1}}],[\"describes\",{\"1\":{\"42\":1,\"51\":1,\"1424\":1,\"1667\":1,\"1741\":1}}],[\"described\",{\"1\":{\"41\":1,\"474\":1,\"727\":1,\"927\":1,\"979\":1,\"1664\":1,\"1667\":1,\"1712\":1,\"1731\":1,\"1737\":1,\"1742\":1}}],[\"deeper\",{\"1\":{\"40\":1}}],[\"deep\",{\"1\":{\"40\":1,\"1513\":1}}],[\"del\",{\"1\":{\"1701\":1}}],[\"delta\",{\"1\":{\"1691\":1}}],[\"deloise\",{\"1\":{\"1651\":1,\"1652\":1,\"1661\":1,\"1662\":1}}],[\"deleting\",{\"1\":{\"1056\":1}}],[\"deleted\",{\"1\":{\"920\":1,\"921\":1,\"1366\":1,\"1741\":1}}],[\"delete\",{\"1\":{\"390\":1,\"442\":3,\"443\":4,\"444\":2,\"778\":1,\"920\":1,\"1056\":1,\"1701\":1,\"1805\":4}}],[\"deletes\",{\"1\":{\"238\":1}}],[\"delayed\",{\"1\":{\"129\":1,\"174\":1,\"178\":1}}],[\"delimiters\",{\"1\":{\"1647\":2,\"1664\":2}}],[\"delimiter\",{\"1\":{\"1614\":1,\"1615\":1}}],[\"delimited\",{\"0\":{\"39\":1,\"57\":1},\"1\":{\"28\":1,\"33\":1,\"36\":2,\"37\":1,\"40\":1,\"54\":1,\"60\":1,\"92\":1,\"735\":1,\"942\":1,\"1218\":1,\"1278\":1,\"1366\":1,\"1491\":1,\"1505\":1,\"1520\":1,\"1538\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1657\":1,\"1670\":1}}],[\"delimitated\",{\"1\":{\"1487\":1}}],[\"delimitations\",{\"1\":{\"40\":1}}],[\"delve\",{\"1\":{\"40\":1}}],[\"delving\",{\"1\":{\"40\":1}}],[\"detect\",{\"1\":{\"1016\":1}}],[\"detectable\",{\"1\":{\"433\":1}}],[\"detected\",{\"1\":{\"15\":1,\"26\":1,\"553\":1,\"558\":1,\"993\":1,\"1040\":1,\"1041\":1,\"1644\":1}}],[\"determined\",{\"1\":{\"1324\":1,\"1330\":1,\"1770\":1}}],[\"determine\",{\"1\":{\"182\":1,\"468\":1,\"1021\":1,\"1708\":1}}],[\"detail\",{\"0\":{\"270\":1,\"277\":1,\"284\":1,\"291\":1,\"298\":1,\"312\":1,\"317\":1,\"325\":1,\"332\":1,\"339\":1,\"346\":1,\"354\":1,\"361\":1,\"368\":1,\"374\":1,\"388\":1,\"401\":1,\"409\":1,\"417\":1,\"429\":1,\"462\":1,\"468\":1,\"474\":1,\"480\":1,\"488\":1,\"494\":1,\"500\":1,\"507\":1,\"514\":1,\"535\":1,\"542\":1,\"564\":1,\"576\":1,\"582\":1,\"594\":1,\"604\":1,\"616\":1,\"646\":1,\"656\":1,\"674\":1,\"696\":1,\"709\":1,\"717\":1,\"722\":1,\"727\":1,\"733\":1,\"740\":1,\"753\":1,\"764\":1,\"776\":1,\"792\":1,\"807\":1,\"814\":1,\"821\":1,\"848\":1,\"859\":1,\"866\":1,\"876\":1,\"882\":1,\"889\":1,\"897\":1,\"903\":1,\"928\":1,\"945\":1,\"952\":1,\"965\":1,\"973\":1,\"980\":1,\"986\":1,\"992\":1,\"998\":1,\"1013\":1,\"1019\":1,\"1028\":1,\"1036\":1,\"1049\":1,\"1057\":1,\"1066\":1,\"1075\":1,\"1082\":1,\"1094\":1,\"1109\":1,\"1124\":1,\"1135\":1,\"1142\":1,\"1148\":1,\"1164\":1,\"1177\":1,\"1187\":1,\"1197\":1,\"1218\":1,\"1233\":1,\"1246\":1,\"1261\":1,\"1273\":1,\"1279\":1,\"1286\":1,\"1294\":1,\"1300\":1,\"1306\":1,\"1312\":1,\"1324\":1,\"1330\":1,\"1342\":1,\"1351\":1,\"1370\":1,\"1379\":1,\"1394\":1,\"1415\":1,\"1427\":1,\"1435\":1,\"1443\":1,\"1461\":1,\"1467\":1,\"1479\":1,\"1485\":1,\"1496\":1,\"1506\":1,\"1514\":1,\"1535\":1,\"1543\":1,\"1551\":1,\"1556\":1,\"1561\":1,\"1566\":1,\"1588\":1,\"1593\":1,\"1598\":1,\"1610\":1,\"1615\":1,\"1640\":1,\"1653\":1,\"1663\":1,\"1746\":1},\"1\":{\"924\":1,\"1516\":1,\"1559\":1,\"1600\":1,\"1728\":1}}],[\"detailing\",{\"1\":{\"215\":1}}],[\"details\",{\"1\":{\"82\":1,\"83\":1,\"88\":1,\"97\":1,\"219\":1,\"260\":1,\"303\":1,\"354\":1,\"361\":1,\"377\":1,\"526\":1,\"808\":1,\"815\":1,\"995\":1,\"1069\":1,\"1491\":1,\"1535\":1,\"1602\":1,\"1706\":1,\"1722\":1}}],[\"detailed\",{\"1\":{\"23\":1,\"876\":1,\"1273\":1,\"1360\":1,\"1407\":1,\"1412\":1,\"1424\":1,\"1432\":1,\"1440\":1,\"1740\":1,\"1774\":1}}],[\"defer\",{\"1\":{\"347\":1,\"1300\":1}}],[\"deferred\",{\"1\":{\"90\":1}}],[\"defaulted\",{\"1\":{\"732\":1,\"783\":1,\"1020\":1,\"1260\":1}}],[\"defaulting\",{\"1\":{\"566\":1,\"1139\":1}}],[\"defaults\",{\"0\":{\"443\":1,\"444\":1},\"1\":{\"90\":1,\"108\":1,\"162\":1,\"163\":1,\"208\":1,\"431\":2,\"780\":1,\"808\":1,\"815\":1,\"819\":1,\"1069\":1,\"1195\":1,\"1227\":1,\"1706\":1}}],[\"default\",{\"0\":{\"524\":1,\"783\":1,\"1250\":1,\"1253\":1,\"1486\":1,\"1616\":1,\"1630\":1,\"1643\":1,\"1655\":1,\"1668\":1,\"1692\":1,\"1697\":1,\"1753\":1,\"1791\":1},\"1\":{\"23\":1,\"27\":2,\"38\":1,\"56\":1,\"77\":1,\"86\":3,\"90\":1,\"95\":1,\"103\":1,\"108\":1,\"111\":2,\"113\":2,\"115\":6,\"117\":3,\"119\":1,\"121\":5,\"123\":1,\"129\":2,\"162\":2,\"209\":2,\"224\":1,\"229\":1,\"247\":1,\"269\":1,\"276\":1,\"286\":1,\"300\":1,\"318\":8,\"326\":2,\"333\":11,\"340\":7,\"347\":4,\"397\":3,\"431\":2,\"437\":1,\"443\":2,\"444\":1,\"448\":1,\"452\":1,\"453\":2,\"459\":1,\"462\":1,\"512\":2,\"518\":1,\"520\":2,\"524\":1,\"526\":6,\"528\":1,\"541\":1,\"543\":1,\"656\":1,\"661\":1,\"677\":1,\"692\":1,\"701\":1,\"732\":1,\"733\":1,\"743\":6,\"747\":1,\"756\":6,\"760\":1,\"774\":3,\"779\":3,\"780\":1,\"782\":1,\"783\":2,\"808\":1,\"815\":1,\"823\":1,\"865\":1,\"869\":1,\"910\":1,\"924\":1,\"984\":1,\"1016\":1,\"1021\":1,\"1022\":9,\"1023\":1,\"1069\":1,\"1115\":1,\"1121\":2,\"1122\":1,\"1123\":4,\"1199\":1,\"1237\":1,\"1244\":1,\"1245\":2,\"1253\":3,\"1254\":1,\"1267\":2,\"1276\":1,\"1278\":1,\"1317\":1,\"1487\":4,\"1615\":2,\"1624\":1,\"1634\":1,\"1641\":6,\"1677\":1,\"1704\":1,\"1706\":3,\"1724\":1,\"1725\":2,\"1726\":1,\"1748\":1,\"1753\":2,\"1771\":1,\"1772\":1,\"1783\":1,\"1784\":1,\"1786\":1,\"1788\":2,\"1791\":1,\"1798\":2}}],[\"definable\",{\"1\":{\"390\":1,\"511\":1,\"751\":1,\"778\":1}}],[\"defining\",{\"1\":{\"115\":1,\"261\":1,\"304\":1,\"643\":1,\"1226\":1,\"1353\":1,\"1364\":1,\"1382\":1,\"1383\":1,\"1396\":1,\"1520\":1,\"1538\":1,\"1719\":1,\"1766\":1}}],[\"definition\",{\"1\":{\"234\":1,\"432\":1,\"437\":1,\"447\":1}}],[\"definitions\",{\"0\":{\"1601\":1},\"1\":{\"15\":1,\"26\":1,\"42\":1,\"94\":1,\"96\":1,\"112\":1,\"113\":1,\"114\":1,\"117\":1,\"118\":1,\"120\":1,\"169\":1,\"183\":1,\"425\":1,\"432\":1,\"447\":1,\"713\":1,\"954\":1,\"1171\":1,\"1182\":1,\"1213\":1,\"1281\":1,\"1337\":1,\"1675\":1,\"1727\":1,\"1782\":1}}],[\"definitely\",{\"1\":{\"50\":1}}],[\"definemethod\",{\"1\":{\"1300\":1}}],[\"defines\",{\"1\":{\"15\":1,\"26\":1,\"385\":1,\"457\":1,\"523\":1,\"563\":1,\"671\":1,\"773\":1,\"818\":1,\"930\":1,\"935\":1,\"949\":1,\"1091\":1,\"1194\":1,\"1236\":1,\"1706\":1,\"1753\":3}}],[\"defined\",{\"1\":{\"15\":3,\"26\":3,\"78\":1,\"103\":1,\"108\":1,\"110\":1,\"113\":2,\"183\":1,\"224\":1,\"225\":1,\"227\":1,\"378\":1,\"391\":4,\"395\":1,\"423\":1,\"434\":1,\"445\":1,\"447\":1,\"452\":1,\"453\":2,\"511\":1,\"519\":1,\"526\":1,\"548\":1,\"563\":1,\"565\":1,\"643\":2,\"675\":1,\"677\":2,\"679\":4,\"680\":1,\"681\":1,\"710\":4,\"754\":1,\"755\":2,\"765\":1,\"774\":1,\"785\":4,\"814\":1,\"823\":2,\"825\":4,\"826\":1,\"827\":1,\"877\":1,\"910\":2,\"912\":4,\"913\":1,\"914\":1,\"947\":1,\"967\":1,\"975\":1,\"979\":2,\"1022\":2,\"1052\":1,\"1097\":4,\"1113\":2,\"1123\":1,\"1126\":1,\"1137\":1,\"1151\":1,\"1176\":6,\"1179\":3,\"1180\":1,\"1199\":2,\"1201\":4,\"1202\":1,\"1203\":1,\"1226\":1,\"1269\":1,\"1270\":1,\"1308\":1,\"1343\":1,\"1375\":1,\"1397\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1479\":1,\"1493\":1,\"1536\":1,\"1708\":2,\"1719\":1,\"1725\":2,\"1753\":1,\"1773\":1,\"1781\":1,\"1791\":1}}],[\"define\",{\"1\":{\"15\":8,\"26\":8,\"87\":1,\"96\":2,\"105\":1,\"108\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":1,\"114\":1,\"116\":2,\"117\":1,\"118\":1,\"119\":1,\"120\":3,\"121\":1,\"122\":1,\"130\":1,\"164\":2,\"169\":1,\"183\":4,\"251\":1,\"252\":1,\"393\":6,\"404\":1,\"423\":1,\"426\":1,\"428\":1,\"431\":1,\"437\":1,\"439\":1,\"453\":1,\"457\":3,\"463\":1,\"489\":2,\"510\":1,\"512\":2,\"520\":1,\"526\":2,\"530\":1,\"536\":2,\"577\":1,\"599\":1,\"611\":4,\"651\":2,\"659\":1,\"669\":1,\"670\":1,\"677\":2,\"685\":2,\"690\":1,\"692\":1,\"713\":2,\"745\":1,\"766\":1,\"772\":1,\"774\":2,\"784\":1,\"787\":5,\"802\":2,\"809\":1,\"816\":1,\"817\":1,\"819\":4,\"823\":2,\"831\":2,\"849\":1,\"861\":1,\"871\":1,\"910\":2,\"917\":3,\"935\":1,\"948\":1,\"950\":1,\"951\":1,\"953\":1,\"954\":2,\"982\":3,\"984\":2,\"987\":1,\"1024\":1,\"1027\":1,\"1061\":1,\"1070\":1,\"1090\":1,\"1098\":5,\"1111\":1,\"1143\":2,\"1161\":1,\"1171\":2,\"1182\":8,\"1193\":1,\"1195\":4,\"1199\":2,\"1207\":2,\"1213\":3,\"1222\":1,\"1228\":1,\"1237\":2,\"1238\":1,\"1239\":1,\"1241\":1,\"1255\":1,\"1260\":1,\"1282\":1,\"1283\":1,\"1284\":4,\"1285\":1,\"1289\":1,\"1297\":1,\"1337\":3,\"1345\":2,\"1360\":2,\"1373\":1,\"1388\":1,\"1398\":1,\"1491\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1618\":1,\"1675\":1,\"1707\":2,\"1719\":1,\"1727\":2,\"1739\":2,\"1743\":1,\"1750\":1,\"1753\":1,\"1754\":1,\"1771\":4,\"1782\":4,\"1794\":2}}],[\"devices\",{\"1\":{\"695\":4}}],[\"device\",{\"1\":{\"579\":1}}],[\"develop\",{\"1\":{\"1725\":2}}],[\"development\",{\"1\":{\"103\":1,\"1276\":1,\"1746\":1}}],[\"developer\",{\"1\":{\"37\":1,\"47\":1,\"1509\":1}}],[\"developers\",{\"1\":{\"15\":1,\"26\":1,\"30\":1,\"47\":1,\"50\":1,\"52\":1,\"228\":2,\"264\":1,\"354\":1,\"361\":1,\"522\":1,\"736\":1,\"758\":1,\"766\":1,\"929\":1,\"1345\":1}}],[\"devopsbin\",{\"1\":{\"1710\":1}}],[\"devops\",{\"1\":{\"37\":1,\"1628\":1,\"1710\":2,\"1731\":1}}],[\"dev\",{\"1\":{\"15\":1,\"26\":1,\"232\":2,\"423\":1,\"567\":1,\"578\":1,\"579\":1,\"589\":1,\"664\":1,\"865\":1,\"1189\":1,\"1710\":4,\"1731\":1,\"1733\":1,\"1742\":1}}],[\"debugging\",{\"1\":{\"15\":1,\"26\":1,\"119\":1,\"142\":1,\"151\":1,\"181\":1,\"570\":1,\"573\":1,\"575\":1,\"576\":4,\"758\":1,\"802\":1,\"861\":1,\"1179\":1,\"1182\":1,\"1732\":1,\"1784\":1}}],[\"debug\",{\"0\":{\"570\":1,\"572\":1,\"573\":1,\"1180\":1},\"1\":{\"15\":2,\"26\":2,\"113\":1,\"121\":2,\"183\":1,\"571\":1,\"572\":1,\"574\":3,\"575\":6,\"576\":9,\"577\":1,\"669\":1,\"744\":1,\"755\":2,\"757\":1,\"758\":1,\"802\":1,\"859\":1,\"861\":2,\"1061\":1,\"1175\":1,\"1176\":2,\"1180\":1,\"1182\":2,\"1282\":1,\"1283\":1,\"1642\":1,\"1739\":1,\"1743\":1}}],[\"deployments\",{\"1\":{\"1628\":1,\"1690\":1,\"1696\":1}}],[\"depth\",{\"1\":{\"1225\":1,\"1226\":4,\"1227\":2}}],[\"deprecation\",{\"1\":{\"873\":1}}],[\"deprecating\",{\"1\":{\"121\":1}}],[\"deprecates\",{\"1\":{\"127\":1,\"142\":1}}],[\"deprecate\",{\"1\":{\"123\":1}}],[\"deprecated\",{\"0\":{\"1517\":1},\"1\":{\"15\":4,\"26\":4,\"28\":1,\"96\":1,\"111\":1,\"112\":1,\"116\":1,\"121\":2,\"151\":1,\"274\":1,\"393\":1,\"435\":1,\"457\":1,\"458\":1,\"459\":1,\"468\":1,\"530\":1,\"600\":1,\"601\":1,\"611\":1,\"685\":2,\"690\":2,\"695\":1,\"745\":1,\"787\":1,\"831\":2,\"899\":1,\"900\":1,\"917\":1,\"975\":1,\"1052\":1,\"1098\":1,\"1111\":1,\"1113\":1,\"1126\":1,\"1182\":1,\"1207\":2,\"1254\":1,\"1255\":1,\"1308\":1,\"1309\":1,\"1345\":1,\"1516\":1,\"1594\":1,\"1603\":1,\"1620\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1771\":1,\"1773\":1,\"1782\":1}}],[\"depend\",{\"1\":{\"440\":1}}],[\"dependant\",{\"1\":{\"436\":1}}],[\"depends\",{\"1\":{\"208\":1,\"1753\":1}}],[\"dependency\",{\"1\":{\"1654\":1,\"1784\":1}}],[\"dependencies\",{\"0\":{\"210\":1},\"1\":{\"91\":1,\"100\":1,\"119\":1,\"210\":1,\"1451\":1}}],[\"dependent\",{\"1\":{\"129\":1}}],[\"depending\",{\"1\":{\"15\":3,\"26\":3,\"54\":1,\"218\":1,\"405\":1,\"406\":1,\"412\":2,\"439\":1,\"489\":1,\"502\":1,\"536\":1,\"605\":1,\"611\":1,\"643\":1,\"703\":3,\"743\":1,\"745\":1,\"749\":1,\"756\":1,\"758\":1,\"850\":1,\"859\":1,\"861\":2,\"905\":1,\"917\":1,\"924\":1,\"1008\":3,\"1032\":1,\"1033\":1,\"1039\":2,\"1255\":3,\"1319\":3,\"1325\":1,\"1331\":1,\"1360\":1,\"1641\":1,\"1707\":2,\"1719\":1,\"1771\":1,\"1782\":1,\"1793\":1}}],[\"digits\",{\"1\":{\"1153\":1}}],[\"digests\",{\"1\":{\"426\":1}}],[\"dialog\",{\"1\":{\"1798\":1}}],[\"dial\",{\"1\":{\"1056\":1,\"1175\":4}}],[\"divide\",{\"1\":{\"904\":1}}],[\"dimensional\",{\"1\":{\"365\":1}}],[\"diminished\",{\"1\":{\"3\":1}}],[\"dictionary\",{\"0\":{\"1449\":1,\"1790\":1},\"1\":{\"377\":1,\"1422\":1,\"1439\":1,\"1449\":1,\"1535\":1,\"1536\":1,\"1540\":1,\"1790\":5,\"1793\":1}}],[\"dictionaries\",{\"1\":{\"60\":1,\"1772\":1,\"1793\":1}}],[\"dick\",{\"1\":{\"247\":1,\"744\":5,\"757\":5,\"762\":3,\"1093\":2,\"1245\":2,\"1642\":5}}],[\"difficult\",{\"1\":{\"53\":1,\"208\":1,\"1513\":1}}],[\"differing\",{\"1\":{\"607\":1,\"643\":1,\"907\":1}}],[\"difference\",{\"1\":{\"231\":1,\"446\":1,\"605\":1,\"905\":1,\"962\":1,\"965\":1,\"1773\":1}}],[\"differently\",{\"1\":{\"217\":1,\"218\":1,\"241\":1,\"518\":1,\"1601\":1,\"1708\":1}}],[\"different\",{\"0\":{\"1523\":1},\"1\":{\"3\":2,\"15\":1,\"23\":3,\"26\":1,\"33\":1,\"34\":1,\"36\":1,\"41\":1,\"43\":2,\"45\":1,\"53\":1,\"54\":3,\"87\":1,\"94\":2,\"96\":1,\"99\":2,\"103\":1,\"110\":1,\"120\":1,\"130\":1,\"153\":1,\"164\":1,\"202\":1,\"228\":1,\"231\":3,\"232\":1,\"246\":2,\"247\":2,\"337\":1,\"344\":1,\"377\":1,\"412\":1,\"463\":1,\"488\":1,\"489\":1,\"502\":2,\"526\":1,\"535\":1,\"536\":1,\"611\":1,\"643\":1,\"703\":1,\"742\":1,\"745\":1,\"755\":1,\"758\":1,\"850\":1,\"917\":1,\"953\":1,\"954\":1,\"982\":1,\"999\":2,\"1000\":1,\"1008\":1,\"1039\":1,\"1058\":2,\"1059\":1,\"1113\":1,\"1125\":1,\"1152\":1,\"1171\":1,\"1219\":2,\"1220\":1,\"1244\":1,\"1255\":1,\"1319\":1,\"1321\":1,\"1325\":2,\"1331\":2,\"1360\":1,\"1387\":2,\"1388\":1,\"1509\":1,\"1535\":1,\"1557\":1,\"1562\":1,\"1570\":1,\"1609\":1,\"1705\":1,\"1709\":1,\"1712\":1,\"1715\":1,\"1737\":1,\"1748\":1,\"1749\":1,\"1771\":1,\"1775\":1,\"1780\":2,\"1782\":1,\"1789\":1,\"1794\":2,\"1797\":1,\"1798\":1,\"1814\":1}}],[\"differ\",{\"1\":{\"103\":1,\"643\":1,\"760\":1,\"1403\":1,\"1448\":1,\"1509\":1,\"1719\":1,\"1741\":1,\"1793\":1}}],[\"differs\",{\"1\":{\"42\":1,\"121\":1,\"274\":1,\"387\":1,\"680\":1,\"826\":1,\"913\":1,\"1202\":1,\"1327\":1,\"1387\":1,\"1570\":1,\"1741\":1,\"1746\":1}}],[\"didn\",{\"1\":{\"47\":1,\"50\":2,\"147\":1}}],[\"did\",{\"1\":{\"40\":1,\"41\":1,\"50\":1,\"117\":1,\"347\":1,\"1403\":1,\"1448\":1}}],[\"die\",{\"0\":{\"585\":1},\"1\":{\"15\":1,\"26\":1,\"584\":1,\"587\":1,\"588\":1,\"664\":1}}],[\"direction\",{\"1\":{\"1155\":1}}],[\"directivename\",{\"1\":{\"431\":1,\"520\":1}}],[\"directive\",{\"1\":{\"113\":1,\"117\":2,\"119\":1,\"174\":2,\"433\":1,\"437\":1,\"441\":1,\"442\":1,\"447\":2,\"449\":1,\"453\":1,\"520\":2,\"526\":1,\"1209\":1}}],[\"directives\",{\"0\":{\"431\":1,\"520\":1},\"1\":{\"111\":1,\"431\":1,\"520\":1}}],[\"direct\",{\"1\":{\"1021\":2}}],[\"directories\",{\"0\":{\"1188\":1},\"1\":{\"111\":1,\"162\":1,\"238\":2,\"434\":1,\"449\":1,\"452\":1,\"692\":1,\"694\":2,\"695\":2,\"789\":1,\"1184\":1,\"1188\":1,\"1750\":1,\"1753\":1,\"1798\":1}}],[\"directory\",{\"1\":{\"15\":1,\"24\":1,\"26\":1,\"89\":1,\"91\":1,\"96\":1,\"100\":1,\"108\":1,\"119\":1,\"123\":3,\"181\":1,\"208\":3,\"238\":1,\"403\":1,\"503\":1,\"504\":1,\"506\":1,\"507\":3,\"508\":2,\"977\":1,\"979\":1,\"1188\":1,\"1261\":1,\"1300\":2,\"1368\":1,\"1369\":1,\"1502\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1683\":4,\"1729\":1,\"1751\":2,\"1752\":1,\"1753\":1}}],[\"directly\",{\"1\":{\"3\":1,\"46\":1,\"121\":1,\"391\":1,\"423\":1,\"596\":1,\"605\":2,\"653\":1,\"710\":1,\"785\":1,\"905\":2,\"1023\":1,\"1097\":1,\"1100\":1,\"1347\":1,\"1400\":2,\"1701\":1,\"1713\":1,\"1723\":1,\"1738\":1,\"1746\":1}}],[\"disadvantage\",{\"1\":{\"605\":1,\"905\":1}}],[\"disabling\",{\"0\":{\"1704\":1,\"1726\":1},\"1\":{\"576\":1,\"1715\":1}}],[\"disables\",{\"1\":{\"979\":1}}],[\"disable\",{\"1\":{\"38\":1,\"56\":1,\"78\":1,\"95\":1,\"113\":2,\"210\":1,\"437\":2,\"573\":1,\"575\":1,\"576\":1,\"869\":1,\"978\":3,\"979\":1,\"1284\":2,\"1704\":1,\"1797\":1,\"1798\":1}}],[\"disabled\",{\"1\":{\"27\":1,\"111\":1,\"115\":1,\"117\":1,\"121\":1,\"129\":1,\"162\":1,\"167\":1,\"182\":1,\"453\":1,\"575\":1,\"743\":1,\"756\":1,\"978\":1,\"979\":2,\"981\":1,\"1180\":1,\"1479\":1,\"1641\":1,\"1716\":1,\"1721\":1,\"1724\":1,\"1726\":1}}],[\"distinct\",{\"1\":{\"1775\":1}}],[\"distinction\",{\"1\":{\"446\":1,\"1708\":1}}],[\"distractions\",{\"1\":{\"1723\":1}}],[\"distributed\",{\"1\":{\"977\":1,\"1729\":1}}],[\"distribution\",{\"1\":{\"1\":1}}],[\"distributions\",{\"1\":{\"1\":1}}],[\"distnote\",{\"1\":{\"1484\":1}}],[\"distance\",{\"1\":{\"1300\":1}}],[\"displaypolicyd\",{\"1\":{\"1484\":1}}],[\"display\",{\"1\":{\"231\":1,\"454\":1,\"708\":1,\"743\":3,\"756\":3,\"1027\":1,\"1123\":1,\"1478\":1,\"1641\":3}}],[\"displayed\",{\"1\":{\"143\":1,\"162\":1,\"182\":1,\"1725\":1}}],[\"displaying\",{\"1\":{\"108\":1,\"1725\":1}}],[\"displays\",{\"1\":{\"15\":1,\"26\":1,\"108\":1,\"120\":1,\"122\":1,\"231\":1,\"930\":1,\"935\":1,\"968\":1,\"969\":1,\"982\":1,\"987\":1,\"1241\":1,\"1278\":1,\"1377\":1,\"1800\":1}}],[\"discard\",{\"1\":{\"1278\":1}}],[\"discoverable\",{\"1\":{\"511\":1}}],[\"discoverability\",{\"1\":{\"102\":1,\"103\":1,\"522\":1}}],[\"discovered\",{\"1\":{\"115\":1}}],[\"discovery\",{\"1\":{\"113\":1,\"231\":1,\"1570\":1}}],[\"discuses\",{\"1\":{\"55\":1}}],[\"discussion\",{\"1\":{\"90\":1,\"167\":1}}],[\"discuss\",{\"1\":{\"50\":1}}],[\"disk\",{\"1\":{\"15\":2,\"26\":2,\"120\":2,\"121\":1,\"483\":2,\"618\":2,\"743\":1,\"756\":1,\"791\":2,\"832\":1,\"837\":1,\"838\":1,\"843\":1,\"848\":1,\"975\":2,\"981\":1,\"999\":1,\"1016\":1,\"1052\":2,\"1058\":1,\"1103\":2,\"1126\":2,\"1186\":1,\"1219\":1,\"1301\":2,\"1478\":1,\"1568\":2,\"1641\":1,\"1774\":2}}],[\"douglas\",{\"1\":{\"1746\":1}}],[\"doubt\",{\"1\":{\"208\":1,\"1602\":1,\"1757\":1}}],[\"double\",{\"0\":{\"1548\":1},\"1\":{\"24\":1,\"202\":1,\"222\":1,\"441\":1,\"480\":1,\"683\":1,\"780\":2,\"829\":1,\"916\":1,\"1205\":1,\"1502\":1,\"1507\":1,\"1513\":1,\"1518\":1,\"1536\":1,\"1540\":1,\"1547\":1,\"1549\":2,\"1589\":1,\"1593\":1,\"1594\":1,\"1598\":1,\"1599\":1}}],[\"doing\",{\"1\":{\"1731\":1}}],[\"dozens\",{\"1\":{\"1719\":1}}],[\"dob\",{\"1\":{\"1691\":1}}],[\"domain\",{\"1\":{\"1022\":2}}],[\"dog\",{\"1\":{\"545\":2,\"546\":2}}],[\"dogs|cats\",{\"1\":{\"219\":2}}],[\"dollar\",{\"1\":{\"391\":1,\"605\":1,\"710\":1,\"749\":2,\"777\":1,\"780\":1,\"785\":1,\"801\":1,\"905\":1,\"1095\":1,\"1097\":1,\"1125\":1,\"1312\":1,\"1773\":1}}],[\"dot\",{\"1\":{\"127\":1}}],[\"downside\",{\"1\":{\"270\":1,\"277\":1,\"1327\":1}}],[\"downloads\",{\"1\":{\"113\":1}}],[\"download\",{\"0\":{\"189\":1,\"205\":1},\"1\":{\"113\":1,\"188\":1,\"189\":1,\"201\":2,\"205\":2,\"1731\":1}}],[\"down\",{\"1\":{\"50\":2,\"113\":1,\"208\":1,\"680\":1,\"826\":1,\"913\":1,\"1153\":1,\"1154\":1,\"1155\":2,\"1158\":3,\"1202\":1,\"1215\":1,\"1372\":1,\"1403\":1,\"1416\":2,\"1448\":1,\"1701\":1,\"1747\":1,\"1797\":1,\"1798\":1,\"1799\":6,\"1802\":3}}],[\"does\",{\"1\":{\"39\":1,\"42\":1,\"48\":1,\"50\":1,\"82\":1,\"97\":1,\"115\":2,\"121\":1,\"214\":1,\"218\":1,\"224\":1,\"409\":1,\"443\":1,\"445\":1,\"447\":1,\"459\":1,\"474\":1,\"477\":1,\"487\":1,\"544\":1,\"582\":1,\"596\":2,\"616\":1,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"677\":1,\"737\":1,\"743\":1,\"756\":1,\"791\":2,\"823\":1,\"858\":3,\"859\":1,\"897\":1,\"910\":1,\"924\":1,\"958\":1,\"989\":1,\"999\":1,\"1000\":1,\"1036\":1,\"1058\":1,\"1059\":1,\"1102\":1,\"1199\":1,\"1219\":1,\"1220\":1,\"1267\":1,\"1306\":1,\"1324\":1,\"1330\":1,\"1513\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":2,\"1564\":1,\"1602\":1,\"1641\":1,\"1703\":1,\"1753\":2,\"1765\":1,\"1780\":1}}],[\"doesn\",{\"1\":{\"3\":2,\"8\":1,\"41\":1,\"47\":2,\"50\":1,\"59\":1,\"113\":1,\"115\":2,\"121\":1,\"163\":1,\"176\":1,\"208\":1,\"218\":1,\"235\":1,\"440\":1,\"445\":1,\"566\":1,\"591\":1,\"656\":1,\"676\":1,\"722\":1,\"727\":1,\"737\":1,\"780\":1,\"869\":1,\"956\":1,\"962\":1,\"1134\":2,\"1139\":1,\"1153\":1,\"1176\":1,\"1260\":1,\"1400\":1,\"1461\":1,\"1555\":1,\"1560\":1,\"1564\":1,\"1571\":1,\"1575\":1,\"1583\":1,\"1602\":1,\"1650\":1,\"1693\":2,\"1703\":1,\"1793\":1,\"1808\":1}}],[\"docker\",{\"1\":{\"128\":1}}],[\"doc\",{\"1\":{\"113\":1,\"1706\":1}}],[\"documentation\",{\"1\":{\"104\":1,\"109\":1,\"111\":1,\"123\":1,\"163\":1,\"260\":1,\"303\":1,\"566\":1,\"567\":1,\"876\":1,\"995\":1,\"1273\":1,\"1629\":1,\"1701\":1,\"1744\":1,\"1793\":1}}],[\"documented\",{\"1\":{\"86\":1,\"180\":1}}],[\"documents\",{\"1\":{\"21\":1,\"31\":1,\"117\":1,\"218\":1,\"219\":1,\"315\":1,\"323\":1,\"330\":1,\"377\":1,\"506\":2,\"808\":1,\"815\":1,\"1069\":1,\"1535\":1,\"1650\":1,\"1654\":1,\"1660\":1}}],[\"document\",{\"1\":{\"14\":1,\"19\":1,\"121\":1,\"208\":1,\"215\":1,\"779\":1,\"924\":2,\"1424\":1,\"1455\":1,\"1629\":1,\"1639\":1,\"1667\":1,\"1691\":2,\"1701\":1,\"1725\":1,\"1728\":1,\"1747\":1,\"1756\":1,\"1784\":1}}],[\"docs\",{\"0\":{\"321\":1,\"892\":1,\"968\":1,\"1256\":1,\"1263\":1,\"1680\":1},\"1\":{\"14\":2,\"15\":1,\"26\":1,\"30\":1,\"95\":1,\"115\":1,\"117\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"129\":1,\"142\":1,\"167\":1,\"174\":1,\"202\":1,\"354\":1,\"361\":1,\"397\":1,\"566\":1,\"643\":1,\"930\":1,\"935\":1,\"970\":1,\"971\":2,\"974\":1,\"982\":1,\"984\":1,\"987\":1,\"1237\":1,\"1241\":1,\"1453\":1,\"1455\":2,\"1500\":1,\"1531\":1,\"1615\":1,\"1744\":1,\"1784\":1}}],[\"do\",{\"1\":{\"8\":2,\"38\":2,\"39\":2,\"40\":1,\"47\":1,\"48\":1,\"50\":2,\"53\":2,\"56\":2,\"57\":1,\"95\":1,\"115\":4,\"199\":1,\"202\":1,\"214\":1,\"227\":1,\"235\":1,\"246\":2,\"252\":1,\"398\":1,\"480\":1,\"487\":1,\"605\":1,\"742\":1,\"780\":2,\"905\":1,\"986\":1,\"1096\":1,\"1170\":1,\"1175\":1,\"1186\":2,\"1421\":1,\"1428\":2,\"1436\":2,\"1486\":1,\"1489\":1,\"1520\":1,\"1538\":1,\"1591\":1,\"1593\":1,\"1620\":1,\"1747\":1,\"1753\":1,\"1772\":1,\"1781\":2,\"1798\":1}}],[\"dos\",{\"1\":{\"3\":1}}],[\"done\",{\"1\":{\"38\":2,\"40\":1,\"43\":1,\"56\":2,\"129\":1,\"182\":1,\"269\":1,\"276\":1,\"318\":6,\"333\":9,\"387\":1,\"653\":1,\"682\":1,\"828\":1,\"915\":1,\"1204\":1,\"1712\":1,\"1737\":1}}],[\"don\",{\"0\":{\"869\":1},\"1\":{\"3\":1,\"48\":1,\"109\":1,\"121\":2,\"247\":1,\"252\":1,\"347\":2,\"354\":1,\"361\":1,\"431\":1,\"452\":1,\"480\":1,\"487\":1,\"520\":1,\"596\":1,\"702\":1,\"801\":1,\"819\":1,\"859\":1,\"1195\":1,\"1278\":1,\"1318\":1,\"1578\":1,\"1723\":1,\"1772\":1,\"1790\":1}}],[\"f9\",{\"1\":{\"1701\":1}}],[\"f8\",{\"1\":{\"1701\":1}}],[\"f7\",{\"1\":{\"1701\":1}}],[\"f6\",{\"1\":{\"1701\":1}}],[\"f5\",{\"1\":{\"1701\":1}}],[\"f4\",{\"1\":{\"1701\":2}}],[\"f3\",{\"1\":{\"1701\":2}}],[\"f2\",{\"1\":{\"1701\":2}}],[\"fpsd\",{\"1\":{\"1484\":1}}],[\"ff\",{\"1\":{\"1401\":1,\"1432\":1}}],[\"ffx16\",{\"1\":{\"1401\":1,\"1432\":1}}],[\"fwrite\",{\"1\":{\"842\":1}}],[\"fb7b79d592672d90ecb733944e144d722f77fdee\",{\"1\":{\"1731\":1}}],[\"fb\",{\"1\":{\"628\":2}}],[\"fnum\",{\"1\":{\"423\":2}}],[\"fstr\",{\"1\":{\"423\":2}}],[\"fmt\",{\"1\":{\"269\":2,\"276\":2,\"318\":3,\"326\":2,\"333\":2,\"340\":2,\"347\":3,\"360\":1,\"361\":3}}],[\"fd2\",{\"1\":{\"232\":1}}],[\"fd1\",{\"1\":{\"232\":1}}],[\"f11\",{\"1\":{\"1701\":1}}],[\"f10\",{\"1\":{\"1701\":1}}],[\"f1=\",{\"1\":{\"648\":1}}],[\"f1\",{\"1\":{\"177\":1,\"648\":2,\"1701\":2,\"1797\":1,\"1798\":1,\"1799\":1}}],[\"f12\",{\"1\":{\"172\":1,\"1701\":1}}],[\"fuubar\",{\"1\":{\"1789\":2}}],[\"fun\",{\"1\":{\"1416\":1}}],[\"funky\",{\"1\":{\"764\":1}}],[\"funday\",{\"1\":{\"416\":2}}],[\"func\",{\"0\":{\"1789\":1},\"1\":{\"98\":1,\"115\":2,\"162\":2,\"166\":2,\"260\":2,\"261\":2,\"268\":2,\"269\":2,\"270\":3,\"271\":1,\"275\":2,\"276\":2,\"277\":3,\"278\":1,\"282\":2,\"283\":2,\"289\":2,\"290\":3,\"292\":1,\"296\":2,\"297\":2,\"303\":2,\"304\":2,\"310\":2,\"311\":4,\"312\":4,\"316\":3,\"318\":21,\"319\":3,\"324\":3,\"326\":21,\"327\":3,\"331\":3,\"333\":27,\"334\":3,\"338\":2,\"340\":6,\"341\":1,\"345\":4,\"347\":9,\"348\":1,\"353\":1,\"354\":2,\"360\":1,\"361\":3,\"1021\":1,\"1300\":2,\"1329\":1,\"1725\":1,\"1788\":1,\"1789\":1}}],[\"functiontrypipe\",{\"1\":{\"1772\":1}}],[\"function|private|open|event\",{\"1\":{\"1284\":1}}],[\"function|module\",{\"1\":{\"1162\":1}}],[\"function\",{\"0\":{\"573\":1,\"682\":1,\"772\":1,\"778\":1,\"828\":1,\"853\":1,\"855\":1,\"915\":1,\"1169\":1,\"1204\":1,\"1512\":1},\"1\":{\"15\":13,\"26\":13,\"44\":1,\"46\":1,\"63\":1,\"90\":1,\"94\":1,\"96\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"115\":2,\"116\":3,\"117\":2,\"118\":2,\"119\":1,\"120\":4,\"121\":1,\"122\":1,\"127\":1,\"129\":1,\"130\":2,\"164\":1,\"181\":2,\"183\":4,\"218\":2,\"239\":1,\"242\":2,\"244\":1,\"252\":2,\"253\":2,\"259\":3,\"267\":2,\"269\":1,\"270\":1,\"271\":1,\"274\":2,\"276\":1,\"277\":1,\"278\":1,\"281\":2,\"283\":1,\"288\":2,\"290\":2,\"291\":1,\"292\":1,\"295\":2,\"297\":1,\"302\":3,\"308\":2,\"311\":1,\"316\":2,\"318\":1,\"319\":1,\"324\":2,\"326\":1,\"327\":1,\"331\":2,\"333\":1,\"334\":1,\"337\":1,\"338\":1,\"341\":1,\"344\":1,\"345\":1,\"348\":1,\"354\":2,\"361\":2,\"383\":1,\"387\":1,\"391\":2,\"393\":5,\"404\":1,\"412\":1,\"419\":1,\"423\":1,\"438\":2,\"439\":2,\"440\":1,\"457\":3,\"469\":1,\"471\":1,\"473\":1,\"475\":1,\"480\":1,\"483\":1,\"485\":3,\"487\":5,\"488\":6,\"489\":5,\"490\":1,\"500\":1,\"502\":1,\"513\":2,\"518\":2,\"519\":2,\"530\":2,\"531\":1,\"532\":2,\"535\":6,\"536\":4,\"571\":1,\"572\":1,\"575\":1,\"578\":1,\"579\":1,\"589\":1,\"597\":2,\"600\":1,\"601\":1,\"603\":2,\"605\":1,\"611\":1,\"616\":2,\"618\":1,\"628\":1,\"643\":3,\"651\":3,\"656\":1,\"659\":2,\"661\":2,\"664\":1,\"673\":1,\"677\":1,\"679\":9,\"682\":3,\"685\":2,\"690\":2,\"704\":1,\"705\":1,\"708\":3,\"710\":2,\"713\":3,\"718\":1,\"719\":1,\"720\":1,\"722\":1,\"723\":1,\"727\":1,\"728\":2,\"735\":2,\"743\":1,\"745\":1,\"756\":1,\"758\":1,\"771\":1,\"772\":1,\"773\":2,\"774\":6,\"775\":2,\"777\":1,\"778\":1,\"779\":3,\"781\":5,\"782\":2,\"783\":3,\"784\":2,\"785\":2,\"786\":2,\"787\":3,\"801\":1,\"802\":2,\"808\":1,\"814\":1,\"820\":1,\"823\":1,\"825\":9,\"828\":3,\"831\":2,\"851\":3,\"861\":1,\"899\":1,\"900\":1,\"905\":1,\"910\":1,\"912\":9,\"915\":3,\"917\":1,\"949\":1,\"954\":3,\"956\":1,\"962\":1,\"975\":1,\"982\":3,\"997\":1,\"1012\":1,\"1024\":2,\"1025\":1,\"1027\":1,\"1031\":1,\"1037\":1,\"1039\":1,\"1049\":1,\"1052\":1,\"1067\":1,\"1084\":1,\"1090\":1,\"1091\":2,\"1093\":3,\"1097\":2,\"1098\":4,\"1111\":1,\"1120\":1,\"1126\":1,\"1138\":1,\"1139\":1,\"1141\":1,\"1143\":4,\"1161\":1,\"1163\":2,\"1169\":2,\"1170\":1,\"1171\":4,\"1182\":5,\"1196\":1,\"1199\":1,\"1201\":9,\"1204\":3,\"1207\":2,\"1213\":4,\"1217\":4,\"1222\":2,\"1245\":1,\"1255\":2,\"1262\":1,\"1268\":1,\"1284\":1,\"1285\":3,\"1300\":1,\"1307\":1,\"1309\":1,\"1313\":1,\"1321\":1,\"1325\":1,\"1326\":1,\"1327\":2,\"1337\":3,\"1345\":1,\"1350\":1,\"1352\":1,\"1360\":2,\"1363\":1,\"1380\":1,\"1395\":1,\"1480\":1,\"1509\":1,\"1557\":1,\"1562\":1,\"1594\":1,\"1601\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1641\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1674\":2,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1701\":1,\"1708\":5,\"1710\":1,\"1725\":2,\"1735\":1,\"1739\":1,\"1742\":2,\"1756\":2,\"1757\":2,\"1758\":2,\"1761\":1,\"1764\":2,\"1765\":2,\"1771\":4,\"1774\":1,\"1779\":1,\"1780\":4,\"1781\":1,\"1782\":5,\"1789\":2,\"1791\":1,\"1799\":1}}],[\"functions\",{\"0\":{\"218\":1,\"242\":1,\"243\":1,\"309\":1},\"1\":{\"8\":1,\"10\":1,\"15\":2,\"26\":2,\"92\":1,\"103\":2,\"110\":1,\"111\":4,\"113\":2,\"115\":1,\"119\":3,\"121\":1,\"142\":1,\"182\":1,\"218\":2,\"231\":2,\"242\":1,\"243\":2,\"255\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"344\":1,\"391\":4,\"440\":1,\"448\":1,\"450\":2,\"451\":1,\"475\":3,\"488\":1,\"518\":2,\"535\":1,\"605\":1,\"659\":3,\"679\":5,\"682\":1,\"710\":4,\"713\":1,\"718\":3,\"722\":1,\"723\":3,\"724\":1,\"725\":1,\"727\":1,\"728\":2,\"729\":1,\"730\":3,\"733\":4,\"735\":2,\"742\":1,\"743\":1,\"756\":1,\"777\":1,\"783\":1,\"784\":1,\"785\":4,\"801\":1,\"825\":5,\"828\":1,\"905\":1,\"912\":5,\"915\":1,\"962\":1,\"999\":1,\"1000\":1,\"1026\":1,\"1058\":1,\"1059\":1,\"1095\":1,\"1096\":1,\"1097\":4,\"1170\":1,\"1171\":1,\"1175\":3,\"1176\":4,\"1180\":1,\"1182\":1,\"1201\":5,\"1204\":1,\"1215\":1,\"1219\":1,\"1220\":1,\"1241\":1,\"1321\":2,\"1324\":1,\"1325\":1,\"1327\":1,\"1330\":1,\"1331\":1,\"1347\":1,\"1641\":1,\"1708\":1,\"1710\":1,\"1713\":1,\"1719\":1,\"1732\":3,\"1738\":1,\"1746\":1,\"1781\":1,\"1791\":1}}],[\"functionality\",{\"1\":{\"27\":1,\"89\":1,\"150\":1,\"1451\":1,\"1741\":1}}],[\"functional\",{\"1\":{\"8\":1,\"10\":1,\"1321\":1}}],[\"further\",{\"1\":{\"189\":1,\"207\":2,\"208\":1,\"755\":1,\"1387\":1,\"1513\":1}}],[\"furthermore\",{\"1\":{\"46\":1}}],[\"fuzzy\",{\"0\":{\"1798\":1},\"1\":{\"138\":1,\"1795\":1,\"1797\":1,\"1798\":5,\"1800\":2}}],[\"fuzzing\",{\"1\":{\"115\":1}}],[\"fuzz\",{\"1\":{\"115\":1}}],[\"fully\",{\"1\":{\"204\":1,\"1628\":1}}],[\"full\",{\"0\":{\"1806\":1},\"1\":{\"108\":1,\"567\":1,\"1336\":1,\"1449\":1,\"1531\":1,\"1591\":1,\"1620\":1,\"1677\":1,\"1718\":1,\"1725\":1,\"1766\":1,\"1795\":1}}],[\"future\",{\"1\":{\"90\":1,\"95\":1,\"99\":1,\"104\":1,\"108\":3,\"111\":1,\"291\":1,\"986\":1,\"1516\":1}}],[\"flushes\",{\"1\":{\"1287\":1}}],[\"flexibility\",{\"1\":{\"737\":1,\"929\":1,\"1753\":1}}],[\"flexible\",{\"1\":{\"246\":1,\"247\":1,\"387\":1,\"1659\":1}}],[\"flow\",{\"1\":{\"679\":1,\"825\":1,\"851\":1,\"912\":1,\"1201\":1}}],[\"floattostring\",{\"1\":{\"340\":3}}],[\"float64\",{\"1\":{\"103\":1,\"278\":1,\"333\":4,\"340\":5}}],[\"floating\",{\"0\":{\"1428\":1,\"1436\":1,\"1619\":1},\"1\":{\"28\":3,\"183\":1,\"417\":1,\"956\":1,\"1082\":1,\"1107\":1,\"1108\":1,\"1428\":1,\"1436\":1,\"1603\":3,\"1607\":1,\"1619\":1,\"1620\":1,\"1622\":1,\"1626\":1,\"1636\":1,\"1676\":1,\"1677\":1,\"1688\":1}}],[\"float\",{\"0\":{\"1619\":1},\"1\":{\"28\":1,\"953\":1,\"1107\":1,\"1108\":1,\"1601\":1,\"1603\":1,\"1772\":1}}],[\"flicker\",{\"1\":{\"143\":1}}],[\"flickering\",{\"1\":{\"127\":1}}],[\"flip\",{\"1\":{\"108\":1}}],[\"flat\",{\"1\":{\"50\":1}}],[\"flavoured\",{\"1\":{\"28\":1,\"457\":1,\"530\":1,\"1603\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1671\":1}}],[\"flagvalues\",{\"0\":{\"442\":1},\"1\":{\"117\":1,\"431\":1,\"432\":1,\"442\":2,\"443\":3,\"444\":2,\"447\":3}}],[\"flagged\",{\"1\":{\"91\":1,\"100\":1}}],[\"flagsdesc\",{\"0\":{\"446\":1},\"1\":{\"431\":1}}],[\"flags\",{\"0\":{\"400\":1,\"428\":1,\"443\":1,\"444\":1,\"445\":1,\"541\":1,\"563\":1,\"695\":1,\"702\":1,\"708\":1,\"732\":1,\"752\":1,\"755\":1,\"763\":1,\"923\":1,\"927\":1,\"972\":1,\"979\":1,\"1023\":1,\"1108\":1,\"1116\":1,\"1123\":1,\"1134\":1,\"1158\":1,\"1176\":1,\"1227\":1,\"1278\":1,\"1318\":1,\"1336\":1},\"1\":{\"15\":2,\"26\":2,\"50\":1,\"103\":4,\"111\":1,\"115\":1,\"119\":2,\"181\":2,\"183\":2,\"421\":3,\"423\":6,\"431\":3,\"437\":1,\"442\":5,\"443\":5,\"444\":3,\"445\":5,\"446\":2,\"447\":1,\"453\":1,\"456\":1,\"543\":1,\"692\":2,\"696\":3,\"730\":1,\"747\":1,\"760\":1,\"779\":1,\"859\":1,\"923\":1,\"924\":6,\"925\":2,\"926\":1,\"927\":1,\"929\":1,\"935\":2,\"975\":2,\"1023\":2,\"1114\":1,\"1153\":1,\"1174\":1,\"1175\":2,\"1176\":1,\"1225\":1,\"1226\":1,\"1277\":1,\"1278\":4,\"1334\":1,\"1772\":1}}],[\"flag\",{\"1\":{\"15\":1,\"26\":1,\"40\":1,\"117\":1,\"127\":1,\"142\":2,\"150\":1,\"162\":1,\"163\":1,\"174\":1,\"181\":1,\"398\":1,\"420\":1,\"423\":6,\"432\":3,\"442\":1,\"444\":1,\"447\":1,\"568\":1,\"695\":2,\"701\":1,\"706\":1,\"731\":1,\"787\":1,\"924\":2,\"929\":1,\"970\":1,\"1125\":1,\"1154\":2,\"1175\":3,\"1213\":1,\"1276\":1,\"1317\":1,\"1337\":1,\"1513\":1}}],[\"favour\",{\"1\":{\"1113\":1,\"1620\":1,\"1672\":1}}],[\"favorite\",{\"1\":{\"19\":1,\"206\":1}}],[\"fappend\",{\"1\":{\"836\":1}}],[\"fate\",{\"1\":{\"468\":1}}],[\"far\",{\"1\":{\"398\":1,\"608\":1,\"908\":1,\"1227\":1}}],[\"fastest\",{\"1\":{\"445\":1}}],[\"faster\",{\"1\":{\"95\":1}}],[\"fast\",{\"1\":{\"103\":1,\"104\":2,\"129\":1}}],[\"facing\",{\"0\":{\"90\":1,\"91\":1,\"99\":1,\"100\":1,\"103\":1,\"104\":1,\"108\":1,\"109\":1,\"128\":1},\"1\":{\"111\":1,\"113\":1,\"121\":1,\"123\":1}}],[\"facto\",{\"1\":{\"1753\":1}}],[\"fact\",{\"1\":{\"41\":1,\"46\":1,\"742\":1,\"760\":1,\"1486\":1}}],[\"fanbase\",{\"1\":{\"48\":1}}],[\"fantastic\",{\"1\":{\"40\":1}}],[\"fallback\",{\"1\":{\"162\":1,\"1016\":1,\"1725\":1}}],[\"falling\",{\"1\":{\"52\":1}}],[\"fall\",{\"1\":{\"47\":1,\"48\":1,\"90\":2,\"103\":1,\"1021\":1,\"1791\":1}}],[\"falls\",{\"1\":{\"47\":1,\"50\":1,\"1023\":1}}],[\"falsebyte\",{\"1\":{\"340\":3}}],[\"false\",{\"0\":{\"433\":1,\"434\":1,\"435\":1,\"436\":1,\"440\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"523\":1,\"698\":1},\"1\":{\"15\":5,\"26\":5,\"61\":1,\"103\":1,\"113\":1,\"114\":1,\"115\":3,\"129\":1,\"139\":1,\"164\":1,\"167\":1,\"333\":1,\"347\":1,\"405\":1,\"406\":1,\"410\":2,\"412\":3,\"423\":1,\"431\":13,\"438\":1,\"439\":1,\"575\":5,\"576\":1,\"605\":2,\"698\":1,\"699\":1,\"700\":1,\"701\":5,\"702\":1,\"703\":2,\"743\":6,\"745\":1,\"756\":6,\"758\":1,\"766\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"861\":4,\"865\":1,\"902\":1,\"905\":2,\"1006\":2,\"1008\":4,\"1022\":18,\"1032\":1,\"1033\":1,\"1039\":3,\"1043\":3,\"1178\":3,\"1251\":3,\"1252\":2,\"1253\":5,\"1255\":5,\"1287\":1,\"1319\":4,\"1338\":1,\"1339\":1,\"1340\":1,\"1341\":2,\"1487\":10,\"1605\":1,\"1615\":4,\"1641\":6,\"1651\":1,\"1661\":1,\"1704\":1,\"1706\":1,\"1707\":2,\"1724\":1,\"1726\":1,\"1756\":3}}],[\"fault\",{\"1\":{\"39\":1,\"57\":1}}],[\"failed\",{\"1\":{\"1321\":1}}],[\"failure\",{\"1\":{\"409\":1,\"1036\":1,\"1324\":1,\"1330\":1}}],[\"fail\",{\"1\":{\"77\":2,\"78\":1,\"95\":1,\"108\":1,\"113\":2,\"115\":5,\"119\":1,\"142\":1,\"182\":1,\"440\":1,\"596\":4,\"755\":1,\"782\":1,\"1013\":1,\"1217\":1,\"1327\":1,\"1487\":2,\"1772\":1}}],[\"fails\",{\"1\":{\"24\":1,\"94\":1,\"116\":1,\"1329\":1,\"1502\":1,\"1558\":1,\"1774\":1}}],[\"fair\",{\"1\":{\"39\":1,\"57\":1,\"742\":1}}],[\"familiarity\",{\"1\":{\"52\":1,\"103\":1,\"162\":3,\"741\":1}}],[\"familiar\",{\"1\":{\"15\":1,\"26\":1,\"47\":1,\"52\":1,\"736\":1,\"758\":1,\"766\":1,\"1345\":1,\"1520\":1}}],[\"five\",{\"1\":{\"1805\":1,\"1807\":3}}],[\"fits\",{\"1\":{\"1747\":1}}],[\"fifo\",{\"1\":{\"695\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1741\":1}}],[\"fifth\",{\"1\":{\"439\":1}}],[\"firesword\",{\"1\":{\"1610\":1}}],[\"firefox\",{\"1\":{\"865\":2}}],[\"fired\",{\"1\":{\"643\":1}}],[\"firstname\",{\"1\":{\"1226\":3,\"1639\":1}}],[\"firstly\",{\"1\":{\"48\":1,\"1400\":1}}],[\"first\",{\"1\":{\"20\":1,\"40\":2,\"42\":1,\"46\":1,\"47\":1,\"48\":1,\"61\":1,\"93\":1,\"99\":2,\"115\":1,\"121\":1,\"182\":1,\"207\":1,\"208\":1,\"217\":1,\"232\":1,\"395\":1,\"402\":1,\"423\":1,\"437\":2,\"439\":1,\"447\":2,\"596\":1,\"605\":1,\"661\":1,\"696\":1,\"741\":2,\"742\":1,\"749\":4,\"762\":1,\"780\":1,\"795\":2,\"857\":1,\"875\":1,\"905\":1,\"937\":1,\"1115\":1,\"1125\":1,\"1131\":1,\"1161\":1,\"1190\":2,\"1217\":2,\"1244\":1,\"1260\":1,\"1267\":1,\"1272\":1,\"1278\":4,\"1303\":1,\"1312\":1,\"1403\":1,\"1417\":1,\"1444\":1,\"1449\":1,\"1487\":1,\"1545\":1,\"1555\":2,\"1560\":2,\"1571\":1,\"1575\":1,\"1583\":1,\"1601\":1,\"1638\":1,\"1654\":1,\"1691\":1,\"1708\":2,\"1746\":1,\"1750\":1,\"1773\":1,\"1798\":1,\"1807\":1}}],[\"fines\",{\"1\":{\"433\":1}}],[\"finished\",{\"1\":{\"1347\":1,\"1708\":2}}],[\"finish\",{\"1\":{\"113\":1}}],[\"finding\",{\"1\":{\"1798\":2}}],[\"finder\",{\"1\":{\"1798\":3}}],[\"findstringsubmatch\",{\"1\":{\"1021\":1}}],[\"find\",{\"0\":{\"1131\":1,\"1798\":1},\"1\":{\"48\":1,\"50\":1,\"59\":1,\"138\":1,\"147\":1,\"181\":1,\"218\":1,\"926\":1,\"1021\":1,\"1602\":1,\"1795\":1,\"1797\":1,\"1798\":1,\"1800\":2}}],[\"fixed\",{\"1\":{\"90\":1,\"91\":1,\"95\":2,\"99\":1,\"100\":1,\"108\":2,\"111\":1,\"121\":1,\"123\":2,\"135\":1,\"147\":3,\"151\":1,\"163\":1,\"174\":2,\"178\":1,\"1096\":1,\"1107\":1,\"1108\":1,\"1428\":1,\"1436\":1}}],[\"fixes\",{\"0\":{\"129\":1,\"135\":1,\"139\":1,\"143\":1,\"147\":1,\"151\":1,\"155\":1,\"159\":1,\"163\":1,\"168\":1,\"174\":1,\"178\":1,\"182\":1},\"1\":{\"69\":1,\"71\":1,\"74\":1,\"79\":1,\"83\":1,\"86\":1,\"88\":2,\"93\":2,\"95\":2,\"97\":1,\"103\":2,\"108\":1,\"111\":2,\"113\":2,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":2,\"129\":1,\"131\":1,\"1491\":1}}],[\"fix\",{\"1\":{\"82\":1,\"95\":1,\"97\":1,\"104\":1,\"115\":3,\"123\":1,\"168\":1,\"421\":1,\"1793\":1}}],[\"fi\",{\"1\":{\"52\":1}}],[\"fields\",{\"1\":{\"129\":1,\"347\":1,\"433\":1,\"808\":2,\"1067\":2,\"1227\":1,\"1278\":1,\"1542\":1,\"1610\":1}}],[\"field\",{\"1\":{\"15\":1,\"26\":1,\"95\":2,\"117\":1,\"180\":2,\"403\":1,\"522\":1,\"606\":1,\"648\":1,\"780\":5,\"782\":2,\"906\":1,\"1104\":1,\"1278\":5,\"1366\":1}}],[\"fidtree\",{\"1\":{\"575\":1}}],[\"fids\",{\"1\":{\"113\":1,\"1175\":1,\"1176\":1,\"1178\":1,\"1180\":2}}],[\"fid\",{\"0\":{\"719\":1,\"724\":1,\"729\":1},\"1\":{\"15\":3,\"26\":3,\"108\":1,\"110\":1,\"472\":1,\"475\":3,\"656\":2,\"659\":3,\"679\":1,\"716\":1,\"718\":3,\"720\":1,\"721\":2,\"722\":5,\"723\":2,\"725\":1,\"726\":1,\"727\":7,\"728\":2,\"730\":3,\"731\":2,\"733\":2,\"734\":1,\"735\":2,\"825\":1,\"912\":1,\"1171\":1,\"1178\":9,\"1182\":1,\"1201\":1,\"1241\":1,\"1324\":1,\"1325\":1,\"1330\":1,\"1331\":1,\"1757\":1,\"1772\":3}}],[\"fills\",{\"1\":{\"737\":1}}],[\"filtering\",{\"1\":{\"791\":1,\"1186\":1,\"1745\":1}}],[\"filter\",{\"1\":{\"93\":2,\"167\":1,\"441\":1,\"452\":1,\"694\":1,\"696\":1}}],[\"filters\",{\"1\":{\"15\":1,\"26\":1,\"94\":1,\"127\":1,\"463\":1,\"691\":1,\"692\":1,\"797\":1,\"1192\":1}}],[\"fileid\",{\"1\":{\"1300\":2}}],[\"filename\",{\"1\":{\"834\":1,\"840\":1,\"1017\":1,\"1023\":1,\"1175\":2,\"1210\":1,\"1297\":1,\"1710\":2,\"1713\":1,\"1738\":1}}],[\"filelist\",{\"1\":{\"791\":2,\"1186\":1}}],[\"file3\",{\"1\":{\"229\":1}}],[\"file2\",{\"1\":{\"229\":2}}],[\"file1\",{\"1\":{\"229\":2}}],[\"fileregexp\",{\"0\":{\"441\":1},\"1\":{\"113\":1,\"431\":1,\"441\":1,\"452\":1}}],[\"filerefdefine\",{\"1\":{\"108\":1}}],[\"filerefset\",{\"1\":{\"108\":1}}],[\"fileref\",{\"0\":{\"1029\":1,\"1710\":1},\"1\":{\"23\":1,\"93\":1,\"94\":1,\"108\":1,\"110\":1,\"115\":1,\"119\":1,\"182\":1,\"183\":1,\"1029\":1,\"1031\":1,\"1175\":2,\"1179\":1,\"1710\":2,\"1712\":1,\"1735\":2,\"1737\":1,\"1739\":1}}],[\"filesystem\",{\"0\":{\"238\":1},\"1\":{\"29\":1,\"443\":1,\"647\":1,\"1361\":1,\"1366\":6,\"1368\":1}}],[\"files\",{\"0\":{\"39\":1,\"57\":1,\"233\":1,\"1749\":1},\"1\":{\"15\":3,\"23\":2,\"26\":3,\"28\":1,\"36\":1,\"38\":3,\"41\":2,\"50\":1,\"56\":3,\"59\":2,\"90\":2,\"92\":1,\"94\":3,\"96\":2,\"110\":2,\"111\":1,\"113\":4,\"123\":1,\"135\":1,\"183\":1,\"189\":1,\"229\":2,\"232\":1,\"237\":1,\"238\":2,\"270\":1,\"277\":1,\"391\":1,\"441\":2,\"443\":1,\"452\":3,\"463\":3,\"691\":1,\"692\":1,\"694\":1,\"695\":6,\"710\":1,\"735\":1,\"785\":1,\"789\":1,\"791\":4,\"795\":3,\"797\":1,\"835\":1,\"841\":1,\"918\":1,\"919\":1,\"923\":1,\"935\":1,\"975\":1,\"982\":2,\"999\":2,\"1016\":1,\"1020\":1,\"1021\":1,\"1058\":2,\"1097\":1,\"1184\":1,\"1186\":7,\"1190\":3,\"1192\":1,\"1219\":2,\"1300\":1,\"1369\":1,\"1491\":1,\"1501\":1,\"1603\":1,\"1610\":1,\"1613\":1,\"1614\":1,\"1657\":1,\"1659\":1,\"1666\":1,\"1670\":1,\"1672\":1,\"1705\":2,\"1712\":2,\"1737\":2,\"1741\":1,\"1749\":2,\"1772\":1,\"1794\":2,\"1798\":5}}],[\"file\",{\"0\":{\"832\":1,\"838\":1,\"1020\":1,\"1179\":1,\"1567\":1,\"1811\":1},\"1\":{\"15\":11,\"16\":2,\"24\":1,\"26\":11,\"27\":2,\"30\":2,\"38\":12,\"39\":1,\"46\":1,\"56\":12,\"57\":1,\"59\":1,\"60\":1,\"87\":1,\"93\":2,\"94\":3,\"95\":1,\"96\":1,\"110\":1,\"111\":2,\"113\":2,\"115\":3,\"117\":1,\"119\":2,\"120\":5,\"123\":1,\"164\":1,\"201\":1,\"209\":1,\"219\":1,\"227\":1,\"228\":4,\"233\":2,\"237\":1,\"238\":1,\"258\":1,\"261\":1,\"263\":1,\"265\":2,\"270\":1,\"277\":1,\"301\":1,\"304\":1,\"306\":1,\"354\":1,\"356\":2,\"361\":1,\"363\":2,\"387\":1,\"390\":1,\"393\":2,\"452\":1,\"463\":3,\"483\":4,\"509\":1,\"523\":1,\"526\":2,\"530\":1,\"618\":4,\"651\":1,\"677\":1,\"691\":1,\"692\":3,\"694\":1,\"697\":2,\"713\":2,\"743\":3,\"756\":3,\"771\":2,\"775\":1,\"787\":2,\"788\":1,\"791\":6,\"795\":2,\"797\":2,\"814\":1,\"816\":1,\"823\":1,\"832\":1,\"833\":3,\"837\":4,\"838\":1,\"839\":3,\"843\":4,\"848\":2,\"858\":4,\"865\":1,\"910\":1,\"920\":5,\"921\":3,\"926\":2,\"965\":1,\"975\":4,\"999\":1,\"1011\":1,\"1014\":1,\"1015\":1,\"1016\":3,\"1020\":2,\"1023\":1,\"1031\":1,\"1052\":4,\"1058\":1,\"1091\":2,\"1093\":1,\"1096\":1,\"1098\":2,\"1103\":4,\"1126\":4,\"1175\":2,\"1179\":1,\"1182\":2,\"1183\":1,\"1186\":5,\"1188\":1,\"1190\":2,\"1192\":2,\"1199\":1,\"1208\":1,\"1209\":1,\"1210\":1,\"1211\":1,\"1219\":1,\"1223\":1,\"1224\":1,\"1295\":1,\"1296\":1,\"1297\":3,\"1298\":1,\"1300\":4,\"1301\":5,\"1337\":1,\"1362\":1,\"1365\":1,\"1368\":1,\"1369\":1,\"1400\":1,\"1456\":2,\"1463\":2,\"1464\":1,\"1469\":1,\"1470\":1,\"1474\":1,\"1483\":1,\"1497\":1,\"1502\":1,\"1563\":1,\"1564\":4,\"1567\":1,\"1568\":4,\"1591\":2,\"1601\":2,\"1602\":1,\"1607\":2,\"1611\":2,\"1612\":2,\"1615\":1,\"1617\":1,\"1618\":2,\"1622\":2,\"1626\":3,\"1632\":3,\"1636\":3,\"1641\":3,\"1645\":3,\"1654\":1,\"1657\":3,\"1670\":3,\"1672\":1,\"1675\":3,\"1679\":3,\"1688\":3,\"1694\":3,\"1699\":3,\"1710\":1,\"1712\":2,\"1714\":1,\"1731\":1,\"1735\":1,\"1737\":2,\"1739\":1,\"1741\":2,\"1745\":1,\"1750\":4,\"1752\":1,\"1753\":4,\"1772\":4,\"1774\":5,\"1782\":1,\"1795\":1,\"1799\":1,\"1811\":1}}],[\"f\",{\"0\":{\"691\":1},\"1\":{\"15\":1,\"26\":1,\"93\":2,\"94\":1,\"127\":2,\"142\":1,\"143\":1,\"208\":1,\"238\":4,\"361\":3,\"398\":2,\"463\":1,\"549\":1,\"692\":3,\"693\":2,\"694\":5,\"695\":2,\"791\":2,\"795\":1,\"797\":1,\"1131\":1,\"1134\":1,\"1186\":2,\"1190\":1,\"1192\":1,\"1434\":1,\"1716\":1,\"1772\":3}}],[\"four\",{\"1\":{\"1742\":1,\"1807\":2}}],[\"found\",{\"0\":{\"1793\":1},\"1\":{\"13\":1,\"103\":1,\"202\":1,\"210\":1,\"340\":3,\"387\":1,\"390\":1,\"488\":1,\"535\":1,\"566\":1,\"567\":1,\"609\":1,\"616\":3,\"775\":1,\"869\":1,\"909\":1,\"989\":1,\"1021\":1,\"1134\":1,\"1278\":2,\"1305\":2,\"1454\":1,\"1741\":1,\"1745\":1,\"1786\":1,\"1787\":1,\"1791\":1}}],[\"font\",{\"1\":{\"1701\":9}}],[\"folders\",{\"1\":{\"1299\":1}}],[\"follows\",{\"1\":{\"431\":1,\"520\":1,\"1702\":1}}],[\"followed\",{\"1\":{\"42\":1,\"780\":1,\"1591\":1,\"1716\":1}}],[\"follow\",{\"1\":{\"38\":1,\"47\":1,\"56\":1,\"208\":1,\"291\":1,\"354\":1,\"361\":1,\"397\":1,\"780\":1,\"997\":1,\"1022\":1,\"1321\":1,\"1505\":1,\"1592\":1,\"1719\":1,\"1753\":2,\"1788\":1}}],[\"following\",{\"1\":{\"0\":1,\"20\":1,\"39\":1,\"41\":2,\"47\":1,\"51\":1,\"58\":1,\"59\":2,\"135\":1,\"202\":1,\"208\":2,\"239\":1,\"244\":1,\"309\":1,\"389\":1,\"434\":2,\"436\":1,\"438\":1,\"440\":1,\"441\":1,\"462\":1,\"488\":2,\"514\":1,\"535\":2,\"596\":2,\"643\":1,\"676\":1,\"678\":1,\"741\":1,\"754\":1,\"755\":1,\"762\":1,\"765\":1,\"780\":1,\"808\":1,\"824\":1,\"904\":1,\"911\":1,\"953\":1,\"1021\":1,\"1067\":1,\"1093\":1,\"1141\":1,\"1200\":1,\"1217\":1,\"1260\":1,\"1267\":1,\"1343\":1,\"1352\":1,\"1363\":1,\"1366\":1,\"1380\":1,\"1395\":1,\"1561\":1,\"1566\":2,\"1571\":1,\"1575\":2,\"1591\":1,\"1600\":1,\"1610\":1,\"1647\":1,\"1659\":1,\"1672\":1,\"1674\":1,\"1704\":1,\"1716\":1,\"1725\":2,\"1731\":1,\"1741\":1,\"1749\":1,\"1755\":1,\"1780\":1,\"1784\":1,\"1789\":1,\"1791\":1,\"1797\":1,\"1798\":2,\"1799\":1,\"1807\":1,\"1808\":1}}],[\"fox\",{\"1\":{\"545\":2,\"546\":2}}],[\"focused\",{\"1\":{\"119\":1,\"387\":1,\"608\":1,\"908\":1}}],[\"focuses\",{\"1\":{\"73\":1,\"75\":1,\"95\":1,\"119\":1}}],[\"focusing\",{\"1\":{\"69\":1,\"131\":1}}],[\"focus\",{\"1\":{\"66\":1,\"121\":1,\"170\":1,\"1650\":1}}],[\"footnotes\",{\"0\":{\"1773\":1}}],[\"footprint\",{\"1\":{\"121\":2}}],[\"foo=oof\",{\"1\":{\"1780\":1}}],[\"foo=\",{\"1\":{\"1772\":3}}],[\"foo=rab\",{\"1\":{\"676\":1}}],[\"foo=bar\",{\"1\":{\"676\":3,\"681\":2,\"827\":2,\"914\":2,\"1203\":2,\"1780\":1}}],[\"foo=bar<\",{\"1\":{\"99\":1}}],[\"foo=bar>\",{\"1\":{\"99\":1,\"151\":1}}],[\"foo$b\",{\"1\":{\"628\":3}}],[\"foobarwednesday\",{\"1\":{\"1074\":1}}],[\"foobartuesday\",{\"1\":{\"1074\":1}}],[\"foobarmonday\",{\"1\":{\"1074\":1}}],[\"foobar=example\",{\"1\":{\"679\":2,\"825\":2,\"912\":2,\"1201\":2}}],[\"foobar=3\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"foobar=2\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"foobar=1\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"foobar=out\",{\"1\":{\"628\":1}}],[\"foobar\",{\"1\":{\"47\":2,\"121\":1,\"127\":1,\"163\":1,\"224\":1,\"437\":1,\"440\":3,\"493\":2,\"513\":3,\"544\":4,\"608\":1,\"628\":3,\"679\":2,\"825\":2,\"869\":3,\"897\":4,\"908\":1,\"912\":2,\"995\":1,\"999\":4,\"1058\":4,\"1074\":1,\"1088\":2,\"1201\":2,\"1219\":4,\"1232\":1,\"1239\":3,\"1484\":1,\"1505\":2,\"1566\":2,\"1592\":2,\"1708\":2,\"1772\":2,\"1773\":3}}],[\"foo\",{\"0\":{\"187\":1},\"1\":{\"38\":3,\"56\":3,\"99\":1,\"121\":2,\"225\":1,\"226\":1,\"353\":2,\"360\":2,\"397\":4,\"436\":2,\"437\":1,\"442\":2,\"443\":2,\"444\":1,\"445\":1,\"487\":3,\"488\":4,\"534\":1,\"535\":4,\"544\":3,\"628\":2,\"633\":2,\"676\":5,\"681\":1,\"743\":8,\"756\":8,\"827\":1,\"897\":3,\"914\":1,\"926\":3,\"1141\":3,\"1203\":1,\"1248\":10,\"1505\":3,\"1506\":4,\"1515\":2,\"1529\":2,\"1530\":2,\"1533\":2,\"1534\":2,\"1539\":4,\"1544\":2,\"1551\":2,\"1588\":2,\"1592\":3,\"1641\":8,\"1772\":7,\"1780\":3}}],[\"forget\",{\"1\":{\"1790\":1}}],[\"forgetting\",{\"1\":{\"228\":1}}],[\"forgo\",{\"1\":{\"47\":1,\"376\":1,\"1405\":1}}],[\"forwards\",{\"1\":{\"162\":1,\"163\":1,\"500\":1,\"1701\":1,\"1802\":4}}],[\"forward\",{\"1\":{\"103\":1,\"111\":1}}],[\"force\",{\"1\":{\"115\":1,\"135\":1,\"182\":1,\"225\":1,\"226\":1,\"391\":1,\"522\":1,\"682\":1,\"710\":1,\"732\":1,\"785\":1,\"828\":1,\"915\":1,\"989\":1,\"1097\":1,\"1204\":1,\"1520\":1,\"1538\":1}}],[\"forcetty\",{\"1\":{\"115\":1}}],[\"forces\",{\"1\":{\"15\":1,\"26\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"988\":1,\"1241\":1,\"1321\":1}}],[\"forcing\",{\"1\":{\"103\":1,\"115\":1}}],[\"form\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1,\"1593\":1}}],[\"formers\",{\"1\":{\"103\":1}}],[\"formated\",{\"1\":{\"1329\":1}}],[\"formatter\",{\"1\":{\"1329\":1}}],[\"formatted\",{\"0\":{\"1525\":1,\"1530\":1},\"1\":{\"14\":1,\"309\":1,\"431\":1,\"520\":1,\"563\":2,\"1455\":1,\"1578\":1,\"1579\":1,\"1647\":1,\"1664\":1}}],[\"formatting\",{\"0\":{\"1421\":1},\"1\":{\"376\":2,\"882\":1,\"1421\":2,\"1724\":3}}],[\"formats\",{\"1\":{\"37\":1,\"39\":1,\"41\":1,\"57\":1,\"58\":1,\"60\":1,\"304\":1,\"377\":1,\"956\":1,\"1400\":2,\"1535\":1,\"1601\":1,\"1602\":1,\"1609\":1,\"1638\":1,\"1797\":1}}],[\"format\",{\"0\":{\"236\":1,\"565\":1,\"566\":1,\"567\":1,\"767\":1},\"1\":{\"15\":1,\"26\":1,\"28\":1,\"30\":2,\"41\":1,\"58\":1,\"59\":1,\"108\":2,\"236\":3,\"258\":1,\"259\":1,\"261\":2,\"263\":1,\"265\":2,\"301\":1,\"306\":1,\"356\":2,\"363\":2,\"377\":1,\"404\":1,\"440\":1,\"494\":1,\"495\":1,\"526\":1,\"561\":4,\"563\":1,\"566\":1,\"567\":1,\"692\":1,\"732\":2,\"743\":5,\"744\":1,\"755\":2,\"756\":5,\"757\":1,\"758\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"791\":1,\"977\":1,\"999\":1,\"1058\":1,\"1089\":1,\"1111\":1,\"1175\":2,\"1176\":2,\"1182\":1,\"1219\":1,\"1245\":1,\"1260\":2,\"1262\":1,\"1267\":3,\"1268\":1,\"1270\":1,\"1281\":1,\"1285\":1,\"1307\":1,\"1311\":2,\"1313\":1,\"1400\":3,\"1404\":2,\"1476\":1,\"1535\":1,\"1578\":1,\"1579\":1,\"1580\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1607\":2,\"1608\":1,\"1609\":1,\"1612\":3,\"1618\":3,\"1622\":2,\"1626\":3,\"1632\":3,\"1636\":3,\"1638\":1,\"1641\":5,\"1642\":1,\"1645\":3,\"1647\":2,\"1651\":1,\"1657\":3,\"1659\":3,\"1661\":1,\"1664\":2,\"1667\":1,\"1670\":3,\"1672\":4,\"1675\":3,\"1679\":3,\"1688\":3,\"1694\":3,\"1699\":3,\"1729\":1}}],[\"formap\",{\"0\":{\"60\":1,\"249\":1,\"759\":1},\"1\":{\"15\":1,\"26\":1,\"44\":1,\"60\":3,\"63\":1,\"153\":1,\"154\":1,\"162\":1,\"164\":1,\"249\":2,\"251\":1,\"440\":1,\"489\":1,\"532\":1,\"536\":1,\"649\":1,\"651\":1,\"679\":1,\"737\":1,\"743\":2,\"745\":1,\"756\":2,\"758\":1,\"760\":3,\"761\":3,\"762\":2,\"764\":1,\"825\":1,\"912\":1,\"1175\":1,\"1182\":1,\"1201\":1,\"1228\":1,\"1281\":1,\"1285\":1,\"1345\":1,\"1400\":1,\"1641\":2,\"1772\":3}}],[\"fortunately\",{\"1\":{\"1789\":1}}],[\"fortran\",{\"1\":{\"47\":1}}],[\"forth\",{\"1\":{\"40\":1,\"439\":1}}],[\"forking\",{\"1\":{\"391\":1,\"656\":1,\"710\":1,\"785\":1,\"1097\":1}}],[\"forked\",{\"1\":{\"50\":1,\"119\":1,\"656\":1,\"733\":1}}],[\"fork\",{\"1\":{\"46\":1,\"109\":1,\"113\":1,\"361\":4,\"1461\":1}}],[\"foreeach\",{\"1\":{\"755\":1}}],[\"foremost\",{\"1\":{\"46\":1}}],[\"foreach\",{\"0\":{\"41\":1,\"59\":1,\"248\":1,\"744\":1,\"746\":1,\"757\":1,\"1642\":1},\"1\":{\"15\":1,\"26\":1,\"36\":1,\"41\":2,\"42\":2,\"44\":1,\"59\":3,\"63\":1,\"90\":1,\"92\":1,\"121\":1,\"122\":1,\"162\":4,\"164\":1,\"208\":1,\"235\":2,\"248\":2,\"249\":1,\"251\":3,\"252\":4,\"423\":1,\"485\":3,\"487\":1,\"488\":1,\"489\":1,\"532\":2,\"534\":2,\"535\":1,\"536\":1,\"679\":1,\"737\":1,\"742\":5,\"743\":3,\"744\":3,\"745\":1,\"747\":2,\"748\":4,\"749\":3,\"750\":1,\"751\":1,\"754\":2,\"755\":7,\"756\":3,\"757\":3,\"760\":3,\"761\":1,\"764\":1,\"765\":2,\"766\":1,\"825\":1,\"912\":1,\"1018\":1,\"1024\":1,\"1182\":1,\"1201\":1,\"1343\":2,\"1345\":1,\"1400\":1,\"1421\":1,\"1641\":3,\"1642\":3,\"1657\":1,\"1670\":1,\"1756\":1,\"1771\":1,\"1772\":3,\"1780\":1,\"1781\":1,\"1782\":1}}],[\"foreground\",{\"1\":{\"15\":1,\"26\":1,\"90\":1,\"92\":1,\"101\":1,\"475\":1,\"659\":1,\"713\":1,\"714\":1,\"715\":1,\"723\":1,\"728\":1,\"735\":1,\"781\":1,\"1762\":1,\"1808\":4}}],[\"for\",{\"0\":{\"14\":1,\"443\":1,\"444\":1,\"736\":1,\"742\":1,\"743\":1,\"756\":1,\"1455\":1,\"1523\":1,\"1641\":1,\"1711\":1,\"1736\":1,\"1793\":1},\"1\":{\"13\":1,\"15\":17,\"16\":1,\"26\":17,\"27\":1,\"30\":5,\"37\":2,\"38\":5,\"39\":2,\"40\":3,\"42\":2,\"46\":3,\"47\":5,\"48\":6,\"50\":2,\"51\":1,\"52\":4,\"56\":5,\"57\":2,\"60\":2,\"61\":2,\"70\":1,\"72\":2,\"77\":1,\"79\":1,\"80\":1,\"82\":2,\"83\":3,\"86\":1,\"88\":3,\"89\":1,\"90\":2,\"93\":5,\"94\":3,\"95\":10,\"96\":2,\"97\":2,\"99\":1,\"103\":3,\"104\":2,\"106\":1,\"108\":4,\"110\":2,\"111\":4,\"112\":1,\"113\":4,\"114\":1,\"115\":8,\"116\":2,\"117\":2,\"118\":1,\"119\":12,\"120\":2,\"121\":14,\"122\":3,\"123\":2,\"125\":1,\"126\":2,\"127\":3,\"128\":2,\"129\":2,\"142\":1,\"162\":4,\"164\":1,\"169\":2,\"174\":2,\"181\":1,\"182\":1,\"183\":3,\"189\":1,\"197\":2,\"201\":2,\"202\":1,\"208\":3,\"210\":1,\"217\":1,\"218\":1,\"219\":3,\"220\":1,\"222\":3,\"228\":1,\"229\":1,\"232\":1,\"241\":1,\"242\":1,\"244\":2,\"258\":1,\"260\":2,\"261\":1,\"263\":1,\"264\":2,\"265\":4,\"267\":1,\"269\":1,\"270\":1,\"272\":2,\"274\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":2,\"280\":1,\"281\":1,\"284\":2,\"286\":1,\"288\":1,\"291\":1,\"293\":2,\"294\":1,\"295\":1,\"297\":1,\"298\":2,\"300\":1,\"303\":2,\"304\":4,\"306\":2,\"308\":1,\"309\":1,\"312\":1,\"313\":2,\"315\":1,\"318\":7,\"320\":2,\"323\":1,\"326\":9,\"328\":2,\"330\":1,\"333\":10,\"335\":2,\"337\":1,\"340\":10,\"342\":2,\"344\":1,\"347\":21,\"348\":1,\"349\":2,\"350\":1,\"354\":1,\"356\":1,\"361\":1,\"363\":2,\"371\":1,\"375\":1,\"376\":1,\"377\":2,\"383\":1,\"384\":1,\"385\":1,\"387\":2,\"391\":3,\"393\":1,\"395\":1,\"397\":3,\"400\":2,\"402\":1,\"419\":1,\"420\":1,\"421\":1,\"423\":1,\"425\":1,\"426\":1,\"430\":1,\"431\":3,\"432\":1,\"433\":2,\"434\":2,\"436\":1,\"437\":2,\"438\":4,\"439\":4,\"440\":2,\"444\":1,\"447\":1,\"452\":1,\"453\":1,\"455\":3,\"456\":1,\"457\":2,\"459\":1,\"463\":2,\"465\":1,\"468\":2,\"480\":1,\"488\":1,\"500\":1,\"515\":6,\"516\":2,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"526\":1,\"530\":2,\"535\":1,\"541\":4,\"544\":2,\"545\":1,\"546\":1,\"559\":1,\"560\":1,\"567\":1,\"596\":2,\"606\":2,\"607\":1,\"616\":2,\"624\":2,\"629\":3,\"630\":1,\"635\":2,\"636\":1,\"637\":1,\"641\":2,\"642\":1,\"643\":1,\"653\":1,\"656\":1,\"657\":2,\"659\":1,\"675\":2,\"676\":1,\"678\":1,\"679\":1,\"681\":1,\"682\":1,\"692\":1,\"697\":2,\"710\":3,\"711\":1,\"713\":3,\"717\":1,\"723\":1,\"728\":1,\"730\":1,\"731\":1,\"735\":1,\"737\":2,\"738\":1,\"739\":1,\"741\":4,\"742\":6,\"743\":6,\"747\":2,\"749\":1,\"751\":1,\"755\":1,\"756\":6,\"758\":1,\"760\":1,\"764\":2,\"766\":1,\"771\":1,\"779\":1,\"780\":2,\"781\":3,\"782\":2,\"783\":3,\"784\":1,\"785\":3,\"787\":3,\"788\":1,\"795\":3,\"797\":2,\"808\":3,\"809\":1,\"810\":1,\"814\":1,\"815\":2,\"824\":1,\"825\":1,\"827\":1,\"828\":1,\"837\":1,\"843\":1,\"865\":2,\"873\":2,\"876\":1,\"891\":1,\"894\":1,\"897\":1,\"906\":2,\"907\":1,\"911\":1,\"912\":1,\"914\":1,\"915\":1,\"921\":1,\"923\":1,\"924\":2,\"927\":1,\"929\":1,\"930\":2,\"932\":1,\"935\":3,\"947\":1,\"949\":1,\"954\":2,\"956\":2,\"962\":1,\"965\":1,\"968\":1,\"969\":1,\"975\":1,\"977\":1,\"981\":1,\"982\":2,\"984\":1,\"987\":1,\"988\":1,\"989\":1,\"992\":1,\"995\":1,\"999\":5,\"1016\":1,\"1021\":1,\"1022\":2,\"1023\":1,\"1024\":2,\"1025\":1,\"1026\":1,\"1027\":1,\"1043\":2,\"1048\":1,\"1058\":5,\"1067\":1,\"1069\":2,\"1070\":1,\"1077\":1,\"1084\":1,\"1097\":3,\"1098\":2,\"1103\":1,\"1108\":3,\"1110\":1,\"1123\":2,\"1127\":1,\"1128\":1,\"1150\":1,\"1154\":3,\"1158\":2,\"1161\":1,\"1166\":1,\"1169\":1,\"1170\":1,\"1171\":2,\"1173\":1,\"1174\":1,\"1176\":3,\"1178\":1,\"1179\":1,\"1180\":1,\"1182\":3,\"1183\":1,\"1190\":3,\"1192\":2,\"1200\":1,\"1201\":1,\"1203\":1,\"1204\":1,\"1213\":2,\"1217\":1,\"1219\":5,\"1226\":1,\"1227\":2,\"1235\":1,\"1236\":1,\"1237\":1,\"1241\":2,\"1243\":1,\"1248\":1,\"1249\":1,\"1257\":1,\"1260\":1,\"1268\":1,\"1270\":1,\"1273\":1,\"1276\":1,\"1278\":1,\"1280\":2,\"1281\":1,\"1295\":1,\"1297\":1,\"1300\":1,\"1337\":2,\"1345\":1,\"1359\":2,\"1360\":3,\"1366\":1,\"1368\":1,\"1372\":1,\"1373\":1,\"1385\":2,\"1387\":3,\"1388\":1,\"1397\":1,\"1398\":1,\"1400\":2,\"1401\":1,\"1404\":2,\"1405\":1,\"1407\":1,\"1412\":1,\"1416\":1,\"1421\":2,\"1422\":1,\"1424\":1,\"1428\":1,\"1432\":1,\"1436\":1,\"1440\":1,\"1449\":1,\"1450\":1,\"1453\":1,\"1454\":1,\"1456\":1,\"1461\":2,\"1463\":2,\"1465\":1,\"1467\":1,\"1469\":2,\"1471\":1,\"1474\":2,\"1486\":1,\"1487\":1,\"1488\":1,\"1491\":3,\"1492\":1,\"1493\":1,\"1495\":1,\"1496\":1,\"1500\":1,\"1505\":1,\"1516\":1,\"1520\":1,\"1533\":1,\"1534\":1,\"1535\":2,\"1538\":1,\"1539\":1,\"1542\":2,\"1546\":2,\"1561\":1,\"1566\":1,\"1572\":1,\"1576\":1,\"1578\":1,\"1584\":1,\"1592\":1,\"1600\":1,\"1601\":3,\"1602\":2,\"1607\":1,\"1609\":1,\"1610\":1,\"1612\":3,\"1614\":1,\"1615\":3,\"1618\":1,\"1622\":1,\"1626\":1,\"1628\":2,\"1629\":1,\"1632\":3,\"1636\":1,\"1638\":1,\"1641\":6,\"1645\":3,\"1647\":3,\"1654\":2,\"1657\":3,\"1659\":3,\"1664\":3,\"1666\":1,\"1667\":1,\"1670\":3,\"1674\":1,\"1675\":2,\"1679\":1,\"1682\":1,\"1686\":1,\"1688\":1,\"1690\":1,\"1694\":3,\"1696\":1,\"1699\":3,\"1706\":2,\"1708\":1,\"1717\":1,\"1719\":2,\"1722\":2,\"1727\":1,\"1729\":1,\"1731\":1,\"1732\":1,\"1735\":1,\"1741\":3,\"1744\":1,\"1746\":2,\"1747\":1,\"1750\":1,\"1753\":2,\"1756\":1,\"1762\":1,\"1763\":1,\"1766\":1,\"1770\":1,\"1772\":1,\"1773\":4,\"1780\":1,\"1782\":3,\"1783\":1,\"1784\":2,\"1788\":1,\"1793\":4,\"1798\":1}}],[\"fg\",{\"0\":{\"714\":1},\"1\":{\"3\":1,\"15\":1,\"26\":1,\"90\":1,\"92\":1,\"99\":1,\"101\":1,\"475\":1,\"659\":1,\"713\":1,\"715\":1,\"716\":1,\"723\":1,\"728\":1,\"735\":1,\"1772\":2}}],[\"fraktur\",{\"1\":{\"1701\":1}}],[\"frameworks\",{\"1\":{\"515\":1}}],[\"framework\",{\"1\":{\"15\":1,\"26\":1,\"109\":1,\"183\":1,\"576\":1,\"577\":1,\"669\":1,\"861\":1,\"1061\":1,\"1182\":1,\"1282\":1,\"1739\":1,\"1743\":1}}],[\"frx\",{\"1\":{\"795\":1}}],[\"fruit\",{\"1\":{\"217\":1,\"224\":1,\"248\":1}}],[\"fro\",{\"1\":{\"115\":1}}],[\"from\",{\"0\":{\"33\":1,\"36\":1,\"206\":1,\"207\":1,\"208\":1,\"445\":1,\"595\":1,\"867\":1},\"1\":{\"3\":1,\"10\":2,\"14\":1,\"15\":10,\"16\":1,\"19\":1,\"23\":1,\"24\":4,\"26\":10,\"27\":1,\"30\":4,\"33\":1,\"36\":1,\"39\":1,\"40\":1,\"42\":1,\"43\":1,\"46\":4,\"48\":1,\"50\":1,\"51\":1,\"52\":1,\"54\":2,\"57\":1,\"59\":2,\"67\":1,\"76\":1,\"90\":1,\"92\":1,\"93\":3,\"94\":2,\"103\":2,\"105\":2,\"110\":1,\"111\":7,\"112\":1,\"113\":2,\"115\":1,\"116\":1,\"117\":1,\"118\":2,\"119\":1,\"120\":1,\"121\":1,\"122\":2,\"127\":1,\"134\":1,\"135\":1,\"139\":2,\"153\":1,\"162\":2,\"165\":1,\"174\":1,\"178\":1,\"180\":1,\"183\":1,\"189\":1,\"201\":1,\"202\":1,\"206\":1,\"208\":2,\"209\":1,\"218\":1,\"224\":1,\"226\":1,\"231\":1,\"232\":1,\"234\":1,\"237\":3,\"251\":1,\"265\":4,\"266\":1,\"271\":1,\"273\":1,\"274\":1,\"278\":1,\"286\":6,\"292\":2,\"293\":2,\"300\":6,\"304\":1,\"313\":2,\"315\":1,\"318\":1,\"319\":1,\"320\":4,\"323\":1,\"326\":1,\"327\":1,\"328\":3,\"330\":1,\"333\":1,\"334\":1,\"335\":4,\"336\":1,\"337\":1,\"342\":4,\"343\":1,\"344\":1,\"347\":2,\"349\":4,\"354\":1,\"361\":1,\"364\":1,\"369\":3,\"376\":1,\"377\":2,\"378\":3,\"383\":2,\"387\":1,\"391\":1,\"393\":1,\"397\":1,\"403\":1,\"404\":2,\"412\":1,\"419\":4,\"431\":1,\"440\":2,\"445\":1,\"447\":1,\"457\":1,\"462\":1,\"468\":1,\"487\":1,\"509\":1,\"526\":1,\"530\":2,\"541\":1,\"544\":1,\"548\":4,\"560\":3,\"561\":1,\"563\":1,\"569\":1,\"590\":1,\"591\":2,\"595\":1,\"599\":2,\"607\":1,\"611\":2,\"616\":1,\"618\":1,\"620\":1,\"629\":1,\"631\":1,\"637\":1,\"643\":1,\"653\":1,\"680\":1,\"682\":1,\"695\":2,\"696\":1,\"703\":1,\"710\":1,\"713\":1,\"722\":1,\"727\":1,\"730\":1,\"733\":1,\"743\":1,\"747\":2,\"748\":2,\"755\":1,\"756\":1,\"758\":2,\"762\":1,\"766\":1,\"768\":1,\"777\":2,\"779\":2,\"782\":1,\"785\":1,\"787\":1,\"791\":2,\"795\":2,\"799\":1,\"804\":1,\"809\":2,\"811\":1,\"814\":1,\"819\":2,\"826\":1,\"828\":1,\"831\":2,\"837\":4,\"843\":4,\"851\":1,\"859\":1,\"861\":1,\"862\":1,\"863\":2,\"865\":1,\"867\":1,\"871\":2,\"877\":3,\"879\":1,\"882\":2,\"884\":5,\"886\":2,\"888\":2,\"894\":1,\"898\":4,\"904\":2,\"907\":1,\"913\":1,\"915\":1,\"917\":2,\"936\":1,\"940\":3,\"942\":1,\"947\":2,\"954\":1,\"956\":1,\"960\":3,\"962\":2,\"967\":2,\"975\":1,\"978\":1,\"979\":2,\"981\":1,\"984\":1,\"994\":1,\"996\":1,\"999\":4,\"1003\":1,\"1004\":1,\"1014\":1,\"1016\":1,\"1031\":1,\"1039\":1,\"1052\":2,\"1058\":4,\"1061\":2,\"1063\":1,\"1070\":2,\"1072\":1,\"1084\":2,\"1086\":1,\"1091\":2,\"1093\":1,\"1095\":2,\"1097\":1,\"1098\":1,\"1112\":1,\"1113\":1,\"1115\":2,\"1116\":4,\"1118\":2,\"1119\":1,\"1120\":1,\"1125\":1,\"1126\":1,\"1137\":2,\"1145\":2,\"1147\":2,\"1167\":1,\"1171\":1,\"1179\":1,\"1182\":2,\"1186\":2,\"1190\":2,\"1195\":1,\"1202\":1,\"1204\":1,\"1207\":2,\"1208\":1,\"1209\":1,\"1210\":3,\"1211\":3,\"1219\":4,\"1222\":1,\"1228\":2,\"1230\":1,\"1237\":1,\"1255\":1,\"1260\":1,\"1261\":1,\"1262\":2,\"1268\":2,\"1274\":3,\"1281\":2,\"1289\":1,\"1295\":1,\"1308\":1,\"1309\":1,\"1312\":1,\"1313\":1,\"1319\":1,\"1327\":1,\"1337\":1,\"1347\":3,\"1350\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1360\":1,\"1387\":2,\"1401\":1,\"1403\":2,\"1405\":1,\"1407\":1,\"1410\":4,\"1416\":1,\"1422\":4,\"1430\":4,\"1431\":1,\"1432\":1,\"1438\":3,\"1439\":1,\"1448\":2,\"1450\":3,\"1455\":1,\"1456\":1,\"1465\":1,\"1471\":1,\"1475\":1,\"1476\":1,\"1483\":1,\"1486\":4,\"1488\":1,\"1497\":1,\"1502\":4,\"1509\":1,\"1513\":1,\"1516\":1,\"1529\":1,\"1535\":2,\"1536\":1,\"1538\":1,\"1540\":1,\"1557\":1,\"1562\":1,\"1568\":4,\"1569\":1,\"1570\":1,\"1572\":4,\"1573\":1,\"1576\":4,\"1577\":1,\"1580\":4,\"1581\":1,\"1584\":4,\"1601\":1,\"1611\":2,\"1612\":3,\"1617\":1,\"1618\":2,\"1624\":1,\"1625\":1,\"1626\":2,\"1628\":1,\"1632\":3,\"1634\":2,\"1636\":2,\"1639\":1,\"1641\":1,\"1645\":4,\"1647\":1,\"1650\":1,\"1657\":3,\"1659\":1,\"1660\":1,\"1666\":1,\"1670\":3,\"1675\":2,\"1679\":2,\"1688\":2,\"1691\":1,\"1694\":3,\"1699\":3,\"1701\":1,\"1702\":1,\"1707\":1,\"1710\":2,\"1714\":2,\"1716\":1,\"1717\":1,\"1721\":1,\"1727\":2,\"1728\":3,\"1731\":1,\"1735\":1,\"1739\":2,\"1741\":1,\"1743\":1,\"1745\":1,\"1746\":1,\"1748\":4,\"1752\":2,\"1768\":1,\"1774\":3,\"1779\":4,\"1782\":1,\"1789\":2,\"1798\":2,\"1800\":1,\"1808\":1}}],[\"frinight\",{\"1\":{\"1133\":1}}],[\"fri\",{\"1\":{\"750\":1,\"1131\":1,\"1449\":1,\"1505\":4,\"1592\":4}}],[\"friendly\",{\"1\":{\"90\":1,\"99\":1,\"123\":1,\"1628\":1,\"1741\":1,\"1789\":1}}],[\"friday\",{\"1\":{\"40\":2,\"41\":1,\"42\":1,\"376\":1,\"416\":1,\"437\":1,\"438\":1,\"439\":1,\"750\":2,\"875\":1,\"944\":3,\"964\":4,\"1132\":1,\"1272\":1,\"1400\":3,\"1403\":6,\"1405\":1,\"1421\":1,\"1448\":3,\"1449\":1}}],[\"freeform\",{\"1\":{\"929\":1}}],[\"freebsd\",{\"0\":{\"4\":1,\"193\":1},\"1\":{\"0\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"188\":1,\"193\":4,\"1043\":4}}],[\"frequently\",{\"1\":{\"34\":1,\"45\":1}}],[\"feb\",{\"1\":{\"1449\":1}}],[\"feb19\",{\"1\":{\"1260\":8,\"1267\":16}}],[\"february\",{\"1\":{\"59\":2,\"1081\":1,\"1449\":1}}],[\"feed\",{\"1\":{\"1306\":1}}],[\"feedback\",{\"1\":{\"986\":1}}],[\"feeds\",{\"1\":{\"882\":2}}],[\"feeling\",{\"1\":{\"1163\":2}}],[\"feel\",{\"1\":{\"50\":1}}],[\"feels\",{\"1\":{\"46\":1}}],[\"fetches\",{\"1\":{\"804\":1,\"811\":1,\"814\":1,\"1063\":1}}],[\"female\",{\"1\":{\"762\":1}}],[\"fe\",{\"1\":{\"90\":1,\"367\":1,\"1617\":1,\"1625\":1}}],[\"fexec\",{\"0\":{\"704\":1},\"1\":{\"15\":1,\"26\":1,\"135\":1,\"162\":2,\"164\":1,\"391\":2,\"393\":1,\"469\":1,\"659\":1,\"705\":1,\"706\":1,\"707\":1,\"710\":2,\"712\":1,\"723\":1,\"728\":1,\"735\":1,\"785\":2,\"787\":1,\"1024\":1,\"1031\":1,\"1097\":2,\"1098\":1,\"1213\":1}}],[\"feature\",{\"0\":{\"1602\":1},\"1\":{\"8\":1,\"38\":1,\"46\":2,\"56\":1,\"68\":1,\"78\":1,\"90\":1,\"104\":1,\"108\":1,\"113\":1,\"117\":1,\"121\":1,\"160\":1,\"440\":2,\"459\":1,\"601\":1,\"682\":1,\"795\":1,\"828\":1,\"900\":1,\"915\":1,\"1190\":1,\"1204\":1,\"1218\":1,\"1746\":1}}],[\"features\",{\"0\":{\"127\":1,\"134\":1,\"138\":1,\"142\":1,\"146\":1,\"150\":1,\"154\":1,\"158\":1,\"162\":1,\"167\":1,\"173\":1,\"177\":1,\"181\":1,\"185\":1},\"1\":{\"2\":1,\"21\":1,\"38\":1,\"41\":1,\"56\":1,\"64\":1,\"66\":1,\"71\":3,\"72\":1,\"73\":1,\"74\":1,\"76\":2,\"86\":1,\"88\":1,\"93\":2,\"95\":2,\"97\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":3,\"119\":1,\"121\":2,\"123\":4,\"158\":1,\"170\":1,\"210\":1,\"214\":1,\"215\":1,\"566\":1,\"873\":1,\"876\":1,\"1270\":1,\"1273\":1,\"1276\":1,\"1602\":1,\"1672\":1,\"1716\":1,\"1717\":1}}],[\"fewer\",{\"1\":{\"198\":1}}],[\"few\",{\"1\":{\"3\":1,\"37\":1,\"46\":1,\"52\":1,\"74\":1,\"93\":1,\"103\":1,\"115\":1,\"155\":1,\"182\":1,\"211\":1,\"241\":1,\"354\":1,\"361\":1,\"368\":1,\"407\":1,\"468\":1,\"596\":1,\"783\":1,\"873\":1,\"1034\":1,\"1128\":1,\"1152\":1,\"1270\":1,\"1609\":1,\"1755\":1,\"1775\":1,\"1783\":1}}],[\"mcilroy\",{\"1\":{\"1746\":1}}],[\"mm\",{\"1\":{\"1260\":2,\"1267\":4,\"1421\":3}}],[\"mdnsresponder\",{\"1\":{\"1484\":1}}],[\"md5\",{\"1\":{\"1300\":3}}],[\"md\",{\"1\":{\"354\":1,\"361\":1,\"791\":2,\"794\":1,\"1189\":1,\"1718\":1,\"1798\":2}}],[\"mkdir\",{\"1\":{\"208\":1,\"371\":1}}],[\"mkarray\",{\"0\":{\"370\":1,\"872\":1,\"1269\":1,\"1406\":1,\"1411\":1,\"1423\":1,\"1431\":1,\"1439\":1},\"1\":{\"15\":3,\"26\":3,\"44\":1,\"63\":1,\"107\":1,\"108\":2,\"110\":3,\"121\":1,\"122\":2,\"369\":2,\"378\":2,\"383\":2,\"419\":2,\"548\":3,\"569\":1,\"599\":2,\"745\":2,\"758\":2,\"871\":2,\"877\":2,\"884\":2,\"891\":2,\"898\":2,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"1002\":2,\"1077\":2,\"1084\":2,\"1118\":2,\"1137\":3,\"1150\":2,\"1235\":2,\"1274\":2,\"1407\":2,\"1410\":3,\"1412\":2,\"1416\":2,\"1421\":1,\"1422\":3,\"1424\":3,\"1430\":3,\"1432\":2,\"1438\":3,\"1440\":2,\"1449\":1,\"1450\":3,\"1507\":1,\"1531\":1,\"1536\":3,\"1568\":1,\"1580\":1,\"1594\":1,\"1599\":1}}],[\"m1\",{\"1\":{\"190\":1}}],[\"mb\",{\"1\":{\"189\":2}}],[\"mx\",{\"1\":{\"163\":1,\"208\":1,\"1210\":1,\"1211\":2,\"1710\":2}}],[\"mxjson\",{\"0\":{\"1671\":1},\"1\":{\"28\":1,\"427\":1,\"441\":1,\"457\":1,\"512\":1,\"526\":2,\"530\":1,\"1603\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1672\":6}}],[\"m\",{\"0\":{\"398\":1},\"1\":{\"50\":1,\"53\":1,\"219\":2,\"242\":1,\"396\":1,\"398\":1,\"400\":1,\"743\":1,\"756\":1,\"1132\":2,\"1134\":1,\"1163\":1,\"1350\":1,\"1641\":1,\"1772\":1}}],[\"myword\",{\"1\":{\"1790\":1}}],[\"mysql\",{\"1\":{\"1610\":1}}],[\"myself\",{\"1\":{\"50\":1}}],[\"my\",{\"0\":{\"39\":1,\"57\":1},\"1\":{\"36\":1,\"47\":1,\"50\":1,\"119\":1,\"211\":1,\"1093\":3,\"1728\":2,\"1731\":1}}],[\"mtac\",{\"0\":{\"961\":1},\"1\":{\"15\":1,\"26\":1,\"369\":1,\"378\":1,\"383\":1,\"419\":1,\"548\":1,\"599\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"958\":1,\"960\":1,\"962\":2,\"963\":1,\"964\":2,\"965\":1,\"966\":1,\"1084\":1,\"1274\":1,\"1422\":1,\"1448\":1,\"1450\":1}}],[\"msort\",{\"0\":{\"955\":1},\"1\":{\"15\":1,\"26\":1,\"369\":1,\"383\":1,\"419\":1,\"548\":1,\"884\":1,\"898\":1,\"947\":1,\"956\":2,\"957\":1,\"958\":4,\"959\":1,\"967\":1,\"1084\":1,\"1137\":1}}],[\"msys2\",{\"1\":{\"3\":1}}],[\"moment\",{\"1\":{\"1747\":1}}],[\"mock\",{\"1\":{\"1708\":1}}],[\"mobile\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"mo\",{\"1\":{\"888\":1}}],[\"morgan\",{\"1\":{\"1728\":1}}],[\"morning\",{\"1\":{\"473\":2}}],[\"more\",{\"0\":{\"609\":1,\"751\":1,\"909\":1,\"1667\":1},\"1\":{\"15\":1,\"19\":1,\"26\":1,\"34\":1,\"39\":1,\"41\":1,\"42\":2,\"43\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":2,\"50\":4,\"51\":1,\"52\":1,\"53\":1,\"57\":1,\"84\":1,\"86\":2,\"91\":2,\"95\":2,\"99\":3,\"100\":2,\"103\":1,\"109\":1,\"111\":2,\"115\":1,\"117\":1,\"121\":2,\"123\":1,\"127\":4,\"134\":1,\"142\":3,\"162\":1,\"167\":1,\"172\":1,\"174\":1,\"177\":1,\"181\":1,\"197\":1,\"207\":1,\"211\":1,\"215\":1,\"222\":3,\"226\":1,\"227\":1,\"228\":1,\"231\":2,\"232\":1,\"238\":3,\"239\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"253\":1,\"260\":1,\"303\":1,\"304\":2,\"347\":1,\"354\":1,\"361\":1,\"377\":1,\"387\":1,\"421\":1,\"433\":1,\"438\":5,\"526\":2,\"582\":1,\"609\":1,\"736\":1,\"758\":1,\"764\":1,\"766\":1,\"784\":1,\"808\":1,\"815\":1,\"873\":1,\"876\":1,\"909\":1,\"956\":1,\"977\":1,\"995\":1,\"1036\":1,\"1069\":1,\"1175\":1,\"1180\":1,\"1217\":1,\"1253\":1,\"1273\":1,\"1284\":1,\"1324\":1,\"1330\":1,\"1345\":1,\"1366\":1,\"1403\":2,\"1407\":1,\"1412\":1,\"1424\":1,\"1432\":1,\"1440\":1,\"1448\":1,\"1451\":1,\"1487\":1,\"1520\":1,\"1535\":1,\"1546\":1,\"1600\":1,\"1601\":1,\"1602\":1,\"1610\":1,\"1672\":1,\"1682\":1,\"1686\":1,\"1706\":1,\"1722\":1,\"1726\":1,\"1728\":1,\"1729\":1,\"1735\":1,\"1741\":2,\"1746\":1,\"1747\":3,\"1753\":1,\"1756\":1,\"1772\":1,\"1773\":2,\"1808\":1}}],[\"moon\",{\"1\":{\"1449\":2}}],[\"mood\",{\"1\":{\"1163\":1}}],[\"moo\",{\"1\":{\"397\":2,\"402\":4}}],[\"moving\",{\"1\":{\"375\":1,\"1404\":1}}],[\"moves\",{\"1\":{\"433\":1}}],[\"move\",{\"1\":{\"111\":1,\"1251\":1,\"1802\":1}}],[\"mounts\",{\"1\":{\"113\":1}}],[\"monnight\",{\"1\":{\"1133\":1}}],[\"mon|fri|sun\",{\"1\":{\"1132\":2}}],[\"month\",{\"1\":{\"1115\":1}}],[\"months\",{\"1\":{\"59\":1,\"377\":1,\"1115\":3,\"1422\":1,\"1439\":1,\"1535\":1,\"1536\":1,\"1540\":1}}],[\"mon\",{\"1\":{\"750\":1,\"888\":1,\"1131\":1,\"1403\":1,\"1440\":1,\"1449\":1,\"1505\":4,\"1579\":10,\"1592\":4}}],[\"mondayfoobar\",{\"1\":{\"1232\":1}}],[\"monday\",{\"1\":{\"40\":3,\"41\":3,\"42\":1,\"376\":2,\"416\":2,\"437\":1,\"438\":1,\"439\":1,\"750\":2,\"875\":2,\"888\":2,\"944\":3,\"964\":4,\"1074\":1,\"1131\":1,\"1132\":3,\"1133\":1,\"1147\":2,\"1232\":1,\"1272\":2,\"1400\":5,\"1403\":8,\"1405\":2,\"1440\":1,\"1445\":2,\"1446\":2,\"1447\":2,\"1448\":3,\"1449\":1}}],[\"motivation\",{\"1\":{\"55\":1}}],[\"mostly\",{\"1\":{\"71\":1,\"123\":1}}],[\"most\",{\"1\":{\"37\":1,\"38\":1,\"40\":1,\"51\":1,\"56\":1,\"201\":2,\"207\":1,\"208\":1,\"214\":1,\"216\":1,\"246\":1,\"433\":1,\"566\":1,\"653\":1,\"742\":1,\"1600\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1720\":1,\"1750\":1,\"1788\":1,\"1789\":1,\"1793\":1}}],[\"modify\",{\"1\":{\"90\":1}}],[\"modifying\",{\"1\":{\"90\":1,\"397\":1}}],[\"modified\",{\"1\":{\"38\":1,\"56\":1,\"1712\":1,\"1737\":1}}],[\"modulerunmode\",{\"1\":{\"1772\":1}}],[\"module\",{\"0\":{\"1170\":1,\"1711\":2,\"1736\":2,\"1763\":1},\"1\":{\"86\":1,\"93\":1,\"119\":4,\"135\":4,\"142\":1,\"391\":1,\"518\":1,\"710\":1,\"785\":1,\"977\":2,\"978\":3,\"979\":2,\"1029\":1,\"1091\":3,\"1097\":1,\"1170\":4,\"1175\":2,\"1179\":1,\"1284\":1,\"1710\":3,\"1712\":3,\"1713\":1,\"1728\":1,\"1729\":2,\"1733\":1,\"1737\":3,\"1738\":1,\"1751\":1,\"1753\":1,\"1756\":1,\"1763\":1}}],[\"modules=\",{\"1\":{\"1753\":1}}],[\"modules\",{\"0\":{\"1000\":1,\"1059\":1,\"1220\":1,\"1728\":1,\"1729\":1,\"1730\":1,\"1751\":1},\"1\":{\"23\":2,\"87\":2,\"93\":1,\"94\":2,\"110\":2,\"111\":1,\"119\":1,\"142\":1,\"181\":1,\"243\":1,\"468\":1,\"469\":2,\"977\":4,\"979\":2,\"981\":3,\"982\":2,\"1000\":1,\"1031\":2,\"1059\":1,\"1161\":1,\"1175\":1,\"1176\":2,\"1220\":1,\"1710\":3,\"1714\":2,\"1728\":2,\"1729\":4,\"1731\":1,\"1749\":1,\"1750\":3,\"1751\":1,\"1752\":1,\"1753\":1,\"1754\":2,\"1771\":2}}],[\"model\",{\"1\":{\"1021\":1}}],[\"modelled\",{\"1\":{\"10\":1,\"560\":1,\"1682\":1,\"1686\":1}}],[\"mode\",{\"0\":{\"1180\":1},\"1\":{\"80\":1,\"106\":1,\"119\":1,\"147\":1,\"347\":34,\"573\":1,\"575\":2,\"576\":1,\"795\":1,\"1176\":1,\"1178\":4,\"1190\":1,\"1284\":1,\"1324\":1,\"1330\":1,\"1554\":1,\"1559\":1,\"1716\":1,\"1798\":1,\"1804\":2,\"1805\":2,\"1806\":1}}],[\"modern\",{\"0\":{\"49\":1},\"1\":{\"39\":1,\"46\":1,\"49\":1,\"50\":1,\"57\":1}}],[\"modes\",{\"0\":{\"543\":1},\"1\":{\"23\":1,\"75\":1,\"94\":1,\"119\":1,\"120\":1,\"347\":1,\"471\":1,\"502\":1,\"571\":1,\"1171\":1,\"1325\":1,\"1331\":1,\"1554\":1,\"1557\":1,\"1559\":1,\"1561\":1,\"1562\":1,\"1709\":1,\"1748\":1,\"1775\":2,\"1801\":1}}],[\"memstats\",{\"1\":{\"1175\":1,\"1176\":1}}],[\"mem\",{\"1\":{\"865\":2,\"1260\":3,\"1267\":4}}],[\"memory\",{\"1\":{\"30\":4,\"39\":1,\"57\":1,\"90\":1,\"113\":1,\"115\":1,\"155\":1,\"258\":1,\"263\":3,\"265\":4,\"301\":1,\"306\":3,\"347\":2,\"350\":1,\"356\":3,\"357\":1,\"363\":3,\"771\":2,\"865\":1,\"891\":2,\"1077\":2,\"1150\":2,\"1235\":2,\"1482\":1,\"1520\":1,\"1607\":2,\"1612\":2,\"1618\":2,\"1622\":2,\"1626\":2,\"1632\":2,\"1636\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2,\"1679\":2,\"1688\":2,\"1694\":2,\"1699\":2,\"1735\":1}}],[\"measured\",{\"1\":{\"742\":1}}],[\"meaningful\",{\"1\":{\"1179\":1}}],[\"meaning\",{\"1\":{\"139\":1,\"522\":1}}],[\"mean\",{\"1\":{\"108\":1,\"214\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"means\",{\"1\":{\"3\":2,\"10\":1,\"39\":1,\"57\":1,\"113\":3,\"232\":1,\"251\":1,\"315\":1,\"323\":1,\"330\":1,\"433\":1,\"474\":1,\"511\":1,\"526\":1,\"576\":1,\"591\":1,\"597\":1,\"606\":1,\"677\":1,\"733\":1,\"743\":1,\"755\":1,\"756\":1,\"823\":1,\"906\":1,\"910\":1,\"1180\":1,\"1199\":1,\"1387\":1,\"1601\":2,\"1628\":1,\"1641\":1,\"1690\":1,\"1696\":1,\"1708\":1,\"1775\":1,\"1793\":1}}],[\"mechanism\",{\"1\":{\"1746\":1}}],[\"mechanisms\",{\"1\":{\"727\":1}}],[\"mechanics\",{\"1\":{\"1178\":1}}],[\"mechanical\",{\"1\":{\"95\":1}}],[\"merging\",{\"1\":{\"398\":1,\"1428\":1,\"1436\":1,\"1570\":1,\"1582\":1}}],[\"merges\",{\"1\":{\"365\":1}}],[\"merge\",{\"0\":{\"398\":1},\"1\":{\"139\":2,\"142\":1,\"146\":1,\"151\":2,\"396\":1,\"398\":2,\"399\":1,\"400\":4,\"1278\":1,\"1487\":1,\"1790\":1}}],[\"merged\",{\"1\":{\"103\":1,\"111\":1,\"162\":1}}],[\"medium\",{\"1\":{\"274\":1}}],[\"meet\",{\"1\":{\"247\":1,\"781\":3,\"783\":2,\"1163\":1}}],[\"menus\",{\"1\":{\"182\":1}}],[\"message\",{\"1\":{\"103\":1,\"108\":1,\"111\":1,\"113\":1,\"142\":1,\"143\":1,\"232\":1,\"233\":2,\"242\":1,\"616\":3,\"708\":1,\"806\":1,\"808\":1,\"984\":1,\"1021\":1,\"1065\":1,\"1067\":1,\"1237\":1,\"1305\":2,\"1350\":1,\"1746\":1,\"1750\":1}}],[\"messages\",{\"1\":{\"80\":1,\"106\":1,\"108\":1,\"121\":1,\"127\":1,\"155\":1,\"159\":1,\"423\":1,\"616\":4,\"1659\":1}}],[\"me\",{\"1\":{\"48\":1,\"50\":1,\"1728\":2,\"1789\":1}}],[\"metadata\",{\"1\":{\"643\":1,\"1735\":1}}],[\"meta\",{\"0\":{\"754\":1,\"765\":1,\"1343\":1},\"1\":{\"162\":3,\"235\":1,\"754\":7,\"765\":7,\"1343\":7,\"1756\":1}}],[\"metric\",{\"1\":{\"108\":1}}],[\"methods\",{\"0\":{\"218\":1},\"1\":{\"15\":1,\"26\":1,\"95\":2,\"103\":1,\"105\":1,\"113\":1,\"164\":1,\"218\":2,\"231\":3,\"393\":1,\"787\":1,\"948\":1,\"1098\":1,\"1176\":1,\"1182\":1,\"1570\":1,\"1719\":2,\"1727\":1,\"1741\":1}}],[\"method\",{\"0\":{\"572\":1,\"795\":1,\"854\":1,\"856\":1,\"948\":1,\"1068\":1,\"1190\":1,\"1760\":1},\"1\":{\"15\":1,\"26\":1,\"93\":2,\"103\":2,\"105\":1,\"111\":1,\"115\":1,\"121\":1,\"151\":1,\"163\":1,\"164\":1,\"218\":2,\"393\":1,\"438\":1,\"439\":1,\"441\":1,\"473\":1,\"544\":1,\"571\":1,\"582\":1,\"603\":1,\"628\":1,\"673\":1,\"675\":1,\"677\":2,\"742\":1,\"787\":1,\"808\":3,\"820\":1,\"823\":2,\"851\":2,\"910\":2,\"949\":1,\"950\":1,\"951\":1,\"1012\":1,\"1065\":1,\"1068\":2,\"1098\":1,\"1125\":1,\"1182\":1,\"1196\":1,\"1199\":2,\"1312\":1,\"1476\":1,\"1664\":1,\"1674\":2,\"1719\":3,\"1727\":1,\"1742\":2,\"1756\":1,\"1760\":1}}],[\"met\",{\"1\":{\"15\":1,\"26\":1,\"405\":1,\"440\":2,\"703\":1,\"861\":1,\"1008\":1,\"1039\":1,\"1255\":1,\"1319\":1,\"1707\":1}}],[\"music\",{\"1\":{\"1021\":1}}],[\"must\",{\"1\":{\"395\":1,\"403\":1,\"440\":3,\"520\":1,\"523\":1,\"596\":1,\"605\":1,\"677\":1,\"780\":2,\"823\":1,\"905\":1,\"910\":1,\"965\":1,\"1199\":1,\"1476\":1,\"1591\":1,\"1789\":1}}],[\"mustcompile\",{\"1\":{\"347\":4,\"1021\":1}}],[\"muscle\",{\"1\":{\"39\":1,\"57\":1,\"1520\":1}}],[\"mutable\",{\"1\":{\"142\":1,\"1772\":3}}],[\"mutexes\",{\"1\":{\"354\":1,\"361\":1}}],[\"mutex\",{\"1\":{\"93\":1,\"123\":1,\"845\":1}}],[\"multiplaform\",{\"1\":{\"1403\":1}}],[\"multiply\",{\"1\":{\"904\":1}}],[\"multiple\",{\"0\":{\"1155\":1,\"1532\":1},\"1\":{\"15\":3,\"26\":3,\"111\":2,\"117\":1,\"121\":1,\"159\":1,\"223\":1,\"231\":1,\"364\":1,\"365\":1,\"375\":2,\"405\":1,\"412\":1,\"434\":2,\"442\":1,\"591\":1,\"703\":2,\"730\":1,\"741\":1,\"859\":1,\"861\":2,\"863\":1,\"884\":1,\"942\":1,\"947\":1,\"967\":1,\"977\":1,\"1008\":2,\"1032\":1,\"1039\":1,\"1137\":1,\"1155\":1,\"1157\":1,\"1158\":2,\"1175\":1,\"1226\":1,\"1250\":1,\"1255\":2,\"1319\":2,\"1359\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1400\":1,\"1404\":2,\"1504\":1,\"1506\":1,\"1515\":1,\"1544\":1,\"1551\":1,\"1588\":1,\"1647\":1,\"1664\":1,\"1707\":2,\"1716\":1,\"1728\":2,\"1729\":1,\"1772\":3,\"1776\":1,\"1802\":1}}],[\"multi\",{\"0\":{\"1515\":1,\"1649\":1,\"1666\":1},\"1\":{\"223\":1,\"622\":2,\"722\":1,\"727\":1,\"733\":1,\"956\":1,\"1448\":1}}],[\"multiline\",{\"0\":{\"1544\":1},\"1\":{\"108\":2,\"121\":1,\"882\":1}}],[\"multitude\",{\"1\":{\"47\":1,\"62\":1}}],[\"multics\",{\"1\":{\"46\":1}}],[\"much\",{\"1\":{\"39\":1,\"46\":2,\"57\":1,\"142\":1,\"153\":1,\"239\":1,\"681\":1,\"764\":1,\"827\":1,\"882\":1,\"914\":1,\"986\":1,\"1096\":1,\"1203\":1,\"1570\":1,\"1578\":1,\"1582\":1,\"1716\":1,\"1719\":1}}],[\"murexout\",{\"1\":{\"1772\":1}}],[\"murex838290600\",{\"1\":{\"1299\":1}}],[\"murex\",{\"0\":{\"13\":1,\"17\":1,\"41\":1,\"52\":1,\"58\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"321\":1,\"892\":1,\"968\":1,\"976\":1,\"981\":1,\"983\":1,\"988\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1256\":1,\"1263\":1,\"1454\":1,\"1501\":1,\"1680\":1,\"1715\":1,\"1740\":1,\"1742\":1,\"1749\":1,\"1750\":1,\"1751\":1,\"1752\":1,\"1766\":1,\"1767\":1,\"1785\":1,\"1788\":1},\"1\":{\"0\":1,\"3\":3,\"10\":4,\"12\":2,\"14\":2,\"15\":24,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":10,\"26\":24,\"28\":1,\"30\":2,\"31\":1,\"36\":1,\"41\":7,\"42\":3,\"43\":2,\"47\":1,\"52\":2,\"53\":1,\"54\":3,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"68\":1,\"69\":2,\"71\":1,\"86\":1,\"87\":6,\"92\":1,\"94\":3,\"95\":1,\"96\":2,\"105\":1,\"108\":5,\"110\":5,\"111\":4,\"112\":3,\"113\":9,\"114\":1,\"115\":1,\"116\":2,\"118\":1,\"119\":4,\"120\":5,\"121\":4,\"122\":5,\"123\":1,\"124\":1,\"129\":1,\"130\":2,\"131\":2,\"160\":1,\"163\":1,\"164\":3,\"167\":1,\"169\":1,\"181\":1,\"183\":2,\"190\":3,\"192\":1,\"193\":4,\"194\":4,\"195\":4,\"196\":4,\"197\":3,\"198\":1,\"199\":5,\"201\":5,\"202\":1,\"206\":1,\"208\":11,\"210\":2,\"211\":1,\"214\":3,\"215\":1,\"216\":1,\"217\":2,\"218\":2,\"219\":1,\"220\":2,\"222\":1,\"223\":3,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":2,\"232\":1,\"237\":2,\"239\":1,\"242\":1,\"244\":1,\"247\":1,\"253\":1,\"255\":1,\"259\":3,\"261\":2,\"263\":2,\"264\":2,\"265\":2,\"267\":1,\"269\":2,\"270\":4,\"274\":1,\"276\":2,\"277\":5,\"281\":1,\"283\":2,\"288\":1,\"290\":5,\"291\":1,\"295\":1,\"297\":2,\"302\":3,\"304\":2,\"306\":2,\"308\":1,\"311\":1,\"312\":2,\"315\":1,\"316\":3,\"318\":2,\"323\":1,\"324\":3,\"326\":2,\"330\":1,\"331\":3,\"333\":3,\"337\":1,\"338\":2,\"340\":1,\"344\":1,\"345\":1,\"347\":1,\"350\":1,\"354\":3,\"355\":1,\"356\":1,\"357\":1,\"361\":3,\"362\":1,\"363\":1,\"371\":2,\"377\":1,\"387\":1,\"390\":1,\"391\":2,\"393\":1,\"397\":5,\"403\":1,\"404\":2,\"420\":1,\"423\":3,\"424\":1,\"433\":1,\"438\":1,\"440\":2,\"457\":2,\"459\":2,\"462\":1,\"463\":2,\"465\":1,\"468\":1,\"469\":2,\"475\":4,\"489\":1,\"491\":1,\"502\":1,\"508\":1,\"509\":2,\"510\":1,\"511\":2,\"515\":3,\"521\":1,\"522\":1,\"526\":2,\"530\":4,\"536\":1,\"566\":1,\"567\":1,\"575\":1,\"576\":3,\"577\":2,\"584\":2,\"585\":1,\"586\":1,\"589\":1,\"591\":1,\"595\":1,\"597\":1,\"599\":1,\"605\":1,\"606\":1,\"609\":1,\"611\":2,\"616\":2,\"618\":2,\"635\":2,\"641\":2,\"645\":1,\"651\":1,\"653\":2,\"656\":3,\"659\":7,\"660\":1,\"661\":1,\"664\":1,\"669\":2,\"675\":1,\"681\":1,\"682\":1,\"683\":1,\"685\":2,\"708\":3,\"710\":2,\"713\":3,\"718\":4,\"719\":1,\"720\":1,\"722\":2,\"723\":6,\"724\":1,\"725\":1,\"727\":2,\"728\":6,\"729\":1,\"730\":3,\"733\":5,\"735\":6,\"737\":1,\"741\":1,\"743\":2,\"744\":1,\"755\":2,\"756\":2,\"757\":1,\"778\":1,\"779\":4,\"780\":1,\"782\":1,\"785\":2,\"787\":4,\"799\":1,\"801\":1,\"802\":4,\"808\":1,\"809\":3,\"810\":2,\"815\":1,\"816\":1,\"827\":1,\"828\":1,\"829\":1,\"831\":2,\"837\":2,\"843\":2,\"844\":1,\"848\":1,\"849\":2,\"859\":1,\"861\":1,\"863\":1,\"865\":1,\"867\":1,\"871\":1,\"873\":1,\"891\":3,\"905\":1,\"906\":1,\"909\":1,\"914\":1,\"915\":1,\"916\":1,\"917\":2,\"930\":2,\"935\":3,\"945\":1,\"953\":1,\"954\":3,\"956\":1,\"962\":1,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":2,\"973\":1,\"974\":1,\"976\":1,\"977\":5,\"978\":9,\"981\":4,\"982\":6,\"983\":1,\"984\":1,\"985\":2,\"986\":1,\"987\":4,\"988\":1,\"989\":3,\"990\":1,\"991\":1,\"992\":1,\"994\":1,\"995\":2,\"999\":4,\"1000\":1,\"1001\":1,\"1002\":2,\"1018\":1,\"1021\":3,\"1022\":2,\"1024\":3,\"1031\":2,\"1053\":1,\"1054\":1,\"1058\":4,\"1059\":1,\"1061\":4,\"1069\":1,\"1070\":3,\"1077\":3,\"1097\":2,\"1098\":1,\"1102\":1,\"1103\":2,\"1123\":1,\"1128\":1,\"1135\":1,\"1143\":1,\"1150\":3,\"1171\":2,\"1172\":1,\"1173\":1,\"1175\":2,\"1176\":7,\"1178\":4,\"1179\":1,\"1182\":5,\"1189\":1,\"1203\":1,\"1204\":1,\"1205\":1,\"1207\":2,\"1208\":1,\"1213\":6,\"1219\":4,\"1220\":1,\"1222\":3,\"1235\":3,\"1237\":1,\"1241\":8,\"1253\":1,\"1262\":1,\"1267\":1,\"1270\":1,\"1282\":1,\"1283\":1,\"1289\":2,\"1295\":1,\"1300\":6,\"1301\":1,\"1325\":2,\"1331\":2,\"1332\":1,\"1333\":1,\"1335\":1,\"1337\":6,\"1347\":1,\"1356\":1,\"1357\":1,\"1360\":4,\"1373\":1,\"1388\":3,\"1398\":1,\"1400\":3,\"1401\":1,\"1403\":2,\"1412\":1,\"1440\":1,\"1451\":3,\"1453\":2,\"1455\":2,\"1486\":1,\"1491\":1,\"1495\":1,\"1497\":1,\"1498\":1,\"1500\":2,\"1501\":1,\"1504\":1,\"1505\":1,\"1513\":4,\"1516\":1,\"1535\":1,\"1557\":1,\"1562\":1,\"1564\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1578\":1,\"1580\":1,\"1584\":1,\"1591\":2,\"1592\":1,\"1594\":1,\"1600\":2,\"1601\":4,\"1603\":1,\"1609\":1,\"1618\":1,\"1626\":1,\"1628\":2,\"1631\":1,\"1632\":2,\"1634\":3,\"1636\":1,\"1638\":2,\"1641\":2,\"1642\":1,\"1644\":1,\"1645\":2,\"1654\":1,\"1657\":2,\"1666\":1,\"1667\":1,\"1668\":1,\"1670\":2,\"1671\":1,\"1672\":4,\"1673\":1,\"1674\":2,\"1675\":2,\"1679\":1,\"1688\":1,\"1690\":2,\"1694\":1,\"1696\":2,\"1698\":1,\"1699\":1,\"1700\":1,\"1704\":2,\"1705\":1,\"1707\":2,\"1708\":4,\"1709\":1,\"1710\":6,\"1713\":1,\"1714\":5,\"1715\":1,\"1716\":2,\"1717\":2,\"1719\":2,\"1720\":1,\"1722\":1,\"1725\":2,\"1727\":2,\"1728\":5,\"1729\":5,\"1731\":3,\"1732\":1,\"1733\":4,\"1734\":1,\"1735\":1,\"1738\":1,\"1739\":4,\"1740\":1,\"1741\":1,\"1742\":1,\"1743\":2,\"1744\":1,\"1745\":2,\"1746\":2,\"1748\":1,\"1749\":4,\"1750\":3,\"1751\":2,\"1752\":1,\"1753\":15,\"1754\":3,\"1755\":2,\"1756\":3,\"1767\":1,\"1768\":1,\"1771\":3,\"1772\":18,\"1773\":1,\"1774\":2,\"1775\":3,\"1777\":1,\"1780\":3,\"1782\":3,\"1783\":1,\"1787\":2,\"1789\":1,\"1790\":4,\"1791\":1,\"1794\":4,\"1801\":1,\"1814\":3}}],[\"micro\",{\"1\":{\"155\":1}}],[\"microsoft\",{\"1\":{\"42\":1,\"50\":1,\"202\":1,\"1741\":1}}],[\"mirrors\",{\"1\":{\"1631\":1,\"1644\":1}}],[\"mirror\",{\"1\":{\"150\":1,\"438\":1}}],[\"mimes\",{\"1\":{\"1021\":1}}],[\"mimetype\",{\"1\":{\"1021\":2}}],[\"mimetomurex\",{\"1\":{\"1021\":2}}],[\"mime\",{\"0\":{\"1021\":1},\"1\":{\"113\":1,\"808\":1,\"814\":1,\"1021\":13,\"1068\":1,\"1616\":4,\"1630\":4,\"1643\":4,\"1655\":20,\"1668\":20,\"1692\":4,\"1697\":4}}],[\"mimic\",{\"1\":{\"104\":1}}],[\"mix\",{\"1\":{\"111\":1,\"347\":1,\"1250\":1,\"1513\":1}}],[\"middle\",{\"1\":{\"882\":1,\"1778\":1}}],[\"mid\",{\"1\":{\"111\":1,\"223\":1,\"1760\":1,\"1772\":1}}],[\"minute\",{\"1\":{\"1392\":1}}],[\"minus\",{\"1\":{\"1336\":1}}],[\"mind\",{\"1\":{\"965\":2,\"1716\":1}}],[\"mindful\",{\"1\":{\"544\":1,\"606\":1,\"897\":1,\"906\":1}}],[\"minor\",{\"1\":{\"74\":1,\"86\":1,\"90\":1,\"93\":2,\"95\":1,\"109\":1,\"115\":1,\"117\":1,\"119\":1,\"138\":1,\"155\":1,\"163\":1,\"1336\":1}}],[\"mini\",{\"1\":{\"1617\":1}}],[\"minified\",{\"1\":{\"59\":2,\"261\":1,\"1520\":1,\"1538\":1,\"1644\":1}}],[\"minimum\",{\"1\":{\"119\":1,\"121\":1}}],[\"minimize\",{\"1\":{\"47\":1,\"340\":1,\"347\":1}}],[\"minimal\",{\"1\":{\"28\":1,\"1603\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1689\":1,\"1726\":1}}],[\"migrating\",{\"1\":{\"72\":1,\"121\":1}}],[\"might\",{\"1\":{\"3\":1,\"47\":2,\"53\":1,\"60\":1,\"76\":1,\"89\":1,\"90\":2,\"98\":1,\"111\":1,\"117\":1,\"218\":1,\"219\":1,\"261\":1,\"274\":1,\"291\":1,\"292\":1,\"304\":1,\"376\":1,\"387\":1,\"432\":1,\"442\":1,\"454\":1,\"468\":1,\"516\":3,\"517\":1,\"616\":1,\"626\":1,\"643\":2,\"653\":1,\"655\":1,\"679\":1,\"795\":1,\"825\":1,\"912\":1,\"924\":1,\"1023\":1,\"1110\":1,\"1190\":1,\"1201\":1,\"1217\":1,\"1321\":1,\"1366\":1,\"1387\":1,\"1400\":1,\"1451\":2,\"1488\":1,\"1549\":1,\"1578\":1,\"1579\":1,\"1586\":1,\"1601\":1,\"1666\":1,\"1672\":1,\"1708\":1,\"1722\":1,\"1744\":1,\"1745\":1,\"1750\":1,\"1753\":1,\"1784\":1,\"1789\":2}}],[\"misspelling\",{\"1\":{\"1789\":1}}],[\"misspelt\",{\"1\":{\"1789\":2}}],[\"missing\",{\"0\":{\"869\":1},\"1\":{\"103\":1,\"121\":1,\"123\":2,\"163\":1,\"423\":2,\"467\":1,\"1416\":2,\"1486\":1,\"1602\":1}}],[\"mission\",{\"1\":{\"52\":1}}],[\"mistake\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"misleading\",{\"1\":{\"675\":1}}],[\"misbehaving\",{\"1\":{\"255\":1}}],[\"miscellaneous\",{\"0\":{\"1809\":1},\"1\":{\"21\":1,\"1795\":1}}],[\"mitigate\",{\"1\":{\"3\":1}}],[\"malicious\",{\"1\":{\"1710\":1}}],[\"male\",{\"1\":{\"762\":2}}],[\"magenta\",{\"1\":{\"1701\":4}}],[\"madeupword\",{\"1\":{\"1789\":2}}],[\"made\",{\"1\":{\"1372\":1,\"1403\":1,\"1448\":1}}],[\"max+1\",{\"1\":{\"347\":1}}],[\"maximum\",{\"1\":{\"347\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"maxreportedunmatched\",{\"1\":{\"347\":4}}],[\"max\",{\"1\":{\"95\":1,\"347\":4,\"1106\":1,\"1108\":3,\"1226\":1,\"1691\":1}}],[\"main\",{\"1\":{\"121\":1,\"231\":1,\"605\":1,\"682\":2,\"828\":2,\"905\":1,\"915\":2,\"1204\":2,\"1486\":2}}],[\"maintain\",{\"1\":{\"1321\":1,\"1400\":1}}],[\"maintainable\",{\"1\":{\"91\":1,\"100\":1}}],[\"maintenance\",{\"0\":{\"91\":1,\"100\":1,\"104\":1,\"109\":1,\"128\":1},\"1\":{\"121\":1,\"123\":1}}],[\"mainly\",{\"1\":{\"73\":1,\"82\":1,\"95\":1,\"97\":1}}],[\"mainframes\",{\"1\":{\"39\":1,\"57\":1}}],[\"major\",{\"1\":{\"72\":1,\"83\":1,\"86\":1,\"88\":2,\"97\":1,\"102\":1,\"121\":1,\"1336\":1,\"1491\":1}}],[\"maybe\",{\"1\":{\"743\":1,\"756\":1,\"1610\":1,\"1641\":1}}],[\"may\",{\"1\":{\"50\":2,\"59\":2,\"108\":1,\"199\":1,\"208\":2,\"209\":1,\"227\":1,\"312\":1,\"441\":1,\"445\":1,\"755\":1,\"1081\":1,\"1115\":2,\"1178\":1,\"1250\":1,\"1403\":1,\"1449\":2,\"1479\":1,\"1516\":1,\"1602\":1,\"1628\":1,\"1648\":1,\"1649\":1,\"1651\":1,\"1652\":1,\"1659\":1,\"1661\":1,\"1662\":1,\"1665\":1,\"1666\":1,\"1690\":1,\"1696\":1,\"1793\":1}}],[\"mask\",{\"1\":{\"1121\":1,\"1122\":1,\"1123\":2}}],[\"masked\",{\"1\":{\"47\":1}}],[\"massively\",{\"1\":{\"86\":1}}],[\"massive\",{\"1\":{\"47\":1,\"119\":1,\"121\":1}}],[\"mastering\",{\"1\":{\"43\":1}}],[\"making\",{\"1\":{\"43\":1,\"108\":1,\"337\":1,\"344\":1,\"377\":1,\"1406\":1,\"1430\":1,\"1432\":1,\"1438\":1,\"1535\":1}}],[\"make\",{\"1\":{\"15\":1,\"26\":1,\"39\":1,\"46\":1,\"47\":1,\"48\":1,\"51\":1,\"52\":1,\"57\":1,\"70\":1,\"75\":1,\"108\":1,\"109\":1,\"119\":1,\"123\":1,\"125\":1,\"138\":1,\"142\":1,\"181\":1,\"211\":1,\"216\":1,\"340\":5,\"345\":1,\"347\":5,\"371\":1,\"402\":1,\"596\":1,\"618\":1,\"741\":1,\"947\":1,\"953\":2,\"967\":1,\"977\":1,\"1021\":1,\"1085\":1,\"1086\":1,\"1137\":1,\"1182\":1,\"1307\":1,\"1313\":1,\"1403\":1,\"1488\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1704\":1,\"1729\":1,\"1787\":1,\"1790\":1}}],[\"makes\",{\"1\":{\"15\":2,\"26\":2,\"47\":1,\"48\":1,\"52\":1,\"91\":1,\"100\":1,\"109\":1,\"111\":1,\"122\":1,\"181\":1,\"216\":1,\"270\":1,\"277\":1,\"387\":1,\"530\":2,\"607\":2,\"635\":2,\"641\":2,\"803\":1,\"809\":1,\"810\":1,\"816\":1,\"907\":2,\"1024\":2,\"1070\":2,\"1103\":2,\"1218\":1,\"1628\":1,\"1654\":1,\"1710\":1,\"1773\":2}}],[\"mar\",{\"1\":{\"1449\":1}}],[\"margin\",{\"1\":{\"929\":1}}],[\"march\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":2,\"1449\":1}}],[\"marshall\",{\"1\":{\"1601\":1}}],[\"marshalling\",{\"1\":{\"755\":1}}],[\"marshaller\",{\"1\":{\"134\":1,\"259\":2,\"260\":1,\"261\":2,\"270\":4,\"277\":4,\"283\":2,\"290\":3,\"297\":2,\"304\":1,\"315\":2,\"316\":3,\"319\":1,\"323\":2,\"324\":3,\"327\":1,\"330\":2,\"331\":3,\"334\":1,\"338\":2,\"340\":14,\"341\":1,\"345\":2,\"347\":14,\"348\":1,\"354\":2,\"1631\":1}}],[\"marshallers\",{\"1\":{\"121\":1,\"260\":1,\"261\":1,\"354\":2,\"403\":2,\"755\":1,\"889\":1,\"1075\":1,\"1148\":1,\"1175\":1,\"1176\":2,\"1233\":1,\"1261\":2}}],[\"marshalled\",{\"1\":{\"103\":1,\"318\":1,\"326\":1,\"333\":1,\"1258\":1}}],[\"marshalindent\",{\"1\":{\"261\":1}}],[\"marshaldata\",{\"0\":{\"350\":1},\"1\":{\"30\":1,\"259\":1,\"260\":2,\"263\":1,\"265\":1,\"306\":1,\"352\":1,\"353\":1,\"354\":3,\"361\":1,\"363\":1,\"891\":1,\"1077\":1,\"1150\":1,\"1235\":1}}],[\"marshal\",{\"0\":{\"258\":1},\"1\":{\"30\":1,\"134\":1,\"259\":1,\"260\":1,\"261\":3,\"262\":1,\"265\":1,\"270\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"306\":1,\"312\":1,\"316\":1,\"318\":11,\"324\":1,\"326\":11,\"331\":1,\"333\":11,\"338\":1,\"354\":1,\"355\":1,\"356\":1,\"363\":1,\"771\":1,\"953\":2,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1617\":1,\"1618\":1,\"1621\":1,\"1622\":1,\"1625\":1,\"1626\":1,\"1631\":1,\"1632\":1,\"1635\":1,\"1636\":1,\"1644\":1,\"1645\":1,\"1656\":1,\"1657\":1,\"1669\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1678\":1,\"1679\":1,\"1683\":1,\"1687\":1,\"1688\":1,\"1693\":1,\"1694\":1,\"1698\":1,\"1699\":1}}],[\"marked\",{\"1\":{\"873\":1,\"1276\":1}}],[\"markup\",{\"1\":{\"28\":1,\"758\":1,\"1603\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1694\":1,\"1695\":1}}],[\"markdown\",{\"1\":{\"14\":1,\"238\":1,\"1455\":1,\"1798\":2}}],[\"marks\",{\"0\":{\"683\":1,\"829\":1,\"916\":1,\"1205\":1},\"1\":{\"3\":2,\"40\":1,\"47\":3,\"237\":1,\"1509\":1,\"1513\":1,\"1542\":1}}],[\"manipulation\",{\"1\":{\"1128\":1}}],[\"manipulate\",{\"1\":{\"231\":1}}],[\"managing\",{\"1\":{\"977\":1,\"1729\":1}}],[\"management\",{\"1\":{\"977\":1,\"1350\":1,\"1538\":1,\"1729\":1,\"1772\":1}}],[\"managed\",{\"1\":{\"95\":1,\"121\":1,\"730\":1,\"733\":1,\"1751\":1}}],[\"manager\",{\"0\":{\"206\":1},\"1\":{\"15\":1,\"19\":1,\"26\":1,\"47\":1,\"87\":1,\"189\":1,\"206\":1,\"207\":1,\"976\":1,\"977\":1,\"1714\":1,\"1728\":1,\"1729\":1,\"1739\":1,\"1754\":1}}],[\"manage\",{\"1\":{\"15\":2,\"26\":2,\"112\":1,\"618\":1,\"802\":1,\"837\":1,\"843\":1,\"918\":1,\"919\":1,\"1002\":1,\"1053\":1,\"1182\":1,\"1222\":1,\"1301\":1}}],[\"many\",{\"1\":{\"38\":1,\"40\":1,\"43\":1,\"47\":2,\"48\":3,\"50\":5,\"51\":2,\"53\":2,\"56\":1,\"99\":2,\"121\":1,\"182\":1,\"368\":1,\"407\":1,\"1034\":1,\"1153\":1,\"1753\":1,\"1770\":1,\"1805\":1}}],[\"man\",{\"0\":{\"445\":1,\"923\":1,\"931\":1},\"1\":{\"15\":5,\"26\":5,\"66\":1,\"95\":1,\"111\":1,\"119\":2,\"120\":1,\"122\":1,\"170\":1,\"174\":2,\"178\":1,\"181\":3,\"183\":2,\"431\":1,\"445\":4,\"446\":1,\"453\":2,\"923\":1,\"924\":7,\"925\":2,\"926\":1,\"929\":1,\"930\":3,\"931\":1,\"932\":2,\"933\":1,\"934\":3,\"935\":3,\"968\":1,\"969\":1,\"971\":1,\"973\":1,\"975\":2,\"982\":1,\"984\":1,\"987\":1,\"1237\":1,\"1241\":1,\"1799\":1}}],[\"manuals\",{\"1\":{\"934\":1}}],[\"manually\",{\"1\":{\"431\":1,\"452\":1,\"819\":3,\"1179\":1,\"1195\":3,\"1287\":1,\"1713\":1,\"1738\":1}}],[\"manual\",{\"1\":{\"14\":1,\"609\":1,\"909\":1,\"1455\":1,\"1602\":2,\"1722\":1}}],[\"mapranges\",{\"1\":{\"1449\":1}}],[\"maptemplate\",{\"1\":{\"290\":1}}],[\"mapped\",{\"1\":{\"113\":1,\"526\":1}}],[\"maps\",{\"0\":{\"750\":1,\"1399\":1},\"1\":{\"24\":1,\"60\":1,\"123\":1,\"134\":1,\"151\":1,\"354\":1,\"361\":1,\"398\":1,\"762\":1,\"1258\":1,\"1280\":1,\"1502\":1,\"1536\":1,\"1537\":1,\"1631\":3,\"1644\":3,\"1656\":2,\"1669\":2,\"1698\":3,\"1772\":1}}],[\"map\",{\"0\":{\"442\":1,\"446\":1,\"526\":1,\"936\":1},\"1\":{\"15\":5,\"26\":5,\"44\":1,\"63\":1,\"111\":2,\"112\":1,\"118\":1,\"122\":1,\"130\":1,\"164\":1,\"249\":1,\"286\":1,\"290\":1,\"292\":1,\"300\":1,\"318\":8,\"326\":8,\"333\":8,\"340\":9,\"342\":1,\"347\":4,\"349\":1,\"353\":1,\"354\":1,\"361\":1,\"369\":4,\"378\":2,\"383\":2,\"399\":1,\"400\":1,\"404\":1,\"419\":3,\"431\":2,\"439\":2,\"442\":2,\"446\":1,\"447\":2,\"457\":1,\"489\":1,\"493\":2,\"530\":1,\"536\":1,\"537\":1,\"540\":1,\"541\":2,\"544\":1,\"545\":1,\"548\":3,\"591\":1,\"599\":2,\"611\":1,\"629\":1,\"651\":1,\"732\":2,\"745\":1,\"747\":1,\"748\":3,\"752\":1,\"758\":1,\"759\":1,\"760\":1,\"761\":3,\"763\":1,\"766\":1,\"809\":1,\"831\":1,\"847\":1,\"862\":1,\"863\":1,\"871\":1,\"877\":2,\"884\":4,\"891\":1,\"898\":3,\"917\":1,\"927\":1,\"936\":1,\"937\":1,\"938\":1,\"939\":1,\"940\":2,\"947\":3,\"960\":2,\"967\":3,\"1070\":1,\"1077\":1,\"1084\":2,\"1088\":2,\"1118\":2,\"1137\":3,\"1150\":1,\"1175\":1,\"1179\":1,\"1182\":2,\"1207\":1,\"1228\":2,\"1235\":1,\"1257\":1,\"1260\":1,\"1262\":1,\"1268\":2,\"1274\":2,\"1278\":6,\"1280\":1,\"1281\":2,\"1345\":1,\"1400\":2,\"1410\":2,\"1422\":2,\"1430\":2,\"1438\":2,\"1449\":7,\"1450\":2,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1683\":1,\"1687\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1701\":2,\"1772\":1,\"1774\":1}}],[\"matters\",{\"1\":{\"1386\":1}}],[\"matter\",{\"1\":{\"211\":1,\"1153\":1}}],[\"mathematics\",{\"1\":{\"408\":1}}],[\"mathematical\",{\"1\":{\"15\":3,\"26\":3,\"96\":1,\"112\":1,\"122\":1,\"183\":1,\"393\":1,\"600\":1,\"601\":1,\"611\":2,\"685\":3,\"686\":1,\"690\":2,\"745\":1,\"787\":1,\"831\":3,\"899\":1,\"900\":1,\"917\":2,\"1098\":1,\"1111\":1,\"1159\":1,\"1182\":1,\"1207\":3,\"1255\":1,\"1345\":1,\"1536\":1,\"1540\":1,\"1594\":1,\"1771\":1,\"1782\":1}}],[\"math\",{\"1\":{\"151\":1,\"605\":1,\"905\":1,\"953\":2}}],[\"maturity\",{\"1\":{\"121\":1}}],[\"mature\",{\"1\":{\"46\":1,\"1628\":1,\"1690\":1,\"1696\":1}}],[\"matchint\",{\"1\":{\"347\":24}}],[\"matching\",{\"1\":{\"15\":2,\"26\":2,\"61\":1,\"94\":2,\"127\":1,\"238\":3,\"347\":3,\"393\":1,\"463\":2,\"697\":2,\"787\":1,\"788\":1,\"797\":1,\"837\":1,\"843\":1,\"1098\":1,\"1128\":1,\"1183\":1,\"1186\":1,\"1192\":1,\"1245\":1,\"1249\":1,\"1719\":1,\"1772\":2,\"1805\":1}}],[\"matchstring\",{\"1\":{\"347\":8}}],[\"matchstr\",{\"1\":{\"347\":12}}],[\"matcher\",{\"1\":{\"1798\":1}}],[\"matched\",{\"0\":{\"443\":1},\"1\":{\"121\":1,\"431\":1,\"443\":2,\"444\":1,\"696\":1}}],[\"matches\",{\"0\":{\"794\":1,\"1189\":1},\"1\":{\"113\":1,\"129\":1,\"201\":1,\"202\":1,\"219\":1,\"433\":1,\"438\":1,\"696\":1,\"791\":2,\"793\":2,\"794\":1,\"795\":1,\"926\":1,\"1186\":2,\"1189\":1,\"1190\":1,\"1798\":1}}],[\"match\",{\"0\":{\"941\":1,\"1132\":1},\"1\":{\"15\":2,\"26\":2,\"50\":1,\"90\":1,\"111\":1,\"115\":1,\"347\":1,\"383\":2,\"419\":2,\"440\":1,\"441\":2,\"448\":1,\"452\":1,\"456\":1,\"513\":1,\"530\":2,\"789\":1,\"795\":2,\"797\":2,\"926\":2,\"941\":1,\"942\":7,\"943\":4,\"944\":4,\"945\":1,\"946\":2,\"995\":1,\"997\":1,\"999\":3,\"1021\":2,\"1058\":3,\"1061\":2,\"1084\":2,\"1116\":2,\"1131\":1,\"1134\":2,\"1137\":2,\"1155\":1,\"1184\":1,\"1188\":1,\"1190\":2,\"1192\":2,\"1217\":7,\"1219\":3,\"1222\":2,\"1250\":1,\"1513\":1,\"1698\":1,\"1798\":5}}],[\"material\",{\"0\":{\"11\":1,\"1452\":1,\"1499\":1}}],[\"macports\",{\"1\":{\"190\":1}}],[\"macs\",{\"1\":{\"190\":1}}],[\"mac\",{\"1\":{\"181\":1}}],[\"macro\",{\"1\":{\"115\":2,\"121\":1}}],[\"machines\",{\"1\":{\"95\":2,\"1107\":1,\"1728\":1}}],[\"machine\",{\"1\":{\"10\":1,\"445\":1,\"929\":1,\"1276\":1,\"1628\":1,\"1731\":2,\"1752\":1,\"1768\":1}}],[\"macos\",{\"0\":{\"2\":1,\"190\":1,\"201\":1},\"1\":{\"0\":1,\"42\":1,\"188\":2,\"201\":2,\"204\":1,\"208\":1,\"214\":1,\"560\":1,\"722\":1,\"727\":1,\"1016\":1,\"1023\":1,\"1300\":1,\"1372\":1}}],[\"m2\",{\"1\":{\"2\":1}}],[\"ibm\",{\"1\":{\"1799\":2,\"1802\":2}}],[\"ipc\",{\"1\":{\"1741\":2}}],[\"ip\",{\"1\":{\"1691\":2}}],[\"ipv4\",{\"1\":{\"376\":1,\"1405\":1}}],[\"iam\",{\"1\":{\"1629\":1}}],[\"iconservices\",{\"1\":{\"1484\":1}}],[\"i>=5\",{\"1\":{\"1341\":1}}],[\"irrespective\",{\"1\":{\"1591\":1,\"1778\":1}}],[\"irregular\",{\"1\":{\"695\":1,\"1487\":3}}],[\"iregex\",{\"1\":{\"926\":1}}],[\"i+=8\",{\"1\":{\"904\":1}}],[\"i++\",{\"1\":{\"347\":3,\"739\":1,\"741\":2,\"904\":1}}],[\"i<5\",{\"1\":{\"1341\":1}}],[\"i<\",{\"1\":{\"865\":1,\"1260\":4,\"1267\":8}}],[\"i<10001\",{\"1\":{\"742\":1}}],[\"i<10000\",{\"1\":{\"742\":1}}],[\"i<0\",{\"1\":{\"741\":1}}],[\"i<6\",{\"1\":{\"739\":1,\"741\":1}}],[\"i=i+2\",{\"1\":{\"742\":1}}],[\"i=i+1\",{\"1\":{\"742\":1,\"1341\":4}}],[\"i=0\",{\"1\":{\"741\":1,\"904\":1,\"1341\":4}}],[\"i=10\",{\"1\":{\"742\":1}}],[\"i=1\",{\"1\":{\"739\":1,\"741\":1,\"742\":1}}],[\"idiom\",{\"1\":{\"1712\":1,\"1737\":1}}],[\"idiomatic\",{\"1\":{\"582\":1,\"675\":1,\"742\":1}}],[\"id\",{\"1\":{\"575\":1,\"722\":2,\"727\":2,\"1300\":3,\"1484\":1,\"1629\":4,\"1716\":1,\"1757\":1,\"1758\":1}}],[\"ides\",{\"1\":{\"1720\":1}}],[\"identify\",{\"1\":{\"1710\":1,\"1762\":1}}],[\"identifiers\",{\"1\":{\"1629\":1}}],[\"identifier\",{\"1\":{\"920\":8,\"1401\":1,\"1432\":1}}],[\"identified\",{\"1\":{\"445\":1}}],[\"idea\",{\"1\":{\"103\":2,\"1723\":1}}],[\"ideas\",{\"1\":{\"53\":1}}],[\"ide\",{\"1\":{\"47\":1,\"454\":1,\"1721\":1}}],[\"illustrate\",{\"1\":{\"487\":1}}],[\"illustrative\",{\"1\":{\"47\":1}}],[\"iota\",{\"1\":{\"347\":1}}],[\"io\",{\"1\":{\"269\":1,\"270\":1,\"271\":1,\"276\":1,\"277\":1,\"278\":1,\"290\":1,\"292\":1,\"311\":2,\"312\":2,\"316\":1,\"318\":1,\"319\":1,\"324\":1,\"326\":1,\"327\":1,\"331\":1,\"333\":1,\"334\":1,\"1300\":3}}],[\"ignoring\",{\"1\":{\"225\":1}}],[\"ignoreprefix\",{\"0\":{\"448\":1},\"1\":{\"167\":1,\"431\":1}}],[\"ignored\",{\"0\":{\"1791\":1},\"1\":{\"61\":1,\"99\":2,\"119\":1,\"121\":1,\"129\":1,\"163\":1,\"499\":1,\"1251\":2,\"1252\":1,\"1253\":3,\"1323\":1,\"1329\":1,\"1487\":1,\"1791\":1}}],[\"ignore\",{\"1\":{\"42\":1,\"111\":1,\"208\":1,\"232\":2,\"1022\":1,\"1747\":1}}],[\"ieee\",{\"1\":{\"1620\":1,\"1677\":1}}],[\"ie\",{\"1\":{\"108\":1,\"113\":1,\"119\":1,\"150\":1,\"261\":1,\"354\":1,\"361\":1,\"410\":1,\"423\":1,\"431\":1,\"456\":1,\"607\":1,\"679\":1,\"781\":1,\"825\":1,\"907\":1,\"912\":1,\"924\":1,\"977\":1,\"999\":1,\"1036\":1,\"1037\":1,\"1058\":1,\"1141\":1,\"1201\":1,\"1219\":1,\"1321\":1,\"1381\":1,\"1401\":1,\"1432\":1,\"1509\":1,\"1567\":1,\"1591\":1,\"1703\":1,\"1729\":1,\"1759\":1,\"1760\":1}}],[\"immutable\",{\"1\":{\"111\":1,\"1772\":3}}],[\"implemented\",{\"1\":{\"1741\":1}}],[\"implementation\",{\"1\":{\"1701\":1}}],[\"implicit\",{\"1\":{\"42\":1}}],[\"impossible\",{\"1\":{\"965\":1}}],[\"important\",{\"1\":{\"222\":1,\"1719\":1}}],[\"imports\",{\"1\":{\"90\":2,\"1209\":1,\"1482\":1,\"1488\":1}}],[\"imported\",{\"1\":{\"90\":1,\"111\":1,\"162\":1,\"181\":1,\"1731\":1}}],[\"importing\",{\"1\":{\"90\":1,\"208\":1,\"1487\":3,\"1488\":1}}],[\"import\",{\"1\":{\"15\":1,\"26\":1,\"208\":3,\"209\":2,\"261\":1,\"269\":1,\"270\":1,\"276\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"304\":1,\"311\":1,\"312\":1,\"316\":1,\"318\":1,\"324\":1,\"326\":1,\"331\":1,\"333\":1,\"338\":1,\"340\":1,\"345\":1,\"347\":1,\"354\":1,\"361\":1,\"393\":1,\"509\":1,\"713\":1,\"787\":1,\"978\":2,\"979\":2,\"1021\":1,\"1098\":1,\"1182\":1,\"1208\":1,\"1209\":1,\"1295\":1,\"1300\":1,\"1337\":1,\"1497\":1,\"1714\":1,\"1731\":3,\"1733\":1,\"1739\":1,\"1782\":1}}],[\"impact\",{\"1\":{\"99\":2,\"155\":1}}],[\"improving\",{\"1\":{\"66\":1,\"170\":1}}],[\"improves\",{\"1\":{\"115\":1}}],[\"improvement\",{\"1\":{\"95\":1}}],[\"improvements\",{\"1\":{\"47\":1,\"66\":1,\"70\":1,\"72\":1,\"74\":1,\"75\":1,\"80\":1,\"90\":2,\"93\":2,\"95\":1,\"102\":1,\"106\":1,\"109\":1,\"115\":1,\"117\":1,\"119\":2,\"121\":1,\"123\":1,\"125\":1,\"163\":2,\"170\":1}}],[\"improve\",{\"1\":{\"90\":1,\"95\":1,\"103\":1,\"108\":1,\"437\":1,\"986\":1}}],[\"improved\",{\"1\":{\"51\":1,\"67\":1,\"108\":1,\"121\":1,\"127\":1,\"143\":1,\"155\":1,\"165\":1,\"168\":1,\"181\":3}}],[\"images\",{\"1\":{\"84\":1,\"86\":2,\"123\":2,\"163\":1,\"1010\":1,\"1016\":1,\"1021\":1}}],[\"image\",{\"0\":{\"1009\":1},\"1\":{\"15\":2,\"26\":2,\"87\":2,\"108\":1,\"1009\":1,\"1010\":1,\"1011\":2,\"1012\":2,\"1013\":1,\"1021\":1,\"1476\":1,\"1478\":1,\"1479\":2,\"1480\":2,\"1799\":1}}],[\"i\",{\"1\":{\"8\":1,\"39\":1,\"46\":1,\"47\":7,\"48\":6,\"50\":6,\"51\":1,\"52\":1,\"53\":2,\"59\":1,\"79\":1,\"90\":1,\"93\":2,\"109\":1,\"111\":1,\"127\":1,\"142\":1,\"182\":2,\"211\":1,\"247\":1,\"248\":1,\"251\":1,\"252\":1,\"318\":4,\"326\":8,\"333\":16,\"340\":58,\"347\":56,\"354\":2,\"361\":2,\"375\":1,\"487\":1,\"488\":1,\"534\":1,\"535\":1,\"695\":2,\"742\":3,\"743\":4,\"749\":1,\"751\":1,\"754\":3,\"755\":4,\"756\":4,\"765\":3,\"904\":1,\"1021\":1,\"1163\":1,\"1245\":3,\"1343\":3,\"1403\":1,\"1404\":1,\"1641\":4,\"1728\":1,\"1731\":1,\"1804\":1,\"1805\":2}}],[\"iflag=\",{\"1\":{\"447\":1}}],[\"if=\",{\"1\":{\"447\":1}}],[\"iface\",{\"1\":{\"283\":2,\"297\":2,\"338\":2,\"340\":4}}],[\"if\",{\"0\":{\"39\":1,\"57\":1,\"246\":1,\"744\":1,\"757\":1,\"850\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"1250\":1,\"1252\":1,\"1642\":1},\"1\":{\"8\":1,\"14\":1,\"15\":3,\"24\":2,\"26\":3,\"33\":2,\"36\":3,\"46\":2,\"48\":1,\"50\":1,\"52\":3,\"54\":3,\"59\":1,\"61\":2,\"76\":1,\"77\":1,\"94\":2,\"103\":3,\"107\":1,\"108\":1,\"111\":2,\"113\":5,\"115\":3,\"116\":2,\"117\":1,\"119\":1,\"120\":2,\"121\":5,\"126\":1,\"139\":1,\"151\":1,\"153\":1,\"162\":1,\"182\":3,\"189\":1,\"199\":1,\"202\":1,\"205\":1,\"207\":1,\"208\":2,\"211\":1,\"215\":1,\"217\":2,\"220\":1,\"224\":1,\"244\":1,\"246\":3,\"247\":2,\"251\":1,\"252\":3,\"253\":1,\"255\":1,\"261\":2,\"269\":1,\"270\":1,\"276\":1,\"277\":1,\"283\":2,\"292\":1,\"297\":2,\"304\":1,\"312\":1,\"318\":8,\"326\":7,\"333\":9,\"338\":2,\"340\":34,\"345\":1,\"347\":51,\"353\":1,\"354\":2,\"360\":1,\"361\":4,\"376\":2,\"387\":1,\"397\":2,\"408\":1,\"409\":1,\"412\":1,\"421\":1,\"423\":2,\"431\":1,\"433\":1,\"436\":1,\"437\":1,\"438\":4,\"439\":3,\"440\":5,\"443\":1,\"444\":1,\"445\":1,\"447\":2,\"449\":1,\"452\":1,\"453\":1,\"455\":1,\"456\":1,\"480\":1,\"483\":2,\"485\":5,\"487\":2,\"488\":1,\"489\":1,\"494\":1,\"502\":1,\"508\":1,\"520\":2,\"525\":1,\"526\":1,\"532\":1,\"534\":1,\"535\":1,\"536\":1,\"543\":1,\"544\":1,\"563\":1,\"576\":1,\"596\":1,\"603\":3,\"606\":1,\"611\":1,\"618\":2,\"653\":2,\"655\":1,\"656\":1,\"661\":2,\"677\":1,\"679\":1,\"703\":1,\"741\":1,\"743\":2,\"745\":1,\"747\":1,\"749\":1,\"754\":1,\"755\":2,\"756\":2,\"758\":1,\"760\":1,\"762\":1,\"765\":1,\"779\":1,\"781\":1,\"782\":2,\"791\":4,\"794\":1,\"795\":2,\"801\":1,\"814\":2,\"823\":1,\"825\":1,\"832\":1,\"833\":1,\"837\":1,\"838\":1,\"839\":1,\"843\":1,\"851\":2,\"853\":1,\"854\":1,\"855\":1,\"856\":1,\"857\":1,\"858\":4,\"859\":2,\"860\":2,\"869\":1,\"875\":1,\"886\":1,\"897\":1,\"906\":1,\"910\":1,\"912\":1,\"917\":1,\"924\":3,\"926\":1,\"932\":1,\"942\":1,\"975\":2,\"981\":1,\"984\":2,\"986\":1,\"989\":1,\"1008\":1,\"1013\":1,\"1016\":3,\"1021\":3,\"1022\":1,\"1023\":3,\"1035\":1,\"1036\":1,\"1039\":1,\"1043\":3,\"1052\":2,\"1103\":2,\"1123\":1,\"1125\":3,\"1126\":2,\"1141\":1,\"1142\":1,\"1145\":1,\"1153\":1,\"1154\":2,\"1170\":1,\"1178\":1,\"1186\":4,\"1189\":1,\"1190\":2,\"1199\":1,\"1201\":1,\"1217\":1,\"1237\":2,\"1244\":4,\"1245\":4,\"1248\":1,\"1249\":2,\"1250\":2,\"1251\":2,\"1252\":9,\"1253\":10,\"1255\":1,\"1267\":1,\"1272\":2,\"1278\":3,\"1287\":1,\"1297\":1,\"1300\":4,\"1301\":2,\"1312\":2,\"1319\":1,\"1321\":1,\"1325\":1,\"1327\":1,\"1329\":1,\"1331\":1,\"1343\":1,\"1350\":3,\"1360\":1,\"1366\":1,\"1369\":1,\"1377\":2,\"1384\":1,\"1386\":1,\"1400\":2,\"1403\":3,\"1405\":1,\"1416\":3,\"1417\":2,\"1421\":1,\"1428\":1,\"1436\":1,\"1444\":2,\"1448\":1,\"1455\":1,\"1461\":1,\"1479\":1,\"1486\":1,\"1487\":4,\"1489\":1,\"1496\":1,\"1502\":2,\"1505\":1,\"1513\":1,\"1517\":1,\"1542\":1,\"1545\":2,\"1553\":1,\"1554\":1,\"1558\":1,\"1559\":1,\"1561\":1,\"1564\":1,\"1568\":2,\"1592\":1,\"1602\":1,\"1610\":1,\"1641\":2,\"1674\":2,\"1703\":1,\"1706\":1,\"1708\":6,\"1716\":1,\"1719\":1,\"1723\":1,\"1724\":2,\"1725\":1,\"1726\":1,\"1741\":1,\"1747\":1,\"1750\":1,\"1756\":1,\"1757\":1,\"1770\":2,\"1771\":1,\"1772\":1,\"1774\":4,\"1777\":1,\"1778\":1,\"1780\":3,\"1781\":1,\"1782\":1,\"1784\":2,\"1787\":1,\"1788\":1,\"1789\":2,\"1793\":1,\"1798\":2,\"1800\":1,\"1802\":1}}],[\"ineffective\",{\"1\":{\"1808\":1}}],[\"inbuilt\",{\"1\":{\"1732\":1}}],[\"injects\",{\"1\":{\"1578\":1}}],[\"inject\",{\"1\":{\"1486\":1}}],[\"inherieted\",{\"1\":{\"747\":1}}],[\"inherited\",{\"1\":{\"679\":3,\"825\":3,\"912\":3,\"1201\":3,\"1746\":1}}],[\"inherit\",{\"1\":{\"50\":1,\"119\":1,\"135\":1,\"518\":1}}],[\"inappropiate\",{\"1\":{\"737\":1}}],[\"init\",{\"1\":{\"259\":1,\"260\":1,\"261\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"302\":1,\"303\":1,\"304\":1,\"310\":1,\"354\":2,\"361\":2,\"1260\":2,\"1267\":4,\"1300\":1}}],[\"initiate\",{\"1\":{\"1509\":1,\"1549\":1,\"1586\":1}}],[\"initiates\",{\"1\":{\"24\":4,\"1502\":4,\"1507\":3,\"1508\":1,\"1518\":3,\"1536\":3,\"1540\":3,\"1541\":1,\"1547\":3,\"1548\":1,\"1552\":3,\"1585\":1,\"1589\":3,\"1594\":3,\"1599\":3,\"1675\":2,\"1709\":1,\"1727\":1,\"1794\":1}}],[\"initialised\",{\"1\":{\"1142\":1}}],[\"initialized\",{\"1\":{\"108\":1,\"524\":1}}],[\"initial\",{\"1\":{\"208\":1}}],[\"inner\",{\"1\":{\"251\":1}}],[\"invert\",{\"1\":{\"1701\":1}}],[\"inverted\",{\"1\":{\"115\":1}}],[\"inverse\",{\"0\":{\"794\":1,\"1189\":1}}],[\"invalid\",{\"1\":{\"417\":1,\"743\":1,\"756\":1,\"1082\":1,\"1538\":1,\"1545\":1,\"1641\":1}}],[\"invoke\",{\"1\":{\"1217\":1}}],[\"invokes\",{\"1\":{\"244\":1,\"754\":1,\"765\":1,\"1343\":1}}],[\"invoked\",{\"1\":{\"111\":1,\"244\":1,\"254\":1,\"255\":1,\"256\":1,\"391\":1,\"710\":1,\"785\":1,\"992\":1,\"1097\":1,\"1161\":1,\"1775\":1}}],[\"invoking\",{\"1\":{\"111\":1}}],[\"increment\",{\"1\":{\"741\":1}}],[\"incrementation\",{\"1\":{\"738\":1,\"742\":1}}],[\"increase\",{\"1\":{\"437\":1}}],[\"inc\",{\"1\":{\"695\":2,\"1278\":1,\"1280\":1}}],[\"incarnation\",{\"1\":{\"246\":1}}],[\"incomplete\",{\"1\":{\"965\":1}}],[\"incompatible\",{\"1\":{\"159\":1,\"755\":1,\"986\":1}}],[\"incorrectly\",{\"1\":{\"1703\":1}}],[\"incorrect\",{\"1\":{\"121\":1,\"782\":1,\"1217\":1}}],[\"inclusive\",{\"1\":{\"1770\":1}}],[\"inclusion\",{\"1\":{\"113\":1}}],[\"include\",{\"0\":{\"868\":1},\"1\":{\"79\":1,\"82\":1,\"90\":1,\"97\":1,\"103\":1,\"111\":3,\"115\":1,\"142\":1,\"209\":2,\"244\":1,\"389\":1,\"438\":1,\"449\":1,\"450\":2,\"451\":2,\"452\":1,\"453\":1,\"477\":1,\"515\":1,\"520\":1,\"682\":1,\"692\":1,\"695\":1,\"733\":1,\"777\":1,\"794\":1,\"808\":1,\"828\":1,\"868\":1,\"915\":1,\"1043\":1,\"1068\":1,\"1095\":1,\"1153\":1,\"1170\":1,\"1176\":1,\"1179\":1,\"1189\":1,\"1204\":1,\"1209\":1,\"1486\":1,\"1648\":1,\"1649\":1,\"1665\":1,\"1666\":1,\"1765\":1,\"1798\":1}}],[\"includes\",{\"1\":{\"71\":1,\"75\":1,\"81\":1,\"90\":1,\"102\":1,\"111\":1,\"119\":1,\"123\":1,\"138\":1,\"142\":1,\"181\":1,\"873\":1,\"1169\":1,\"1270\":1,\"1487\":1,\"1716\":1,\"1724\":1,\"1764\":1,\"1798\":1}}],[\"included\",{\"1\":{\"8\":1,\"27\":2,\"30\":1,\"48\":1,\"78\":1,\"86\":1,\"113\":2,\"142\":1,\"209\":1,\"253\":1,\"265\":1,\"272\":1,\"279\":1,\"322\":1,\"329\":1,\"406\":1,\"440\":2,\"474\":1,\"520\":1,\"661\":1,\"1033\":1,\"1311\":2,\"1542\":1,\"1645\":1,\"1666\":1,\"1699\":1,\"1784\":1,\"1800\":1}}],[\"including\",{\"0\":{\"209\":1,\"444\":1},\"1\":{\"39\":1,\"57\":1,\"72\":1,\"121\":1,\"244\":1,\"431\":1,\"440\":1,\"680\":1,\"780\":2,\"793\":1,\"826\":1,\"913\":1,\"1202\":1,\"1750\":1,\"1808\":1}}],[\"incmanpagesautocomplete\",{\"1\":{\"174\":1}}],[\"incmanpage\",{\"0\":{\"453\":1},\"1\":{\"111\":1,\"174\":2,\"431\":1,\"438\":1}}],[\"incexepath\",{\"0\":{\"451\":1},\"1\":{\"111\":1,\"431\":1,\"438\":1}}],[\"incexeall\",{\"0\":{\"450\":1},\"1\":{\"111\":1,\"431\":1,\"438\":1}}],[\"incdirs\",{\"0\":{\"449\":1},\"1\":{\"111\":1,\"431\":1,\"434\":1,\"438\":1}}],[\"incfiles\",{\"0\":{\"452\":1},\"1\":{\"111\":1,\"431\":1,\"438\":1,\"441\":2,\"443\":1,\"444\":1,\"447\":2,\"449\":1}}],[\"individuals\",{\"1\":{\"1753\":1}}],[\"individually\",{\"1\":{\"71\":1,\"123\":1}}],[\"indicate\",{\"1\":{\"780\":2}}],[\"indirect\",{\"1\":{\"391\":1,\"710\":1,\"785\":1,\"1097\":1}}],[\"indentation\",{\"1\":{\"1691\":1}}],[\"indented\",{\"1\":{\"261\":1}}],[\"indexed\",{\"1\":{\"340\":2,\"341\":1,\"979\":1,\"1116\":1}}],[\"indexer\",{\"1\":{\"340\":2,\"347\":2}}],[\"indexes\",{\"1\":{\"150\":1,\"162\":1,\"340\":1,\"591\":1,\"595\":1,\"863\":1,\"867\":1,\"1175\":1,\"1176\":2,\"1611\":2,\"1617\":2,\"1625\":2,\"1683\":1,\"1687\":2}}],[\"indexing\",{\"1\":{\"337\":1,\"344\":1}}],[\"indextemplatetable\",{\"0\":{\"343\":1},\"1\":{\"30\":1,\"265\":1,\"284\":1,\"286\":1,\"298\":1,\"300\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"345\":2,\"347\":2}}],[\"indextemplateobject\",{\"0\":{\"336\":1},\"1\":{\"30\":1,\"265\":1,\"283\":1,\"284\":1,\"286\":1,\"297\":1,\"298\":1,\"300\":1,\"320\":1,\"328\":1,\"335\":1,\"338\":2,\"340\":2,\"349\":1}}],[\"index\",{\"0\":{\"862\":1,\"867\":1},\"1\":{\"15\":1,\"26\":1,\"30\":2,\"95\":1,\"103\":1,\"111\":1,\"115\":1,\"117\":2,\"118\":1,\"121\":1,\"122\":1,\"127\":1,\"134\":1,\"265\":2,\"272\":2,\"279\":2,\"280\":1,\"281\":2,\"283\":1,\"286\":2,\"293\":2,\"294\":1,\"295\":2,\"297\":1,\"300\":2,\"313\":2,\"320\":2,\"328\":2,\"335\":2,\"337\":1,\"338\":1,\"342\":3,\"344\":1,\"345\":1,\"349\":3,\"369\":1,\"378\":1,\"383\":1,\"404\":1,\"419\":2,\"433\":1,\"434\":1,\"440\":2,\"447\":1,\"456\":1,\"457\":1,\"515\":2,\"530\":1,\"548\":1,\"591\":2,\"599\":1,\"611\":1,\"629\":1,\"764\":1,\"766\":1,\"808\":1,\"809\":1,\"831\":1,\"847\":3,\"869\":2,\"870\":1,\"877\":1,\"884\":1,\"898\":1,\"917\":1,\"940\":1,\"960\":1,\"1067\":1,\"1070\":1,\"1084\":1,\"1113\":1,\"1118\":1,\"1176\":2,\"1182\":1,\"1207\":1,\"1228\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1281\":1,\"1400\":3,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1611\":2,\"1612\":3,\"1618\":1,\"1626\":1,\"1632\":3,\"1636\":1,\"1645\":3,\"1657\":3,\"1670\":3,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":3,\"1699\":3,\"1774\":1}}],[\"inlined\",{\"1\":{\"84\":1,\"86\":2,\"223\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1284\":1,\"1285\":1}}],[\"inline\",{\"1\":{\"23\":1,\"87\":1,\"90\":1,\"94\":1,\"98\":1,\"113\":1,\"119\":1,\"121\":1,\"372\":1,\"440\":1,\"791\":1,\"1186\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1433\":1,\"1441\":1,\"1722\":1,\"1727\":1,\"1783\":2,\"1814\":1}}],[\"inlining\",{\"1\":{\"16\":1,\"27\":1,\"48\":1,\"83\":1,\"86\":1,\"88\":1,\"92\":1,\"111\":1,\"112\":1,\"114\":1,\"163\":1,\"603\":1,\"1016\":1,\"1456\":1,\"1481\":1,\"1491\":1,\"1542\":1,\"1618\":1}}],[\"ins\",{\"1\":{\"1701\":1}}],[\"insert\",{\"1\":{\"1701\":1,\"1805\":4}}],[\"insecure\",{\"1\":{\"1022\":1}}],[\"insensitive\",{\"1\":{\"926\":1,\"1798\":1}}],[\"inspect\",{\"1\":{\"859\":1,\"1176\":1}}],[\"inspiration\",{\"1\":{\"46\":1}}],[\"inspired\",{\"1\":{\"46\":2,\"47\":2}}],[\"inside\",{\"0\":{\"683\":1,\"743\":1,\"756\":1,\"829\":1,\"916\":1,\"1205\":1,\"1641\":1},\"1\":{\"15\":1,\"26\":1,\"40\":1,\"77\":2,\"94\":1,\"113\":1,\"115\":3,\"119\":2,\"120\":1,\"129\":1,\"142\":1,\"228\":1,\"232\":1,\"237\":2,\"259\":1,\"260\":2,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"302\":1,\"303\":2,\"310\":1,\"375\":1,\"397\":2,\"409\":1,\"412\":1,\"432\":1,\"438\":1,\"447\":1,\"459\":1,\"488\":2,\"502\":1,\"519\":2,\"526\":1,\"535\":2,\"591\":1,\"596\":1,\"606\":1,\"656\":1,\"679\":6,\"681\":1,\"682\":1,\"683\":2,\"780\":2,\"825\":6,\"827\":1,\"828\":1,\"829\":2,\"861\":1,\"906\":1,\"912\":6,\"914\":1,\"915\":1,\"916\":2,\"1036\":1,\"1039\":1,\"1091\":1,\"1131\":1,\"1161\":1,\"1170\":1,\"1171\":1,\"1201\":6,\"1203\":1,\"1204\":1,\"1205\":2,\"1215\":1,\"1227\":1,\"1255\":1,\"1300\":1,\"1320\":1,\"1331\":1,\"1347\":1,\"1404\":1,\"1505\":1,\"1506\":1,\"1513\":1,\"1520\":2,\"1538\":1,\"1542\":1,\"1557\":1,\"1562\":1,\"1592\":1,\"1593\":4,\"1598\":2,\"1666\":1,\"1691\":1,\"1708\":1,\"1742\":1,\"1756\":2,\"1774\":1,\"1779\":1,\"1780\":4,\"1781\":2,\"1807\":1}}],[\"instruct\",{\"1\":{\"606\":1,\"906\":1}}],[\"instructions\",{\"0\":{\"200\":1,\"201\":1,\"202\":1},\"1\":{\"47\":2,\"188\":3,\"189\":2,\"202\":2,\"208\":3,\"216\":1,\"1723\":1,\"1788\":1}}],[\"instantiates\",{\"0\":{\"1781\":1}}],[\"instantiated\",{\"1\":{\"113\":1,\"1781\":1}}],[\"instantly\",{\"1\":{\"437\":1}}],[\"instance\",{\"1\":{\"423\":1,\"513\":1,\"516\":1,\"1513\":1,\"1753\":1}}],[\"instances\",{\"1\":{\"38\":1,\"56\":1,\"121\":1,\"126\":1,\"284\":1,\"298\":1,\"755\":1,\"764\":1,\"1753\":1,\"1757\":1}}],[\"installcoordinationd\",{\"1\":{\"1484\":1}}],[\"installs\",{\"1\":{\"979\":1}}],[\"installation\",{\"0\":{\"208\":1},\"1\":{\"208\":1}}],[\"installed\",{\"1\":{\"40\":1,\"86\":1,\"207\":1,\"467\":1,\"979\":2,\"989\":1,\"1029\":1,\"1176\":1,\"1245\":1,\"1448\":1,\"1750\":1,\"1751\":1,\"1784\":3,\"1787\":1,\"1793\":1}}],[\"install\",{\"0\":{\"19\":1,\"200\":1,\"203\":1},\"1\":{\"19\":2,\"86\":1,\"113\":1,\"188\":1,\"189\":2,\"202\":2,\"206\":1,\"207\":4,\"978\":2,\"979\":2,\"1733\":1,\"1784\":2,\"1793\":2},\"2\":{\"212\":1}}],[\"installing\",{\"0\":{\"206\":1},\"1\":{\"3\":1,\"202\":1}}],[\"instead\",{\"1\":{\"3\":1,\"47\":1,\"48\":1,\"107\":1,\"111\":1,\"121\":1,\"143\":1,\"208\":2,\"219\":1,\"223\":1,\"232\":1,\"238\":1,\"387\":1,\"397\":1,\"435\":1,\"439\":1,\"459\":1,\"487\":1,\"494\":1,\"511\":1,\"544\":1,\"566\":1,\"601\":1,\"682\":1,\"695\":1,\"749\":1,\"752\":1,\"763\":1,\"828\":1,\"897\":1,\"900\":1,\"915\":1,\"981\":1,\"1113\":1,\"1116\":1,\"1141\":1,\"1154\":2,\"1178\":1,\"1204\":1,\"1272\":1,\"1278\":1,\"1309\":1,\"1372\":1,\"1564\":1,\"1566\":1,\"1567\":1,\"1750\":1,\"1753\":1,\"1757\":1,\"1798\":1}}],[\"infinite\",{\"1\":{\"1347\":1}}],[\"infix\",{\"1\":{\"1703\":1}}],[\"infixing\",{\"1\":{\"126\":1,\"222\":1,\"1505\":1,\"1546\":1,\"1592\":1,\"1708\":1,\"1772\":1}}],[\"infixed\",{\"1\":{\"3\":1,\"23\":1,\"110\":1,\"117\":1,\"127\":1,\"483\":1,\"618\":1,\"1052\":1,\"1307\":1,\"1547\":1,\"1700\":1,\"1702\":1,\"1709\":1,\"1727\":1,\"1794\":1}}],[\"infer\",{\"1\":{\"227\":1}}],[\"inference\",{\"0\":{\"227\":1}}],[\"inferred\",{\"1\":{\"224\":1}}],[\"information\",{\"0\":{\"1667\":1},\"1\":{\"15\":2,\"26\":2,\"105\":1,\"110\":1,\"162\":1,\"235\":1,\"404\":1,\"469\":1,\"530\":1,\"570\":1,\"572\":1,\"575\":1,\"576\":1,\"577\":1,\"609\":1,\"651\":1,\"659\":1,\"669\":1,\"713\":1,\"723\":1,\"728\":1,\"735\":1,\"743\":1,\"756\":1,\"758\":1,\"802\":2,\"849\":1,\"861\":1,\"891\":1,\"909\":1,\"954\":1,\"982\":1,\"987\":1,\"1002\":1,\"1031\":1,\"1061\":1,\"1077\":1,\"1150\":1,\"1172\":1,\"1182\":1,\"1213\":1,\"1222\":1,\"1235\":1,\"1241\":2,\"1262\":1,\"1337\":1,\"1546\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1641\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1714\":1,\"1727\":1,\"1735\":1,\"1746\":1,\"1756\":2}}],[\"intuitively\",{\"1\":{\"228\":1}}],[\"introduce\",{\"1\":{\"1451\":1}}],[\"introduces\",{\"1\":{\"70\":1,\"79\":1,\"80\":1,\"106\":1,\"111\":1,\"125\":1,\"1719\":1}}],[\"introduced\",{\"1\":{\"61\":1,\"77\":1,\"78\":1,\"90\":1,\"113\":1,\"115\":1,\"209\":1,\"1516\":1}}],[\"introducing\",{\"1\":{\"40\":1,\"73\":1,\"95\":1}}],[\"introduction\",{\"0\":{\"214\":1},\"1\":{\"12\":1,\"22\":1,\"23\":1,\"87\":1,\"94\":1,\"110\":1,\"469\":1,\"982\":1,\"1031\":1,\"1453\":1,\"1500\":1,\"1714\":1,\"1728\":1,\"1754\":1,\"1771\":1}}],[\"int\",{\"0\":{\"437\":1,\"1633\":1},\"1\":{\"28\":1,\"90\":1,\"182\":1,\"183\":1,\"278\":1,\"333\":4,\"340\":6,\"347\":16,\"431\":1,\"447\":2,\"474\":1,\"605\":1,\"607\":1,\"677\":3,\"743\":1,\"756\":1,\"782\":3,\"823\":3,\"887\":1,\"905\":1,\"907\":1,\"910\":3,\"1022\":1,\"1107\":2,\"1108\":2,\"1146\":1,\"1199\":3,\"1245\":1,\"1300\":1,\"1449\":7,\"1601\":1,\"1603\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1641\":1,\"1677\":1,\"1679\":1,\"1688\":1}}],[\"into\",{\"1\":{\"3\":1,\"8\":1,\"12\":1,\"15\":3,\"16\":1,\"22\":1,\"26\":3,\"27\":1,\"30\":6,\"38\":1,\"40\":3,\"47\":3,\"48\":1,\"50\":2,\"53\":1,\"56\":1,\"71\":1,\"79\":1,\"90\":1,\"92\":2,\"93\":1,\"101\":1,\"103\":1,\"108\":2,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"121\":1,\"123\":1,\"127\":1,\"135\":1,\"142\":1,\"162\":1,\"208\":4,\"220\":1,\"228\":1,\"229\":1,\"236\":1,\"258\":1,\"263\":3,\"264\":1,\"265\":6,\"270\":1,\"272\":2,\"277\":1,\"279\":2,\"301\":1,\"306\":3,\"314\":1,\"322\":1,\"329\":1,\"347\":1,\"350\":1,\"356\":3,\"357\":1,\"363\":3,\"369\":1,\"387\":1,\"404\":1,\"440\":1,\"441\":1,\"465\":1,\"475\":1,\"494\":1,\"495\":1,\"522\":1,\"548\":2,\"562\":1,\"576\":1,\"626\":1,\"653\":1,\"659\":1,\"713\":1,\"714\":1,\"715\":1,\"723\":1,\"728\":1,\"733\":1,\"735\":1,\"741\":1,\"742\":1,\"743\":1,\"756\":1,\"758\":1,\"762\":1,\"767\":1,\"771\":2,\"795\":2,\"878\":1,\"891\":2,\"898\":1,\"940\":1,\"942\":1,\"947\":1,\"958\":1,\"960\":1,\"962\":1,\"967\":1,\"973\":1,\"999\":1,\"1058\":1,\"1077\":2,\"1089\":1,\"1111\":1,\"1118\":1,\"1137\":1,\"1150\":2,\"1176\":2,\"1182\":1,\"1190\":2,\"1219\":1,\"1235\":2,\"1257\":1,\"1262\":1,\"1268\":2,\"1276\":1,\"1280\":1,\"1281\":1,\"1307\":1,\"1313\":1,\"1377\":1,\"1403\":1,\"1448\":1,\"1453\":1,\"1456\":1,\"1481\":1,\"1482\":1,\"1486\":1,\"1487\":4,\"1488\":1,\"1489\":1,\"1500\":1,\"1578\":1,\"1580\":1,\"1607\":2,\"1612\":3,\"1618\":4,\"1622\":2,\"1626\":3,\"1631\":3,\"1632\":3,\"1636\":3,\"1641\":1,\"1644\":2,\"1645\":5,\"1647\":1,\"1650\":1,\"1656\":2,\"1657\":3,\"1664\":1,\"1669\":2,\"1670\":3,\"1672\":2,\"1675\":3,\"1679\":3,\"1688\":3,\"1694\":3,\"1698\":2,\"1699\":5,\"1700\":1,\"1708\":3,\"1716\":1,\"1723\":1,\"1725\":1,\"1728\":1,\"1747\":1,\"1791\":1,\"1794\":1,\"1804\":1}}],[\"integrate\",{\"1\":{\"1672\":1}}],[\"integrated\",{\"1\":{\"50\":1}}],[\"integrations\",{\"1\":{\"181\":2}}],[\"integers\",{\"1\":{\"121\":1,\"377\":2,\"875\":1,\"1272\":1,\"1410\":2,\"1423\":1,\"1430\":1,\"1431\":1,\"1438\":1,\"1535\":2,\"1634\":1}}],[\"integer\",{\"0\":{\"1154\":1},\"1\":{\"103\":1,\"121\":1,\"333\":2,\"340\":3,\"447\":2,\"677\":2,\"808\":1,\"823\":2,\"910\":2,\"953\":1,\"1067\":1,\"1107\":2,\"1108\":2,\"1155\":2,\"1199\":2,\"1428\":1,\"1436\":1,\"1494\":1,\"1634\":1,\"1772\":2}}],[\"intention\",{\"1\":{\"154\":1,\"956\":1}}],[\"intentionally\",{\"1\":{\"40\":1,\"762\":1}}],[\"intended\",{\"1\":{\"46\":1,\"93\":1,\"182\":1,\"468\":1,\"929\":1}}],[\"inter\",{\"1\":{\"1741\":1,\"1746\":1}}],[\"interoperable\",{\"1\":{\"1628\":1}}],[\"interpreting\",{\"1\":{\"1708\":1}}],[\"interpreted\",{\"1\":{\"606\":1,\"906\":1}}],[\"interpretation\",{\"1\":{\"38\":1,\"56\":1}}],[\"interpolation\",{\"1\":{\"605\":3,\"606\":1,\"607\":2,\"905\":3,\"906\":1,\"907\":2}}],[\"interactivity\",{\"1\":{\"437\":1}}],[\"interactively\",{\"1\":{\"783\":1,\"784\":1}}],[\"interactive\",{\"0\":{\"1715\":1},\"1\":{\"23\":2,\"29\":1,\"46\":1,\"47\":3,\"48\":1,\"53\":1,\"54\":2,\"70\":1,\"81\":1,\"87\":2,\"102\":2,\"103\":1,\"108\":3,\"113\":1,\"119\":1,\"125\":1,\"130\":2,\"162\":2,\"164\":2,\"167\":1,\"169\":1,\"215\":1,\"216\":1,\"231\":1,\"238\":1,\"391\":2,\"397\":3,\"426\":1,\"433\":1,\"438\":1,\"459\":1,\"462\":1,\"525\":1,\"647\":1,\"679\":2,\"710\":2,\"743\":2,\"756\":2,\"785\":2,\"825\":2,\"857\":1,\"865\":1,\"912\":2,\"954\":2,\"984\":1,\"1091\":1,\"1097\":2,\"1201\":2,\"1237\":1,\"1347\":1,\"1360\":1,\"1374\":1,\"1375\":1,\"1377\":4,\"1388\":2,\"1570\":1,\"1641\":2,\"1713\":1,\"1715\":1,\"1716\":1,\"1721\":1,\"1738\":1,\"1772\":1,\"1794\":2,\"1801\":1,\"1812\":1,\"1814\":2}}],[\"interchangeably\",{\"1\":{\"217\":1,\"231\":1,\"1570\":1,\"1582\":1}}],[\"interrupts\",{\"0\":{\"1349\":1,\"1368\":1,\"1377\":1,\"1392\":1},\"1\":{\"1375\":1,\"1386\":1,\"1387\":4}}],[\"interrupt\",{\"0\":{\"1382\":1,\"1397\":1},\"1\":{\"180\":1,\"643\":5,\"648\":1,\"1350\":2,\"1352\":1,\"1356\":1,\"1357\":1,\"1363\":1,\"1366\":1,\"1369\":2,\"1378\":3,\"1380\":1,\"1383\":2,\"1384\":1,\"1387\":1,\"1395\":1}}],[\"interesting\",{\"1\":{\"42\":1,\"51\":1,\"214\":1}}],[\"interface\",{\"1\":{\"38\":1,\"56\":1,\"216\":1,\"261\":1,\"262\":1,\"267\":1,\"270\":1,\"274\":1,\"276\":1,\"277\":2,\"278\":1,\"281\":1,\"283\":2,\"288\":1,\"290\":1,\"295\":1,\"297\":2,\"304\":2,\"308\":1,\"309\":3,\"316\":1,\"318\":16,\"319\":2,\"324\":1,\"326\":16,\"327\":2,\"331\":1,\"333\":23,\"334\":3,\"338\":2,\"340\":20,\"341\":2,\"348\":1,\"354\":1,\"355\":1,\"361\":2,\"934\":1}}],[\"intervals\",{\"1\":{\"29\":1,\"647\":1,\"1389\":1}}],[\"internal\",{\"1\":{\"15\":1,\"26\":1,\"91\":1,\"100\":1,\"105\":1,\"110\":1,\"111\":1,\"113\":1,\"119\":1,\"155\":1,\"264\":1,\"404\":1,\"469\":1,\"530\":1,\"577\":1,\"651\":1,\"659\":1,\"669\":1,\"713\":1,\"723\":1,\"728\":1,\"735\":1,\"802\":1,\"849\":1,\"891\":1,\"954\":1,\"982\":1,\"987\":1,\"1002\":1,\"1031\":1,\"1061\":1,\"1077\":1,\"1150\":1,\"1172\":1,\"1173\":1,\"1178\":2,\"1213\":1,\"1222\":1,\"1235\":1,\"1241\":2,\"1262\":1,\"1337\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1714\":1,\"1727\":1}}],[\"internals\",{\"1\":{\"3\":1,\"1746\":1}}],[\"intelligent\",{\"1\":{\"1719\":1}}],[\"intelligently\",{\"1\":{\"1016\":1}}],[\"intel\",{\"1\":{\"2\":1}}],[\"in\",{\"0\":{\"38\":1,\"40\":1,\"41\":1,\"42\":1,\"58\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"1000\":1,\"1059\":1,\"1178\":1,\"1220\":1,\"1742\":1},\"1\":{\"3\":1,\"8\":1,\"15\":10,\"19\":1,\"23\":2,\"26\":10,\"29\":1,\"33\":1,\"34\":1,\"36\":5,\"37\":1,\"38\":6,\"39\":4,\"40\":3,\"41\":6,\"42\":3,\"43\":2,\"45\":1,\"46\":6,\"47\":3,\"48\":2,\"50\":9,\"51\":4,\"52\":2,\"54\":1,\"56\":6,\"57\":5,\"59\":2,\"61\":2,\"66\":1,\"68\":1,\"70\":1,\"73\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"86\":1,\"90\":9,\"91\":1,\"92\":1,\"93\":2,\"94\":3,\"95\":7,\"96\":2,\"99\":3,\"100\":1,\"102\":1,\"103\":5,\"104\":1,\"106\":1,\"108\":7,\"109\":1,\"111\":4,\"112\":2,\"113\":10,\"114\":1,\"115\":8,\"117\":4,\"118\":1,\"119\":6,\"120\":3,\"121\":8,\"123\":4,\"125\":1,\"126\":1,\"127\":3,\"129\":5,\"130\":1,\"139\":1,\"142\":3,\"151\":1,\"155\":2,\"159\":1,\"160\":1,\"162\":2,\"163\":2,\"169\":2,\"170\":1,\"174\":1,\"181\":1,\"182\":4,\"183\":1,\"189\":1,\"197\":1,\"202\":2,\"208\":5,\"209\":1,\"210\":1,\"214\":2,\"216\":1,\"217\":2,\"218\":2,\"219\":1,\"220\":1,\"222\":3,\"224\":1,\"227\":1,\"228\":5,\"231\":3,\"232\":2,\"238\":4,\"239\":2,\"242\":1,\"244\":1,\"246\":1,\"251\":1,\"252\":1,\"253\":1,\"255\":1,\"259\":2,\"261\":2,\"274\":1,\"278\":1,\"285\":1,\"291\":1,\"292\":1,\"299\":1,\"302\":1,\"309\":1,\"340\":4,\"341\":1,\"347\":2,\"348\":2,\"354\":2,\"361\":2,\"365\":1,\"369\":1,\"375\":2,\"378\":1,\"383\":2,\"387\":5,\"390\":2,\"391\":1,\"395\":1,\"400\":2,\"402\":1,\"408\":1,\"412\":1,\"417\":1,\"419\":2,\"421\":1,\"423\":3,\"425\":1,\"426\":1,\"433\":3,\"434\":1,\"436\":2,\"437\":2,\"438\":1,\"439\":1,\"440\":2,\"441\":2,\"443\":1,\"447\":4,\"450\":1,\"451\":1,\"452\":1,\"454\":2,\"456\":1,\"459\":1,\"462\":1,\"465\":1,\"468\":1,\"470\":1,\"471\":1,\"474\":1,\"479\":1,\"487\":1,\"488\":2,\"491\":3,\"497\":1,\"502\":2,\"508\":1,\"513\":1,\"515\":1,\"516\":1,\"518\":1,\"525\":1,\"526\":1,\"530\":1,\"532\":3,\"535\":2,\"537\":1,\"540\":1,\"541\":2,\"544\":2,\"545\":3,\"546\":2,\"561\":2,\"562\":3,\"563\":3,\"565\":1,\"576\":1,\"591\":1,\"593\":1,\"595\":2,\"596\":1,\"597\":1,\"599\":1,\"605\":1,\"609\":1,\"618\":1,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"647\":1,\"648\":1,\"656\":2,\"659\":1,\"661\":1,\"678\":1,\"679\":5,\"680\":1,\"692\":1,\"694\":1,\"710\":1,\"713\":2,\"718\":1,\"720\":1,\"723\":1,\"728\":1,\"732\":2,\"733\":1,\"735\":1,\"737\":1,\"741\":3,\"742\":3,\"743\":4,\"747\":1,\"749\":1,\"751\":2,\"752\":2,\"755\":2,\"756\":4,\"758\":1,\"760\":1,\"762\":1,\"764\":1,\"768\":1,\"775\":1,\"778\":1,\"780\":3,\"781\":4,\"782\":2,\"783\":3,\"785\":1,\"794\":1,\"795\":1,\"797\":1,\"814\":1,\"824\":1,\"825\":5,\"826\":1,\"848\":1,\"857\":1,\"859\":1,\"861\":1,\"863\":1,\"865\":2,\"867\":2,\"868\":1,\"869\":2,\"871\":1,\"877\":1,\"882\":2,\"884\":1,\"885\":1,\"891\":4,\"897\":2,\"905\":1,\"909\":1,\"911\":1,\"912\":5,\"913\":1,\"922\":1,\"937\":1,\"940\":1,\"941\":1,\"945\":1,\"947\":3,\"954\":1,\"956\":1,\"960\":1,\"962\":1,\"965\":3,\"967\":3,\"979\":1,\"981\":2,\"984\":2,\"986\":3,\"989\":2,\"999\":4,\"1000\":2,\"1002\":1,\"1020\":1,\"1021\":3,\"1022\":1,\"1023\":1,\"1039\":1,\"1043\":1,\"1058\":4,\"1059\":2,\"1061\":2,\"1071\":1,\"1077\":4,\"1082\":1,\"1084\":2,\"1096\":2,\"1097\":1,\"1108\":1,\"1113\":2,\"1118\":1,\"1135\":1,\"1137\":4,\"1142\":1,\"1144\":1,\"1150\":4,\"1153\":1,\"1155\":1,\"1161\":2,\"1166\":3,\"1167\":2,\"1171\":3,\"1175\":2,\"1178\":1,\"1182\":1,\"1188\":1,\"1189\":1,\"1190\":1,\"1192\":1,\"1200\":1,\"1201\":5,\"1202\":1,\"1213\":1,\"1217\":1,\"1219\":4,\"1220\":2,\"1222\":1,\"1223\":1,\"1224\":1,\"1226\":1,\"1229\":1,\"1235\":4,\"1237\":2,\"1253\":1,\"1254\":1,\"1255\":1,\"1272\":1,\"1274\":1,\"1276\":1,\"1278\":5,\"1281\":1,\"1284\":1,\"1285\":1,\"1300\":2,\"1321\":3,\"1325\":2,\"1326\":1,\"1327\":1,\"1331\":1,\"1337\":1,\"1347\":1,\"1350\":1,\"1360\":2,\"1366\":1,\"1369\":1,\"1374\":1,\"1375\":2,\"1377\":2,\"1384\":1,\"1386\":1,\"1387\":1,\"1392\":1,\"1400\":3,\"1401\":3,\"1403\":2,\"1404\":2,\"1410\":1,\"1417\":1,\"1421\":1,\"1422\":1,\"1430\":1,\"1432\":3,\"1438\":1,\"1444\":1,\"1448\":2,\"1450\":1,\"1451\":1,\"1478\":1,\"1479\":2,\"1482\":1,\"1486\":2,\"1505\":1,\"1509\":2,\"1513\":3,\"1520\":2,\"1538\":2,\"1549\":1,\"1554\":2,\"1557\":2,\"1559\":2,\"1561\":2,\"1562\":2,\"1564\":1,\"1570\":3,\"1571\":1,\"1575\":2,\"1582\":2,\"1583\":1,\"1586\":1,\"1591\":1,\"1592\":1,\"1600\":1,\"1601\":3,\"1602\":3,\"1611\":1,\"1615\":2,\"1620\":1,\"1628\":2,\"1631\":3,\"1634\":1,\"1641\":4,\"1644\":3,\"1654\":1,\"1656\":2,\"1666\":2,\"1669\":2,\"1672\":2,\"1675\":1,\"1690\":2,\"1693\":2,\"1696\":2,\"1698\":4,\"1700\":1,\"1701\":11,\"1702\":1,\"1703\":1,\"1706\":1,\"1708\":1,\"1709\":1,\"1710\":1,\"1712\":1,\"1713\":1,\"1716\":7,\"1717\":1,\"1719\":5,\"1721\":1,\"1727\":1,\"1728\":2,\"1731\":1,\"1735\":2,\"1737\":1,\"1738\":1,\"1740\":1,\"1741\":2,\"1742\":2,\"1744\":1,\"1745\":2,\"1746\":3,\"1747\":1,\"1748\":2,\"1749\":1,\"1750\":3,\"1752\":2,\"1753\":6,\"1756\":2,\"1757\":2,\"1758\":1,\"1762\":1,\"1766\":1,\"1772\":5,\"1773\":1,\"1774\":2,\"1775\":2,\"1776\":3,\"1777\":3,\"1778\":1,\"1779\":1,\"1780\":3,\"1781\":1,\"1782\":1,\"1784\":1,\"1786\":1,\"1787\":1,\"1788\":1,\"1789\":1,\"1790\":1,\"1791\":2,\"1793\":2,\"1797\":2,\"1798\":5,\"1800\":1,\"1801\":1,\"1802\":1,\"1805\":1,\"1806\":2,\"1807\":1,\"1808\":2}}],[\"inputted\",{\"1\":{\"1309\":1}}],[\"inputting\",{\"1\":{\"783\":1}}],[\"inputed\",{\"1\":{\"1120\":1}}],[\"inputs\",{\"1\":{\"181\":1,\"1647\":1,\"1664\":1}}],[\"input\",{\"1\":{\"3\":1,\"15\":5,\"26\":5,\"41\":1,\"58\":1,\"59\":1,\"112\":1,\"116\":1,\"138\":1,\"232\":1,\"364\":1,\"365\":1,\"394\":1,\"563\":1,\"568\":1,\"619\":1,\"620\":1,\"629\":1,\"631\":1,\"635\":1,\"637\":1,\"641\":1,\"747\":1,\"762\":1,\"884\":1,\"940\":1,\"942\":1,\"947\":1,\"956\":1,\"960\":1,\"962\":1,\"967\":1,\"975\":1,\"1052\":2,\"1118\":1,\"1119\":1,\"1126\":1,\"1137\":1,\"1154\":1,\"1155\":1,\"1171\":1,\"1224\":1,\"1260\":1,\"1262\":1,\"1268\":1,\"1308\":1,\"1313\":1,\"1329\":1,\"1400\":2,\"1463\":1,\"1469\":1,\"1474\":1,\"1476\":1,\"1482\":1,\"1628\":1,\"1746\":1,\"1794\":1}}],[\"italic\",{\"1\":{\"1701\":1}}],[\"ittindex\",{\"1\":{\"347\":2}}],[\"ittnot\",{\"1\":{\"347\":2}}],[\"itoa\",{\"1\":{\"340\":3,\"1300\":2}}],[\"itoindex\",{\"1\":{\"340\":3}}],[\"itonot\",{\"1\":{\"340\":3}}],[\"its\",{\"1\":{\"24\":1,\"30\":1,\"38\":1,\"39\":1,\"40\":2,\"52\":1,\"56\":1,\"120\":1,\"121\":1,\"265\":1,\"272\":1,\"278\":1,\"279\":1,\"287\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"440\":1,\"453\":1,\"488\":1,\"535\":1,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"747\":1,\"795\":3,\"1000\":1,\"1059\":1,\"1190\":3,\"1220\":1,\"1249\":1,\"1297\":1,\"1366\":1,\"1400\":2,\"1461\":1,\"1496\":1,\"1502\":1,\"1509\":1,\"1563\":1,\"1567\":1,\"1612\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1,\"1741\":1,\"1746\":1,\"1752\":1,\"1753\":1,\"1755\":1,\"1774\":1,\"1780\":1,\"1793\":1}}],[\"itself\",{\"1\":{\"14\":1,\"46\":1,\"51\":1,\"375\":1,\"455\":1,\"516\":1,\"643\":1,\"1300\":1,\"1359\":1,\"1385\":1,\"1404\":1,\"1455\":1,\"1513\":1,\"1716\":1}}],[\"iterm2\",{\"1\":{\"108\":1,\"163\":1}}],[\"iterator\",{\"1\":{\"60\":1}}],[\"iterative\",{\"1\":{\"304\":1}}],[\"iterating\",{\"1\":{\"37\":2,\"43\":2,\"760\":1,\"1772\":2}}],[\"iterations\",{\"0\":{\"751\":1},\"1\":{\"162\":1}}],[\"iteration\",{\"0\":{\"40\":1,\"41\":1,\"58\":1},\"1\":{\"15\":1,\"26\":1,\"36\":2,\"61\":3,\"113\":2,\"121\":3,\"251\":3,\"375\":1,\"487\":1,\"532\":1,\"679\":1,\"736\":1,\"741\":3,\"742\":2,\"747\":1,\"751\":5,\"754\":1,\"758\":1,\"765\":1,\"766\":1,\"825\":1,\"912\":1,\"1201\":1,\"1343\":1,\"1345\":1,\"1404\":1}}],[\"iterated\",{\"1\":{\"747\":1,\"749\":1}}],[\"iterates\",{\"1\":{\"41\":1,\"747\":1,\"752\":1}}],[\"iterate\",{\"1\":{\"15\":2,\"26\":2,\"44\":2,\"62\":1,\"63\":2,\"92\":1,\"122\":1,\"164\":2,\"248\":1,\"251\":1,\"489\":2,\"536\":2,\"651\":1,\"745\":2,\"746\":1,\"758\":1,\"759\":1,\"766\":1,\"1024\":1,\"1182\":2,\"1228\":1,\"1281\":1,\"1345\":2,\"1400\":2,\"1403\":1,\"1448\":1,\"1657\":1,\"1670\":1,\"1771\":1,\"1782\":1}}],[\"item\",{\"1\":{\"15\":4,\"26\":4,\"743\":1,\"756\":1,\"758\":1,\"760\":1,\"885\":1,\"891\":3,\"947\":2,\"967\":2,\"1071\":1,\"1077\":3,\"1137\":2,\"1144\":1,\"1150\":3,\"1229\":1,\"1235\":3,\"1641\":1,\"1772\":2,\"1798\":1}}],[\"items\",{\"1\":{\"15\":1,\"26\":1,\"93\":2,\"108\":1,\"112\":1,\"130\":1,\"143\":1,\"340\":2,\"369\":1,\"378\":1,\"383\":1,\"400\":1,\"419\":1,\"438\":1,\"537\":1,\"540\":1,\"541\":1,\"545\":1,\"599\":1,\"692\":2,\"752\":1,\"795\":2,\"871\":1,\"877\":1,\"884\":1,\"891\":1,\"940\":1,\"942\":1,\"947\":1,\"960\":1,\"967\":1,\"1077\":1,\"1084\":1,\"1113\":1,\"1118\":1,\"1137\":1,\"1150\":1,\"1190\":2,\"1235\":1,\"1274\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1601\":1}}],[\"it\",{\"0\":{\"744\":2,\"757\":2,\"1642\":2},\"1\":{\"0\":1,\"3\":1,\"10\":1,\"15\":8,\"26\":8,\"33\":2,\"36\":2,\"38\":4,\"39\":1,\"40\":3,\"41\":3,\"42\":3,\"43\":1,\"44\":1,\"46\":5,\"47\":12,\"48\":1,\"50\":2,\"51\":2,\"52\":3,\"53\":2,\"54\":2,\"56\":4,\"57\":3,\"59\":3,\"63\":1,\"70\":1,\"72\":1,\"82\":1,\"90\":1,\"93\":2,\"95\":3,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"107\":1,\"108\":2,\"109\":2,\"111\":2,\"112\":1,\"113\":2,\"115\":2,\"117\":2,\"119\":2,\"121\":9,\"123\":1,\"125\":1,\"138\":1,\"142\":1,\"151\":1,\"162\":1,\"163\":1,\"181\":1,\"182\":1,\"199\":1,\"202\":1,\"208\":1,\"211\":1,\"214\":1,\"217\":5,\"222\":1,\"223\":1,\"227\":1,\"231\":2,\"235\":1,\"236\":1,\"237\":2,\"238\":1,\"244\":1,\"252\":1,\"253\":1,\"261\":1,\"267\":1,\"270\":1,\"274\":2,\"277\":1,\"281\":2,\"288\":1,\"295\":2,\"304\":1,\"308\":1,\"312\":1,\"315\":2,\"323\":2,\"330\":2,\"337\":1,\"344\":1,\"375\":1,\"383\":1,\"387\":3,\"391\":1,\"393\":3,\"397\":2,\"404\":1,\"409\":2,\"412\":1,\"419\":1,\"421\":1,\"423\":1,\"433\":3,\"437\":1,\"438\":1,\"439\":1,\"440\":2,\"441\":1,\"445\":1,\"446\":1,\"447\":3,\"450\":1,\"452\":1,\"453\":1,\"454\":1,\"459\":1,\"462\":2,\"468\":2,\"471\":2,\"483\":2,\"485\":4,\"487\":1,\"488\":1,\"490\":1,\"495\":1,\"497\":1,\"512\":1,\"518\":2,\"526\":1,\"535\":1,\"544\":1,\"548\":1,\"560\":1,\"568\":1,\"576\":2,\"591\":1,\"596\":2,\"601\":1,\"605\":1,\"606\":1,\"607\":3,\"609\":1,\"611\":4,\"618\":3,\"620\":1,\"631\":1,\"637\":1,\"643\":1,\"659\":1,\"661\":1,\"670\":1,\"675\":3,\"679\":2,\"682\":1,\"683\":1,\"685\":2,\"690\":1,\"703\":1,\"710\":1,\"715\":1,\"733\":1,\"737\":3,\"741\":1,\"742\":1,\"743\":6,\"745\":1,\"747\":2,\"749\":1,\"755\":3,\"756\":6,\"758\":1,\"766\":1,\"771\":2,\"779\":1,\"780\":1,\"781\":2,\"782\":2,\"783\":1,\"784\":1,\"785\":1,\"787\":3,\"795\":2,\"799\":1,\"802\":2,\"808\":2,\"814\":2,\"815\":1,\"817\":1,\"825\":2,\"828\":1,\"829\":1,\"831\":2,\"837\":1,\"843\":1,\"861\":1,\"873\":2,\"879\":2,\"897\":1,\"900\":1,\"905\":1,\"906\":1,\"907\":3,\"909\":1,\"912\":2,\"915\":1,\"916\":1,\"917\":3,\"932\":1,\"945\":1,\"947\":1,\"956\":4,\"962\":5,\"965\":1,\"967\":1,\"975\":2,\"977\":2,\"986\":1,\"989\":1,\"999\":1,\"1000\":2,\"1003\":1,\"1004\":1,\"1016\":5,\"1021\":1,\"1029\":2,\"1036\":2,\"1037\":2,\"1039\":1,\"1043\":2,\"1052\":2,\"1058\":1,\"1059\":2,\"1067\":1,\"1069\":1,\"1084\":1,\"1085\":1,\"1086\":2,\"1089\":1,\"1093\":2,\"1096\":1,\"1097\":1,\"1098\":3,\"1102\":1,\"1111\":1,\"1113\":1,\"1116\":1,\"1126\":2,\"1131\":1,\"1135\":1,\"1137\":1,\"1139\":2,\"1141\":1,\"1153\":1,\"1173\":1,\"1179\":3,\"1182\":4,\"1190\":2,\"1193\":1,\"1201\":2,\"1204\":1,\"1205\":1,\"1207\":2,\"1209\":1,\"1219\":1,\"1220\":2,\"1228\":1,\"1255\":2,\"1262\":1,\"1268\":1,\"1270\":1,\"1280\":1,\"1287\":2,\"1291\":1,\"1296\":1,\"1297\":1,\"1302\":1,\"1307\":2,\"1313\":3,\"1319\":1,\"1321\":1,\"1324\":1,\"1330\":1,\"1345\":2,\"1350\":1,\"1387\":1,\"1400\":5,\"1403\":1,\"1404\":1,\"1451\":1,\"1461\":1,\"1480\":1,\"1482\":1,\"1486\":2,\"1507\":1,\"1509\":1,\"1513\":2,\"1516\":1,\"1517\":1,\"1518\":1,\"1520\":1,\"1538\":1,\"1542\":1,\"1547\":2,\"1549\":1,\"1552\":1,\"1564\":2,\"1566\":1,\"1570\":3,\"1574\":1,\"1578\":1,\"1582\":2,\"1586\":1,\"1589\":1,\"1593\":1,\"1594\":1,\"1598\":1,\"1599\":1,\"1601\":2,\"1612\":1,\"1618\":1,\"1620\":1,\"1626\":1,\"1628\":4,\"1632\":2,\"1634\":1,\"1636\":1,\"1638\":1,\"1641\":6,\"1645\":2,\"1647\":3,\"1654\":3,\"1657\":2,\"1659\":3,\"1664\":3,\"1670\":2,\"1672\":1,\"1675\":2,\"1677\":1,\"1679\":1,\"1688\":1,\"1690\":4,\"1694\":1,\"1696\":4,\"1699\":1,\"1700\":1,\"1703\":1,\"1704\":1,\"1705\":1,\"1706\":1,\"1707\":2,\"1708\":1,\"1710\":4,\"1717\":1,\"1719\":1,\"1723\":3,\"1724\":1,\"1726\":1,\"1728\":2,\"1729\":2,\"1735\":1,\"1741\":3,\"1746\":2,\"1747\":1,\"1750\":1,\"1752\":1,\"1754\":1,\"1766\":1,\"1771\":1,\"1772\":2,\"1782\":1,\"1789\":3,\"1790\":1,\"1793\":2,\"1794\":1,\"1799\":1,\"1808\":1}}],[\"iso\",{\"1\":{\"1701\":1}}],[\"isalive\",{\"1\":{\"1226\":3,\"1639\":1}}],[\"isbackground\",{\"1\":{\"575\":1}}],[\"istty\",{\"1\":{\"261\":1,\"270\":1,\"277\":1,\"283\":1,\"290\":1,\"297\":1,\"312\":1,\"316\":1,\"324\":1,\"331\":1,\"338\":1}}],[\"ismethod\",{\"1\":{\"111\":1,\"438\":1,\"439\":1,\"575\":1}}],[\"ism\",{\"1\":{\"52\":1}}],[\"isnot\",{\"1\":{\"340\":1,\"347\":1,\"575\":1}}],[\"isn\",{\"1\":{\"3\":1,\"8\":1,\"39\":2,\"40\":1,\"52\":1,\"57\":2,\"59\":2,\"111\":1,\"115\":1,\"119\":1,\"121\":1,\"238\":1,\"244\":1,\"291\":1,\"354\":1,\"361\":1,\"433\":1,\"438\":1,\"439\":1,\"523\":1,\"679\":1,\"781\":1,\"795\":1,\"825\":1,\"857\":1,\"912\":1,\"1096\":1,\"1190\":1,\"1201\":1,\"1329\":2,\"1372\":1,\"1571\":1,\"1575\":2,\"1583\":1,\"1647\":1,\"1664\":1,\"1666\":1,\"1672\":1,\"1708\":1,\"1716\":1,\"1746\":1}}],[\"issue\",{\"1\":{\"3\":1,\"103\":3,\"108\":2,\"151\":1,\"163\":1,\"596\":1,\"795\":1,\"1018\":1,\"1190\":1,\"1767\":1}}],[\"issues\",{\"1\":{\"1\":1,\"91\":1,\"100\":1,\"108\":1,\"163\":1,\"198\":1,\"199\":2,\"208\":2,\"1018\":1,\"1489\":1,\"1767\":1,\"1784\":1}}],[\"is\",{\"0\":{\"744\":1,\"757\":1,\"1429\":1,\"1437\":1,\"1642\":1},\"1\":{\"0\":1,\"3\":6,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"10\":2,\"12\":2,\"15\":2,\"22\":1,\"23\":1,\"26\":2,\"27\":1,\"33\":2,\"34\":2,\"36\":2,\"37\":2,\"38\":6,\"39\":4,\"40\":5,\"41\":4,\"42\":7,\"45\":2,\"46\":5,\"47\":5,\"48\":6,\"50\":5,\"51\":3,\"52\":2,\"53\":2,\"54\":2,\"56\":6,\"57\":5,\"59\":3,\"61\":6,\"72\":3,\"76\":1,\"78\":1,\"82\":1,\"89\":1,\"93\":1,\"95\":3,\"97\":1,\"98\":1,\"103\":6,\"104\":2,\"108\":7,\"111\":5,\"112\":1,\"113\":6,\"115\":10,\"117\":6,\"119\":3,\"121\":14,\"123\":1,\"126\":2,\"127\":2,\"138\":1,\"139\":3,\"142\":3,\"147\":1,\"151\":1,\"154\":1,\"162\":3,\"163\":1,\"167\":1,\"174\":1,\"177\":2,\"181\":1,\"182\":1,\"190\":1,\"198\":1,\"199\":2,\"202\":2,\"207\":2,\"208\":5,\"210\":1,\"211\":2,\"214\":3,\"215\":1,\"216\":1,\"217\":5,\"218\":2,\"222\":1,\"223\":5,\"232\":5,\"235\":1,\"237\":2,\"238\":3,\"239\":1,\"244\":1,\"249\":1,\"253\":2,\"255\":1,\"259\":2,\"261\":1,\"264\":1,\"267\":2,\"270\":4,\"274\":3,\"277\":4,\"281\":2,\"284\":1,\"288\":2,\"292\":1,\"295\":2,\"297\":1,\"298\":1,\"302\":2,\"304\":1,\"308\":2,\"309\":1,\"315\":2,\"318\":1,\"323\":2,\"326\":1,\"330\":2,\"333\":1,\"337\":1,\"340\":2,\"344\":1,\"347\":2,\"348\":1,\"354\":4,\"361\":4,\"375\":1,\"376\":2,\"380\":2,\"387\":3,\"389\":1,\"391\":4,\"395\":1,\"397\":2,\"402\":1,\"409\":2,\"410\":3,\"412\":1,\"421\":2,\"423\":1,\"430\":1,\"431\":1,\"433\":2,\"436\":2,\"437\":1,\"438\":2,\"439\":5,\"440\":10,\"441\":1,\"442\":1,\"443\":1,\"445\":2,\"446\":3,\"447\":6,\"449\":1,\"452\":1,\"453\":3,\"455\":1,\"456\":1,\"459\":2,\"462\":2,\"468\":1,\"474\":2,\"485\":3,\"487\":1,\"488\":2,\"491\":2,\"497\":1,\"508\":1,\"517\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":2,\"524\":1,\"526\":8,\"527\":3,\"528\":4,\"535\":2,\"544\":1,\"545\":1,\"546\":1,\"560\":2,\"563\":3,\"566\":1,\"568\":3,\"575\":1,\"576\":2,\"579\":1,\"582\":1,\"596\":5,\"597\":4,\"601\":1,\"605\":5,\"606\":2,\"607\":1,\"616\":3,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"643\":3,\"653\":3,\"656\":2,\"657\":1,\"661\":2,\"675\":3,\"677\":5,\"678\":1,\"679\":4,\"680\":2,\"681\":2,\"682\":3,\"683\":1,\"692\":1,\"695\":1,\"703\":1,\"710\":4,\"711\":1,\"717\":2,\"722\":2,\"727\":2,\"730\":2,\"731\":1,\"733\":4,\"737\":1,\"741\":6,\"742\":4,\"743\":7,\"747\":5,\"749\":4,\"752\":1,\"755\":5,\"756\":7,\"760\":2,\"762\":4,\"764\":1,\"777\":1,\"780\":9,\"781\":1,\"782\":6,\"783\":2,\"784\":2,\"785\":4,\"789\":1,\"795\":3,\"808\":1,\"814\":1,\"823\":5,\"824\":1,\"825\":4,\"826\":2,\"827\":2,\"828\":3,\"829\":1,\"833\":1,\"839\":1,\"848\":1,\"851\":2,\"861\":1,\"873\":1,\"875\":1,\"882\":4,\"886\":3,\"897\":1,\"900\":1,\"905\":5,\"906\":2,\"907\":1,\"910\":5,\"911\":1,\"912\":4,\"913\":2,\"914\":2,\"915\":3,\"916\":1,\"919\":1,\"926\":1,\"929\":1,\"937\":2,\"945\":2,\"953\":2,\"956\":5,\"962\":3,\"965\":2,\"977\":3,\"981\":2,\"984\":2,\"986\":2,\"992\":1,\"999\":6,\"1000\":1,\"1008\":1,\"1010\":1,\"1013\":1,\"1016\":3,\"1021\":3,\"1022\":3,\"1023\":2,\"1026\":1,\"1029\":1,\"1032\":1,\"1036\":2,\"1037\":2,\"1043\":3,\"1048\":1,\"1056\":1,\"1058\":6,\"1059\":1,\"1061\":1,\"1067\":1,\"1091\":2,\"1093\":3,\"1095\":1,\"1096\":1,\"1097\":4,\"1100\":1,\"1110\":2,\"1115\":2,\"1122\":2,\"1123\":1,\"1125\":4,\"1128\":1,\"1135\":2,\"1139\":1,\"1145\":3,\"1153\":3,\"1154\":4,\"1158\":2,\"1161\":3,\"1163\":1,\"1169\":1,\"1170\":1,\"1171\":1,\"1173\":1,\"1174\":1,\"1176\":1,\"1178\":3,\"1179\":3,\"1180\":2,\"1184\":1,\"1188\":1,\"1190\":3,\"1199\":5,\"1200\":1,\"1201\":4,\"1202\":2,\"1203\":2,\"1204\":3,\"1205\":1,\"1215\":1,\"1217\":2,\"1219\":6,\"1220\":1,\"1222\":1,\"1224\":1,\"1237\":2,\"1243\":1,\"1244\":2,\"1245\":2,\"1249\":2,\"1251\":2,\"1252\":1,\"1255\":1,\"1267\":2,\"1270\":1,\"1272\":1,\"1276\":2,\"1280\":2,\"1283\":1,\"1287\":3,\"1291\":1,\"1294\":1,\"1300\":2,\"1309\":1,\"1312\":3,\"1319\":1,\"1321\":1,\"1324\":1,\"1327\":2,\"1330\":1,\"1339\":1,\"1341\":2,\"1347\":1,\"1350\":1,\"1352\":1,\"1353\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1366\":1,\"1371\":1,\"1372\":1,\"1380\":1,\"1381\":1,\"1382\":1,\"1383\":1,\"1384\":3,\"1385\":1,\"1387\":1,\"1395\":1,\"1396\":1,\"1397\":1,\"1400\":2,\"1401\":1,\"1403\":2,\"1404\":1,\"1405\":1,\"1416\":2,\"1421\":1,\"1432\":1,\"1448\":1,\"1449\":1,\"1451\":2,\"1453\":2,\"1461\":1,\"1463\":1,\"1465\":1,\"1467\":1,\"1469\":1,\"1474\":1,\"1476\":1,\"1479\":1,\"1486\":3,\"1487\":4,\"1488\":2,\"1489\":3,\"1493\":1,\"1496\":1,\"1498\":1,\"1500\":2,\"1501\":1,\"1504\":1,\"1505\":2,\"1509\":3,\"1513\":5,\"1516\":2,\"1517\":2,\"1520\":2,\"1533\":1,\"1534\":1,\"1538\":3,\"1539\":1,\"1542\":4,\"1546\":1,\"1549\":1,\"1556\":1,\"1557\":1,\"1561\":1,\"1562\":1,\"1564\":2,\"1566\":1,\"1568\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1574\":2,\"1575\":2,\"1576\":1,\"1578\":1,\"1579\":1,\"1580\":1,\"1583\":1,\"1584\":1,\"1586\":1,\"1591\":3,\"1592\":2,\"1593\":1,\"1596\":1,\"1600\":3,\"1601\":3,\"1609\":1,\"1610\":2,\"1611\":5,\"1615\":1,\"1617\":1,\"1620\":2,\"1624\":2,\"1625\":1,\"1628\":10,\"1631\":1,\"1634\":2,\"1638\":2,\"1641\":7,\"1644\":1,\"1647\":3,\"1651\":1,\"1654\":4,\"1656\":1,\"1659\":2,\"1661\":1,\"1664\":2,\"1666\":2,\"1667\":1,\"1669\":1,\"1672\":5,\"1674\":2,\"1677\":1,\"1682\":2,\"1683\":1,\"1686\":2,\"1687\":1,\"1690\":4,\"1691\":2,\"1696\":4,\"1700\":1,\"1702\":2,\"1703\":1,\"1706\":3,\"1707\":2,\"1708\":12,\"1709\":1,\"1710\":1,\"1712\":2,\"1716\":4,\"1717\":1,\"1718\":1,\"1719\":3,\"1721\":1,\"1723\":3,\"1724\":4,\"1725\":3,\"1726\":1,\"1728\":3,\"1729\":3,\"1731\":3,\"1734\":1,\"1735\":2,\"1737\":2,\"1741\":6,\"1744\":1,\"1745\":1,\"1746\":8,\"1747\":2,\"1750\":2,\"1751\":1,\"1752\":3,\"1753\":1,\"1755\":1,\"1756\":1,\"1757\":1,\"1759\":1,\"1760\":1,\"1762\":1,\"1766\":2,\"1767\":1,\"1768\":1,\"1770\":2,\"1771\":1,\"1772\":3,\"1773\":6,\"1776\":3,\"1777\":3,\"1778\":4,\"1779\":1,\"1780\":4,\"1781\":1,\"1784\":2,\"1786\":1,\"1787\":1,\"1789\":2,\"1790\":1,\"1793\":2,\"1797\":1,\"1798\":4,\"1799\":4,\"1800\":2,\"1806\":1,\"1808\":1,\"1810\":1}}],[\"lf\",{\"1\":{\"1701\":1}}],[\"ldjson\",{\"1\":{\"1667\":1,\"1668\":5}}],[\"l+\",{\"1\":{\"881\":1}}],[\"luckily\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"l\",{\"1\":{\"695\":1,\"1805\":1}}],[\"lt\",{\"1\":{\"633\":4}}],[\"ls=ls\",{\"1\":{\"655\":1}}],[\"ls\",{\"1\":{\"228\":1,\"229\":1,\"655\":2,\"682\":1,\"828\":1,\"915\":1,\"1204\":1,\"1772\":4}}],[\"lmorg\",{\"1\":{\"108\":1,\"199\":1,\"208\":5,\"261\":1,\"269\":2,\"270\":3,\"276\":2,\"277\":4,\"283\":2,\"290\":5,\"297\":2,\"304\":1,\"311\":1,\"312\":2,\"316\":3,\"318\":2,\"324\":3,\"326\":2,\"331\":3,\"333\":3,\"338\":2,\"340\":1,\"345\":1,\"347\":1,\"986\":1,\"1018\":1,\"1021\":1,\"1300\":3,\"1710\":2,\"1731\":1,\"1733\":1,\"1767\":1}}],[\"ll\",{\"1\":{\"39\":1,\"42\":1,\"50\":2,\"90\":1,\"113\":1,\"1744\":1,\"1789\":2}}],[\"labs\",{\"1\":{\"1746\":1}}],[\"label\",{\"1\":{\"1601\":1}}],[\"laurence\",{\"1\":{\"1728\":1}}],[\"lau\",{\"1\":{\"865\":1,\"1175\":1}}],[\"launch\",{\"1\":{\"202\":1,\"653\":2,\"989\":1,\"1175\":2,\"1461\":1,\"1496\":1}}],[\"launched\",{\"1\":{\"147\":1,\"226\":1,\"722\":1,\"727\":1,\"730\":1,\"733\":1}}],[\"launching\",{\"1\":{\"46\":1,\"1753\":1,\"1776\":1}}],[\"laws\",{\"1\":{\"408\":1,\"1674\":2}}],[\"lasts\",{\"1\":{\"1741\":1}}],[\"lastname\",{\"1\":{\"1226\":3,\"1639\":1}}],[\"lastly\",{\"1\":{\"440\":1}}],[\"last\",{\"1\":{\"292\":2,\"347\":3,\"375\":1,\"433\":1,\"597\":1,\"755\":1,\"1115\":1,\"1125\":2,\"1166\":1,\"1312\":2,\"1321\":1,\"1404\":1,\"1487\":1,\"1708\":1,\"1741\":1,\"1776\":1,\"1777\":1,\"1778\":1,\"1784\":1}}],[\"lack\",{\"1\":{\"202\":1,\"500\":1,\"1372\":1}}],[\"layman\",{\"1\":{\"1387\":1}}],[\"layouts\",{\"1\":{\"1799\":4,\"1802\":4}}],[\"layout\",{\"1\":{\"182\":1,\"454\":1}}],[\"layers\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"layer\",{\"1\":{\"90\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1546\":1}}],[\"lazy\",{\"1\":{\"139\":1,\"545\":2,\"546\":2,\"1596\":1}}],[\"lazylogging\",{\"1\":{\"111\":1}}],[\"landing\",{\"1\":{\"121\":1}}],[\"lang\",{\"0\":{\"314\":1,\"322\":1,\"329\":1,\"336\":1,\"343\":1,\"350\":1,\"357\":1,\"567\":1},\"1\":{\"30\":6,\"260\":3,\"261\":3,\"262\":1,\"263\":2,\"265\":6,\"269\":2,\"270\":5,\"272\":2,\"276\":2,\"277\":6,\"279\":2,\"282\":1,\"283\":3,\"284\":2,\"285\":1,\"286\":2,\"290\":4,\"296\":1,\"297\":3,\"298\":2,\"299\":1,\"300\":2,\"303\":4,\"304\":3,\"305\":1,\"306\":2,\"311\":1,\"312\":1,\"315\":1,\"316\":4,\"318\":2,\"320\":2,\"323\":1,\"324\":4,\"326\":3,\"328\":2,\"330\":1,\"331\":4,\"333\":3,\"335\":2,\"338\":4,\"340\":2,\"341\":1,\"342\":1,\"345\":4,\"347\":1,\"348\":1,\"349\":1,\"352\":1,\"353\":2,\"354\":1,\"355\":1,\"356\":1,\"359\":1,\"360\":2,\"361\":1,\"362\":1,\"363\":1,\"891\":2,\"1021\":2,\"1077\":2,\"1150\":2,\"1188\":1,\"1235\":2,\"1300\":4,\"1501\":1,\"1645\":2,\"1699\":2}}],[\"languages\",{\"1\":{\"48\":3,\"51\":1,\"60\":1,\"252\":1,\"487\":1,\"491\":1,\"532\":1,\"560\":1,\"741\":1,\"1321\":1}}],[\"language\",{\"0\":{\"12\":1,\"22\":1,\"1399\":1,\"1453\":1,\"1500\":1,\"1793\":1},\"1\":{\"10\":1,\"12\":2,\"21\":1,\"22\":2,\"28\":3,\"40\":2,\"47\":2,\"48\":2,\"50\":2,\"51\":1,\"566\":1,\"576\":1,\"606\":1,\"758\":1,\"906\":1,\"1453\":2,\"1500\":2,\"1600\":1,\"1603\":3,\"1627\":1,\"1628\":3,\"1632\":1,\"1645\":3,\"1657\":3,\"1670\":3,\"1675\":3,\"1689\":1,\"1694\":1,\"1695\":1,\"1772\":1,\"1791\":1,\"1793\":3}}],[\"latter\",{\"1\":{\"742\":1,\"780\":2}}],[\"latest\",{\"1\":{\"201\":1}}],[\"later\",{\"1\":{\"46\":2,\"47\":1,\"155\":1,\"209\":1}}],[\"latin\",{\"1\":{\"70\":1,\"125\":1}}],[\"lambda\",{\"1\":{\"61\":1,\"150\":3}}],[\"lambdas\",{\"0\":{\"61\":1},\"1\":{\"41\":1,\"61\":2,\"127\":1,\"142\":1}}],[\"larger\",{\"1\":{\"75\":1,\"119\":1}}],[\"largely\",{\"1\":{\"42\":1,\"1741\":1}}],[\"large\",{\"1\":{\"38\":1,\"56\":1,\"270\":1,\"277\":1,\"1243\":1,\"1488\":1,\"1610\":1,\"1654\":1}}],[\"legitimately\",{\"1\":{\"1387\":1,\"1789\":1}}],[\"legacy\",{\"0\":{\"1516\":1},\"1\":{\"50\":1,\"1516\":1}}],[\"len\",{\"0\":{\"893\":1},\"1\":{\"108\":1,\"111\":3,\"115\":1,\"318\":2,\"326\":1,\"333\":2,\"340\":16,\"347\":16,\"544\":1,\"547\":1,\"847\":1,\"895\":1,\"896\":1,\"897\":4,\"1021\":1,\"1416\":1}}],[\"lengths\",{\"1\":{\"90\":1}}],[\"length\",{\"1\":{\"77\":1,\"90\":1,\"95\":1,\"115\":3,\"163\":2,\"431\":1,\"444\":1,\"541\":1,\"544\":2,\"882\":1,\"893\":1,\"894\":1,\"897\":1,\"1108\":1,\"1123\":1}}],[\"lengthier\",{\"1\":{\"48\":1}}],[\"leave\",{\"1\":{\"986\":1}}],[\"least\",{\"1\":{\"198\":1,\"742\":1,\"1035\":1}}],[\"leak\",{\"1\":{\"795\":1,\"1190\":1}}],[\"leaks\",{\"1\":{\"115\":1}}],[\"leaking\",{\"1\":{\"93\":1,\"127\":1}}],[\"lead\",{\"1\":{\"108\":1,\"182\":1,\"1416\":1}}],[\"learn\",{\"1\":{\"59\":1,\"78\":1,\"113\":1,\"215\":1,\"1772\":1}}],[\"lesscurl\",{\"1\":{\"1772\":1}}],[\"less\",{\"1\":{\"39\":1,\"57\":1,\"86\":1,\"155\":1,\"387\":1,\"546\":1,\"607\":1,\"742\":1,\"907\":1,\"1329\":2,\"1341\":1,\"1772\":2}}],[\"letter\",{\"1\":{\"1403\":1,\"1417\":1,\"1444\":1}}],[\"letters\",{\"1\":{\"780\":1,\"1402\":1,\"1407\":1}}],[\"lets\",{\"1\":{\"37\":1,\"40\":2,\"41\":1,\"59\":2,\"423\":1,\"762\":1,\"1021\":1,\"1260\":1,\"1780\":2}}],[\"let\",{\"0\":{\"899\":1},\"1\":{\"15\":1,\"26\":1,\"95\":1,\"96\":1,\"108\":1,\"111\":1,\"112\":1,\"391\":1,\"393\":1,\"603\":3,\"605\":2,\"606\":2,\"608\":1,\"611\":1,\"678\":1,\"679\":1,\"685\":1,\"690\":1,\"710\":1,\"741\":2,\"745\":1,\"785\":1,\"787\":1,\"824\":1,\"825\":1,\"831\":1,\"859\":1,\"900\":1,\"901\":3,\"902\":4,\"904\":5,\"905\":2,\"906\":2,\"908\":1,\"911\":1,\"912\":1,\"1097\":1,\"1098\":1,\"1111\":1,\"1176\":1,\"1182\":1,\"1200\":1,\"1201\":1,\"1207\":1,\"1245\":1,\"1255\":1,\"1341\":8,\"1345\":1,\"1594\":1,\"1755\":1,\"1771\":1,\"1782\":1}}],[\"left\",{\"0\":{\"885\":1},\"1\":{\"15\":2,\"24\":4,\"26\":2,\"59\":1,\"105\":2,\"139\":1,\"750\":1,\"758\":2,\"837\":3,\"843\":3,\"885\":1,\"886\":2,\"887\":1,\"888\":3,\"890\":2,\"954\":1,\"1077\":2,\"1145\":1,\"1147\":2,\"1235\":2,\"1502\":4,\"1554\":1,\"1557\":1,\"1559\":1,\"1562\":1,\"1568\":3,\"1569\":1,\"1572\":3,\"1573\":1,\"1574\":1,\"1576\":3,\"1577\":1,\"1580\":3,\"1581\":1,\"1584\":3,\"1703\":1,\"1727\":2,\"1748\":4,\"1779\":4,\"1797\":1,\"1798\":1,\"1802\":1,\"1805\":1}}],[\"levels\",{\"1\":{\"1152\":1}}],[\"level\",{\"1\":{\"0\":1,\"15\":1,\"26\":1,\"94\":1,\"120\":1,\"201\":1,\"442\":1,\"447\":1,\"491\":1,\"502\":1,\"596\":2,\"643\":1,\"680\":1,\"826\":1,\"913\":1,\"1139\":1,\"1160\":1,\"1175\":1,\"1202\":1,\"1325\":1,\"1331\":1,\"1546\":1,\"1758\":1,\"1774\":1,\"1779\":1}}],[\"low\",{\"1\":{\"347\":1,\"596\":1,\"1245\":1}}],[\"lower\",{\"0\":{\"1418\":1,\"1445\":1},\"1\":{\"90\":1,\"491\":1,\"780\":1,\"1245\":1}}],[\"load\",{\"1\":{\"115\":1,\"347\":1,\"1712\":3,\"1737\":3}}],[\"loading\",{\"1\":{\"108\":1,\"111\":1}}],[\"loaded\",{\"0\":{\"981\":1},\"1\":{\"23\":2,\"94\":2,\"96\":1,\"110\":2,\"111\":1,\"135\":1,\"163\":1,\"183\":1,\"463\":1,\"981\":3,\"982\":1,\"1031\":1,\"1176\":1,\"1705\":1,\"1710\":3,\"1728\":1,\"1735\":2,\"1739\":1,\"1749\":2,\"1750\":2,\"1794\":1}}],[\"lots\",{\"1\":{\"91\":1,\"93\":1,\"100\":2,\"109\":1,\"111\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"182\":1,\"956\":1,\"1513\":1}}],[\"lot\",{\"1\":{\"51\":1,\"53\":1,\"57\":1,\"66\":1,\"170\":1,\"207\":1,\"354\":1,\"361\":1,\"1280\":1,\"1725\":1}}],[\"loyal\",{\"1\":{\"48\":1}}],[\"lousy\",{\"1\":{\"48\":1}}],[\"logic\",{\"0\":{\"608\":1,\"908\":1},\"1\":{\"113\":2,\"115\":1,\"264\":1,\"1021\":1}}],[\"logical\",{\"0\":{\"1553\":1,\"1558\":1},\"1\":{\"15\":1,\"24\":2,\"26\":1,\"94\":2,\"116\":2,\"122\":1,\"183\":1,\"611\":1,\"685\":1,\"686\":1,\"831\":1,\"917\":1,\"1159\":1,\"1207\":1,\"1502\":2,\"1536\":1,\"1540\":1,\"1706\":1,\"1774\":2}}],[\"log\",{\"0\":{\"86\":1,\"88\":1,\"93\":1,\"95\":1,\"97\":1,\"102\":1,\"106\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"125\":1,\"131\":1,\"160\":1,\"165\":1,\"170\":1},\"1\":{\"28\":1,\"1603\":1,\"1608\":1,\"1609\":2,\"1610\":1,\"1611\":2,\"1659\":1}}],[\"locations\",{\"1\":{\"1750\":1}}],[\"locationd\",{\"1\":{\"1484\":1}}],[\"location\",{\"1\":{\"979\":1}}],[\"located\",{\"1\":{\"208\":1,\"244\":1,\"848\":1,\"977\":1,\"1300\":2,\"1501\":1,\"1729\":1}}],[\"locally\",{\"1\":{\"900\":1,\"979\":1,\"1731\":1}}],[\"localised\",{\"1\":{\"679\":1,\"825\":1,\"912\":1,\"1201\":1}}],[\"locale\",{\"1\":{\"566\":1}}],[\"local\",{\"0\":{\"676\":1,\"679\":1,\"825\":1,\"912\":1,\"1201\":1},\"1\":{\"15\":1,\"26\":1,\"96\":1,\"112\":1,\"225\":1,\"226\":1,\"393\":1,\"518\":1,\"611\":1,\"659\":1,\"675\":1,\"676\":4,\"678\":1,\"679\":4,\"685\":1,\"690\":1,\"745\":1,\"766\":1,\"781\":1,\"787\":1,\"802\":1,\"824\":1,\"825\":4,\"831\":1,\"911\":1,\"912\":4,\"917\":1,\"978\":1,\"979\":1,\"1098\":1,\"1111\":1,\"1176\":1,\"1182\":1,\"1193\":1,\"1194\":1,\"1200\":1,\"1201\":4,\"1228\":1,\"1255\":1,\"1345\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1707\":1,\"1731\":1,\"1771\":1,\"1772\":2,\"1782\":1,\"1794\":1}}],[\"lock\",{\"1\":{\"15\":1,\"26\":1,\"354\":1,\"361\":1,\"918\":1,\"919\":1,\"920\":5,\"921\":4}}],[\"lockfile\",{\"0\":{\"918\":1},\"1\":{\"15\":1,\"26\":1,\"919\":1,\"920\":4,\"921\":4}}],[\"looked\",{\"1\":{\"119\":1,\"391\":1,\"678\":1,\"710\":1,\"785\":1,\"824\":1,\"911\":1,\"1097\":1,\"1200\":1}}],[\"lookups\",{\"1\":{\"89\":1,\"111\":1}}],[\"looks\",{\"1\":{\"41\":1,\"42\":1,\"59\":1,\"61\":1,\"103\":1,\"433\":1,\"795\":1,\"924\":1,\"1190\":1,\"1725\":1}}],[\"look\",{\"1\":{\"41\":1,\"47\":1,\"238\":1,\"447\":1,\"643\":1,\"764\":1,\"781\":1,\"1023\":1,\"1260\":1,\"1267\":1,\"1400\":1,\"1579\":1,\"1702\":1,\"1708\":1,\"1788\":1,\"1798\":1}}],[\"looking\",{\"1\":{\"15\":1,\"26\":1,\"47\":1,\"220\":1,\"227\":1,\"659\":1,\"723\":1,\"728\":1,\"735\":1,\"795\":1,\"988\":1,\"1190\":1,\"1241\":1,\"1520\":1,\"1538\":1}}],[\"looping\",{\"0\":{\"1448\":1}}],[\"loops\",{\"0\":{\"248\":1,\"249\":1,\"742\":1,\"743\":1,\"756\":1,\"1641\":1},\"1\":{\"249\":1,\"251\":2,\"354\":1,\"361\":1,\"532\":1,\"741\":1,\"1339\":2,\"1347\":1}}],[\"loop\",{\"0\":{\"215\":1},\"1\":{\"15\":2,\"26\":2,\"38\":3,\"56\":3,\"95\":1,\"113\":1,\"114\":1,\"121\":1,\"162\":1,\"164\":1,\"251\":1,\"485\":1,\"736\":1,\"737\":1,\"741\":2,\"742\":1,\"745\":1,\"749\":1,\"758\":2,\"766\":2,\"1255\":1,\"1338\":1,\"1345\":1,\"1403\":1,\"1448\":1,\"1666\":1}}],[\"loosely\",{\"1\":{\"10\":1}}],[\"longer\",{\"1\":{\"51\":1,\"69\":1,\"93\":1,\"99\":1,\"103\":1,\"107\":1,\"115\":1,\"121\":2,\"126\":1,\"129\":1,\"131\":1,\"154\":1,\"1327\":1,\"1741\":1}}],[\"long\",{\"1\":{\"3\":1,\"123\":1,\"274\":1,\"376\":1,\"516\":1,\"965\":1,\"1107\":1,\"1131\":1,\"1405\":1,\"1650\":1,\"1741\":2,\"1756\":1,\"1780\":1,\"1789\":1}}],[\"life\",{\"1\":{\"1741\":1}}],[\"lightweight\",{\"1\":{\"956\":1}}],[\"ligatures\",{\"1\":{\"211\":2}}],[\"library\",{\"1\":{\"1716\":3,\"1717\":1}}],[\"libraries\",{\"1\":{\"560\":1,\"1710\":1}}],[\"lib\",{\"1\":{\"865\":2}}],[\"live\",{\"1\":{\"437\":1}}],[\"lived\",{\"1\":{\"51\":1}}],[\"limited\",{\"1\":{\"780\":1,\"1091\":1}}],[\"limitation\",{\"1\":{\"474\":1,\"596\":2,\"677\":1,\"823\":1,\"910\":1,\"1199\":1,\"1773\":1}}],[\"limitations\",{\"0\":{\"929\":1},\"1\":{\"119\":1,\"204\":1}}],[\"limit\",{\"1\":{\"108\":1,\"1770\":1}}],[\"lisp\",{\"1\":{\"48\":1}}],[\"listen\",{\"1\":{\"1175\":4}}],[\"listed\",{\"1\":{\"14\":1,\"201\":1,\"431\":1,\"520\":1,\"656\":1,\"1020\":1,\"1455\":1}}],[\"listview\",{\"0\":{\"454\":1},\"1\":{\"431\":1,\"439\":1}}],[\"lists\",{\"0\":{\"33\":1,\"36\":1,\"1793\":1},\"1\":{\"15\":3,\"26\":3,\"33\":1,\"36\":1,\"37\":2,\"39\":1,\"54\":2,\"57\":1,\"92\":1,\"94\":1,\"95\":1,\"110\":1,\"111\":1,\"122\":1,\"239\":2,\"383\":1,\"419\":1,\"463\":1,\"475\":2,\"659\":2,\"691\":1,\"692\":2,\"713\":1,\"718\":2,\"723\":2,\"728\":2,\"729\":1,\"735\":1,\"764\":1,\"797\":2,\"945\":1,\"947\":1,\"956\":2,\"1084\":1,\"1127\":1,\"1135\":1,\"1171\":1,\"1176\":26,\"1182\":1,\"1192\":2,\"1241\":1,\"1325\":1,\"1331\":1,\"1360\":1,\"1529\":1,\"1572\":1,\"1576\":1,\"1578\":1,\"1584\":1,\"1772\":1}}],[\"list\",{\"0\":{\"729\":1,\"981\":1,\"988\":1},\"1\":{\"0\":1,\"14\":1,\"15\":8,\"23\":2,\"26\":8,\"33\":3,\"36\":3,\"40\":1,\"44\":1,\"54\":4,\"93\":2,\"95\":2,\"103\":1,\"108\":1,\"110\":2,\"111\":2,\"112\":1,\"121\":2,\"122\":1,\"123\":1,\"124\":1,\"130\":2,\"164\":1,\"174\":1,\"183\":1,\"201\":1,\"248\":1,\"369\":2,\"370\":1,\"375\":1,\"376\":1,\"378\":1,\"380\":1,\"383\":2,\"418\":1,\"419\":2,\"438\":1,\"454\":1,\"475\":1,\"512\":1,\"513\":1,\"537\":1,\"540\":1,\"541\":3,\"544\":1,\"545\":1,\"546\":1,\"548\":1,\"569\":1,\"599\":2,\"649\":1,\"656\":2,\"659\":2,\"694\":1,\"718\":1,\"722\":1,\"723\":2,\"727\":1,\"728\":2,\"730\":3,\"731\":2,\"732\":1,\"733\":3,\"734\":1,\"735\":1,\"745\":1,\"751\":1,\"755\":1,\"758\":2,\"760\":1,\"761\":1,\"781\":1,\"789\":2,\"791\":3,\"795\":2,\"871\":2,\"877\":2,\"883\":1,\"884\":2,\"885\":1,\"886\":2,\"890\":1,\"891\":5,\"898\":1,\"940\":2,\"946\":1,\"947\":4,\"959\":1,\"960\":2,\"966\":1,\"967\":4,\"979\":2,\"981\":2,\"989\":1,\"990\":1,\"991\":1,\"992\":1,\"1002\":1,\"1021\":1,\"1071\":1,\"1072\":2,\"1076\":1,\"1077\":5,\"1083\":1,\"1084\":2,\"1118\":2,\"1128\":1,\"1136\":1,\"1137\":4,\"1144\":1,\"1145\":2,\"1149\":1,\"1150\":5,\"1171\":1,\"1175\":3,\"1176\":1,\"1178\":5,\"1182\":1,\"1184\":2,\"1186\":3,\"1190\":2,\"1229\":1,\"1230\":2,\"1234\":1,\"1235\":5,\"1241\":2,\"1274\":2,\"1278\":1,\"1324\":1,\"1325\":1,\"1330\":1,\"1331\":1,\"1388\":1,\"1400\":2,\"1403\":1,\"1404\":1,\"1405\":1,\"1410\":2,\"1422\":2,\"1430\":2,\"1438\":2,\"1448\":1,\"1450\":2,\"1455\":1,\"1484\":1,\"1531\":1,\"1536\":1,\"1570\":1,\"1683\":1,\"1687\":2,\"1716\":1,\"1727\":1,\"1755\":1,\"1772\":2,\"1774\":1,\"1788\":1,\"1789\":2,\"1795\":1,\"1797\":1,\"1800\":1,\"1814\":1}}],[\"littered\",{\"1\":{\"421\":1}}],[\"little\",{\"1\":{\"39\":1,\"42\":1,\"46\":1,\"47\":1,\"57\":1,\"117\":1,\"121\":1,\"231\":1,\"235\":1,\"387\":1,\"459\":1,\"491\":1,\"579\":1,\"643\":1,\"730\":1,\"741\":1,\"742\":1,\"764\":1,\"780\":1,\"873\":1,\"1021\":1,\"1270\":1,\"1387\":1,\"1516\":1,\"1702\":1,\"1753\":1}}],[\"literals\",{\"1\":{\"222\":1,\"1772\":1}}],[\"literally\",{\"1\":{\"46\":1,\"605\":1,\"905\":1,\"1579\":1,\"1620\":1}}],[\"likewise\",{\"1\":{\"232\":1}}],[\"likely\",{\"1\":{\"121\":1,\"523\":1,\"986\":1,\"1451\":1,\"1789\":1}}],[\"like\",{\"1\":{\"10\":1,\"15\":1,\"26\":1,\"37\":1,\"39\":3,\"40\":3,\"41\":3,\"42\":1,\"46\":1,\"47\":2,\"48\":1,\"50\":1,\"52\":1,\"53\":1,\"57\":3,\"59\":1,\"60\":1,\"61\":1,\"90\":1,\"95\":1,\"103\":2,\"108\":1,\"110\":1,\"111\":2,\"115\":1,\"126\":1,\"153\":1,\"162\":1,\"174\":1,\"182\":1,\"208\":1,\"223\":1,\"226\":3,\"231\":1,\"238\":1,\"239\":1,\"243\":1,\"248\":1,\"251\":1,\"304\":1,\"371\":3,\"375\":1,\"390\":1,\"438\":1,\"447\":1,\"459\":1,\"474\":1,\"480\":1,\"491\":1,\"532\":1,\"559\":1,\"579\":1,\"595\":1,\"605\":2,\"616\":1,\"643\":2,\"653\":1,\"655\":1,\"657\":1,\"679\":1,\"681\":1,\"683\":1,\"711\":1,\"730\":1,\"733\":1,\"741\":1,\"760\":1,\"778\":1,\"780\":2,\"781\":1,\"825\":1,\"827\":1,\"829\":1,\"867\":1,\"873\":1,\"900\":1,\"905\":2,\"912\":1,\"914\":1,\"916\":1,\"924\":1,\"926\":1,\"956\":1,\"962\":1,\"981\":1,\"984\":1,\"986\":1,\"1023\":2,\"1116\":1,\"1155\":1,\"1201\":1,\"1203\":1,\"1205\":1,\"1237\":1,\"1260\":1,\"1267\":1,\"1270\":1,\"1280\":1,\"1400\":1,\"1401\":1,\"1404\":1,\"1416\":1,\"1422\":1,\"1450\":1,\"1506\":1,\"1520\":1,\"1529\":1,\"1538\":1,\"1542\":2,\"1546\":1,\"1566\":1,\"1570\":1,\"1575\":1,\"1578\":1,\"1582\":1,\"1611\":1,\"1673\":1,\"1702\":1,\"1706\":1,\"1708\":1,\"1719\":1,\"1720\":1,\"1725\":2,\"1741\":1,\"1746\":1,\"1753\":1,\"1769\":1,\"1770\":1,\"1773\":1,\"1776\":1,\"1778\":1,\"1788\":1,\"1805\":2}}],[\"links\",{\"0\":{\"189\":1},\"1\":{\"188\":1,\"1747\":2}}],[\"link\",{\"1\":{\"86\":1,\"202\":1,\"1546\":1,\"1554\":1,\"1559\":1,\"1615\":1,\"1735\":1,\"1756\":1}}],[\"liners\",{\"1\":{\"857\":1}}],[\"linenumber\",{\"1\":{\"575\":1}}],[\"linenum++\",{\"1\":{\"347\":2}}],[\"linenum\",{\"1\":{\"347\":4}}],[\"lineage\",{\"1\":{\"46\":1}}],[\"line=$\",{\"1\":{\"38\":1,\"56\":1}}],[\"lines\",{\"0\":{\"38\":1,\"56\":1},\"1\":{\"28\":1,\"36\":1,\"92\":1,\"121\":1,\"129\":1,\"162\":2,\"223\":1,\"347\":3,\"735\":1,\"743\":2,\"756\":2,\"758\":1,\"780\":2,\"859\":1,\"942\":1,\"1116\":1,\"1278\":1,\"1359\":2,\"1385\":2,\"1491\":1,\"1515\":1,\"1544\":1,\"1551\":1,\"1588\":1,\"1603\":1,\"1618\":1,\"1632\":1,\"1641\":2,\"1645\":1,\"1650\":1,\"1657\":1,\"1658\":1,\"1659\":1,\"1660\":1,\"1666\":2,\"1667\":1,\"1668\":5,\"1675\":1,\"1694\":1,\"1699\":1,\"1716\":1,\"1772\":1,\"1789\":1,\"1800\":1,\"1802\":2}}],[\"line\",{\"0\":{\"33\":1,\"36\":1,\"39\":1,\"57\":1,\"1515\":1,\"1648\":1,\"1649\":1,\"1665\":1,\"1666\":1,\"1673\":1,\"1801\":1},\"1\":{\"3\":1,\"15\":8,\"26\":8,\"33\":3,\"36\":4,\"37\":1,\"38\":16,\"42\":2,\"43\":2,\"47\":1,\"50\":1,\"51\":1,\"54\":4,\"56\":16,\"57\":1,\"59\":1,\"60\":1,\"90\":1,\"94\":1,\"96\":1,\"112\":1,\"113\":1,\"114\":1,\"116\":1,\"118\":1,\"119\":1,\"120\":1,\"142\":2,\"162\":3,\"169\":1,\"174\":1,\"181\":1,\"182\":1,\"183\":2,\"214\":2,\"217\":1,\"223\":3,\"228\":1,\"304\":3,\"347\":28,\"387\":1,\"391\":1,\"420\":1,\"423\":1,\"425\":1,\"426\":1,\"433\":1,\"436\":1,\"440\":1,\"476\":1,\"477\":1,\"483\":2,\"489\":1,\"495\":1,\"525\":1,\"536\":1,\"544\":3,\"562\":1,\"605\":3,\"611\":1,\"612\":1,\"613\":1,\"618\":2,\"622\":1,\"629\":1,\"685\":1,\"710\":1,\"713\":1,\"758\":1,\"760\":1,\"780\":1,\"785\":1,\"787\":1,\"831\":1,\"882\":2,\"897\":3,\"905\":3,\"917\":1,\"922\":1,\"923\":1,\"929\":1,\"934\":1,\"935\":1,\"954\":1,\"975\":5,\"995\":1,\"1023\":1,\"1024\":1,\"1045\":1,\"1046\":1,\"1052\":4,\"1061\":1,\"1089\":1,\"1091\":1,\"1093\":1,\"1097\":1,\"1119\":1,\"1120\":1,\"1125\":1,\"1126\":4,\"1143\":1,\"1171\":3,\"1175\":2,\"1178\":1,\"1179\":1,\"1182\":1,\"1207\":1,\"1213\":2,\"1222\":1,\"1267\":1,\"1278\":2,\"1281\":1,\"1303\":1,\"1306\":1,\"1307\":3,\"1308\":1,\"1309\":1,\"1313\":4,\"1337\":2,\"1345\":2,\"1359\":1,\"1378\":1,\"1385\":1,\"1400\":1,\"1505\":1,\"1507\":2,\"1513\":2,\"1518\":2,\"1538\":1,\"1547\":3,\"1552\":2,\"1557\":2,\"1562\":2,\"1572\":2,\"1576\":2,\"1584\":2,\"1589\":2,\"1592\":1,\"1594\":2,\"1599\":2,\"1601\":1,\"1610\":1,\"1611\":2,\"1617\":3,\"1625\":3,\"1628\":1,\"1650\":2,\"1654\":2,\"1666\":3,\"1673\":1,\"1675\":1,\"1687\":6,\"1691\":1,\"1702\":1,\"1705\":3,\"1710\":2,\"1716\":1,\"1723\":1,\"1727\":1,\"1772\":3,\"1782\":1,\"1787\":1,\"1789\":3,\"1795\":1,\"1800\":2,\"1802\":8,\"1803\":2,\"1804\":1,\"1805\":5}}],[\"linux\",{\"0\":{\"1\":1,\"196\":1,\"201\":1},\"1\":{\"0\":1,\"10\":1,\"38\":1,\"39\":1,\"42\":1,\"43\":1,\"50\":1,\"56\":1,\"57\":1,\"62\":1,\"121\":1,\"188\":2,\"196\":4,\"197\":2,\"201\":6,\"202\":4,\"204\":1,\"208\":1,\"214\":1,\"544\":1,\"560\":1,\"653\":1,\"681\":1,\"722\":1,\"727\":1,\"827\":1,\"897\":1,\"914\":1,\"1016\":1,\"1023\":1,\"1043\":5,\"1203\":1,\"1372\":1,\"1403\":1,\"1448\":1,\"1461\":1,\"1496\":1,\"1741\":1,\"1753\":1}}],[\"oof\",{\"1\":{\"1780\":2}}],[\"omega\",{\"1\":{\"1691\":1}}],[\"omission\",{\"1\":{\"605\":1,\"905\":1}}],[\"omitting\",{\"1\":{\"857\":1}}],[\"omitted\",{\"1\":{\"563\":1,\"782\":1}}],[\"omit\",{\"1\":{\"508\":1,\"1113\":1}}],[\"odd\",{\"1\":{\"1245\":1}}],[\"ok\",{\"1\":{\"347\":14,\"806\":1,\"1691\":1}}],[\"okay\",{\"1\":{\"50\":1}}],[\"oct\",{\"1\":{\"1449\":1}}],[\"october\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":3,\"1449\":1}}],[\"occupy\",{\"1\":{\"1780\":1}}],[\"occurrence\",{\"1\":{\"943\":1}}],[\"occurrences\",{\"1\":{\"541\":1,\"545\":1}}],[\"occasions\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"occasionally\",{\"1\":{\"121\":1,\"653\":1,\"859\":1}}],[\"oil\",{\"0\":{\"51\":1},\"1\":{\"51\":7,\"53\":1}}],[\"older\",{\"1\":{\"39\":1,\"57\":1,\"72\":1,\"76\":1,\"113\":1,\"117\":1,\"121\":1,\"190\":1,\"544\":1,\"779\":1,\"1516\":1}}],[\"old\",{\"1\":{\"37\":1,\"52\":1,\"115\":1,\"249\":1,\"762\":4,\"1772\":1}}],[\"o\",{\"1\":{\"34\":1,\"375\":1,\"881\":1,\"1404\":1,\"1772\":1}}],[\"owner\",{\"1\":{\"1691\":1}}],[\"owners\",{\"1\":{\"135\":1}}],[\"own\",{\"0\":{\"1789\":1},\"1\":{\"30\":1,\"39\":1,\"47\":1,\"108\":1,\"121\":1,\"211\":1,\"232\":1,\"243\":1,\"264\":1,\"375\":1,\"518\":1,\"656\":1,\"743\":2,\"756\":2,\"977\":2,\"1102\":1,\"1404\":1,\"1509\":1,\"1641\":2,\"1710\":1,\"1716\":1,\"1719\":1,\"1728\":1,\"1729\":2,\"1753\":1,\"1789\":1,\"1790\":1}}],[\"obtain\",{\"1\":{\"722\":1,\"727\":1}}],[\"obscure\",{\"1\":{\"511\":1}}],[\"objmap\",{\"1\":{\"340\":8}}],[\"obj\",{\"1\":{\"340\":14}}],[\"objarray\",{\"1\":{\"340\":18}}],[\"objective\",{\"1\":{\"387\":1}}],[\"object\",{\"0\":{\"1537\":1},\"1\":{\"15\":1,\"24\":1,\"26\":1,\"28\":1,\"40\":1,\"90\":2,\"103\":2,\"117\":1,\"127\":2,\"130\":1,\"153\":1,\"231\":2,\"340\":10,\"369\":1,\"439\":1,\"530\":1,\"635\":1,\"641\":1,\"697\":1,\"743\":2,\"754\":1,\"756\":2,\"758\":1,\"765\":1,\"766\":1,\"803\":1,\"808\":1,\"816\":1,\"877\":1,\"924\":1,\"1024\":1,\"1067\":1,\"1070\":1,\"1103\":1,\"1123\":1,\"1343\":1,\"1366\":5,\"1502\":1,\"1534\":1,\"1536\":1,\"1538\":2,\"1539\":2,\"1593\":1,\"1603\":1,\"1632\":1,\"1637\":1,\"1641\":2,\"1647\":2,\"1657\":1,\"1664\":2,\"1670\":1,\"1675\":1,\"1694\":1,\"1699\":1,\"1741\":1,\"1772\":7,\"1794\":1}}],[\"objects\",{\"0\":{\"1534\":1,\"1652\":1,\"1662\":1},\"1\":{\"15\":3,\"24\":1,\"26\":3,\"39\":2,\"40\":1,\"42\":1,\"50\":3,\"57\":2,\"60\":1,\"94\":3,\"121\":1,\"127\":1,\"128\":1,\"129\":1,\"249\":1,\"393\":1,\"423\":1,\"463\":3,\"691\":1,\"692\":1,\"697\":2,\"743\":2,\"756\":2,\"787\":1,\"788\":1,\"797\":2,\"837\":1,\"843\":1,\"1098\":1,\"1183\":1,\"1188\":1,\"1192\":2,\"1502\":1,\"1536\":1,\"1537\":1,\"1538\":1,\"1578\":1,\"1641\":2,\"1647\":2,\"1648\":1,\"1649\":1,\"1664\":2,\"1665\":1,\"1666\":1,\"1675\":1,\"1772\":2}}],[\"obviously\",{\"1\":{\"211\":1}}],[\"obvious\",{\"1\":{\"28\":1,\"1603\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1689\":1}}],[\"overriding\",{\"0\":{\"1753\":1},\"1\":{\"1753\":1}}],[\"overrides\",{\"1\":{\"678\":1,\"824\":1,\"911\":1,\"1200\":1}}],[\"override\",{\"1\":{\"391\":1,\"653\":1,\"710\":1,\"785\":1,\"984\":1,\"1097\":1,\"1176\":1,\"1237\":1}}],[\"overridden\",{\"1\":{\"182\":1,\"1766\":1}}],[\"overhead\",{\"1\":{\"347\":1,\"354\":1,\"361\":1,\"999\":1,\"1058\":1,\"1219\":1}}],[\"overhauled\",{\"1\":{\"86\":1}}],[\"overhaul\",{\"1\":{\"72\":1,\"121\":1}}],[\"overall\",{\"1\":{\"182\":1,\"211\":1}}],[\"overdue\",{\"1\":{\"123\":1}}],[\"overwritten\",{\"1\":{\"754\":1,\"765\":1,\"839\":1,\"1343\":1}}],[\"overwrite\",{\"1\":{\"115\":1,\"119\":1,\"151\":1,\"400\":1,\"430\":1,\"1387\":1,\"1567\":1,\"1780\":1}}],[\"overwriting\",{\"1\":{\"15\":1,\"26\":1,\"99\":2,\"120\":1,\"454\":1,\"483\":1,\"618\":1,\"777\":1,\"837\":1,\"838\":1,\"975\":1,\"1052\":1,\"1095\":1,\"1103\":1,\"1126\":1,\"1301\":1,\"1568\":1,\"1774\":1}}],[\"over\",{\"1\":{\"43\":2,\"47\":3,\"50\":1,\"52\":1,\"72\":1,\"121\":2,\"447\":1,\"545\":2,\"546\":2,\"603\":3,\"875\":1,\"1115\":1,\"1272\":1,\"1506\":1,\"1515\":1,\"1544\":1,\"1551\":1,\"1588\":1}}],[\"overview\",{\"0\":{\"1716\":1},\"1\":{\"23\":3,\"94\":1,\"112\":1,\"120\":1,\"502\":1,\"1061\":1,\"1171\":2,\"1222\":1,\"1325\":1,\"1331\":1,\"1518\":1,\"1547\":1,\"1557\":2,\"1562\":2,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1675\":1,\"1707\":1,\"1708\":1,\"1709\":2,\"1715\":1,\"1727\":1,\"1744\":1,\"1748\":1,\"1771\":1,\"1775\":1,\"1779\":1,\"1794\":1}}],[\"ourselves\",{\"1\":{\"201\":1}}],[\"our\",{\"1\":{\"20\":1,\"40\":2,\"51\":1,\"202\":1,\"216\":1,\"220\":1,\"606\":1,\"906\":1,\"1217\":1,\"1716\":1}}],[\"out>\",{\"1\":{\"232\":2,\"1772\":1}}],[\"outside\",{\"1\":{\"90\":1,\"679\":2,\"825\":2,\"912\":2,\"1201\":2,\"1756\":1,\"1780\":4}}],[\"out\",{\"0\":{\"1045\":1},\"1\":{\"15\":2,\"26\":2,\"41\":4,\"47\":2,\"57\":1,\"108\":2,\"121\":1,\"126\":3,\"147\":1,\"223\":1,\"225\":3,\"232\":2,\"233\":2,\"235\":2,\"236\":1,\"247\":4,\"248\":1,\"249\":1,\"251\":1,\"252\":1,\"387\":3,\"397\":4,\"398\":1,\"408\":1,\"412\":1,\"423\":6,\"440\":1,\"473\":2,\"483\":1,\"485\":1,\"487\":3,\"488\":3,\"489\":1,\"493\":1,\"495\":1,\"499\":4,\"516\":1,\"534\":3,\"535\":3,\"536\":1,\"544\":6,\"545\":1,\"546\":2,\"561\":2,\"562\":3,\"563\":1,\"575\":1,\"581\":1,\"582\":1,\"603\":6,\"618\":1,\"622\":1,\"628\":4,\"629\":1,\"633\":2,\"639\":2,\"645\":1,\"649\":1,\"656\":1,\"673\":3,\"676\":1,\"677\":2,\"678\":1,\"679\":3,\"682\":1,\"683\":3,\"694\":1,\"696\":1,\"703\":1,\"742\":4,\"743\":3,\"744\":3,\"749\":1,\"750\":1,\"751\":1,\"754\":1,\"755\":5,\"756\":3,\"757\":3,\"758\":1,\"762\":1,\"765\":1,\"775\":1,\"781\":2,\"782\":1,\"783\":1,\"784\":1,\"820\":3,\"823\":2,\"824\":1,\"825\":3,\"828\":1,\"829\":3,\"858\":3,\"861\":1,\"897\":6,\"910\":2,\"911\":1,\"912\":3,\"915\":1,\"916\":3,\"921\":3,\"922\":1,\"975\":1,\"999\":7,\"1008\":1,\"1018\":1,\"1024\":1,\"1032\":1,\"1035\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1056\":1,\"1058\":7,\"1061\":1,\"1089\":1,\"1093\":4,\"1122\":3,\"1126\":1,\"1141\":2,\"1143\":1,\"1163\":2,\"1171\":1,\"1178\":7,\"1196\":3,\"1199\":2,\"1200\":1,\"1201\":3,\"1204\":1,\"1205\":3,\"1211\":3,\"1217\":3,\"1219\":7,\"1222\":1,\"1245\":10,\"1248\":2,\"1255\":1,\"1285\":1,\"1293\":2,\"1299\":2,\"1306\":1,\"1307\":1,\"1311\":3,\"1313\":1,\"1319\":1,\"1323\":2,\"1329\":2,\"1341\":4,\"1343\":1,\"1345\":1,\"1378\":4,\"1393\":1,\"1416\":1,\"1421\":1,\"1460\":2,\"1461\":3,\"1478\":2,\"1505\":8,\"1506\":2,\"1507\":1,\"1513\":2,\"1515\":1,\"1517\":1,\"1518\":1,\"1542\":1,\"1544\":1,\"1545\":2,\"1546\":2,\"1547\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1555\":3,\"1556\":1,\"1557\":1,\"1560\":3,\"1561\":1,\"1562\":1,\"1565\":2,\"1571\":2,\"1572\":1,\"1575\":1,\"1576\":1,\"1578\":1,\"1583\":2,\"1584\":1,\"1587\":1,\"1588\":1,\"1589\":1,\"1592\":8,\"1593\":4,\"1594\":1,\"1597\":2,\"1598\":4,\"1599\":1,\"1641\":3,\"1642\":3,\"1674\":2,\"1703\":2,\"1705\":1,\"1707\":1,\"1708\":4,\"1723\":1,\"1725\":1,\"1745\":1,\"1747\":1,\"1756\":1,\"1764\":1,\"1765\":1,\"1772\":15,\"1780\":2,\"1789\":1}}],[\"outputted\",{\"1\":{\"1520\":1,\"1538\":1}}],[\"outputting\",{\"1\":{\"108\":1,\"113\":1,\"730\":1,\"1513\":1}}],[\"output\",{\"0\":{\"744\":1,\"757\":1,\"1642\":1},\"1\":{\"15\":6,\"26\":6,\"44\":1,\"59\":1,\"61\":1,\"63\":1,\"90\":2,\"103\":1,\"111\":1,\"113\":1,\"121\":1,\"231\":1,\"232\":2,\"261\":2,\"383\":1,\"404\":1,\"419\":1,\"428\":1,\"440\":2,\"483\":1,\"487\":1,\"490\":1,\"534\":1,\"541\":2,\"544\":1,\"549\":1,\"550\":1,\"553\":2,\"554\":1,\"555\":1,\"558\":2,\"562\":1,\"575\":1,\"601\":1,\"605\":2,\"618\":1,\"624\":1,\"625\":1,\"635\":1,\"641\":1,\"653\":1,\"665\":1,\"666\":1,\"682\":1,\"692\":2,\"702\":1,\"732\":3,\"743\":2,\"747\":1,\"755\":1,\"756\":2,\"758\":1,\"760\":1,\"762\":2,\"771\":1,\"789\":1,\"814\":2,\"828\":1,\"833\":1,\"839\":1,\"859\":5,\"882\":1,\"905\":2,\"915\":1,\"920\":1,\"937\":1,\"945\":1,\"958\":1,\"964\":1,\"965\":1,\"971\":1,\"975\":1,\"993\":3,\"1040\":1,\"1041\":1,\"1044\":2,\"1049\":1,\"1052\":1,\"1084\":1,\"1113\":1,\"1125\":1,\"1126\":1,\"1134\":3,\"1135\":1,\"1141\":2,\"1143\":1,\"1173\":1,\"1175\":3,\"1178\":3,\"1180\":1,\"1184\":1,\"1204\":1,\"1224\":1,\"1245\":1,\"1258\":1,\"1261\":1,\"1262\":1,\"1267\":1,\"1268\":1,\"1270\":1,\"1280\":1,\"1285\":1,\"1294\":2,\"1303\":1,\"1307\":1,\"1312\":1,\"1313\":1,\"1318\":1,\"1324\":1,\"1330\":1,\"1350\":1,\"1403\":2,\"1421\":1,\"1448\":2,\"1463\":1,\"1469\":1,\"1474\":1,\"1479\":1,\"1480\":1,\"1505\":3,\"1570\":1,\"1592\":3,\"1601\":1,\"1612\":1,\"1617\":1,\"1618\":1,\"1625\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1641\":2,\"1645\":1,\"1647\":1,\"1657\":1,\"1664\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1746\":1,\"1747\":1,\"1772\":1,\"1789\":1,\"1797\":1,\"1798\":1,\"1799\":2}}],[\"outputs\",{\"1\":{\"15\":6,\"26\":6,\"94\":1,\"96\":1,\"118\":2,\"120\":1,\"121\":1,\"122\":2,\"286\":2,\"300\":2,\"342\":1,\"349\":1,\"369\":2,\"378\":3,\"383\":2,\"404\":2,\"419\":4,\"457\":1,\"530\":2,\"548\":3,\"569\":1,\"590\":1,\"591\":1,\"599\":2,\"611\":2,\"616\":1,\"629\":1,\"701\":1,\"732\":1,\"758\":1,\"766\":1,\"809\":2,\"831\":2,\"844\":1,\"845\":1,\"862\":1,\"863\":1,\"871\":2,\"877\":3,\"879\":1,\"884\":3,\"893\":1,\"894\":1,\"898\":3,\"917\":2,\"930\":1,\"931\":1,\"932\":1,\"940\":3,\"956\":1,\"960\":3,\"1070\":2,\"1084\":2,\"1086\":1,\"1112\":1,\"1118\":2,\"1176\":5,\"1182\":1,\"1207\":2,\"1223\":1,\"1224\":1,\"1228\":2,\"1262\":2,\"1268\":2,\"1274\":3,\"1281\":2,\"1317\":1,\"1410\":3,\"1422\":3,\"1430\":3,\"1438\":3,\"1450\":3,\"1513\":1,\"1612\":2,\"1618\":2,\"1626\":2,\"1632\":2,\"1636\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2,\"1679\":2,\"1688\":2,\"1694\":2,\"1699\":2,\"1714\":1,\"1774\":3}}],[\"opposed\",{\"1\":{\"1600\":1,\"1677\":1}}],[\"opposite\",{\"1\":{\"219\":1,\"1036\":1}}],[\"opposing\",{\"0\":{\"47\":1},\"1\":{\"34\":1,\"45\":1}}],[\"opportunity\",{\"1\":{\"108\":1}}],[\"opt\",{\"1\":{\"71\":1,\"95\":1,\"108\":2,\"123\":1,\"208\":1,\"865\":2,\"1546\":1}}],[\"optimised\",{\"1\":{\"965\":1}}],[\"optimisations\",{\"1\":{\"155\":1}}],[\"optimized\",{\"1\":{\"47\":1}}],[\"option+arrow\",{\"1\":{\"1799\":2}}],[\"option+right\",{\"1\":{\"181\":1,\"1802\":1}}],[\"option+left\",{\"1\":{\"181\":1,\"1802\":1}}],[\"option\",{\"1\":{\"38\":1,\"56\":1,\"111\":1,\"115\":1,\"121\":2,\"123\":1,\"162\":1,\"176\":2,\"462\":1,\"749\":3,\"1716\":1,\"1786\":1,\"1787\":2}}],[\"options\",{\"0\":{\"525\":1,\"815\":1,\"1069\":1,\"1487\":1},\"1\":{\"19\":1,\"43\":1,\"525\":1,\"526\":1,\"560\":1,\"693\":2,\"808\":2,\"815\":1,\"1069\":1,\"1284\":1,\"1421\":2}}],[\"optionally\",{\"1\":{\"692\":1,\"1297\":1}}],[\"optionals\",{\"1\":{\"90\":2}}],[\"optional\",{\"0\":{\"16\":1,\"27\":1,\"209\":1,\"210\":1,\"456\":1,\"1451\":1,\"1457\":1,\"1464\":1,\"1470\":1,\"1475\":1,\"1481\":1,\"1492\":1},\"1\":{\"21\":1,\"27\":2,\"47\":1,\"52\":1,\"79\":1,\"88\":1,\"90\":3,\"97\":1,\"111\":1,\"117\":1,\"121\":2,\"208\":3,\"209\":1,\"431\":1,\"456\":1,\"468\":1,\"774\":1,\"780\":3,\"782\":1,\"857\":1,\"1010\":1,\"1123\":1,\"1244\":1,\"1291\":1,\"1451\":1,\"1458\":1,\"1465\":1,\"1471\":1,\"1476\":1,\"1479\":1,\"1489\":1,\"1493\":1,\"1533\":1,\"1534\":1,\"1539\":1,\"1628\":1,\"1690\":1,\"1696\":1,\"1773\":2}}],[\"opinion\",{\"1\":{\"46\":1}}],[\"operate\",{\"1\":{\"39\":1,\"57\":1}}],[\"operating\",{\"1\":{\"38\":1,\"40\":1,\"56\":1,\"199\":1,\"207\":2,\"214\":1,\"472\":1,\"656\":1,\"677\":1,\"733\":1,\"823\":1,\"910\":1,\"1199\":1,\"1706\":1,\"1746\":1,\"1773\":1,\"1793\":1}}],[\"operations\",{\"1\":{\"38\":1,\"56\":1,\"139\":1,\"155\":1,\"181\":1,\"182\":1,\"442\":1,\"689\":1,\"1706\":1}}],[\"operation\",{\"0\":{\"1355\":1,\"1366\":1,\"1383\":1},\"1\":{\"24\":4,\"94\":4,\"116\":4,\"217\":1,\"1350\":1,\"1363\":1,\"1366\":4,\"1369\":1,\"1380\":1,\"1381\":1,\"1383\":1,\"1502\":4,\"1553\":2,\"1558\":2,\"1774\":4}}],[\"operator\",{\"0\":{\"1553\":1,\"1558\":1},\"1\":{\"24\":2,\"52\":1,\"94\":2,\"116\":2,\"119\":1,\"139\":1,\"142\":1,\"146\":1,\"1502\":2,\"1706\":1,\"1774\":2}}],[\"operators\",{\"0\":{\"24\":1,\"904\":1},\"1\":{\"15\":1,\"21\":1,\"26\":1,\"47\":1,\"48\":1,\"111\":1,\"122\":1,\"182\":1,\"183\":1,\"608\":1,\"611\":1,\"685\":1,\"686\":1,\"831\":1,\"904\":2,\"908\":1,\"917\":1,\"1159\":1,\"1207\":1,\"1321\":1,\"1536\":1,\"1540\":1}}],[\"opens\",{\"1\":{\"1805\":1}}],[\"opened\",{\"1\":{\"1023\":1}}],[\"opening\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"openagent\",{\"0\":{\"1025\":1},\"1\":{\"15\":1,\"26\":1,\"108\":1,\"110\":1,\"115\":1,\"116\":1,\"1024\":1,\"1026\":1,\"1027\":3,\"1030\":2,\"1182\":1,\"1782\":1}}],[\"open\",{\"0\":{\"1009\":1,\"1015\":1,\"1023\":1},\"1\":{\"15\":3,\"26\":3,\"87\":3,\"110\":2,\"111\":1,\"113\":2,\"162\":1,\"164\":2,\"177\":1,\"515\":1,\"526\":2,\"530\":2,\"651\":2,\"677\":2,\"713\":2,\"814\":1,\"816\":2,\"823\":2,\"910\":2,\"1010\":1,\"1011\":2,\"1012\":2,\"1013\":1,\"1014\":2,\"1015\":1,\"1016\":4,\"1017\":1,\"1018\":1,\"1022\":1,\"1023\":4,\"1026\":1,\"1027\":2,\"1029\":2,\"1031\":2,\"1175\":1,\"1176\":2,\"1182\":2,\"1199\":2,\"1297\":1,\"1299\":1,\"1301\":2,\"1400\":4,\"1478\":1,\"1479\":1,\"1480\":1,\"1509\":1,\"1517\":1,\"1565\":1,\"1626\":2,\"1632\":2,\"1636\":2,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2,\"1679\":2,\"1688\":2,\"1694\":2,\"1699\":2,\"1745\":1,\"1781\":1,\"1797\":1,\"1798\":3,\"1799\":2}}],[\"openbsd\",{\"0\":{\"5\":1,\"195\":1},\"1\":{\"0\":1,\"188\":1,\"195\":4}}],[\"oss\",{\"1\":{\"1793\":1}}],[\"osx\",{\"1\":{\"544\":1,\"897\":1,\"1043\":1}}],[\"ostensibly\",{\"1\":{\"216\":1,\"1110\":1}}],[\"os\",{\"0\":{\"1040\":1},\"1\":{\"15\":2,\"26\":2,\"95\":1,\"163\":1,\"201\":2,\"553\":2,\"558\":2,\"993\":2,\"1040\":1,\"1041\":1,\"1042\":2,\"1043\":7,\"1100\":1,\"1300\":4,\"1403\":1,\"1448\":1,\"1461\":1,\"1741\":1,\"1784\":2}}],[\"ordinary\",{\"1\":{\"1575\":1}}],[\"ordered\",{\"1\":{\"347\":4,\"764\":1,\"865\":1,\"1022\":2,\"1164\":1}}],[\"ordering\",{\"1\":{\"115\":1}}],[\"order\",{\"0\":{\"391\":1,\"710\":1,\"785\":1,\"1097\":1,\"1386\":1},\"1\":{\"15\":2,\"26\":2,\"119\":1,\"129\":1,\"155\":1,\"164\":1,\"182\":2,\"347\":1,\"369\":1,\"378\":1,\"383\":1,\"391\":2,\"393\":1,\"419\":1,\"469\":1,\"548\":1,\"599\":1,\"656\":1,\"659\":1,\"678\":1,\"689\":1,\"704\":1,\"705\":1,\"710\":2,\"723\":1,\"728\":1,\"735\":1,\"762\":2,\"777\":1,\"785\":2,\"787\":1,\"824\":1,\"871\":1,\"877\":1,\"884\":1,\"898\":1,\"911\":1,\"956\":1,\"958\":1,\"960\":1,\"961\":1,\"962\":2,\"1024\":1,\"1031\":1,\"1084\":1,\"1095\":1,\"1097\":2,\"1098\":1,\"1200\":1,\"1213\":1,\"1274\":1,\"1386\":2,\"1422\":1,\"1450\":1,\"1484\":1,\"1702\":1,\"1749\":1,\"1753\":1}}],[\"orl\",{\"1\":{\"1505\":1,\"1592\":1}}],[\"oranges\",{\"1\":{\"217\":1,\"224\":1,\"248\":1,\"689\":2}}],[\"origin\",{\"1\":{\"1725\":1}}],[\"originating\",{\"1\":{\"153\":1}}],[\"originally\",{\"1\":{\"42\":1,\"46\":3,\"47\":1,\"52\":1}}],[\"original\",{\"1\":{\"15\":1,\"26\":1,\"112\":1,\"121\":1,\"182\":2,\"394\":1,\"940\":1,\"960\":1,\"1118\":1,\"1262\":1,\"1268\":1,\"1728\":1,\"1794\":1}}],[\"orientated\",{\"1\":{\"103\":1,\"231\":1}}],[\"org\",{\"1\":{\"86\":4,\"566\":1,\"1650\":1,\"1659\":1,\"1660\":1}}],[\"or\",{\"0\":{\"676\":1,\"1032\":1,\"1558\":1},\"1\":{\"3\":1,\"10\":2,\"15\":18,\"16\":2,\"23\":1,\"24\":5,\"26\":18,\"27\":2,\"38\":1,\"39\":2,\"40\":1,\"43\":2,\"44\":2,\"46\":1,\"47\":1,\"51\":1,\"56\":1,\"57\":2,\"60\":1,\"63\":1,\"71\":1,\"77\":1,\"87\":1,\"90\":3,\"94\":3,\"96\":1,\"103\":1,\"108\":2,\"110\":3,\"111\":6,\"112\":2,\"113\":2,\"114\":1,\"115\":2,\"116\":2,\"117\":1,\"118\":1,\"119\":3,\"120\":2,\"121\":3,\"122\":3,\"123\":1,\"126\":1,\"130\":1,\"164\":3,\"169\":1,\"174\":1,\"182\":1,\"183\":1,\"189\":1,\"204\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"217\":1,\"218\":1,\"223\":2,\"226\":1,\"227\":2,\"228\":1,\"232\":5,\"248\":1,\"259\":2,\"261\":1,\"286\":1,\"300\":1,\"302\":2,\"304\":2,\"315\":1,\"323\":1,\"330\":1,\"342\":1,\"349\":1,\"354\":1,\"361\":1,\"368\":1,\"369\":3,\"370\":1,\"375\":1,\"378\":2,\"383\":3,\"391\":2,\"393\":1,\"395\":1,\"398\":2,\"402\":1,\"404\":2,\"405\":1,\"406\":2,\"407\":1,\"409\":1,\"412\":4,\"419\":4,\"423\":1,\"432\":1,\"433\":1,\"437\":2,\"439\":1,\"440\":4,\"443\":1,\"457\":3,\"463\":2,\"469\":1,\"471\":1,\"485\":4,\"488\":1,\"489\":1,\"496\":1,\"502\":1,\"510\":1,\"511\":1,\"520\":1,\"523\":1,\"530\":1,\"535\":1,\"536\":1,\"537\":1,\"540\":1,\"541\":3,\"544\":1,\"545\":1,\"546\":1,\"548\":2,\"559\":1,\"569\":1,\"573\":1,\"575\":2,\"576\":1,\"591\":1,\"597\":1,\"599\":4,\"605\":4,\"607\":1,\"611\":1,\"619\":1,\"620\":1,\"624\":2,\"629\":4,\"630\":1,\"631\":1,\"635\":2,\"636\":1,\"637\":1,\"641\":2,\"643\":2,\"651\":1,\"656\":1,\"659\":1,\"661\":1,\"671\":1,\"676\":1,\"677\":2,\"679\":2,\"691\":1,\"692\":1,\"695\":3,\"703\":4,\"704\":1,\"705\":1,\"710\":2,\"723\":1,\"728\":1,\"730\":1,\"733\":1,\"735\":1,\"737\":1,\"743\":1,\"745\":2,\"747\":2,\"751\":1,\"755\":4,\"756\":1,\"758\":2,\"759\":1,\"760\":1,\"766\":1,\"779\":2,\"780\":1,\"785\":2,\"787\":1,\"795\":1,\"797\":1,\"798\":1,\"799\":1,\"809\":2,\"814\":1,\"816\":1,\"818\":1,\"823\":2,\"825\":2,\"831\":1,\"849\":1,\"858\":1,\"859\":2,\"861\":5,\"862\":1,\"863\":2,\"871\":3,\"877\":3,\"882\":2,\"884\":3,\"891\":2,\"898\":2,\"905\":4,\"907\":1,\"910\":2,\"912\":2,\"917\":1,\"924\":3,\"926\":2,\"935\":1,\"940\":3,\"945\":1,\"947\":2,\"953\":1,\"956\":2,\"960\":3,\"965\":1,\"967\":2,\"977\":1,\"978\":1,\"979\":4,\"982\":1,\"984\":2,\"986\":1,\"987\":1,\"999\":3,\"1002\":1,\"1008\":4,\"1016\":2,\"1024\":2,\"1029\":1,\"1031\":1,\"1032\":2,\"1033\":2,\"1034\":4,\"1035\":1,\"1036\":6,\"1037\":3,\"1038\":2,\"1039\":2,\"1043\":5,\"1049\":1,\"1058\":3,\"1070\":2,\"1077\":2,\"1084\":3,\"1091\":2,\"1097\":2,\"1098\":1,\"1113\":3,\"1118\":3,\"1123\":1,\"1125\":1,\"1128\":1,\"1135\":1,\"1137\":2,\"1142\":1,\"1150\":2,\"1154\":1,\"1155\":1,\"1171\":2,\"1179\":1,\"1182\":3,\"1190\":1,\"1192\":1,\"1194\":1,\"1199\":2,\"1201\":2,\"1207\":1,\"1209\":2,\"1213\":2,\"1219\":3,\"1228\":2,\"1235\":2,\"1237\":2,\"1241\":1,\"1244\":1,\"1253\":1,\"1255\":5,\"1258\":1,\"1262\":1,\"1267\":1,\"1268\":1,\"1274\":3,\"1278\":2,\"1281\":2,\"1284\":1,\"1287\":1,\"1289\":1,\"1290\":1,\"1291\":1,\"1297\":1,\"1319\":4,\"1321\":1,\"1325\":2,\"1331\":2,\"1337\":1,\"1341\":1,\"1345\":1,\"1347\":2,\"1360\":1,\"1362\":1,\"1368\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1400\":4,\"1401\":1,\"1402\":1,\"1404\":1,\"1407\":1,\"1410\":3,\"1416\":2,\"1422\":4,\"1430\":3,\"1432\":1,\"1438\":3,\"1450\":4,\"1451\":1,\"1456\":2,\"1457\":1,\"1458\":1,\"1461\":1,\"1463\":4,\"1469\":5,\"1470\":1,\"1471\":1,\"1474\":4,\"1491\":1,\"1496\":1,\"1497\":1,\"1502\":5,\"1507\":3,\"1508\":1,\"1518\":3,\"1520\":2,\"1536\":4,\"1538\":2,\"1540\":3,\"1541\":1,\"1547\":3,\"1548\":1,\"1552\":3,\"1557\":1,\"1562\":1,\"1570\":1,\"1582\":1,\"1585\":1,\"1589\":3,\"1591\":1,\"1594\":3,\"1599\":3,\"1601\":1,\"1602\":1,\"1605\":1,\"1610\":2,\"1612\":1,\"1614\":1,\"1618\":2,\"1626\":1,\"1632\":1,\"1634\":3,\"1636\":1,\"1641\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":4,\"1679\":1,\"1688\":1,\"1691\":1,\"1694\":1,\"1699\":1,\"1706\":2,\"1707\":5,\"1708\":1,\"1709\":2,\"1710\":2,\"1719\":1,\"1727\":2,\"1729\":1,\"1731\":1,\"1733\":1,\"1741\":1,\"1742\":1,\"1747\":1,\"1748\":1,\"1752\":1,\"1753\":1,\"1756\":1,\"1759\":1,\"1760\":1,\"1761\":1,\"1771\":1,\"1772\":1,\"1773\":1,\"1774\":2,\"1775\":2,\"1776\":1,\"1777\":1,\"1778\":2,\"1780\":1,\"1782\":1,\"1784\":1,\"1787\":1,\"1790\":1,\"1794\":2,\"1798\":3,\"1799\":1,\"1802\":4,\"1808\":1}}],[\"others\",{\"1\":{\"47\":1,\"48\":1,\"59\":1,\"209\":1,\"1602\":1,\"1728\":1,\"1773\":1}}],[\"otherwise\",{\"1\":{\"47\":2,\"78\":1,\"113\":1,\"261\":1,\"387\":1,\"833\":1,\"839\":1,\"1125\":2,\"1312\":2,\"1591\":1}}],[\"other\",{\"0\":{\"9\":1,\"11\":1,\"904\":1,\"1452\":1,\"1499\":1},\"1\":{\"0\":1,\"8\":1,\"15\":1,\"26\":1,\"27\":1,\"28\":1,\"41\":1,\"44\":1,\"47\":1,\"48\":4,\"50\":1,\"58\":1,\"60\":1,\"63\":1,\"92\":1,\"93\":2,\"98\":1,\"103\":1,\"111\":1,\"113\":1,\"119\":1,\"127\":1,\"142\":1,\"162\":1,\"164\":1,\"168\":1,\"181\":1,\"198\":1,\"204\":1,\"214\":1,\"226\":1,\"228\":1,\"232\":1,\"252\":1,\"261\":2,\"304\":1,\"315\":1,\"323\":1,\"330\":1,\"354\":1,\"361\":1,\"371\":1,\"390\":1,\"447\":1,\"453\":1,\"480\":1,\"487\":1,\"489\":1,\"515\":1,\"532\":1,\"536\":1,\"545\":1,\"576\":1,\"595\":1,\"605\":1,\"616\":1,\"651\":1,\"653\":1,\"675\":1,\"680\":1,\"695\":8,\"730\":1,\"735\":1,\"741\":1,\"743\":1,\"745\":1,\"754\":1,\"755\":2,\"756\":1,\"758\":1,\"759\":1,\"760\":1,\"765\":1,\"778\":1,\"826\":1,\"867\":1,\"882\":1,\"905\":1,\"913\":1,\"924\":1,\"962\":1,\"999\":1,\"1048\":1,\"1058\":1,\"1105\":1,\"1182\":1,\"1202\":1,\"1215\":1,\"1219\":1,\"1228\":1,\"1281\":1,\"1321\":1,\"1343\":1,\"1345\":1,\"1387\":2,\"1421\":1,\"1448\":1,\"1491\":1,\"1513\":1,\"1542\":2,\"1593\":1,\"1603\":1,\"1613\":1,\"1614\":1,\"1628\":1,\"1634\":2,\"1638\":1,\"1641\":1,\"1657\":1,\"1670\":1,\"1719\":1,\"1750\":1,\"1788\":1,\"1789\":1}}],[\"onwards\",{\"1\":{\"462\":1}}],[\"onto\",{\"1\":{\"433\":1}}],[\"onkeypress\",{\"1\":{\"115\":1,\"166\":1,\"648\":1,\"649\":1,\"1388\":1}}],[\"once\",{\"1\":{\"34\":1,\"45\":1,\"47\":2,\"48\":2,\"50\":1,\"53\":2,\"312\":1,\"455\":1,\"545\":1,\"1037\":1,\"1799\":1,\"1805\":1}}],[\"oncommandcompletion\",{\"0\":{\"1346\":1},\"1\":{\"29\":1,\"115\":1,\"123\":1,\"180\":1,\"183\":1,\"647\":1,\"649\":1,\"1347\":1,\"1348\":2,\"1350\":1,\"1388\":1}}],[\"onsecondselapsed\",{\"0\":{\"1389\":1},\"1\":{\"29\":1,\"645\":2,\"647\":1,\"649\":1,\"1390\":1,\"1391\":2,\"1393\":1}}],[\"onprompt\",{\"0\":{\"1374\":1},\"1\":{\"29\":1,\"166\":1,\"167\":1,\"169\":1,\"647\":1,\"649\":1,\"1360\":1,\"1375\":1,\"1376\":2,\"1378\":3,\"1387\":2}}],[\"onfilesystemchange\",{\"0\":{\"1361\":1},\"1\":{\"29\":1,\"115\":2,\"647\":1,\"649\":1,\"1362\":1,\"1367\":2,\"1369\":1}}],[\"only\",{\"0\":{\"1372\":1},\"1\":{\"24\":1,\"27\":1,\"45\":1,\"46\":1,\"48\":1,\"52\":1,\"59\":2,\"94\":1,\"95\":1,\"99\":2,\"103\":2,\"108\":2,\"113\":5,\"115\":1,\"116\":1,\"119\":1,\"154\":1,\"231\":1,\"238\":1,\"243\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1,\"315\":1,\"323\":1,\"330\":1,\"337\":1,\"344\":1,\"354\":2,\"361\":2,\"387\":1,\"389\":1,\"391\":2,\"409\":1,\"440\":2,\"441\":1,\"443\":2,\"446\":1,\"447\":1,\"455\":1,\"459\":1,\"472\":1,\"474\":1,\"518\":1,\"526\":3,\"545\":2,\"546\":1,\"568\":1,\"591\":1,\"607\":1,\"679\":1,\"682\":1,\"694\":1,\"710\":2,\"716\":1,\"717\":1,\"747\":1,\"749\":1,\"777\":1,\"783\":1,\"784\":1,\"785\":2,\"795\":1,\"814\":1,\"825\":1,\"828\":1,\"859\":1,\"907\":1,\"912\":1,\"915\":1,\"1021\":1,\"1023\":1,\"1037\":2,\"1095\":1,\"1097\":2,\"1131\":3,\"1153\":1,\"1166\":1,\"1188\":1,\"1190\":1,\"1201\":1,\"1204\":1,\"1217\":4,\"1249\":1,\"1251\":1,\"1253\":1,\"1272\":1,\"1287\":1,\"1321\":1,\"1327\":1,\"1336\":1,\"1359\":1,\"1384\":1,\"1385\":1,\"1488\":1,\"1489\":1,\"1502\":1,\"1517\":1,\"1542\":1,\"1554\":1,\"1558\":1,\"1559\":1,\"1574\":1,\"1614\":1,\"1634\":1,\"1666\":2,\"1672\":1,\"1677\":1,\"1708\":3,\"1741\":1,\"1750\":2,\"1752\":1,\"1753\":1,\"1772\":2,\"1773\":1,\"1774\":1,\"1776\":1,\"1789\":1,\"1798\":2}}],[\"ones\",{\"1\":{\"15\":1,\"26\":1,\"211\":1,\"412\":1,\"703\":1,\"861\":1,\"1008\":1,\"1032\":1,\"1255\":1,\"1319\":1,\"1707\":1,\"1791\":1}}],[\"one\",{\"0\":{\"751\":1},\"1\":{\"3\":2,\"15\":2,\"26\":2,\"30\":3,\"38\":2,\"41\":1,\"50\":1,\"51\":1,\"56\":2,\"59\":1,\"67\":1,\"82\":1,\"92\":1,\"95\":1,\"97\":1,\"98\":1,\"108\":2,\"115\":1,\"165\":1,\"182\":2,\"201\":1,\"216\":1,\"265\":3,\"266\":1,\"267\":1,\"272\":1,\"273\":1,\"274\":1,\"279\":1,\"286\":3,\"288\":1,\"293\":3,\"300\":3,\"304\":1,\"307\":1,\"308\":1,\"313\":2,\"320\":3,\"328\":2,\"335\":3,\"342\":3,\"349\":3,\"354\":2,\"361\":2,\"397\":2,\"404\":1,\"410\":2,\"412\":1,\"421\":1,\"432\":2,\"433\":1,\"440\":1,\"495\":1,\"546\":1,\"591\":1,\"596\":1,\"605\":1,\"643\":1,\"703\":1,\"741\":1,\"743\":3,\"756\":3,\"758\":2,\"767\":1,\"770\":2,\"857\":1,\"861\":1,\"886\":1,\"905\":1,\"929\":1,\"932\":1,\"977\":1,\"999\":2,\"1008\":1,\"1032\":1,\"1035\":1,\"1036\":1,\"1037\":2,\"1043\":1,\"1058\":2,\"1089\":1,\"1091\":1,\"1111\":1,\"1115\":1,\"1145\":1,\"1175\":1,\"1176\":1,\"1182\":1,\"1219\":2,\"1253\":1,\"1255\":1,\"1262\":1,\"1267\":2,\"1268\":1,\"1281\":1,\"1307\":1,\"1313\":1,\"1319\":1,\"1359\":1,\"1366\":1,\"1385\":1,\"1509\":1,\"1555\":4,\"1556\":1,\"1560\":4,\"1561\":1,\"1580\":1,\"1591\":3,\"1610\":1,\"1612\":2,\"1618\":1,\"1626\":1,\"1632\":3,\"1634\":1,\"1636\":1,\"1641\":3,\"1645\":4,\"1650\":1,\"1652\":1,\"1654\":1,\"1657\":3,\"1659\":1,\"1662\":1,\"1670\":3,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":3,\"1699\":3,\"1707\":1,\"1717\":1,\"1721\":1,\"1729\":1,\"1741\":1,\"1746\":1,\"1747\":2,\"1797\":2,\"1799\":6}}],[\"on\",{\"1\":{\"0\":1,\"3\":1,\"10\":1,\"13\":1,\"14\":1,\"15\":8,\"21\":1,\"23\":1,\"26\":8,\"27\":1,\"38\":2,\"39\":3,\"40\":2,\"41\":1,\"42\":1,\"46\":1,\"50\":2,\"51\":1,\"52\":1,\"54\":1,\"56\":2,\"57\":3,\"62\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":2,\"73\":1,\"75\":1,\"87\":1,\"94\":2,\"95\":6,\"96\":1,\"99\":2,\"103\":2,\"105\":1,\"110\":2,\"111\":1,\"113\":2,\"115\":1,\"117\":1,\"119\":4,\"120\":1,\"121\":2,\"129\":1,\"131\":2,\"147\":1,\"155\":1,\"160\":1,\"162\":1,\"163\":1,\"165\":1,\"170\":1,\"181\":1,\"182\":1,\"190\":1,\"197\":1,\"198\":1,\"199\":1,\"202\":3,\"207\":1,\"208\":4,\"210\":1,\"216\":1,\"218\":1,\"237\":1,\"251\":1,\"260\":1,\"270\":1,\"277\":1,\"303\":1,\"315\":2,\"323\":2,\"330\":2,\"354\":1,\"361\":1,\"369\":1,\"377\":1,\"387\":2,\"404\":1,\"405\":1,\"406\":1,\"409\":1,\"412\":3,\"434\":1,\"436\":1,\"439\":1,\"440\":1,\"441\":1,\"447\":1,\"452\":1,\"454\":1,\"462\":1,\"463\":1,\"469\":1,\"474\":4,\"489\":1,\"500\":1,\"502\":2,\"508\":1,\"523\":1,\"530\":1,\"536\":1,\"548\":2,\"553\":1,\"554\":1,\"555\":1,\"566\":1,\"567\":1,\"575\":2,\"576\":1,\"577\":1,\"596\":1,\"605\":2,\"608\":1,\"611\":1,\"643\":3,\"651\":1,\"659\":1,\"669\":1,\"679\":1,\"681\":2,\"682\":1,\"703\":3,\"713\":1,\"717\":1,\"723\":1,\"728\":1,\"730\":1,\"735\":1,\"743\":2,\"745\":1,\"749\":2,\"756\":2,\"758\":1,\"760\":1,\"791\":1,\"794\":1,\"802\":1,\"808\":1,\"814\":2,\"815\":1,\"825\":1,\"827\":2,\"828\":1,\"848\":1,\"849\":1,\"850\":1,\"859\":1,\"861\":3,\"876\":2,\"878\":1,\"879\":1,\"891\":1,\"898\":1,\"905\":2,\"908\":1,\"912\":1,\"914\":2,\"915\":1,\"917\":1,\"924\":1,\"934\":1,\"940\":1,\"947\":1,\"954\":1,\"956\":1,\"960\":1,\"962\":1,\"967\":1,\"982\":2,\"986\":2,\"987\":1,\"989\":2,\"993\":1,\"995\":1,\"999\":1,\"1002\":1,\"1008\":3,\"1009\":1,\"1016\":1,\"1031\":1,\"1032\":1,\"1033\":1,\"1036\":1,\"1039\":3,\"1043\":5,\"1044\":1,\"1058\":1,\"1061\":1,\"1069\":1,\"1077\":1,\"1107\":1,\"1118\":1,\"1137\":1,\"1150\":1,\"1161\":1,\"1163\":1,\"1171\":1,\"1172\":1,\"1186\":1,\"1189\":1,\"1201\":1,\"1203\":2,\"1204\":1,\"1213\":1,\"1219\":1,\"1222\":1,\"1235\":1,\"1241\":2,\"1251\":1,\"1255\":4,\"1262\":1,\"1273\":2,\"1300\":1,\"1319\":3,\"1325\":2,\"1326\":1,\"1331\":1,\"1337\":1,\"1347\":1,\"1360\":1,\"1372\":1,\"1378\":1,\"1451\":1,\"1453\":1,\"1454\":1,\"1455\":1,\"1461\":1,\"1476\":1,\"1480\":1,\"1489\":1,\"1496\":1,\"1500\":1,\"1505\":1,\"1513\":1,\"1535\":1,\"1546\":1,\"1554\":2,\"1557\":1,\"1559\":2,\"1562\":1,\"1592\":1,\"1600\":1,\"1615\":1,\"1626\":1,\"1628\":1,\"1632\":1,\"1634\":1,\"1636\":1,\"1641\":2,\"1645\":1,\"1647\":1,\"1650\":1,\"1657\":1,\"1664\":2,\"1667\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1682\":1,\"1686\":1,\"1688\":1,\"1690\":1,\"1694\":1,\"1696\":1,\"1699\":1,\"1705\":1,\"1706\":1,\"1707\":2,\"1714\":1,\"1717\":1,\"1719\":1,\"1727\":1,\"1731\":1,\"1735\":1,\"1741\":1,\"1746\":1,\"1747\":1,\"1749\":1,\"1753\":1,\"1756\":1,\"1771\":1,\"1774\":1,\"1778\":1,\"1779\":1,\"1782\":1,\"1793\":1,\"1794\":2,\"1799\":1,\"1802\":1,\"1810\":1,\"1811\":1}}],[\"oflag=\",{\"1\":{\"447\":1}}],[\"of=\",{\"1\":{\"447\":1}}],[\"often\",{\"1\":{\"46\":1,\"47\":2,\"48\":1,\"50\":1,\"57\":1,\"218\":1,\"421\":1,\"433\":2,\"1375\":1,\"1403\":1,\"1448\":1,\"1744\":1}}],[\"office\",{\"1\":{\"1226\":1,\"1639\":1}}],[\"officially\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"208\":1,\"1516\":1}}],[\"off\",{\"1\":{\"182\":1,\"211\":1,\"526\":1,\"575\":1,\"576\":1,\"764\":1,\"780\":1,\"1716\":1,\"1721\":1}}],[\"offset\",{\"1\":{\"168\":1,\"1116\":1}}],[\"offers\",{\"1\":{\"607\":1,\"907\":1}}],[\"offering\",{\"1\":{\"560\":1}}],[\"offer\",{\"1\":{\"40\":1,\"43\":1,\"61\":1,\"737\":1,\"1719\":1,\"1753\":1}}],[\"of\",{\"0\":{\"34\":1,\"45\":1,\"309\":1,\"391\":1,\"442\":1,\"445\":1,\"446\":1,\"526\":1,\"710\":1,\"785\":1,\"1097\":1,\"1386\":1,\"1811\":1},\"1\":{\"0\":3,\"1\":1,\"3\":7,\"8\":2,\"10\":1,\"13\":1,\"14\":1,\"15\":28,\"16\":1,\"21\":1,\"23\":7,\"24\":4,\"26\":28,\"27\":2,\"29\":1,\"31\":1,\"33\":1,\"36\":2,\"37\":1,\"38\":11,\"39\":6,\"40\":4,\"41\":2,\"43\":2,\"44\":2,\"46\":2,\"47\":3,\"48\":2,\"50\":11,\"51\":2,\"52\":3,\"53\":2,\"54\":4,\"56\":11,\"57\":5,\"59\":1,\"61\":1,\"62\":1,\"63\":2,\"66\":2,\"68\":1,\"69\":1,\"72\":2,\"76\":1,\"78\":1,\"79\":1,\"89\":1,\"90\":4,\"93\":3,\"94\":5,\"95\":3,\"96\":1,\"98\":1,\"99\":1,\"100\":1,\"102\":1,\"103\":3,\"104\":1,\"105\":3,\"106\":1,\"107\":1,\"108\":5,\"109\":2,\"110\":3,\"111\":6,\"112\":1,\"113\":2,\"115\":4,\"116\":1,\"117\":3,\"119\":5,\"120\":4,\"121\":11,\"122\":6,\"123\":2,\"124\":2,\"129\":1,\"130\":1,\"131\":1,\"135\":1,\"143\":1,\"147\":1,\"153\":1,\"160\":1,\"162\":3,\"163\":2,\"164\":3,\"169\":1,\"170\":2,\"181\":1,\"182\":6,\"183\":1,\"188\":1,\"201\":3,\"202\":2,\"208\":5,\"209\":1,\"210\":1,\"214\":2,\"216\":4,\"217\":1,\"219\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"231\":5,\"232\":2,\"237\":3,\"238\":1,\"239\":1,\"246\":2,\"247\":1,\"248\":1,\"249\":1,\"251\":1,\"252\":2,\"259\":2,\"264\":3,\"267\":1,\"270\":2,\"274\":1,\"277\":2,\"281\":1,\"284\":1,\"285\":1,\"288\":1,\"291\":1,\"292\":1,\"295\":1,\"298\":1,\"299\":1,\"308\":1,\"309\":1,\"340\":4,\"341\":1,\"347\":3,\"348\":1,\"354\":4,\"361\":4,\"369\":4,\"371\":2,\"375\":2,\"376\":2,\"377\":5,\"378\":3,\"380\":2,\"383\":5,\"387\":2,\"391\":6,\"393\":2,\"404\":4,\"406\":1,\"408\":1,\"410\":2,\"412\":5,\"413\":1,\"414\":1,\"419\":5,\"421\":5,\"423\":2,\"431\":3,\"432\":1,\"433\":1,\"436\":1,\"437\":2,\"438\":4,\"439\":7,\"440\":4,\"441\":1,\"442\":3,\"445\":2,\"447\":4,\"449\":1,\"452\":1,\"454\":1,\"455\":1,\"457\":2,\"459\":2,\"462\":1,\"463\":1,\"465\":1,\"468\":3,\"469\":2,\"474\":2,\"483\":1,\"484\":1,\"485\":4,\"487\":1,\"488\":5,\"489\":4,\"490\":1,\"491\":1,\"500\":2,\"502\":6,\"507\":1,\"509\":1,\"511\":1,\"513\":1,\"515\":2,\"517\":1,\"518\":1,\"522\":1,\"523\":1,\"527\":1,\"528\":1,\"530\":2,\"531\":1,\"532\":1,\"535\":5,\"536\":4,\"540\":1,\"541\":3,\"544\":1,\"545\":4,\"546\":1,\"548\":5,\"553\":1,\"554\":1,\"555\":1,\"560\":1,\"565\":1,\"566\":1,\"569\":1,\"577\":1,\"584\":2,\"585\":1,\"586\":1,\"589\":1,\"593\":1,\"596\":2,\"599\":2,\"605\":4,\"607\":1,\"611\":2,\"618\":1,\"643\":3,\"647\":1,\"651\":2,\"653\":4,\"656\":2,\"659\":2,\"661\":1,\"664\":2,\"665\":1,\"666\":1,\"669\":1,\"675\":1,\"676\":3,\"677\":2,\"678\":1,\"679\":4,\"682\":3,\"689\":1,\"692\":1,\"703\":3,\"704\":1,\"705\":1,\"710\":6,\"713\":2,\"723\":2,\"728\":2,\"732\":3,\"733\":2,\"735\":2,\"741\":1,\"742\":4,\"743\":5,\"745\":4,\"747\":1,\"751\":2,\"752\":2,\"755\":1,\"756\":5,\"758\":5,\"759\":1,\"760\":1,\"762\":2,\"763\":1,\"766\":1,\"771\":1,\"773\":1,\"777\":1,\"779\":3,\"780\":3,\"781\":2,\"782\":2,\"785\":6,\"787\":3,\"789\":1,\"791\":2,\"793\":1,\"797\":1,\"798\":1,\"799\":1,\"801\":4,\"802\":1,\"808\":4,\"815\":1,\"823\":2,\"824\":1,\"825\":4,\"828\":3,\"837\":3,\"843\":3,\"849\":1,\"850\":2,\"857\":1,\"859\":2,\"861\":4,\"865\":2,\"871\":2,\"875\":1,\"876\":1,\"877\":3,\"882\":2,\"884\":4,\"886\":2,\"891\":1,\"893\":1,\"897\":1,\"898\":4,\"905\":4,\"907\":1,\"910\":2,\"911\":1,\"912\":4,\"915\":3,\"917\":2,\"920\":1,\"924\":1,\"926\":1,\"927\":1,\"929\":1,\"930\":1,\"931\":1,\"940\":3,\"942\":2,\"943\":1,\"945\":1,\"947\":4,\"953\":2,\"954\":2,\"956\":3,\"958\":1,\"960\":4,\"961\":1,\"962\":1,\"965\":1,\"967\":3,\"972\":1,\"975\":2,\"977\":1,\"978\":1,\"979\":2,\"982\":2,\"983\":1,\"987\":1,\"993\":1,\"999\":1,\"1000\":1,\"1002\":1,\"1008\":3,\"1020\":1,\"1021\":3,\"1023\":1,\"1024\":1,\"1031\":2,\"1032\":1,\"1033\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1039\":4,\"1043\":2,\"1044\":1,\"1052\":3,\"1056\":2,\"1058\":1,\"1059\":1,\"1061\":2,\"1068\":3,\"1069\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1084\":4,\"1091\":1,\"1095\":1,\"1097\":6,\"1098\":3,\"1108\":2,\"1110\":2,\"1112\":1,\"1113\":5,\"1116\":1,\"1118\":2,\"1119\":1,\"1120\":1,\"1125\":2,\"1126\":2,\"1127\":1,\"1128\":1,\"1135\":1,\"1137\":3,\"1139\":1,\"1141\":1,\"1143\":3,\"1145\":2,\"1150\":1,\"1152\":1,\"1153\":2,\"1154\":2,\"1155\":1,\"1157\":1,\"1161\":4,\"1169\":1,\"1170\":1,\"1171\":5,\"1172\":1,\"1173\":1,\"1175\":3,\"1176\":4,\"1178\":5,\"1179\":2,\"1180\":1,\"1182\":2,\"1184\":1,\"1186\":1,\"1192\":1,\"1199\":2,\"1200\":1,\"1201\":4,\"1204\":3,\"1208\":1,\"1213\":3,\"1218\":2,\"1219\":1,\"1220\":1,\"1222\":2,\"1224\":3,\"1226\":1,\"1228\":1,\"1235\":1,\"1241\":2,\"1242\":1,\"1243\":1,\"1244\":1,\"1245\":1,\"1249\":1,\"1250\":1,\"1251\":2,\"1252\":1,\"1255\":6,\"1257\":1,\"1258\":1,\"1262\":4,\"1267\":1,\"1268\":4,\"1269\":1,\"1272\":1,\"1273\":1,\"1274\":2,\"1278\":2,\"1281\":1,\"1287\":1,\"1290\":1,\"1291\":1,\"1295\":2,\"1297\":1,\"1300\":1,\"1303\":1,\"1307\":1,\"1308\":1,\"1309\":1,\"1312\":2,\"1313\":2,\"1319\":3,\"1320\":1,\"1321\":3,\"1325\":5,\"1326\":1,\"1327\":2,\"1331\":5,\"1337\":3,\"1345\":1,\"1347\":1,\"1349\":1,\"1354\":1,\"1355\":1,\"1356\":2,\"1357\":2,\"1360\":5,\"1365\":1,\"1368\":1,\"1372\":1,\"1374\":1,\"1375\":1,\"1386\":1,\"1387\":1,\"1388\":1,\"1400\":5,\"1402\":1,\"1403\":2,\"1404\":2,\"1405\":2,\"1407\":2,\"1410\":4,\"1411\":1,\"1412\":1,\"1421\":1,\"1422\":4,\"1423\":1,\"1424\":2,\"1428\":1,\"1430\":3,\"1431\":1,\"1432\":2,\"1436\":1,\"1438\":3,\"1439\":1,\"1440\":1,\"1448\":2,\"1450\":4,\"1451\":1,\"1454\":1,\"1455\":1,\"1456\":1,\"1480\":1,\"1482\":1,\"1484\":1,\"1486\":1,\"1487\":1,\"1492\":1,\"1493\":1,\"1497\":2,\"1498\":1,\"1501\":1,\"1502\":4,\"1505\":2,\"1509\":1,\"1513\":1,\"1516\":1,\"1517\":1,\"1518\":1,\"1520\":1,\"1531\":1,\"1535\":5,\"1536\":2,\"1538\":2,\"1540\":1,\"1542\":3,\"1545\":2,\"1546\":1,\"1547\":1,\"1549\":1,\"1557\":5,\"1562\":5,\"1564\":1,\"1568\":4,\"1569\":1,\"1570\":3,\"1572\":5,\"1573\":1,\"1574\":1,\"1576\":5,\"1577\":1,\"1578\":1,\"1580\":4,\"1581\":1,\"1584\":5,\"1591\":2,\"1592\":2,\"1593\":1,\"1600\":2,\"1601\":6,\"1610\":1,\"1612\":1,\"1618\":1,\"1620\":2,\"1626\":2,\"1628\":2,\"1631\":1,\"1632\":2,\"1634\":4,\"1636\":2,\"1641\":5,\"1644\":1,\"1645\":2,\"1647\":1,\"1650\":1,\"1652\":1,\"1654\":2,\"1657\":2,\"1662\":1,\"1664\":1,\"1670\":2,\"1672\":2,\"1674\":2,\"1675\":3,\"1677\":1,\"1679\":2,\"1688\":2,\"1690\":1,\"1694\":2,\"1696\":1,\"1699\":2,\"1700\":1,\"1702\":2,\"1705\":1,\"1706\":1,\"1707\":2,\"1708\":8,\"1709\":2,\"1712\":2,\"1713\":1,\"1714\":2,\"1715\":1,\"1716\":4,\"1717\":4,\"1718\":1,\"1719\":2,\"1723\":1,\"1725\":3,\"1727\":5,\"1728\":4,\"1729\":1,\"1731\":2,\"1737\":2,\"1738\":1,\"1739\":1,\"1740\":1,\"1741\":3,\"1744\":2,\"1745\":1,\"1746\":7,\"1747\":2,\"1748\":5,\"1749\":2,\"1750\":2,\"1753\":2,\"1755\":1,\"1756\":2,\"1757\":1,\"1758\":1,\"1760\":1,\"1764\":1,\"1765\":1,\"1768\":1,\"1769\":1,\"1771\":4,\"1772\":3,\"1773\":3,\"1774\":5,\"1775\":1,\"1777\":1,\"1778\":3,\"1779\":7,\"1780\":4,\"1782\":4,\"1783\":1,\"1789\":2,\"1791\":3,\"1793\":1,\"1794\":3,\"1795\":3,\"1797\":1,\"1798\":5,\"1799\":9,\"1802\":5,\"1805\":7,\"1811\":1,\"1812\":1,\"1814\":1}}],[\"tfvars\",{\"1\":{\"1630\":1}}],[\"tf\",{\"1\":{\"1630\":1}}],[\"tfstate\",{\"1\":{\"113\":1}}],[\"tsv\",{\"1\":{\"1614\":1}}],[\"t|\",{\"1\":{\"1278\":1}}],[\"tcp\",{\"1\":{\"1056\":2,\"1175\":4}}],[\"tcsh\",{\"1\":{\"47\":1}}],[\"tty\",{\"0\":{\"1759\":1},\"1\":{\"113\":1,\"115\":1,\"121\":1,\"123\":3,\"129\":1,\"261\":1,\"367\":2,\"732\":2,\"865\":1,\"1013\":1,\"1016\":1,\"1026\":1,\"1178\":1,\"1260\":2,\"1267\":4,\"1644\":2,\"1756\":1,\"1759\":2}}],[\"tmux\",{\"1\":{\"108\":1,\"115\":2,\"163\":2}}],[\"tmp\",{\"0\":{\"1296\":1},\"1\":{\"15\":1,\"26\":1,\"111\":1,\"837\":1,\"843\":1,\"1297\":1,\"1298\":1,\"1299\":1,\"1300\":3}}],[\"twelfth\",{\"1\":{\"1807\":1}}],[\"tweaking\",{\"1\":{\"1788\":1}}],[\"tweaks\",{\"1\":{\"90\":1,\"103\":1,\"113\":1}}],[\"tweaked\",{\"1\":{\"90\":1,\"99\":1,\"121\":1,\"123\":1}}],[\"twice\",{\"1\":{\"1712\":1,\"1737\":1}}],[\"two\",{\"1\":{\"15\":1,\"26\":1,\"47\":1,\"50\":1,\"52\":1,\"66\":1,\"89\":1,\"103\":1,\"117\":1,\"170\":1,\"231\":1,\"237\":1,\"244\":1,\"365\":1,\"369\":1,\"397\":3,\"398\":1,\"399\":1,\"438\":1,\"439\":1,\"471\":1,\"548\":1,\"571\":1,\"605\":2,\"741\":1,\"749\":1,\"770\":2,\"884\":1,\"898\":1,\"905\":2,\"936\":1,\"937\":1,\"947\":1,\"967\":1,\"997\":1,\"1137\":1,\"1428\":1,\"1436\":1,\"1555\":3,\"1556\":1,\"1560\":3,\"1561\":1,\"1647\":1,\"1652\":2,\"1662\":2,\"1664\":1,\"1700\":1,\"1712\":1,\"1737\":1,\"1797\":1,\"1807\":2}}],[\"tu\",{\"1\":{\"888\":1}}],[\"tuesnight\",{\"1\":{\"1133\":1}}],[\"tues\",{\"1\":{\"888\":1}}],[\"tuesdayfoobar\",{\"1\":{\"1232\":1}}],[\"tuesday\",{\"1\":{\"40\":2,\"41\":1,\"42\":1,\"376\":1,\"416\":1,\"438\":1,\"439\":1,\"750\":1,\"875\":1,\"944\":1,\"964\":2,\"1132\":1,\"1272\":1,\"1400\":3,\"1403\":3,\"1405\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":2,\"1449\":1}}],[\"tue\",{\"1\":{\"750\":1,\"1449\":1,\"1505\":2,\"1579\":5,\"1592\":2}}],[\"turned\",{\"1\":{\"1708\":2,\"1716\":1}}],[\"turning\",{\"1\":{\"508\":1,\"1280\":1}}],[\"turn\",{\"1\":{\"46\":1,\"103\":1,\"762\":1,\"1746\":1}}],[\"tutorial\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"tiff\",{\"1\":{\"1010\":1}}],[\"tips\",{\"0\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"tight\",{\"1\":{\"354\":1,\"361\":1}}],[\"tightly\",{\"1\":{\"50\":1}}],[\"titles\",{\"1\":{\"1260\":1,\"1267\":1}}],[\"title\",{\"0\":{\"1419\":1,\"1446\":1},\"1\":{\"115\":1,\"163\":1,\"340\":6,\"1018\":1,\"1267\":2,\"1403\":2,\"1417\":2,\"1444\":2,\"1691\":1}}],[\"titlebar\",{\"1\":{\"115\":3}}],[\"timing\",{\"1\":{\"99\":2,\"516\":1}}],[\"timed\",{\"1\":{\"1484\":1}}],[\"timestamped\",{\"1\":{\"1800\":1}}],[\"times\",{\"1\":{\"121\":1,\"182\":1,\"1509\":1,\"1805\":1}}],[\"timeout\",{\"1\":{\"89\":4,\"90\":1,\"182\":1,\"516\":1,\"517\":2,\"645\":1,\"1022\":2}}],[\"time\",{\"0\":{\"565\":1,\"567\":2,\"568\":1,\"1290\":1},\"1\":{\"15\":4,\"26\":4,\"29\":1,\"30\":3,\"38\":1,\"47\":1,\"56\":1,\"92\":1,\"95\":1,\"108\":1,\"110\":2,\"111\":1,\"119\":1,\"129\":1,\"162\":3,\"265\":3,\"266\":1,\"267\":1,\"272\":1,\"273\":1,\"274\":1,\"279\":1,\"286\":3,\"288\":1,\"293\":3,\"300\":3,\"307\":1,\"308\":1,\"313\":2,\"320\":3,\"328\":2,\"335\":3,\"342\":3,\"349\":3,\"367\":2,\"403\":1,\"431\":1,\"437\":1,\"559\":2,\"560\":1,\"561\":3,\"562\":1,\"563\":4,\"567\":1,\"647\":1,\"653\":1,\"742\":5,\"758\":1,\"865\":1,\"882\":1,\"992\":1,\"1096\":1,\"1260\":2,\"1261\":1,\"1267\":4,\"1290\":1,\"1291\":2,\"1292\":2,\"1293\":2,\"1294\":3,\"1300\":3,\"1389\":1,\"1422\":2,\"1450\":2,\"1497\":2,\"1513\":1,\"1600\":1,\"1612\":1,\"1632\":2,\"1645\":3,\"1654\":1,\"1657\":2,\"1659\":1,\"1670\":2,\"1694\":2,\"1699\":2,\"1708\":1,\"1712\":2,\"1725\":1,\"1735\":1,\"1737\":2,\"1750\":1,\"1799\":6,\"1802\":6}}],[\"tied\",{\"1\":{\"50\":1}}],[\"tilde\",{\"0\":{\"1595\":1},\"1\":{\"24\":1,\"1502\":1,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1589\":1,\"1594\":1,\"1596\":1,\"1598\":1}}],[\"targeted\",{\"1\":{\"1628\":1}}],[\"target\",{\"1\":{\"1401\":1,\"1432\":1,\"1634\":1}}],[\"tailored\",{\"1\":{\"1682\":1,\"1686\":1}}],[\"tail\",{\"1\":{\"1115\":1,\"1403\":1,\"1448\":1}}],[\"taint\",{\"1\":{\"616\":1}}],[\"tac\",{\"1\":{\"962\":2,\"1403\":1,\"1448\":1}}],[\"tag\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"tags\",{\"1\":{\"743\":1,\"756\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1641\":1}}],[\"talk\",{\"1\":{\"50\":1,\"208\":1}}],[\"tasks\",{\"1\":{\"38\":1,\"56\":1,\"1461\":1}}],[\"takes\",{\"1\":{\"52\":1,\"236\":1,\"259\":1,\"302\":1,\"380\":1,\"421\":1,\"442\":1,\"447\":1,\"465\":1,\"591\":1,\"620\":2,\"626\":1,\"631\":2,\"637\":2,\"768\":1,\"886\":1,\"937\":1,\"942\":1,\"956\":1,\"962\":1,\"1072\":1,\"1086\":1,\"1145\":1,\"1230\":1,\"1724\":1}}],[\"taken\",{\"1\":{\"46\":1,\"1125\":1,\"1312\":1,\"1628\":1,\"1639\":1,\"1647\":1,\"1650\":1,\"1659\":1,\"1660\":1,\"1691\":1}}],[\"take\",{\"1\":{\"20\":1,\"50\":1,\"108\":1,\"111\":1,\"113\":1,\"218\":1,\"237\":2,\"402\":1,\"437\":1,\"471\":1,\"1260\":1,\"1505\":1,\"1592\":1,\"1708\":1,\"1808\":1}}],[\"ta\",{\"0\":{\"1269\":1},\"1\":{\"15\":1,\"26\":1,\"110\":1,\"372\":2,\"378\":1,\"548\":1,\"877\":1,\"947\":1,\"967\":1,\"1137\":1,\"1271\":4,\"1272\":3,\"1273\":1,\"1408\":2,\"1410\":1,\"1413\":2,\"1422\":1,\"1425\":2,\"1430\":1,\"1433\":2,\"1438\":1,\"1441\":2,\"1450\":1,\"1536\":1}}],[\"tabs\",{\"1\":{\"1625\":1,\"1691\":1}}],[\"tabluate\",{\"1\":{\"1276\":1}}],[\"tables\",{\"1\":{\"28\":1,\"92\":1,\"111\":3,\"292\":1,\"348\":1,\"380\":1,\"735\":1,\"764\":2,\"1276\":1,\"1280\":1,\"1491\":1,\"1603\":1,\"1613\":1,\"1617\":1,\"1625\":2,\"1657\":1,\"1670\":1}}],[\"table\",{\"0\":{\"1264\":1,\"1486\":1},\"1\":{\"0\":1,\"12\":1,\"15\":3,\"21\":1,\"26\":3,\"30\":1,\"36\":1,\"117\":1,\"118\":1,\"122\":1,\"188\":1,\"265\":1,\"286\":2,\"300\":2,\"320\":1,\"328\":1,\"335\":1,\"342\":2,\"343\":1,\"349\":1,\"369\":1,\"378\":1,\"379\":1,\"380\":1,\"383\":1,\"404\":1,\"419\":3,\"457\":1,\"530\":1,\"548\":1,\"591\":1,\"599\":1,\"611\":1,\"629\":1,\"732\":2,\"751\":1,\"760\":1,\"766\":2,\"809\":1,\"831\":1,\"862\":1,\"863\":1,\"877\":1,\"884\":1,\"898\":1,\"917\":1,\"940\":1,\"960\":1,\"1070\":1,\"1084\":2,\"1118\":1,\"1182\":1,\"1207\":1,\"1228\":1,\"1258\":1,\"1260\":1,\"1262\":3,\"1264\":1,\"1265\":2,\"1266\":1,\"1267\":2,\"1268\":1,\"1274\":1,\"1275\":1,\"1276\":1,\"1278\":1,\"1281\":1,\"1287\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1453\":1,\"1482\":1,\"1486\":1,\"1487\":4,\"1488\":1,\"1500\":1,\"1612\":1,\"1615\":1,\"1617\":2,\"1618\":1,\"1625\":2,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1715\":1,\"1772\":1,\"1774\":1,\"1795\":1}}],[\"tabwriter\",{\"1\":{\"99\":1}}],[\"tabulated\",{\"0\":{\"1651\":1,\"1661\":1},\"1\":{\"23\":1,\"54\":1,\"90\":1,\"113\":1,\"124\":1,\"347\":1,\"1257\":1,\"1268\":1,\"1482\":1,\"1682\":1,\"1686\":1,\"1772\":1,\"1814\":1}}],[\"tabulate\",{\"0\":{\"1275\":1},\"1\":{\"15\":1,\"26\":1,\"764\":1,\"766\":1,\"1277\":1,\"1280\":2}}],[\"tab\",{\"1\":{\"15\":1,\"26\":1,\"86\":1,\"94\":1,\"95\":1,\"96\":1,\"103\":1,\"112\":1,\"114\":1,\"118\":1,\"120\":1,\"121\":1,\"147\":1,\"169\":1,\"183\":1,\"231\":1,\"425\":1,\"426\":1,\"434\":1,\"436\":2,\"438\":1,\"439\":1,\"713\":1,\"954\":1,\"989\":1,\"992\":1,\"1171\":1,\"1182\":1,\"1213\":1,\"1281\":1,\"1337\":1,\"1614\":1,\"1675\":1,\"1716\":3,\"1719\":1,\"1727\":1,\"1782\":1,\"1797\":2,\"1798\":1}}],[\"txt|md\",{\"1\":{\"238\":1,\"694\":1}}],[\"txt$\",{\"1\":{\"113\":1,\"1186\":1}}],[\"txt\",{\"1\":{\"15\":2,\"26\":2,\"38\":4,\"56\":4,\"94\":2,\"113\":1,\"127\":1,\"228\":2,\"229\":5,\"233\":2,\"238\":5,\"393\":1,\"441\":2,\"463\":2,\"697\":2,\"787\":1,\"788\":1,\"791\":7,\"797\":1,\"835\":1,\"837\":1,\"841\":1,\"843\":1,\"858\":3,\"1098\":1,\"1183\":1,\"1186\":4,\"1192\":1,\"1565\":3,\"1566\":2,\"1745\":1,\"1772\":10,\"1798\":5}}],[\"tree\",{\"1\":{\"1566\":1}}],[\"treats\",{\"1\":{\"1591\":1,\"1617\":2,\"1625\":2,\"1683\":3,\"1687\":3}}],[\"treatment\",{\"1\":{\"397\":1}}],[\"treating\",{\"1\":{\"50\":1,\"1116\":1}}],[\"treated\",{\"1\":{\"39\":1,\"57\":1,\"197\":1,\"198\":1,\"217\":1,\"679\":1,\"741\":1,\"760\":1,\"825\":1,\"912\":1,\"1201\":1,\"1575\":1,\"1617\":2,\"1625\":3,\"1683\":1,\"1687\":2,\"1772\":1}}],[\"treat\",{\"1\":{\"30\":1,\"41\":1,\"59\":1,\"265\":1,\"272\":1,\"279\":1,\"287\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"1487\":1,\"1591\":1,\"1612\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1694\":1,\"1699\":1}}],[\"tread\",{\"0\":{\"1308\":1},\"1\":{\"15\":1,\"26\":1,\"975\":1,\"1052\":1,\"1125\":1,\"1126\":1,\"1310\":2,\"1311\":2,\"1312\":3}}],[\"trivial\",{\"1\":{\"1710\":1}}],[\"trims\",{\"1\":{\"1116\":1}}],[\"trimspace\",{\"1\":{\"269\":1,\"276\":1,\"345\":1,\"1021\":1}}],[\"trim\",{\"1\":{\"882\":1}}],[\"trick\",{\"1\":{\"682\":1,\"828\":1,\"915\":1,\"1204\":1}}],[\"tricky\",{\"1\":{\"207\":1}}],[\"triggers\",{\"1\":{\"1349\":1}}],[\"triggered\",{\"1\":{\"29\":2,\"167\":1,\"526\":1,\"647\":2,\"679\":1,\"825\":1,\"912\":1,\"1201\":1,\"1287\":1,\"1347\":1,\"1354\":1,\"1360\":1,\"1362\":1,\"1365\":1,\"1366\":1,\"1374\":1,\"1375\":1,\"1377\":4,\"1387\":1,\"1389\":1,\"1390\":1}}],[\"trigger\",{\"1\":{\"29\":1,\"183\":1,\"647\":1,\"1346\":1,\"1347\":2,\"1388\":1}}],[\"traversing\",{\"0\":{\"1188\":1},\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"traverse\",{\"1\":{\"162\":1,\"1188\":1,\"1227\":1}}],[\"tradition\",{\"1\":{\"237\":1}}],[\"traditional\",{\"0\":{\"48\":1},\"1\":{\"39\":1,\"48\":2,\"57\":1,\"214\":1,\"226\":1,\"228\":1,\"238\":1,\"304\":1,\"657\":1,\"711\":1,\"733\":1,\"1161\":1,\"1513\":1,\"1529\":1,\"1591\":1,\"1719\":1,\"1741\":3,\"1773\":1,\"1776\":1}}],[\"trace\",{\"1\":{\"108\":1,\"1179\":1}}],[\"tracking\",{\"0\":{\"1735\":1}}],[\"track\",{\"1\":{\"23\":1,\"59\":1,\"64\":1,\"94\":1,\"110\":1,\"183\":1,\"1029\":1,\"1031\":1,\"1710\":1,\"1728\":1,\"1739\":1}}],[\"transmit\",{\"1\":{\"808\":1,\"1068\":1}}],[\"transparently\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"transparent\",{\"1\":{\"397\":1}}],[\"translate\",{\"1\":{\"220\":1}}],[\"translates\",{\"1\":{\"48\":1}}],[\"transforming\",{\"1\":{\"1276\":1}}],[\"transform\",{\"1\":{\"234\":1}}],[\"transformations\",{\"1\":{\"1016\":1}}],[\"transformation\",{\"1\":{\"15\":1,\"26\":1,\"764\":1,\"766\":1,\"1275\":1}}],[\"transfer\",{\"1\":{\"48\":1}}],[\"trailing\",{\"1\":{\"15\":1,\"26\":1,\"483\":1,\"489\":1,\"495\":1,\"536\":1,\"544\":1,\"613\":1,\"618\":1,\"629\":1,\"758\":1,\"780\":1,\"882\":2,\"897\":1,\"922\":1,\"975\":1,\"1024\":1,\"1045\":1,\"1046\":1,\"1061\":1,\"1089\":1,\"1126\":1,\"1143\":1,\"1171\":1,\"1222\":1,\"1278\":2,\"1303\":1,\"1307\":1,\"1313\":1,\"1345\":1,\"1487\":3,\"1507\":1,\"1518\":1,\"1547\":1,\"1552\":1,\"1557\":1,\"1562\":1,\"1572\":1,\"1576\":1,\"1584\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1705\":1}}],[\"try|trypipe\",{\"1\":{\"1162\":1}}],[\"trying\",{\"1\":{\"182\":1}}],[\"try\",{\"0\":{\"1166\":1,\"1320\":1,\"1777\":1,\"1778\":1},\"1\":{\"15\":2,\"26\":2,\"77\":1,\"93\":1,\"94\":1,\"115\":3,\"119\":2,\"120\":1,\"182\":1,\"208\":1,\"227\":1,\"409\":1,\"412\":2,\"423\":1,\"496\":1,\"497\":1,\"498\":1,\"499\":1,\"502\":1,\"643\":1,\"679\":1,\"782\":1,\"825\":1,\"861\":2,\"912\":1,\"1036\":1,\"1039\":2,\"1161\":2,\"1163\":1,\"1171\":2,\"1201\":1,\"1245\":1,\"1255\":2,\"1321\":3,\"1322\":2,\"1323\":1,\"1325\":1,\"1327\":2,\"1331\":2,\"1554\":1,\"1556\":2,\"1557\":1,\"1559\":1,\"1561\":3,\"1562\":1,\"1610\":1,\"1774\":1,\"1778\":2,\"1779\":1}}],[\"trypipe\",{\"0\":{\"1167\":1,\"1326\":1},\"1\":{\"14\":1,\"15\":2,\"26\":2,\"77\":1,\"93\":1,\"94\":1,\"115\":2,\"119\":2,\"120\":1,\"409\":1,\"412\":2,\"496\":1,\"497\":1,\"498\":1,\"502\":1,\"861\":2,\"1036\":1,\"1039\":2,\"1161\":1,\"1171\":2,\"1255\":2,\"1321\":1,\"1325\":2,\"1327\":3,\"1328\":2,\"1329\":2,\"1331\":1,\"1455\":1,\"1554\":1,\"1557\":1,\"1559\":1,\"1561\":2,\"1562\":1,\"1725\":1,\"1772\":2,\"1774\":1,\"1779\":1}}],[\"truncating\",{\"0\":{\"1567\":1}}],[\"truncated\",{\"1\":{\"839\":1}}],[\"truncate\",{\"0\":{\"838\":1},\"1\":{\"15\":1,\"26\":1,\"119\":1,\"120\":1,\"233\":1,\"483\":1,\"618\":1,\"837\":1,\"975\":1,\"1052\":1,\"1103\":1,\"1126\":1,\"1301\":1,\"1567\":1,\"1568\":1,\"1772\":1,\"1774\":1}}],[\"truntime\",{\"1\":{\"1175\":1}}],[\"truebyte\",{\"1\":{\"340\":3}}],[\"true<\",{\"1\":{\"108\":1}}],[\"true\",{\"0\":{\"452\":1,\"1314\":1},\"1\":{\"15\":4,\"26\":4,\"50\":1,\"61\":1,\"95\":1,\"115\":1,\"119\":1,\"123\":3,\"129\":1,\"162\":1,\"246\":1,\"292\":1,\"333\":1,\"340\":11,\"347\":6,\"382\":2,\"405\":1,\"406\":1,\"409\":1,\"412\":3,\"423\":2,\"431\":1,\"433\":1,\"434\":3,\"436\":1,\"438\":1,\"439\":1,\"440\":3,\"441\":1,\"447\":3,\"448\":1,\"449\":1,\"462\":1,\"508\":1,\"526\":1,\"575\":1,\"576\":1,\"603\":2,\"605\":2,\"606\":2,\"677\":1,\"703\":4,\"741\":1,\"743\":14,\"756\":14,\"823\":1,\"851\":1,\"853\":1,\"854\":1,\"857\":1,\"861\":4,\"865\":3,\"869\":1,\"902\":1,\"905\":2,\"906\":2,\"910\":1,\"926\":1,\"1006\":1,\"1008\":4,\"1022\":3,\"1032\":1,\"1033\":1,\"1036\":1,\"1037\":2,\"1039\":3,\"1043\":2,\"1199\":1,\"1226\":1,\"1251\":5,\"1252\":5,\"1253\":5,\"1255\":4,\"1314\":1,\"1315\":1,\"1316\":1,\"1317\":5,\"1318\":1,\"1319\":2,\"1340\":1,\"1341\":8,\"1487\":6,\"1545\":2,\"1605\":1,\"1639\":1,\"1641\":14,\"1651\":3,\"1661\":3,\"1691\":1,\"1706\":1,\"1707\":2,\"1708\":1,\"1756\":1,\"1780\":1,\"1786\":1,\"1787\":1}}],[\"typical\",{\"1\":{\"949\":1,\"981\":1,\"1509\":1,\"1745\":1}}],[\"typically\",{\"1\":{\"10\":1,\"262\":1,\"285\":1,\"299\":1,\"305\":1,\"341\":1,\"348\":1,\"355\":1,\"362\":1,\"488\":1,\"535\":1,\"626\":1,\"679\":1,\"825\":1,\"848\":1,\"912\":1,\"977\":1,\"1201\":1,\"1387\":1,\"1706\":1,\"1723\":1,\"1729\":1,\"1797\":1}}],[\"typing\",{\"1\":{\"111\":1,\"1579\":1,\"1600\":1,\"1716\":1}}],[\"typeface\",{\"0\":{\"211\":1},\"1\":{\"211\":1}}],[\"typed\",{\"1\":{\"15\":1,\"26\":1,\"42\":1,\"47\":1,\"121\":1,\"214\":2,\"433\":1,\"438\":1,\"439\":1,\"455\":1,\"781\":1,\"975\":1,\"1052\":1,\"1125\":1,\"1126\":1,\"1308\":1,\"1309\":1,\"1384\":1,\"1429\":1,\"1437\":1,\"1600\":1,\"1746\":1,\"1798\":1}}],[\"type\",{\"0\":{\"227\":1,\"234\":1,\"258\":1,\"266\":1,\"273\":1,\"280\":1,\"287\":1,\"294\":1,\"301\":1,\"307\":1,\"677\":1,\"744\":1,\"755\":1,\"757\":1,\"798\":1,\"823\":1,\"910\":1,\"953\":1,\"1199\":1,\"1600\":1,\"1604\":1,\"1608\":1,\"1613\":1,\"1619\":1,\"1623\":1,\"1627\":1,\"1633\":1,\"1637\":1,\"1642\":1,\"1646\":1,\"1658\":1,\"1671\":1,\"1676\":1,\"1681\":1,\"1685\":1,\"1689\":1,\"1695\":1},\"1\":{\"15\":10,\"26\":10,\"30\":20,\"41\":1,\"42\":2,\"44\":1,\"47\":1,\"59\":1,\"63\":1,\"90\":1,\"92\":3,\"95\":1,\"99\":3,\"103\":2,\"110\":1,\"111\":1,\"112\":1,\"113\":6,\"117\":3,\"121\":7,\"122\":1,\"123\":1,\"127\":2,\"134\":1,\"142\":1,\"153\":1,\"154\":1,\"162\":1,\"214\":1,\"217\":1,\"227\":2,\"238\":2,\"248\":1,\"259\":2,\"260\":1,\"261\":2,\"263\":3,\"265\":20,\"266\":1,\"267\":2,\"268\":1,\"270\":1,\"272\":11,\"273\":2,\"274\":3,\"275\":1,\"277\":1,\"278\":1,\"279\":11,\"280\":1,\"281\":2,\"282\":1,\"286\":9,\"287\":1,\"288\":2,\"289\":1,\"292\":1,\"293\":11,\"294\":1,\"295\":2,\"296\":1,\"300\":9,\"302\":2,\"303\":1,\"304\":2,\"306\":3,\"307\":1,\"308\":2,\"309\":1,\"310\":1,\"311\":1,\"312\":1,\"313\":11,\"314\":1,\"318\":2,\"319\":2,\"320\":13,\"322\":2,\"326\":2,\"327\":2,\"328\":10,\"329\":2,\"333\":2,\"334\":3,\"335\":13,\"337\":1,\"340\":5,\"341\":1,\"342\":13,\"344\":1,\"348\":1,\"349\":13,\"350\":1,\"355\":1,\"356\":3,\"357\":1,\"362\":1,\"363\":3,\"369\":1,\"372\":1,\"376\":1,\"378\":1,\"383\":2,\"394\":1,\"395\":1,\"397\":4,\"403\":1,\"404\":3,\"417\":1,\"419\":2,\"423\":2,\"431\":1,\"438\":1,\"439\":1,\"440\":1,\"457\":2,\"483\":2,\"490\":1,\"491\":1,\"492\":1,\"494\":1,\"495\":3,\"520\":1,\"521\":1,\"526\":1,\"530\":1,\"544\":1,\"548\":3,\"575\":3,\"576\":1,\"579\":1,\"593\":2,\"596\":8,\"597\":2,\"605\":1,\"607\":1,\"616\":1,\"618\":2,\"635\":1,\"641\":1,\"644\":2,\"677\":6,\"743\":6,\"744\":1,\"747\":2,\"755\":10,\"756\":6,\"757\":1,\"758\":6,\"767\":2,\"768\":1,\"769\":1,\"771\":4,\"774\":2,\"779\":2,\"780\":4,\"782\":4,\"798\":1,\"799\":2,\"800\":3,\"801\":7,\"802\":1,\"808\":1,\"809\":1,\"810\":1,\"811\":1,\"814\":2,\"819\":4,\"823\":6,\"865\":4,\"877\":1,\"884\":1,\"891\":2,\"897\":1,\"898\":1,\"905\":1,\"907\":1,\"910\":6,\"940\":1,\"945\":3,\"947\":2,\"949\":1,\"953\":6,\"955\":1,\"960\":1,\"962\":2,\"967\":2,\"975\":2,\"1016\":3,\"1021\":5,\"1022\":7,\"1024\":1,\"1027\":4,\"1049\":1,\"1052\":2,\"1055\":1,\"1056\":1,\"1064\":1,\"1068\":1,\"1070\":1,\"1077\":2,\"1082\":1,\"1084\":2,\"1089\":3,\"1103\":1,\"1106\":1,\"1111\":2,\"1118\":1,\"1121\":1,\"1123\":1,\"1125\":1,\"1126\":2,\"1128\":1,\"1135\":3,\"1137\":2,\"1150\":2,\"1176\":1,\"1182\":2,\"1195\":3,\"1199\":6,\"1224\":1,\"1226\":6,\"1235\":2,\"1259\":1,\"1262\":4,\"1268\":4,\"1269\":1,\"1271\":4,\"1281\":2,\"1302\":1,\"1303\":1,\"1304\":1,\"1307\":3,\"1310\":2,\"1313\":4,\"1336\":1,\"1400\":1,\"1403\":1,\"1408\":1,\"1410\":1,\"1413\":1,\"1422\":1,\"1425\":1,\"1430\":1,\"1433\":1,\"1438\":1,\"1441\":1,\"1448\":2,\"1450\":1,\"1479\":1,\"1480\":1,\"1482\":2,\"1487\":4,\"1536\":1,\"1547\":1,\"1570\":1,\"1580\":2,\"1601\":2,\"1607\":2,\"1609\":1,\"1610\":1,\"1611\":2,\"1612\":13,\"1614\":1,\"1615\":2,\"1618\":5,\"1620\":2,\"1622\":2,\"1624\":1,\"1626\":5,\"1629\":1,\"1631\":2,\"1632\":15,\"1634\":1,\"1636\":5,\"1638\":1,\"1639\":3,\"1641\":6,\"1642\":1,\"1644\":2,\"1645\":21,\"1654\":3,\"1656\":1,\"1657\":15,\"1666\":1,\"1667\":1,\"1669\":1,\"1670\":15,\"1672\":1,\"1675\":5,\"1677\":1,\"1679\":5,\"1681\":1,\"1682\":1,\"1686\":1,\"1688\":5,\"1694\":15,\"1698\":2,\"1699\":18,\"1705\":1,\"1723\":1,\"1755\":1,\"1772\":2,\"1789\":1,\"1794\":1}}],[\"types\",{\"0\":{\"28\":1,\"403\":1,\"782\":1,\"1021\":1},\"1\":{\"3\":1,\"15\":2,\"21\":1,\"26\":2,\"42\":1,\"50\":1,\"70\":1,\"93\":1,\"103\":3,\"104\":1,\"105\":1,\"108\":1,\"113\":1,\"125\":1,\"128\":1,\"139\":1,\"164\":1,\"182\":2,\"224\":1,\"227\":1,\"237\":1,\"260\":1,\"269\":2,\"276\":3,\"277\":2,\"290\":2,\"291\":1,\"303\":1,\"309\":2,\"312\":2,\"315\":2,\"323\":2,\"326\":5,\"330\":2,\"333\":13,\"337\":2,\"340\":27,\"344\":2,\"347\":1,\"354\":1,\"361\":1,\"393\":1,\"403\":2,\"455\":1,\"483\":1,\"607\":1,\"616\":1,\"618\":1,\"649\":1,\"787\":1,\"889\":1,\"907\":1,\"948\":1,\"953\":3,\"956\":1,\"999\":2,\"1021\":9,\"1052\":1,\"1058\":2,\"1075\":1,\"1098\":1,\"1099\":1,\"1105\":1,\"1113\":1,\"1148\":1,\"1175\":1,\"1176\":9,\"1182\":1,\"1219\":2,\"1233\":1,\"1257\":1,\"1260\":1,\"1261\":2,\"1268\":1,\"1300\":4,\"1578\":1,\"1600\":1,\"1601\":4,\"1602\":1,\"1719\":2,\"1727\":1,\"1772\":1,\"1789\":1}}],[\"todo\",{\"1\":{\"1767\":1}}],[\"today\",{\"1\":{\"1416\":1,\"1717\":1}}],[\"told\",{\"1\":{\"1591\":1}}],[\"tolower\",{\"1\":{\"340\":6,\"1021\":1}}],[\"total\",{\"0\":{\"544\":2},\"1\":{\"539\":1,\"541\":2,\"543\":1,\"546\":2}}],[\"totitle\",{\"1\":{\"340\":4}}],[\"topic\",{\"1\":{\"1600\":1}}],[\"top\",{\"1\":{\"163\":1,\"202\":1,\"391\":1,\"442\":1,\"447\":1,\"710\":1,\"785\":1,\"865\":1,\"1097\":1,\"1175\":1,\"1745\":1,\"1758\":1,\"1776\":1,\"1802\":1}}],[\"together\",{\"1\":{\"103\":1,\"111\":1,\"238\":1,\"398\":1,\"399\":2,\"591\":1,\"977\":1,\"1218\":1,\"1428\":1,\"1436\":1,\"1729\":1,\"1744\":1,\"1746\":1}}],[\"towards\",{\"1\":{\"50\":1,\"119\":1,\"1628\":1}}],[\"tobase64string\",{\"1\":{\"50\":1}}],[\"took\",{\"1\":{\"46\":1,\"397\":1}}],[\"too\",{\"1\":{\"40\":1,\"41\":2,\"42\":1,\"48\":1,\"58\":1,\"59\":1,\"69\":1,\"109\":1,\"111\":1,\"127\":1,\"131\":1,\"182\":2,\"202\":1,\"391\":1,\"487\":1,\"560\":1,\"677\":1,\"678\":1,\"710\":1,\"760\":1,\"783\":1,\"785\":1,\"823\":1,\"824\":1,\"910\":1,\"911\":1,\"1097\":1,\"1163\":1,\"1199\":1,\"1200\":1,\"1245\":2,\"1248\":1,\"1520\":1,\"1781\":1,\"1789\":1,\"1808\":1}}],[\"toolbox\",{\"1\":{\"1746\":1}}],[\"tooltip\",{\"1\":{\"984\":1,\"1237\":1}}],[\"tooling\",{\"1\":{\"37\":1,\"1741\":1}}],[\"tools\",{\"1\":{\"15\":2,\"26\":2,\"39\":1,\"40\":1,\"50\":2,\"57\":2,\"122\":1,\"181\":1,\"182\":1,\"214\":2,\"231\":1,\"383\":1,\"419\":1,\"433\":1,\"606\":1,\"766\":1,\"797\":1,\"906\":1,\"947\":1,\"1084\":1,\"1127\":1,\"1128\":1,\"1178\":1,\"1192\":1,\"1275\":1,\"1360\":1,\"1448\":1,\"1461\":1,\"1570\":1,\"1572\":1,\"1576\":1,\"1584\":1,\"1601\":1,\"1628\":2,\"1659\":1,\"1731\":1,\"1732\":1}}],[\"tool\",{\"1\":{\"15\":1,\"26\":1,\"40\":2,\"93\":1,\"103\":1,\"110\":1,\"208\":1,\"209\":1,\"421\":1,\"559\":1,\"560\":1,\"730\":1,\"760\":1,\"764\":1,\"808\":1,\"815\":1,\"962\":1,\"977\":1,\"1016\":1,\"1069\":1,\"1173\":1,\"1178\":1,\"1350\":1,\"1403\":1,\"1422\":1,\"1448\":1,\"1450\":1,\"1610\":1,\"1729\":1}}],[\"tom\",{\"1\":{\"28\":1,\"225\":3,\"247\":2,\"744\":5,\"757\":5,\"762\":3,\"1093\":2,\"1245\":2,\"1603\":1,\"1642\":5,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1689\":1,\"1691\":1,\"1772\":1}}],[\"toml\",{\"0\":{\"1689\":1},\"1\":{\"28\":2,\"37\":1,\"1175\":1,\"1224\":1,\"1602\":1,\"1603\":2,\"1638\":1,\"1645\":2,\"1657\":2,\"1670\":2,\"1675\":2,\"1689\":1,\"1690\":1,\"1691\":3,\"1692\":5,\"1693\":4}}],[\"tokenised\",{\"1\":{\"605\":1,\"905\":1}}],[\"token\",{\"0\":{\"1503\":1,\"1548\":1,\"1563\":1,\"1569\":1,\"1573\":1,\"1577\":1,\"1581\":1,\"1585\":1,\"1590\":1,\"1595\":1},\"1\":{\"24\":10,\"103\":1,\"104\":1,\"105\":2,\"120\":1,\"130\":1,\"440\":1,\"480\":1,\"596\":1,\"605\":6,\"606\":1,\"837\":3,\"843\":3,\"905\":6,\"906\":1,\"954\":1,\"1502\":10,\"1504\":1,\"1507\":4,\"1516\":1,\"1517\":1,\"1518\":5,\"1536\":2,\"1540\":2,\"1542\":1,\"1547\":5,\"1552\":4,\"1557\":1,\"1562\":1,\"1564\":1,\"1568\":3,\"1570\":1,\"1572\":3,\"1574\":2,\"1575\":1,\"1576\":3,\"1578\":1,\"1580\":3,\"1582\":1,\"1584\":3,\"1589\":4,\"1591\":2,\"1594\":4,\"1596\":1,\"1599\":4,\"1615\":1,\"1719\":2,\"1727\":2,\"1744\":1,\"1748\":4,\"1771\":2,\"1774\":3,\"1779\":4}}],[\"tokens\",{\"0\":{\"24\":1,\"1508\":1,\"1541\":1},\"1\":{\"21\":1,\"24\":2,\"47\":1,\"52\":1,\"103\":1,\"123\":1,\"159\":1,\"223\":1,\"228\":1,\"231\":1,\"232\":1,\"304\":1,\"395\":1,\"402\":1,\"440\":1,\"480\":1,\"575\":1,\"596\":1,\"873\":1,\"1218\":1,\"1498\":1,\"1502\":2,\"1505\":2,\"1507\":1,\"1518\":1,\"1536\":1,\"1540\":1,\"1542\":1,\"1547\":1,\"1552\":2,\"1589\":2,\"1592\":2,\"1594\":1,\"1599\":1,\"1675\":2,\"1709\":1,\"1727\":1,\"1794\":1}}],[\"toupper\",{\"1\":{\"340\":6}}],[\"touch\",{\"1\":{\"228\":1,\"229\":1,\"237\":2}}],[\"tout\",{\"0\":{\"1302\":1},\"1\":{\"15\":1,\"26\":1,\"382\":1,\"397\":1,\"399\":1,\"417\":1,\"483\":1,\"495\":1,\"540\":1,\"548\":1,\"616\":2,\"618\":1,\"648\":1,\"770\":1,\"771\":1,\"801\":2,\"802\":1,\"847\":2,\"896\":1,\"939\":2,\"958\":2,\"975\":1,\"1049\":1,\"1052\":1,\"1082\":1,\"1088\":1,\"1089\":1,\"1126\":1,\"1211\":2,\"1304\":1,\"1305\":1,\"1306\":2,\"1313\":1,\"1547\":1,\"1705\":1}}],[\"tour\",{\"0\":{\"22\":1},\"1\":{\"12\":1,\"21\":1,\"22\":1,\"1453\":1,\"1500\":1,\"1600\":1,\"1772\":1},\"2\":{\"257\":1}}],[\"to\",{\"0\":{\"19\":1,\"233\":1,\"751\":1,\"1250\":1,\"1702\":1,\"1789\":1},\"1\":{\"3\":2,\"8\":2,\"12\":1,\"14\":2,\"15\":23,\"23\":4,\"24\":5,\"26\":23,\"30\":1,\"33\":2,\"34\":3,\"36\":2,\"37\":1,\"38\":9,\"39\":2,\"40\":5,\"41\":6,\"42\":4,\"43\":2,\"44\":1,\"45\":3,\"46\":4,\"47\":15,\"48\":2,\"50\":11,\"51\":3,\"52\":6,\"53\":2,\"54\":3,\"56\":9,\"57\":2,\"59\":6,\"60\":4,\"61\":1,\"62\":1,\"69\":2,\"70\":1,\"71\":2,\"72\":2,\"75\":1,\"76\":2,\"77\":1,\"78\":3,\"79\":1,\"81\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":1,\"90\":19,\"93\":5,\"94\":3,\"95\":8,\"96\":1,\"97\":1,\"98\":1,\"99\":5,\"100\":1,\"102\":2,\"103\":13,\"104\":2,\"105\":2,\"108\":11,\"109\":3,\"110\":5,\"111\":15,\"112\":1,\"113\":21,\"115\":14,\"116\":1,\"117\":7,\"119\":11,\"120\":3,\"121\":15,\"122\":4,\"123\":11,\"125\":1,\"126\":1,\"127\":5,\"128\":1,\"129\":3,\"131\":2,\"135\":1,\"138\":3,\"139\":1,\"142\":4,\"147\":1,\"150\":3,\"153\":1,\"154\":2,\"155\":1,\"159\":1,\"162\":14,\"163\":5,\"174\":2,\"177\":1,\"181\":4,\"182\":7,\"183\":1,\"189\":3,\"190\":1,\"201\":2,\"202\":3,\"205\":3,\"207\":6,\"208\":8,\"209\":4,\"211\":1,\"214\":2,\"215\":1,\"216\":3,\"217\":6,\"218\":1,\"219\":2,\"220\":1,\"222\":2,\"223\":1,\"225\":1,\"226\":2,\"227\":2,\"228\":6,\"229\":1,\"231\":5,\"232\":8,\"235\":1,\"237\":1,\"238\":2,\"241\":3,\"244\":2,\"246\":1,\"247\":2,\"248\":1,\"251\":3,\"252\":3,\"259\":1,\"260\":1,\"262\":1,\"264\":1,\"267\":5,\"268\":1,\"270\":4,\"271\":1,\"274\":6,\"275\":1,\"277\":4,\"278\":1,\"281\":3,\"282\":1,\"284\":1,\"286\":1,\"288\":5,\"289\":1,\"290\":2,\"291\":1,\"292\":1,\"295\":3,\"296\":1,\"298\":1,\"300\":1,\"302\":1,\"303\":1,\"304\":3,\"308\":5,\"310\":1,\"312\":2,\"315\":2,\"316\":2,\"319\":2,\"323\":2,\"324\":2,\"327\":2,\"330\":2,\"331\":2,\"334\":2,\"340\":2,\"341\":1,\"347\":1,\"348\":1,\"354\":5,\"355\":1,\"361\":6,\"365\":1,\"369\":4,\"370\":1,\"377\":3,\"378\":2,\"379\":1,\"380\":4,\"383\":4,\"387\":1,\"389\":1,\"391\":2,\"393\":1,\"395\":4,\"398\":1,\"399\":1,\"404\":2,\"409\":1,\"412\":1,\"413\":1,\"414\":1,\"417\":1,\"419\":4,\"421\":2,\"423\":4,\"426\":1,\"432\":2,\"433\":4,\"434\":2,\"437\":6,\"438\":2,\"439\":3,\"440\":6,\"441\":2,\"442\":3,\"443\":2,\"444\":1,\"445\":2,\"447\":5,\"448\":2,\"449\":2,\"450\":1,\"451\":1,\"452\":4,\"453\":1,\"454\":2,\"455\":1,\"457\":1,\"458\":1,\"459\":3,\"462\":3,\"468\":4,\"469\":1,\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"480\":2,\"483\":5,\"485\":1,\"487\":1,\"489\":2,\"494\":1,\"495\":2,\"497\":1,\"500\":1,\"502\":1,\"507\":3,\"508\":2,\"512\":1,\"513\":3,\"514\":1,\"515\":2,\"516\":1,\"518\":1,\"522\":1,\"525\":1,\"526\":2,\"530\":1,\"532\":1,\"536\":2,\"543\":1,\"544\":2,\"548\":6,\"560\":2,\"563\":2,\"566\":2,\"569\":1,\"576\":1,\"578\":1,\"582\":3,\"589\":1,\"596\":4,\"597\":2,\"599\":2,\"601\":1,\"605\":6,\"606\":2,\"607\":1,\"611\":3,\"612\":1,\"613\":1,\"614\":1,\"616\":1,\"618\":6,\"621\":2,\"626\":1,\"629\":1,\"632\":2,\"638\":2,\"643\":7,\"649\":1,\"653\":3,\"655\":1,\"656\":4,\"659\":1,\"664\":1,\"677\":3,\"678\":1,\"679\":4,\"681\":1,\"682\":5,\"685\":2,\"690\":1,\"692\":4,\"696\":1,\"703\":1,\"705\":1,\"710\":2,\"711\":1,\"717\":1,\"722\":2,\"723\":1,\"727\":2,\"728\":1,\"730\":1,\"732\":1,\"733\":2,\"735\":1,\"736\":1,\"737\":2,\"741\":4,\"742\":2,\"743\":9,\"745\":4,\"747\":2,\"748\":3,\"749\":3,\"752\":2,\"754\":2,\"755\":1,\"756\":9,\"758\":5,\"761\":1,\"763\":1,\"764\":1,\"765\":2,\"766\":1,\"771\":1,\"777\":1,\"779\":4,\"780\":5,\"781\":3,\"782\":4,\"783\":4,\"784\":1,\"785\":2,\"787\":1,\"791\":2,\"794\":1,\"795\":2,\"801\":2,\"802\":1,\"808\":2,\"814\":5,\"815\":1,\"819\":1,\"823\":3,\"824\":1,\"825\":4,\"827\":1,\"828\":5,\"831\":2,\"832\":1,\"833\":2,\"837\":5,\"838\":1,\"839\":1,\"843\":5,\"850\":1,\"859\":6,\"868\":2,\"871\":2,\"872\":1,\"877\":2,\"882\":1,\"884\":4,\"886\":1,\"891\":4,\"897\":2,\"898\":4,\"899\":1,\"900\":2,\"904\":2,\"905\":6,\"906\":2,\"907\":1,\"910\":3,\"911\":1,\"912\":4,\"914\":1,\"915\":5,\"917\":2,\"919\":1,\"921\":1,\"922\":1,\"924\":3,\"926\":1,\"929\":3,\"934\":1,\"937\":1,\"940\":4,\"942\":1,\"945\":1,\"947\":8,\"953\":1,\"954\":1,\"956\":5,\"958\":1,\"960\":4,\"965\":1,\"967\":8,\"975\":6,\"977\":1,\"979\":1,\"981\":3,\"982\":1,\"984\":2,\"986\":3,\"988\":1,\"989\":2,\"995\":1,\"996\":1,\"999\":9,\"1000\":1,\"1002\":3,\"1008\":1,\"1010\":1,\"1016\":4,\"1020\":2,\"1021\":4,\"1022\":3,\"1023\":4,\"1024\":1,\"1026\":1,\"1029\":1,\"1031\":2,\"1036\":1,\"1039\":1,\"1043\":2,\"1045\":1,\"1046\":1,\"1047\":1,\"1052\":5,\"1058\":9,\"1059\":1,\"1061\":2,\"1068\":1,\"1069\":1,\"1071\":1,\"1077\":3,\"1078\":1,\"1079\":1,\"1082\":1,\"1084\":4,\"1085\":1,\"1086\":2,\"1089\":2,\"1091\":3,\"1093\":2,\"1095\":1,\"1096\":2,\"1097\":2,\"1098\":1,\"1100\":2,\"1103\":2,\"1107\":1,\"1110\":1,\"1111\":1,\"1113\":1,\"1115\":3,\"1118\":4,\"1120\":1,\"1123\":2,\"1125\":2,\"1126\":6,\"1131\":1,\"1135\":1,\"1137\":8,\"1139\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1145\":1,\"1150\":4,\"1153\":3,\"1154\":5,\"1155\":3,\"1157\":1,\"1158\":4,\"1161\":3,\"1163\":1,\"1166\":1,\"1171\":1,\"1175\":1,\"1176\":2,\"1178\":4,\"1179\":1,\"1182\":2,\"1186\":1,\"1188\":1,\"1189\":1,\"1190\":2,\"1195\":1,\"1199\":3,\"1200\":1,\"1201\":4,\"1203\":1,\"1204\":5,\"1207\":2,\"1214\":1,\"1215\":1,\"1217\":1,\"1219\":9,\"1220\":1,\"1222\":1,\"1227\":3,\"1229\":1,\"1235\":3,\"1237\":2,\"1241\":1,\"1248\":1,\"1249\":1,\"1251\":1,\"1252\":1,\"1255\":2,\"1258\":1,\"1260\":1,\"1262\":2,\"1268\":2,\"1269\":1,\"1274\":2,\"1276\":2,\"1278\":3,\"1280\":1,\"1283\":1,\"1293\":2,\"1294\":2,\"1296\":1,\"1297\":4,\"1300\":2,\"1301\":2,\"1302\":1,\"1303\":2,\"1304\":1,\"1307\":4,\"1309\":1,\"1312\":1,\"1313\":5,\"1319\":1,\"1321\":3,\"1325\":1,\"1327\":1,\"1331\":1,\"1339\":1,\"1341\":1,\"1343\":2,\"1345\":4,\"1347\":1,\"1350\":1,\"1352\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1359\":3,\"1360\":2,\"1362\":1,\"1363\":1,\"1366\":1,\"1368\":1,\"1369\":1,\"1371\":1,\"1372\":3,\"1375\":1,\"1380\":1,\"1385\":3,\"1387\":1,\"1395\":1,\"1397\":1,\"1400\":5,\"1401\":1,\"1402\":1,\"1403\":5,\"1406\":1,\"1407\":2,\"1410\":3,\"1412\":1,\"1416\":2,\"1421\":1,\"1422\":3,\"1424\":2,\"1430\":4,\"1432\":2,\"1438\":4,\"1440\":1,\"1448\":3,\"1450\":3,\"1451\":2,\"1453\":1,\"1455\":2,\"1458\":1,\"1461\":3,\"1478\":1,\"1479\":2,\"1486\":1,\"1487\":3,\"1488\":1,\"1496\":3,\"1500\":1,\"1502\":5,\"1504\":2,\"1505\":2,\"1507\":3,\"1509\":4,\"1513\":2,\"1516\":1,\"1518\":2,\"1520\":4,\"1529\":1,\"1535\":3,\"1536\":3,\"1538\":5,\"1542\":1,\"1545\":2,\"1546\":1,\"1547\":4,\"1549\":1,\"1552\":2,\"1556\":1,\"1557\":3,\"1562\":3,\"1563\":1,\"1564\":5,\"1567\":1,\"1568\":6,\"1569\":1,\"1570\":1,\"1571\":1,\"1572\":5,\"1573\":1,\"1575\":1,\"1576\":5,\"1577\":1,\"1578\":2,\"1579\":1,\"1580\":4,\"1581\":1,\"1583\":1,\"1584\":5,\"1586\":1,\"1589\":2,\"1591\":3,\"1592\":2,\"1593\":1,\"1594\":4,\"1596\":1,\"1599\":3,\"1600\":2,\"1601\":7,\"1602\":1,\"1610\":1,\"1615\":1,\"1620\":2,\"1628\":3,\"1631\":1,\"1632\":1,\"1641\":9,\"1645\":1,\"1647\":1,\"1651\":1,\"1657\":1,\"1661\":1,\"1664\":1,\"1666\":1,\"1667\":1,\"1670\":1,\"1672\":2,\"1674\":1,\"1675\":1,\"1677\":2,\"1690\":1,\"1696\":1,\"1704\":4,\"1705\":4,\"1706\":5,\"1708\":5,\"1710\":2,\"1712\":2,\"1714\":1,\"1716\":4,\"1717\":2,\"1719\":2,\"1721\":1,\"1722\":1,\"1723\":3,\"1725\":3,\"1727\":3,\"1728\":7,\"1729\":1,\"1731\":1,\"1732\":2,\"1737\":2,\"1739\":1,\"1741\":3,\"1743\":1,\"1744\":1,\"1746\":3,\"1747\":2,\"1748\":5,\"1750\":3,\"1751\":1,\"1752\":2,\"1753\":7,\"1754\":1,\"1756\":1,\"1759\":2,\"1760\":1,\"1762\":1,\"1766\":2,\"1770\":1,\"1771\":4,\"1772\":11,\"1774\":3,\"1777\":1,\"1779\":4,\"1780\":1,\"1782\":2,\"1783\":3,\"1784\":3,\"1786\":1,\"1787\":4,\"1788\":1,\"1789\":7,\"1790\":3,\"1793\":2,\"1794\":1,\"1798\":3,\"1800\":1,\"1802\":5,\"1804\":2,\"1805\":11,\"1806\":1,\"1808\":6,\"1810\":1,\"1814\":1}}],[\"three\",{\"1\":{\"222\":1,\"237\":1,\"678\":1,\"770\":2,\"824\":1,\"911\":1,\"942\":1,\"1200\":1,\"1359\":1,\"1385\":1,\"1652\":1,\"1662\":1,\"1807\":2}}],[\"threads\",{\"1\":{\"680\":1,\"826\":1,\"913\":1,\"1202\":1}}],[\"threaded\",{\"1\":{\"354\":1,\"361\":1,\"722\":1,\"727\":1,\"733\":1}}],[\"thread\",{\"1\":{\"109\":1}}],[\"throwing\",{\"1\":{\"57\":1}}],[\"throughout\",{\"1\":{\"37\":1}}],[\"through\",{\"1\":{\"15\":2,\"26\":2,\"37\":2,\"40\":1,\"41\":1,\"44\":2,\"62\":1,\"63\":2,\"92\":1,\"122\":1,\"164\":2,\"202\":1,\"208\":1,\"248\":1,\"375\":2,\"397\":1,\"489\":2,\"536\":2,\"651\":1,\"680\":1,\"745\":2,\"746\":1,\"747\":1,\"751\":1,\"758\":1,\"759\":1,\"760\":1,\"766\":1,\"795\":1,\"826\":1,\"913\":1,\"1024\":1,\"1182\":2,\"1190\":1,\"1202\":1,\"1228\":1,\"1281\":1,\"1345\":2,\"1400\":2,\"1403\":3,\"1404\":2,\"1448\":3,\"1634\":2,\"1657\":1,\"1670\":1,\"1716\":1,\"1770\":1,\"1771\":1,\"1772\":2,\"1782\":1,\"1798\":1,\"1802\":1}}],[\"thurday\",{\"1\":{\"1403\":1}}],[\"thursnight\",{\"1\":{\"1133\":1}}],[\"thursday\",{\"1\":{\"40\":2,\"41\":1,\"42\":1,\"376\":1,\"416\":1,\"438\":1,\"439\":1,\"750\":1,\"875\":1,\"944\":1,\"964\":2,\"1132\":1,\"1272\":1,\"1400\":3,\"1403\":3,\"1405\":1,\"1421\":1,\"1448\":3,\"1449\":1}}],[\"thu\",{\"1\":{\"750\":1,\"1449\":1,\"1505\":2,\"1592\":2}}],[\"thus\",{\"1\":{\"40\":1,\"42\":1,\"51\":1,\"61\":1,\"90\":2,\"108\":1,\"111\":1,\"113\":1,\"208\":1,\"214\":1,\"217\":1,\"218\":1,\"244\":1,\"251\":1,\"252\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"337\":1,\"344\":1,\"391\":1,\"398\":1,\"423\":1,\"433\":1,\"546\":1,\"597\":1,\"605\":1,\"607\":1,\"608\":1,\"616\":1,\"643\":1,\"710\":1,\"755\":1,\"780\":1,\"785\":1,\"905\":1,\"907\":1,\"908\":1,\"965\":1,\"1000\":1,\"1020\":1,\"1059\":1,\"1096\":1,\"1097\":1,\"1128\":1,\"1153\":1,\"1220\":1,\"1244\":1,\"1276\":1,\"1451\":1,\"1566\":1,\"1571\":1,\"1575\":1,\"1583\":1,\"1601\":1,\"1628\":1,\"1672\":1,\"1690\":1,\"1696\":1,\"1706\":1,\"1712\":1,\"1737\":1,\"1770\":1,\"1789\":1,\"1791\":1}}],[\"thirteenth\",{\"1\":{\"115\":1}}],[\"third\",{\"1\":{\"39\":1,\"57\":1,\"61\":1,\"439\":1,\"447\":1,\"1449\":1}}],[\"thing\",{\"1\":{\"59\":1,\"742\":1,\"1023\":1,\"1153\":1,\"1648\":1,\"1649\":1,\"1665\":1,\"1666\":1}}],[\"things\",{\"1\":{\"40\":1}}],[\"think\",{\"1\":{\"50\":1,\"53\":1,\"109\":1,\"231\":1,\"371\":1,\"1401\":1}}],[\"this\",{\"1\":{\"3\":3,\"10\":1,\"21\":1,\"33\":1,\"34\":1,\"36\":1,\"37\":1,\"38\":4,\"39\":4,\"40\":3,\"41\":1,\"45\":1,\"46\":1,\"47\":2,\"50\":4,\"51\":2,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":4,\"57\":3,\"59\":1,\"61\":2,\"67\":1,\"68\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":3,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"86\":3,\"88\":2,\"89\":2,\"90\":9,\"93\":1,\"95\":8,\"97\":2,\"98\":2,\"99\":2,\"102\":2,\"103\":4,\"106\":2,\"108\":12,\"109\":1,\"111\":6,\"113\":13,\"115\":7,\"117\":5,\"119\":9,\"121\":12,\"123\":6,\"125\":1,\"126\":1,\"138\":1,\"142\":1,\"147\":1,\"153\":2,\"154\":1,\"155\":1,\"160\":1,\"162\":3,\"163\":3,\"165\":1,\"176\":1,\"180\":1,\"181\":1,\"182\":4,\"198\":1,\"208\":5,\"209\":1,\"210\":1,\"211\":1,\"214\":2,\"217\":1,\"219\":1,\"222\":3,\"223\":3,\"227\":1,\"228\":2,\"237\":1,\"238\":3,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"256\":1,\"259\":2,\"260\":1,\"264\":1,\"267\":2,\"268\":1,\"270\":2,\"274\":3,\"275\":1,\"277\":2,\"281\":2,\"282\":1,\"288\":2,\"289\":1,\"295\":2,\"296\":1,\"302\":2,\"303\":1,\"308\":2,\"310\":1,\"315\":2,\"323\":2,\"330\":2,\"337\":2,\"340\":1,\"344\":2,\"347\":3,\"348\":1,\"354\":3,\"361\":3,\"376\":3,\"387\":3,\"391\":3,\"398\":1,\"399\":1,\"408\":1,\"423\":1,\"433\":2,\"434\":1,\"436\":1,\"437\":3,\"438\":1,\"439\":1,\"440\":2,\"441\":2,\"442\":2,\"443\":2,\"446\":2,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"454\":1,\"455\":1,\"456\":1,\"459\":3,\"468\":2,\"474\":1,\"487\":2,\"499\":1,\"508\":1,\"511\":1,\"513\":1,\"515\":1,\"516\":2,\"521\":1,\"523\":3,\"524\":1,\"526\":3,\"527\":1,\"528\":1,\"532\":1,\"534\":1,\"544\":3,\"545\":1,\"568\":1,\"572\":1,\"573\":1,\"582\":1,\"591\":1,\"596\":2,\"597\":1,\"601\":1,\"605\":2,\"606\":1,\"616\":2,\"626\":1,\"653\":2,\"656\":1,\"677\":1,\"679\":1,\"680\":1,\"682\":2,\"692\":2,\"695\":2,\"710\":3,\"717\":1,\"733\":3,\"737\":1,\"741\":1,\"743\":4,\"747\":1,\"755\":2,\"756\":4,\"760\":1,\"762\":1,\"777\":1,\"780\":6,\"781\":2,\"782\":3,\"785\":3,\"795\":4,\"808\":2,\"814\":2,\"815\":1,\"823\":1,\"825\":1,\"826\":1,\"828\":2,\"869\":1,\"873\":1,\"882\":1,\"894\":1,\"897\":1,\"900\":1,\"905\":2,\"906\":1,\"910\":1,\"912\":1,\"913\":1,\"915\":2,\"924\":1,\"937\":1,\"956\":3,\"971\":1,\"981\":2,\"984\":2,\"986\":2,\"999\":5,\"1000\":1,\"1021\":1,\"1049\":1,\"1058\":5,\"1059\":1,\"1067\":1,\"1069\":1,\"1095\":1,\"1096\":1,\"1097\":3,\"1108\":1,\"1113\":1,\"1115\":2,\"1125\":2,\"1131\":1,\"1154\":1,\"1155\":1,\"1161\":2,\"1167\":1,\"1169\":1,\"1170\":1,\"1176\":1,\"1179\":1,\"1180\":1,\"1190\":4,\"1199\":1,\"1201\":1,\"1202\":1,\"1204\":2,\"1215\":1,\"1217\":3,\"1219\":5,\"1220\":1,\"1237\":2,\"1249\":2,\"1276\":1,\"1300\":1,\"1309\":1,\"1312\":1,\"1323\":1,\"1327\":1,\"1329\":1,\"1347\":3,\"1349\":1,\"1350\":3,\"1353\":1,\"1354\":1,\"1356\":3,\"1357\":3,\"1358\":1,\"1359\":1,\"1364\":1,\"1366\":1,\"1369\":1,\"1372\":4,\"1378\":2,\"1381\":1,\"1382\":1,\"1383\":1,\"1384\":2,\"1385\":1,\"1387\":2,\"1396\":1,\"1397\":1,\"1400\":1,\"1403\":3,\"1405\":2,\"1416\":1,\"1424\":1,\"1448\":3,\"1451\":2,\"1461\":1,\"1488\":2,\"1489\":2,\"1491\":1,\"1498\":1,\"1505\":1,\"1509\":1,\"1513\":3,\"1520\":1,\"1529\":1,\"1538\":1,\"1546\":1,\"1554\":2,\"1556\":1,\"1559\":2,\"1561\":1,\"1564\":2,\"1566\":1,\"1570\":1,\"1574\":2,\"1578\":1,\"1582\":1,\"1583\":1,\"1592\":1,\"1593\":1,\"1600\":2,\"1601\":2,\"1609\":1,\"1610\":1,\"1614\":1,\"1620\":1,\"1624\":1,\"1628\":2,\"1641\":4,\"1647\":1,\"1651\":1,\"1654\":4,\"1661\":1,\"1664\":1,\"1666\":1,\"1667\":1,\"1672\":1,\"1674\":3,\"1677\":1,\"1682\":1,\"1686\":1,\"1690\":1,\"1691\":1,\"1696\":1,\"1701\":1,\"1704\":1,\"1708\":4,\"1710\":1,\"1712\":1,\"1716\":2,\"1717\":1,\"1719\":1,\"1721\":1,\"1722\":1,\"1724\":1,\"1725\":2,\"1728\":2,\"1731\":2,\"1735\":1,\"1737\":1,\"1741\":1,\"1744\":1,\"1745\":1,\"1746\":1,\"1747\":3,\"1750\":4,\"1751\":1,\"1752\":1,\"1753\":2,\"1756\":1,\"1757\":2,\"1763\":1,\"1764\":1,\"1765\":1,\"1766\":1,\"1767\":1,\"1768\":1,\"1769\":1,\"1770\":1,\"1773\":2,\"1775\":1,\"1776\":1,\"1777\":1,\"1778\":2,\"1781\":1,\"1783\":1,\"1784\":2,\"1786\":1,\"1787\":3,\"1788\":2,\"1789\":2,\"1793\":2,\"1797\":2,\"1798\":4,\"1800\":1,\"1802\":1,\"1808\":4,\"1810\":1,\"1811\":1}}],[\"though\",{\"1\":{\"60\":1,\"487\":1,\"596\":1,\"742\":1,\"1102\":1,\"1611\":1}}],[\"thought\",{\"1\":{\"53\":1}}],[\"thoughts\",{\"1\":{\"31\":1}}],[\"thompson\",{\"1\":{\"46\":4,\"51\":1,\"1746\":1}}],[\"those\",{\"1\":{\"10\":1,\"14\":2,\"34\":1,\"41\":1,\"45\":1,\"48\":2,\"50\":1,\"53\":1,\"59\":1,\"89\":1,\"95\":2,\"111\":1,\"119\":1,\"162\":1,\"211\":1,\"219\":1,\"399\":1,\"438\":1,\"440\":2,\"448\":1,\"453\":1,\"480\":1,\"488\":1,\"526\":1,\"535\":1,\"576\":1,\"679\":2,\"680\":1,\"730\":1,\"741\":1,\"764\":1,\"795\":1,\"825\":2,\"826\":1,\"857\":1,\"912\":2,\"913\":1,\"999\":1,\"1035\":1,\"1058\":1,\"1131\":1,\"1190\":1,\"1201\":2,\"1202\":1,\"1219\":1,\"1347\":1,\"1375\":1,\"1455\":2,\"1601\":1,\"1708\":1,\"1728\":1,\"1753\":2}}],[\"that\",{\"1\":{\"3\":1,\"10\":1,\"15\":1,\"23\":1,\"26\":1,\"38\":1,\"39\":2,\"40\":3,\"41\":5,\"42\":4,\"46\":8,\"47\":4,\"48\":6,\"50\":3,\"51\":2,\"52\":4,\"53\":1,\"56\":1,\"57\":2,\"59\":4,\"61\":4,\"72\":1,\"76\":1,\"89\":1,\"91\":1,\"93\":1,\"98\":1,\"99\":2,\"100\":1,\"103\":3,\"108\":6,\"110\":1,\"111\":3,\"112\":1,\"113\":2,\"115\":1,\"117\":2,\"119\":2,\"121\":3,\"126\":1,\"127\":1,\"153\":2,\"162\":2,\"182\":1,\"201\":2,\"202\":2,\"208\":3,\"211\":1,\"214\":2,\"216\":3,\"218\":2,\"222\":1,\"226\":1,\"227\":1,\"228\":1,\"231\":2,\"232\":4,\"235\":1,\"237\":1,\"239\":1,\"253\":1,\"259\":2,\"270\":2,\"277\":2,\"291\":1,\"302\":1,\"309\":1,\"315\":1,\"323\":1,\"330\":1,\"354\":1,\"361\":1,\"376\":1,\"377\":1,\"387\":1,\"391\":1,\"394\":1,\"397\":1,\"421\":1,\"426\":1,\"432\":1,\"436\":1,\"437\":2,\"438\":1,\"440\":4,\"441\":2,\"445\":1,\"446\":1,\"447\":3,\"448\":1,\"452\":1,\"453\":1,\"455\":1,\"468\":1,\"483\":1,\"485\":2,\"487\":1,\"507\":1,\"508\":1,\"515\":1,\"518\":2,\"520\":1,\"523\":1,\"541\":1,\"544\":3,\"545\":1,\"576\":1,\"579\":1,\"591\":2,\"595\":1,\"596\":1,\"605\":1,\"606\":2,\"618\":1,\"626\":1,\"643\":2,\"653\":3,\"656\":3,\"661\":1,\"676\":2,\"678\":1,\"679\":4,\"680\":1,\"682\":1,\"692\":2,\"701\":1,\"710\":1,\"720\":1,\"730\":1,\"733\":4,\"742\":1,\"743\":3,\"749\":1,\"751\":1,\"755\":2,\"756\":3,\"762\":2,\"768\":1,\"781\":1,\"782\":1,\"784\":1,\"785\":1,\"789\":1,\"795\":5,\"801\":1,\"814\":1,\"824\":1,\"825\":4,\"826\":1,\"828\":1,\"863\":1,\"867\":1,\"873\":1,\"875\":1,\"882\":1,\"886\":2,\"894\":1,\"897\":2,\"905\":1,\"906\":2,\"911\":1,\"912\":4,\"913\":1,\"915\":1,\"924\":1,\"929\":3,\"940\":1,\"953\":2,\"960\":1,\"962\":2,\"965\":2,\"977\":1,\"984\":2,\"1000\":1,\"1023\":3,\"1043\":2,\"1052\":1,\"1059\":1,\"1072\":1,\"1086\":1,\"1091\":1,\"1096\":1,\"1097\":1,\"1110\":1,\"1113\":1,\"1118\":1,\"1125\":1,\"1134\":2,\"1142\":1,\"1145\":2,\"1161\":2,\"1170\":3,\"1175\":2,\"1179\":1,\"1184\":1,\"1190\":5,\"1200\":1,\"1201\":4,\"1202\":1,\"1204\":1,\"1215\":1,\"1220\":1,\"1230\":1,\"1237\":2,\"1245\":1,\"1248\":1,\"1260\":2,\"1262\":1,\"1267\":3,\"1268\":1,\"1272\":1,\"1276\":1,\"1278\":1,\"1307\":1,\"1309\":1,\"1312\":1,\"1317\":1,\"1321\":1,\"1324\":2,\"1327\":1,\"1330\":2,\"1349\":1,\"1365\":1,\"1366\":2,\"1387\":1,\"1400\":1,\"1401\":2,\"1402\":1,\"1407\":1,\"1429\":1,\"1432\":2,\"1437\":1,\"1451\":1,\"1479\":1,\"1486\":1,\"1488\":1,\"1505\":1,\"1509\":1,\"1513\":5,\"1516\":1,\"1535\":1,\"1547\":1,\"1564\":1,\"1570\":2,\"1574\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1601\":5,\"1628\":2,\"1634\":1,\"1641\":3,\"1647\":3,\"1654\":3,\"1659\":1,\"1664\":3,\"1666\":1,\"1672\":3,\"1677\":1,\"1700\":1,\"1702\":3,\"1703\":1,\"1706\":1,\"1708\":5,\"1709\":1,\"1716\":2,\"1719\":1,\"1723\":1,\"1724\":2,\"1725\":1,\"1727\":1,\"1729\":1,\"1741\":1,\"1746\":2,\"1747\":2,\"1750\":1,\"1753\":2,\"1757\":1,\"1766\":2,\"1772\":2,\"1777\":1,\"1778\":2,\"1780\":3,\"1784\":1,\"1787\":1,\"1789\":1,\"1791\":5,\"1794\":2,\"1798\":4,\"1799\":1,\"1811\":1}}],[\"than\",{\"0\":{\"751\":1},\"1\":{\"3\":1,\"42\":1,\"50\":4,\"70\":1,\"73\":1,\"74\":1,\"90\":2,\"93\":1,\"95\":2,\"108\":2,\"111\":1,\"115\":1,\"119\":2,\"121\":2,\"125\":1,\"129\":1,\"142\":1,\"163\":2,\"198\":1,\"261\":1,\"292\":1,\"340\":2,\"387\":1,\"400\":1,\"421\":1,\"445\":1,\"454\":1,\"455\":1,\"511\":1,\"526\":1,\"544\":1,\"546\":1,\"576\":1,\"582\":1,\"596\":1,\"742\":1,\"743\":1,\"756\":1,\"764\":1,\"794\":1,\"801\":1,\"897\":1,\"929\":1,\"956\":2,\"972\":1,\"981\":1,\"1125\":1,\"1139\":1,\"1155\":2,\"1161\":1,\"1175\":1,\"1180\":1,\"1189\":1,\"1249\":1,\"1312\":1,\"1324\":1,\"1330\":1,\"1341\":1,\"1366\":1,\"1372\":1,\"1401\":1,\"1403\":1,\"1432\":1,\"1448\":1,\"1487\":1,\"1504\":1,\"1571\":1,\"1575\":1,\"1578\":1,\"1583\":1,\"1601\":1,\"1634\":1,\"1641\":1,\"1701\":1,\"1708\":2,\"1747\":1,\"1753\":2,\"1777\":1,\"1778\":2,\"1789\":1,\"1807\":1}}],[\"theoretical\",{\"1\":{\"1789\":1}}],[\"theme\",{\"1\":{\"677\":2,\"823\":2,\"910\":2,\"1199\":2}}],[\"themselves\",{\"1\":{\"48\":1}}],[\"them\",{\"1\":{\"34\":1,\"45\":1,\"48\":1,\"50\":1,\"52\":1,\"60\":1,\"115\":1,\"119\":1,\"154\":1,\"162\":1,\"199\":1,\"209\":1,\"224\":1,\"228\":1,\"238\":2,\"267\":2,\"274\":2,\"288\":2,\"308\":2,\"380\":1,\"391\":1,\"440\":1,\"454\":1,\"471\":1,\"480\":1,\"677\":1,\"679\":1,\"710\":1,\"743\":1,\"756\":1,\"780\":1,\"785\":1,\"794\":1,\"823\":1,\"825\":1,\"910\":1,\"912\":1,\"937\":1,\"1096\":2,\"1097\":1,\"1189\":1,\"1199\":1,\"1201\":1,\"1218\":1,\"1276\":1,\"1327\":1,\"1451\":1,\"1489\":1,\"1641\":1,\"1719\":1,\"1747\":2}}],[\"their\",{\"1\":{\"23\":2,\"30\":1,\"43\":1,\"48\":5,\"50\":3,\"54\":1,\"89\":1,\"102\":1,\"104\":1,\"111\":1,\"119\":1,\"121\":1,\"124\":1,\"130\":1,\"164\":1,\"167\":1,\"183\":1,\"201\":1,\"211\":1,\"219\":2,\"224\":1,\"243\":1,\"264\":1,\"508\":1,\"541\":1,\"545\":1,\"605\":1,\"681\":1,\"827\":1,\"905\":1,\"914\":1,\"927\":1,\"984\":1,\"1142\":1,\"1203\":1,\"1237\":1,\"1387\":1,\"1388\":1,\"1727\":1,\"1746\":2,\"1755\":1,\"1756\":1,\"1772\":2,\"1774\":1,\"1780\":1,\"1795\":1,\"1814\":1}}],[\"they\",{\"1\":{\"10\":1,\"39\":1,\"47\":3,\"48\":1,\"50\":2,\"57\":1,\"108\":1,\"151\":1,\"182\":1,\"225\":1,\"226\":1,\"243\":1,\"264\":1,\"397\":1,\"423\":1,\"545\":1,\"643\":1,\"677\":1,\"679\":1,\"755\":1,\"823\":1,\"825\":1,\"910\":1,\"912\":1,\"929\":2,\"942\":1,\"1022\":1,\"1091\":2,\"1199\":1,\"1201\":1,\"1403\":1,\"1448\":1,\"1451\":1,\"1505\":1,\"1554\":1,\"1559\":1,\"1561\":1,\"1578\":1,\"1592\":1,\"1593\":1,\"1708\":2,\"1746\":1,\"1780\":1,\"1786\":1}}],[\"then\",{\"1\":{\"3\":1,\"8\":1,\"33\":1,\"36\":1,\"38\":2,\"41\":1,\"47\":2,\"48\":1,\"52\":5,\"54\":1,\"56\":2,\"57\":1,\"61\":1,\"90\":1,\"103\":1,\"108\":1,\"113\":2,\"115\":1,\"119\":1,\"126\":1,\"189\":1,\"199\":1,\"202\":2,\"205\":1,\"208\":1,\"211\":1,\"215\":1,\"217\":1,\"219\":1,\"220\":1,\"224\":1,\"244\":1,\"246\":1,\"251\":1,\"252\":2,\"253\":1,\"259\":1,\"261\":1,\"270\":2,\"277\":2,\"302\":1,\"312\":1,\"376\":1,\"397\":3,\"408\":1,\"409\":1,\"410\":2,\"423\":2,\"432\":1,\"433\":2,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"440\":2,\"441\":1,\"444\":1,\"445\":1,\"452\":1,\"453\":1,\"455\":1,\"468\":1,\"485\":2,\"487\":2,\"488\":1,\"494\":1,\"507\":1,\"518\":1,\"526\":1,\"534\":1,\"535\":1,\"544\":1,\"563\":1,\"576\":1,\"596\":1,\"603\":1,\"605\":1,\"606\":1,\"653\":2,\"656\":1,\"661\":1,\"677\":1,\"679\":1,\"682\":1,\"692\":1,\"696\":1,\"741\":2,\"743\":1,\"747\":1,\"749\":2,\"756\":1,\"764\":1,\"781\":1,\"791\":2,\"794\":1,\"795\":4,\"814\":1,\"823\":1,\"825\":1,\"828\":1,\"851\":1,\"853\":1,\"855\":1,\"857\":1,\"858\":2,\"859\":1,\"886\":1,\"897\":1,\"900\":1,\"905\":1,\"906\":1,\"910\":1,\"912\":1,\"915\":1,\"942\":1,\"981\":1,\"984\":1,\"986\":1,\"989\":2,\"999\":1,\"1016\":2,\"1022\":2,\"1023\":3,\"1035\":1,\"1036\":1,\"1037\":1,\"1043\":1,\"1058\":1,\"1086\":1,\"1123\":1,\"1125\":3,\"1131\":1,\"1141\":1,\"1145\":1,\"1153\":1,\"1154\":3,\"1176\":1,\"1178\":1,\"1186\":2,\"1189\":1,\"1190\":4,\"1199\":1,\"1201\":1,\"1204\":1,\"1219\":1,\"1237\":1,\"1244\":4,\"1245\":2,\"1248\":3,\"1251\":4,\"1252\":3,\"1253\":4,\"1258\":1,\"1267\":1,\"1272\":1,\"1297\":1,\"1309\":1,\"1312\":2,\"1321\":1,\"1341\":1,\"1350\":1,\"1369\":1,\"1377\":1,\"1386\":1,\"1400\":2,\"1403\":4,\"1405\":1,\"1416\":2,\"1417\":2,\"1428\":1,\"1436\":1,\"1444\":2,\"1448\":2,\"1461\":1,\"1479\":1,\"1487\":2,\"1489\":1,\"1496\":1,\"1505\":1,\"1564\":1,\"1592\":1,\"1602\":1,\"1610\":1,\"1611\":2,\"1641\":1,\"1674\":2,\"1703\":1,\"1708\":6,\"1724\":1,\"1725\":1,\"1747\":1,\"1757\":1,\"1770\":2,\"1777\":1,\"1778\":1,\"1780\":2,\"1784\":1,\"1788\":1,\"1793\":1,\"1800\":1,\"1802\":1,\"1808\":1}}],[\"these\",{\"1\":{\"3\":2,\"13\":1,\"27\":1,\"30\":1,\"37\":1,\"46\":1,\"47\":1,\"49\":1,\"50\":1,\"72\":1,\"90\":1,\"117\":1,\"119\":2,\"121\":1,\"197\":1,\"201\":1,\"207\":1,\"208\":2,\"218\":1,\"229\":1,\"264\":1,\"377\":1,\"440\":1,\"566\":1,\"567\":1,\"616\":1,\"679\":1,\"695\":1,\"780\":2,\"825\":1,\"904\":1,\"912\":1,\"953\":1,\"973\":1,\"999\":2,\"1058\":2,\"1176\":1,\"1201\":1,\"1219\":2,\"1226\":1,\"1250\":1,\"1400\":1,\"1451\":1,\"1454\":1,\"1535\":1,\"1601\":1,\"1647\":1,\"1664\":1,\"1704\":1,\"1746\":1,\"1790\":1,\"1801\":1}}],[\"therefore\",{\"1\":{\"643\":1}}],[\"thereafter\",{\"1\":{\"99\":2}}],[\"there\",{\"1\":{\"1\":1,\"3\":4,\"40\":1,\"42\":1,\"43\":1,\"47\":1,\"48\":1,\"50\":1,\"62\":1,\"66\":1,\"76\":2,\"106\":1,\"117\":2,\"121\":1,\"170\":1,\"208\":1,\"209\":1,\"215\":1,\"222\":1,\"228\":1,\"231\":1,\"232\":1,\"235\":1,\"237\":1,\"238\":1,\"274\":1,\"284\":1,\"291\":1,\"298\":1,\"304\":2,\"354\":1,\"361\":1,\"391\":1,\"421\":1,\"430\":1,\"440\":1,\"443\":1,\"445\":1,\"566\":1,\"596\":1,\"605\":1,\"682\":1,\"710\":1,\"717\":1,\"742\":1,\"743\":1,\"749\":1,\"756\":1,\"764\":1,\"780\":1,\"785\":1,\"828\":1,\"905\":1,\"915\":1,\"929\":1,\"977\":1,\"989\":1,\"999\":1,\"1016\":1,\"1021\":1,\"1058\":1,\"1093\":1,\"1096\":1,\"1097\":1,\"1204\":1,\"1219\":1,\"1362\":1,\"1421\":1,\"1448\":1,\"1467\":1,\"1487\":2,\"1488\":1,\"1489\":1,\"1561\":1,\"1611\":2,\"1641\":1,\"1708\":2,\"1716\":1,\"1723\":1,\"1725\":2,\"1729\":1,\"1742\":1,\"1770\":1,\"1775\":1,\"1783\":1,\"1808\":1}}],[\"the\",{\"0\":{\"33\":1,\"34\":1,\"36\":1,\"45\":1,\"48\":1,\"49\":1,\"59\":1,\"60\":1,\"219\":1,\"251\":1,\"252\":1,\"253\":1,\"755\":1,\"1401\":1,\"1702\":1,\"1753\":1,\"1793\":1},\"1\":{\"0\":2,\"1\":1,\"3\":10,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":2,\"10\":3,\"12\":1,\"13\":1,\"14\":3,\"15\":39,\"16\":1,\"19\":1,\"21\":1,\"22\":2,\"23\":3,\"24\":8,\"26\":39,\"27\":3,\"29\":1,\"30\":5,\"33\":1,\"34\":3,\"36\":1,\"37\":1,\"38\":26,\"39\":6,\"40\":7,\"41\":9,\"42\":6,\"43\":3,\"44\":2,\"45\":3,\"46\":12,\"47\":22,\"48\":8,\"50\":12,\"51\":6,\"52\":6,\"53\":5,\"54\":4,\"55\":1,\"56\":26,\"57\":4,\"58\":2,\"59\":4,\"60\":1,\"61\":6,\"63\":2,\"64\":1,\"67\":1,\"69\":4,\"70\":1,\"71\":1,\"72\":3,\"76\":2,\"77\":1,\"78\":3,\"79\":3,\"81\":1,\"86\":1,\"88\":1,\"90\":12,\"91\":2,\"92\":4,\"93\":3,\"94\":4,\"95\":6,\"96\":3,\"97\":1,\"99\":2,\"100\":2,\"101\":1,\"102\":3,\"103\":14,\"104\":2,\"105\":5,\"107\":2,\"108\":13,\"109\":2,\"110\":3,\"111\":12,\"112\":3,\"113\":18,\"114\":1,\"115\":16,\"116\":1,\"117\":8,\"118\":1,\"119\":13,\"120\":4,\"121\":16,\"122\":4,\"123\":5,\"125\":1,\"127\":2,\"130\":1,\"131\":4,\"135\":2,\"139\":2,\"142\":3,\"153\":1,\"154\":1,\"162\":7,\"163\":2,\"164\":2,\"165\":1,\"167\":1,\"169\":2,\"174\":2,\"176\":1,\"181\":3,\"182\":9,\"183\":2,\"189\":3,\"190\":2,\"197\":1,\"198\":2,\"199\":1,\"201\":4,\"202\":7,\"205\":1,\"208\":17,\"209\":2,\"211\":1,\"214\":1,\"215\":1,\"216\":2,\"217\":1,\"218\":2,\"219\":4,\"220\":1,\"223\":1,\"225\":3,\"226\":5,\"227\":3,\"228\":1,\"231\":10,\"232\":4,\"234\":1,\"235\":3,\"236\":1,\"237\":9,\"238\":1,\"239\":1,\"244\":3,\"246\":1,\"249\":1,\"251\":3,\"252\":1,\"253\":1,\"255\":1,\"259\":2,\"262\":1,\"264\":1,\"265\":5,\"267\":1,\"270\":3,\"272\":4,\"273\":1,\"274\":3,\"277\":3,\"278\":1,\"279\":4,\"280\":1,\"281\":2,\"284\":2,\"285\":1,\"286\":2,\"288\":1,\"293\":3,\"294\":1,\"295\":2,\"297\":2,\"298\":2,\"299\":1,\"300\":2,\"302\":2,\"304\":5,\"305\":1,\"308\":1,\"309\":1,\"312\":2,\"313\":3,\"314\":1,\"320\":3,\"322\":1,\"328\":2,\"329\":1,\"335\":3,\"337\":1,\"340\":4,\"341\":2,\"342\":3,\"344\":1,\"347\":7,\"348\":3,\"349\":3,\"354\":4,\"355\":1,\"361\":4,\"362\":1,\"369\":3,\"371\":1,\"372\":1,\"375\":3,\"376\":5,\"377\":1,\"378\":1,\"380\":1,\"383\":5,\"387\":5,\"389\":2,\"390\":1,\"391\":10,\"393\":1,\"394\":2,\"395\":5,\"397\":5,\"398\":2,\"399\":2,\"402\":4,\"403\":4,\"404\":5,\"406\":1,\"408\":1,\"409\":1,\"410\":2,\"412\":4,\"413\":1,\"414\":1,\"419\":4,\"421\":4,\"423\":7,\"425\":1,\"426\":2,\"431\":1,\"432\":3,\"433\":11,\"434\":2,\"436\":3,\"437\":9,\"438\":8,\"439\":17,\"440\":15,\"441\":5,\"442\":4,\"443\":1,\"444\":1,\"445\":3,\"446\":4,\"447\":14,\"448\":2,\"452\":1,\"453\":2,\"454\":6,\"455\":3,\"456\":1,\"457\":3,\"459\":3,\"462\":3,\"463\":1,\"465\":1,\"468\":4,\"469\":2,\"470\":1,\"471\":1,\"474\":5,\"475\":3,\"476\":1,\"480\":3,\"483\":5,\"485\":3,\"487\":3,\"488\":6,\"489\":3,\"490\":2,\"491\":5,\"494\":2,\"495\":2,\"496\":1,\"497\":2,\"500\":2,\"502\":4,\"507\":1,\"508\":2,\"511\":1,\"513\":1,\"514\":1,\"515\":2,\"516\":5,\"517\":2,\"518\":3,\"520\":2,\"521\":2,\"522\":1,\"523\":1,\"524\":1,\"525\":1,\"526\":13,\"527\":3,\"528\":3,\"530\":4,\"532\":2,\"534\":1,\"535\":6,\"536\":3,\"541\":3,\"544\":5,\"545\":8,\"546\":10,\"548\":4,\"549\":1,\"550\":1,\"553\":2,\"554\":1,\"555\":1,\"558\":2,\"560\":1,\"563\":3,\"566\":1,\"572\":1,\"575\":1,\"576\":3,\"577\":1,\"579\":2,\"582\":1,\"591\":2,\"593\":2,\"596\":9,\"597\":3,\"599\":1,\"605\":17,\"606\":2,\"607\":2,\"608\":2,\"609\":1,\"611\":3,\"612\":1,\"616\":3,\"618\":6,\"620\":3,\"624\":1,\"626\":1,\"629\":2,\"631\":3,\"635\":3,\"636\":1,\"637\":4,\"641\":2,\"643\":10,\"647\":1,\"648\":2,\"651\":1,\"653\":8,\"656\":3,\"659\":6,\"661\":2,\"665\":2,\"666\":2,\"669\":1,\"675\":1,\"676\":5,\"677\":7,\"678\":2,\"679\":10,\"680\":3,\"682\":6,\"683\":2,\"685\":1,\"696\":2,\"701\":2,\"702\":1,\"703\":3,\"704\":1,\"705\":1,\"710\":10,\"713\":5,\"714\":1,\"715\":1,\"717\":2,\"718\":3,\"720\":1,\"722\":4,\"723\":6,\"727\":5,\"728\":6,\"729\":1,\"730\":1,\"733\":4,\"735\":5,\"741\":11,\"742\":11,\"743\":9,\"745\":2,\"747\":3,\"749\":15,\"751\":2,\"752\":1,\"754\":3,\"755\":14,\"756\":9,\"758\":6,\"762\":4,\"765\":3,\"771\":3,\"777\":1,\"778\":2,\"779\":6,\"780\":11,\"781\":3,\"782\":4,\"783\":4,\"785\":10,\"787\":1,\"794\":1,\"795\":2,\"798\":1,\"799\":2,\"801\":7,\"802\":2,\"803\":1,\"808\":11,\"809\":1,\"810\":1,\"814\":5,\"815\":4,\"816\":1,\"819\":1,\"822\":1,\"823\":7,\"824\":2,\"825\":10,\"826\":3,\"828\":6,\"829\":2,\"831\":1,\"833\":1,\"837\":6,\"839\":1,\"843\":6,\"848\":1,\"849\":1,\"850\":2,\"851\":4,\"857\":4,\"859\":9,\"861\":2,\"865\":7,\"868\":1,\"871\":1,\"873\":1,\"875\":1,\"876\":1,\"877\":1,\"882\":6,\"884\":3,\"886\":3,\"888\":2,\"891\":1,\"893\":1,\"894\":1,\"897\":3,\"898\":3,\"904\":1,\"905\":17,\"906\":2,\"907\":2,\"908\":2,\"909\":1,\"910\":7,\"911\":2,\"912\":10,\"913\":3,\"915\":6,\"916\":2,\"917\":3,\"920\":6,\"922\":2,\"924\":3,\"926\":4,\"929\":2,\"930\":1,\"932\":1,\"934\":1,\"935\":1,\"937\":4,\"940\":4,\"942\":5,\"945\":2,\"947\":2,\"949\":1,\"953\":6,\"954\":4,\"956\":5,\"958\":1,\"960\":5,\"961\":1,\"962\":5,\"967\":2,\"968\":1,\"969\":1,\"972\":2,\"973\":1,\"975\":7,\"977\":3,\"979\":1,\"981\":3,\"982\":3,\"983\":1,\"984\":2,\"986\":2,\"987\":2,\"989\":1,\"992\":2,\"993\":3,\"995\":1,\"997\":2,\"999\":8,\"1000\":2,\"1002\":4,\"1003\":1,\"1004\":1,\"1008\":2,\"1010\":1,\"1016\":4,\"1020\":1,\"1021\":6,\"1022\":1,\"1023\":6,\"1024\":4,\"1026\":1,\"1031\":2,\"1033\":1,\"1036\":2,\"1037\":3,\"1039\":4,\"1040\":1,\"1041\":1,\"1043\":3,\"1044\":2,\"1045\":1,\"1049\":1,\"1052\":7,\"1056\":2,\"1058\":8,\"1059\":2,\"1061\":5,\"1067\":3,\"1068\":4,\"1069\":4,\"1070\":2,\"1077\":1,\"1078\":1,\"1079\":1,\"1084\":4,\"1086\":1,\"1089\":2,\"1091\":3,\"1093\":2,\"1095\":1,\"1096\":1,\"1097\":10,\"1098\":1,\"1100\":4,\"1103\":2,\"1108\":2,\"1110\":5,\"1113\":7,\"1115\":4,\"1116\":2,\"1118\":4,\"1119\":1,\"1120\":1,\"1123\":3,\"1125\":15,\"1126\":7,\"1131\":4,\"1135\":2,\"1137\":2,\"1139\":4,\"1141\":3,\"1142\":1,\"1143\":3,\"1145\":3,\"1147\":2,\"1150\":1,\"1153\":6,\"1154\":6,\"1155\":2,\"1157\":1,\"1158\":2,\"1160\":1,\"1161\":8,\"1166\":2,\"1167\":2,\"1169\":4,\"1170\":4,\"1171\":6,\"1172\":1,\"1173\":1,\"1175\":7,\"1176\":3,\"1178\":5,\"1179\":2,\"1180\":2,\"1182\":2,\"1188\":1,\"1189\":1,\"1190\":2,\"1195\":1,\"1198\":1,\"1199\":7,\"1200\":2,\"1201\":10,\"1202\":3,\"1204\":6,\"1205\":2,\"1207\":1,\"1213\":4,\"1214\":2,\"1217\":3,\"1219\":8,\"1220\":2,\"1222\":2,\"1223\":1,\"1224\":4,\"1226\":3,\"1227\":1,\"1235\":1,\"1237\":2,\"1241\":4,\"1244\":3,\"1248\":1,\"1250\":2,\"1251\":3,\"1252\":3,\"1255\":4,\"1258\":1,\"1260\":4,\"1261\":2,\"1262\":7,\"1265\":2,\"1267\":2,\"1268\":6,\"1270\":1,\"1272\":1,\"1273\":1,\"1274\":1,\"1276\":1,\"1278\":4,\"1281\":1,\"1285\":1,\"1287\":2,\"1290\":1,\"1294\":1,\"1295\":1,\"1297\":2,\"1300\":4,\"1302\":1,\"1303\":3,\"1307\":5,\"1308\":1,\"1309\":1,\"1311\":2,\"1312\":11,\"1313\":7,\"1317\":2,\"1318\":1,\"1319\":3,\"1321\":5,\"1324\":1,\"1325\":6,\"1327\":5,\"1329\":2,\"1330\":1,\"1331\":6,\"1335\":2,\"1336\":1,\"1337\":3,\"1339\":4,\"1343\":3,\"1345\":2,\"1347\":3,\"1350\":2,\"1352\":2,\"1353\":2,\"1355\":2,\"1356\":4,\"1357\":4,\"1358\":2,\"1359\":4,\"1360\":5,\"1363\":2,\"1364\":2,\"1365\":3,\"1366\":5,\"1371\":1,\"1372\":1,\"1374\":1,\"1375\":2,\"1377\":4,\"1378\":2,\"1380\":2,\"1381\":2,\"1382\":2,\"1383\":2,\"1384\":3,\"1385\":4,\"1386\":2,\"1387\":6,\"1388\":1,\"1395\":2,\"1396\":2,\"1397\":2,\"1400\":13,\"1401\":6,\"1403\":10,\"1404\":3,\"1405\":4,\"1408\":1,\"1413\":1,\"1416\":9,\"1417\":4,\"1421\":3,\"1422\":1,\"1425\":1,\"1432\":6,\"1433\":1,\"1441\":1,\"1444\":4,\"1448\":6,\"1449\":2,\"1450\":1,\"1453\":2,\"1454\":1,\"1455\":3,\"1456\":1,\"1461\":3,\"1463\":1,\"1469\":1,\"1474\":1,\"1476\":1,\"1478\":2,\"1479\":2,\"1480\":2,\"1482\":3,\"1484\":1,\"1486\":2,\"1487\":2,\"1488\":1,\"1492\":1,\"1493\":1,\"1496\":2,\"1497\":1,\"1500\":2,\"1501\":3,\"1502\":8,\"1504\":2,\"1505\":5,\"1507\":2,\"1509\":4,\"1513\":6,\"1516\":3,\"1517\":2,\"1518\":2,\"1533\":2,\"1534\":2,\"1535\":1,\"1538\":1,\"1539\":2,\"1542\":7,\"1545\":4,\"1546\":3,\"1547\":4,\"1552\":2,\"1554\":5,\"1555\":2,\"1557\":5,\"1559\":5,\"1560\":2,\"1561\":1,\"1562\":5,\"1564\":4,\"1566\":3,\"1568\":6,\"1569\":2,\"1570\":6,\"1571\":1,\"1572\":8,\"1573\":2,\"1574\":2,\"1575\":2,\"1576\":8,\"1577\":2,\"1578\":3,\"1579\":3,\"1580\":6,\"1581\":2,\"1582\":3,\"1583\":1,\"1584\":8,\"1589\":2,\"1591\":5,\"1592\":5,\"1593\":2,\"1594\":2,\"1596\":2,\"1599\":2,\"1600\":3,\"1601\":4,\"1602\":3,\"1609\":1,\"1610\":3,\"1611\":2,\"1612\":4,\"1615\":3,\"1617\":1,\"1618\":2,\"1620\":1,\"1624\":1,\"1625\":1,\"1626\":3,\"1628\":4,\"1629\":1,\"1631\":2,\"1632\":5,\"1634\":5,\"1636\":3,\"1638\":1,\"1641\":9,\"1644\":2,\"1645\":8,\"1647\":7,\"1650\":3,\"1654\":4,\"1657\":5,\"1659\":1,\"1664\":7,\"1666\":2,\"1670\":5,\"1672\":2,\"1674\":6,\"1675\":4,\"1679\":3,\"1688\":3,\"1690\":1,\"1694\":5,\"1696\":1,\"1699\":7,\"1700\":2,\"1701\":3,\"1702\":6,\"1703\":2,\"1704\":1,\"1705\":5,\"1706\":7,\"1707\":1,\"1708\":17,\"1709\":1,\"1712\":8,\"1713\":1,\"1714\":1,\"1716\":12,\"1717\":3,\"1719\":3,\"1721\":1,\"1722\":1,\"1723\":5,\"1724\":4,\"1725\":5,\"1727\":7,\"1728\":3,\"1729\":3,\"1731\":4,\"1735\":1,\"1737\":8,\"1738\":1,\"1741\":11,\"1743\":2,\"1744\":3,\"1746\":7,\"1747\":5,\"1748\":10,\"1749\":2,\"1750\":5,\"1751\":1,\"1752\":2,\"1753\":9,\"1755\":1,\"1756\":2,\"1757\":4,\"1758\":4,\"1759\":1,\"1760\":2,\"1761\":1,\"1762\":2,\"1763\":2,\"1764\":2,\"1765\":2,\"1766\":5,\"1768\":2,\"1769\":2,\"1770\":2,\"1771\":2,\"1772\":3,\"1773\":10,\"1774\":2,\"1775\":2,\"1776\":2,\"1777\":4,\"1778\":9,\"1779\":9,\"1780\":6,\"1782\":3,\"1784\":3,\"1787\":2,\"1788\":4,\"1789\":7,\"1790\":1,\"1791\":4,\"1793\":4,\"1794\":4,\"1795\":1,\"1797\":14,\"1798\":17,\"1799\":19,\"1800\":4,\"1801\":1,\"1802\":6,\"1803\":1,\"1804\":1,\"1806\":3,\"1807\":4,\"1808\":5,\"1810\":2,\"1812\":2,\"1813\":1}}],[\"ten\",{\"1\":{\"782\":4}}],[\"tendencies\",{\"1\":{\"53\":1}}],[\"technologies\",{\"1\":{\"202\":1}}],[\"technical\",{\"1\":{\"526\":1}}],[\"technically\",{\"1\":{\"119\":1,\"596\":1,\"1664\":1}}],[\"techniques\",{\"1\":{\"37\":1}}],[\"tee\",{\"1\":{\"113\":1}}],[\"terraform\",{\"1\":{\"93\":1,\"113\":1,\"1629\":1}}],[\"term\",{\"1\":{\"121\":1,\"142\":1,\"167\":1,\"274\":1,\"438\":1,\"439\":1,\"448\":1,\"701\":1,\"702\":1,\"1317\":1,\"1318\":1,\"1744\":1,\"1798\":2}}],[\"terms\",{\"0\":{\"1449\":1},\"1\":{\"50\":1,\"218\":1,\"377\":1,\"447\":1,\"514\":1,\"526\":1,\"576\":1,\"741\":1,\"965\":1,\"1387\":1,\"1422\":1,\"1439\":1,\"1449\":1,\"1535\":1,\"1536\":1,\"1540\":1,\"1601\":1,\"1798\":3}}],[\"terminating\",{\"1\":{\"1327\":1,\"1647\":1,\"1664\":1}}],[\"terminated\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1}}],[\"terminates\",{\"1\":{\"24\":4,\"253\":1,\"1502\":4,\"1507\":3,\"1508\":1,\"1518\":3,\"1536\":3,\"1540\":3,\"1541\":1,\"1547\":3,\"1548\":1,\"1552\":3,\"1585\":1,\"1589\":3,\"1594\":3,\"1599\":3,\"1675\":2,\"1709\":1,\"1727\":1,\"1794\":1}}],[\"terminate\",{\"1\":{\"15\":5,\"26\":5,\"47\":1,\"122\":2,\"251\":1,\"252\":1,\"255\":1,\"475\":2,\"484\":1,\"485\":1,\"489\":1,\"531\":1,\"532\":1,\"536\":1,\"584\":2,\"585\":1,\"586\":1,\"589\":1,\"659\":2,\"664\":2,\"718\":2,\"719\":1,\"720\":1,\"723\":1,\"724\":1,\"725\":1,\"728\":1,\"735\":2,\"745\":1,\"758\":1,\"766\":1,\"787\":1,\"1098\":1,\"1139\":1,\"1143\":2,\"1255\":1,\"1321\":1,\"1509\":1,\"1545\":1,\"1549\":1,\"1586\":1}}],[\"terminals\",{\"1\":{\"46\":1,\"48\":1,\"1701\":11}}],[\"terminal\",{\"0\":{\"211\":1,\"1795\":1},\"1\":{\"3\":2,\"15\":1,\"23\":2,\"26\":1,\"47\":2,\"48\":1,\"53\":1,\"59\":1,\"81\":1,\"87\":1,\"102\":2,\"103\":1,\"108\":3,\"113\":1,\"115\":1,\"123\":1,\"130\":2,\"159\":1,\"164\":2,\"183\":2,\"202\":1,\"211\":1,\"216\":1,\"261\":1,\"433\":1,\"438\":1,\"626\":1,\"814\":2,\"1009\":1,\"1010\":1,\"1016\":1,\"1026\":1,\"1120\":1,\"1178\":1,\"1309\":1,\"1347\":1,\"1359\":1,\"1371\":1,\"1385\":1,\"1388\":2,\"1478\":1,\"1480\":1,\"1570\":1,\"1718\":1,\"1721\":1,\"1727\":2,\"1731\":1,\"1759\":1,\"1772\":1,\"1774\":2,\"1795\":1,\"1797\":1,\"1798\":1,\"1799\":1}}],[\"terseness\",{\"1\":{\"216\":1}}],[\"terse\",{\"1\":{\"48\":1}}],[\"tell\",{\"1\":{\"138\":1,\"1504\":1,\"1591\":1}}],[\"tells\",{\"1\":{\"38\":1,\"40\":1,\"56\":1,\"433\":1,\"440\":1}}],[\"telemetry\",{\"1\":{\"15\":1,\"26\":1,\"483\":1,\"618\":1,\"1052\":1,\"1099\":1,\"1100\":2}}],[\"temp\",{\"1\":{\"1300\":2}}],[\"tempdir\",{\"1\":{\"1300\":1}}],[\"templates\",{\"1\":{\"104\":1}}],[\"template\",{\"0\":{\"314\":1,\"322\":1,\"329\":1,\"336\":1,\"343\":1},\"1\":{\"30\":4,\"265\":4,\"272\":2,\"279\":2,\"284\":1,\"286\":2,\"291\":1,\"298\":1,\"300\":2,\"315\":1,\"318\":1,\"320\":2,\"323\":1,\"326\":1,\"328\":2,\"330\":1,\"333\":1,\"335\":2,\"337\":1,\"342\":1,\"344\":1,\"349\":1,\"1645\":2,\"1699\":2}}],[\"temporary\",{\"1\":{\"15\":1,\"26\":1,\"749\":1,\"755\":1,\"837\":1,\"843\":1,\"1023\":1,\"1296\":1,\"1297\":2,\"1300\":1}}],[\"textual\",{\"1\":{\"1682\":1,\"1686\":1}}],[\"texttoencode\",{\"1\":{\"50\":1}}],[\"text\",{\"0\":{\"1723\":1,\"1724\":1,\"1725\":1,\"1726\":1},\"1\":{\"15\":3,\"26\":3,\"38\":1,\"50\":1,\"56\":1,\"95\":1,\"104\":1,\"108\":1,\"143\":1,\"174\":1,\"182\":1,\"238\":2,\"261\":1,\"276\":1,\"439\":1,\"454\":1,\"457\":1,\"479\":1,\"624\":2,\"629\":2,\"630\":1,\"635\":1,\"636\":1,\"641\":1,\"743\":1,\"756\":1,\"791\":1,\"882\":1,\"930\":1,\"935\":1,\"953\":2,\"984\":4,\"1021\":2,\"1128\":1,\"1186\":1,\"1236\":1,\"1237\":4,\"1278\":1,\"1359\":1,\"1385\":1,\"1463\":2,\"1469\":2,\"1474\":2,\"1505\":2,\"1592\":2,\"1616\":2,\"1630\":2,\"1641\":1,\"1643\":2,\"1655\":10,\"1659\":1,\"1668\":10,\"1692\":2,\"1697\":2,\"1701\":2,\"1708\":1,\"1715\":4,\"1716\":2,\"1723\":2,\"1724\":4,\"1725\":2,\"1726\":1,\"1746\":1,\"1797\":2,\"1798\":1,\"1799\":1,\"1807\":1}}],[\"testers\",{\"1\":{\"1372\":1}}],[\"tested\",{\"1\":{\"0\":1,\"1\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1}}],[\"test=example\",{\"1\":{\"1285\":1}}],[\"testing\",{\"0\":{\"410\":1,\"1037\":1},\"1\":{\"66\":1,\"75\":1,\"90\":3,\"99\":1,\"111\":1,\"115\":1,\"119\":1,\"121\":2,\"170\":1,\"201\":1,\"1284\":1,\"1732\":1}}],[\"test\",{\"0\":{\"1282\":1},\"1\":{\"15\":2,\"26\":2,\"104\":1,\"108\":1,\"109\":1,\"115\":1,\"119\":1,\"182\":6,\"183\":2,\"208\":2,\"391\":1,\"515\":2,\"526\":1,\"576\":1,\"577\":2,\"669\":2,\"710\":1,\"785\":1,\"859\":1,\"861\":2,\"999\":1,\"1058\":1,\"1061\":2,\"1097\":1,\"1175\":3,\"1176\":2,\"1182\":2,\"1219\":1,\"1282\":1,\"1283\":1,\"1284\":16,\"1285\":7,\"1287\":3,\"1288\":2,\"1739\":2,\"1743\":2}}],[\"tests\",{\"1\":{\"8\":2,\"15\":2,\"26\":2,\"90\":1,\"91\":1,\"95\":4,\"100\":1,\"104\":1,\"109\":2,\"111\":1,\"113\":2,\"119\":3,\"121\":2,\"182\":1,\"183\":2,\"208\":2,\"410\":2,\"575\":1,\"577\":2,\"669\":2,\"679\":1,\"825\":1,\"861\":2,\"912\":1,\"1061\":2,\"1175\":4,\"1176\":2,\"1182\":2,\"1201\":1,\"1276\":1,\"1282\":2,\"1283\":2,\"1732\":1,\"1739\":2,\"1743\":2}}],[\"t\",{\"0\":{\"39\":1,\"57\":1,\"544\":1,\"869\":1},\"1\":{\"3\":5,\"8\":2,\"28\":1,\"36\":1,\"39\":2,\"40\":2,\"41\":1,\"46\":1,\"47\":3,\"48\":1,\"50\":3,\"52\":2,\"57\":2,\"59\":3,\"95\":1,\"108\":2,\"109\":1,\"111\":1,\"113\":4,\"115\":4,\"119\":1,\"121\":9,\"147\":1,\"153\":1,\"163\":1,\"176\":1,\"182\":2,\"208\":1,\"218\":1,\"235\":1,\"238\":1,\"244\":2,\"247\":1,\"252\":1,\"291\":1,\"345\":1,\"347\":5,\"354\":3,\"361\":3,\"431\":1,\"433\":1,\"438\":1,\"439\":1,\"440\":1,\"444\":1,\"445\":1,\"452\":1,\"480\":1,\"487\":1,\"520\":1,\"523\":1,\"541\":1,\"566\":1,\"591\":1,\"596\":1,\"653\":1,\"656\":2,\"676\":1,\"679\":1,\"702\":1,\"722\":1,\"727\":1,\"737\":1,\"758\":1,\"780\":2,\"781\":1,\"795\":2,\"801\":1,\"819\":1,\"825\":1,\"857\":1,\"859\":1,\"869\":1,\"912\":1,\"956\":1,\"962\":1,\"965\":1,\"1096\":1,\"1116\":1,\"1134\":2,\"1139\":1,\"1153\":1,\"1175\":2,\"1176\":1,\"1190\":2,\"1195\":1,\"1201\":1,\"1260\":1,\"1267\":1,\"1278\":1,\"1299\":1,\"1318\":1,\"1329\":2,\"1372\":1,\"1387\":1,\"1400\":1,\"1448\":1,\"1461\":1,\"1555\":1,\"1560\":1,\"1564\":1,\"1571\":2,\"1575\":3,\"1578\":1,\"1583\":2,\"1593\":1,\"1602\":1,\"1603\":1,\"1632\":1,\"1645\":1,\"1647\":1,\"1650\":1,\"1657\":1,\"1664\":1,\"1666\":1,\"1670\":1,\"1672\":1,\"1675\":1,\"1693\":2,\"1694\":1,\"1695\":1,\"1703\":1,\"1708\":1,\"1716\":1,\"1723\":1,\"1746\":1,\"1772\":2,\"1788\":1,\"1790\":1,\"1793\":1,\"1808\":1}}],[\"axis\",{\"1\":{\"1265\":1}}],[\"axe\",{\"1\":{\"468\":1}}],[\"a3b7\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a3b6\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a3b5\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a2b7\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a2b6\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a2b5\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a1b7\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a1b6\",{\"1\":{\"375\":1,\"1404\":1}}],[\"a1b5\",{\"1\":{\"375\":1,\"1404\":1}}],[\"akin\",{\"1\":{\"304\":1}}],[\"ahead\",{\"1\":{\"129\":1,\"391\":1,\"710\":1,\"785\":1,\"1097\":1,\"1708\":1}}],[\"aesthetic\",{\"1\":{\"95\":1}}],[\"aug\",{\"1\":{\"1449\":1}}],[\"august\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":2,\"1449\":1,\"1531\":2}}],[\"audio\",{\"1\":{\"1021\":1}}],[\"aux\",{\"1\":{\"865\":3,\"1260\":3,\"1267\":4,\"1484\":1}}],[\"authored\",{\"1\":{\"1728\":1}}],[\"author\",{\"1\":{\"1725\":1,\"1728\":1}}],[\"authors\",{\"1\":{\"46\":1}}],[\"autumn\",{\"1\":{\"1442\":1,\"1449\":1}}],[\"autodetect\",{\"1\":{\"929\":1}}],[\"autoquit\",{\"1\":{\"645\":1}}],[\"autoquit=60\",{\"1\":{\"645\":1}}],[\"autobranch\",{\"0\":{\"436\":1},\"1\":{\"431\":1,\"436\":2}}],[\"autocompleting\",{\"1\":{\"455\":1}}],[\"autocompletions\",{\"1\":{\"86\":1,\"89\":1,\"90\":3,\"95\":2,\"119\":1,\"167\":2,\"181\":3,\"182\":1,\"437\":1}}],[\"autocompletion\",{\"0\":{\"1280\":1,\"1719\":1},\"1\":{\"66\":1,\"103\":3,\"108\":1,\"115\":5,\"117\":1,\"121\":2,\"127\":1,\"128\":1,\"147\":1,\"170\":1,\"174\":1,\"182\":2,\"231\":2,\"428\":2,\"430\":1,\"433\":1,\"437\":2,\"438\":1,\"439\":2,\"440\":1,\"454\":1,\"525\":1,\"924\":1,\"1123\":1,\"1176\":1,\"1570\":1,\"1710\":1,\"1715\":1,\"1719\":1,\"1797\":3,\"1798\":1}}],[\"autocompleted\",{\"1\":{\"438\":1,\"439\":1}}],[\"autocompletes\",{\"1\":{\"93\":2,\"95\":1,\"437\":1,\"679\":1,\"825\":1,\"912\":1,\"1169\":1,\"1170\":1,\"1201\":1,\"1781\":1}}],[\"autocomplete\",{\"0\":{\"425\":1,\"430\":1,\"1797\":1,\"1798\":1},\"1\":{\"15\":1,\"26\":1,\"89\":2,\"94\":1,\"95\":1,\"96\":1,\"103\":1,\"108\":1,\"111\":3,\"112\":1,\"113\":3,\"114\":1,\"117\":4,\"118\":1,\"119\":5,\"120\":1,\"129\":1,\"138\":1,\"142\":2,\"150\":1,\"163\":1,\"167\":1,\"169\":1,\"177\":1,\"181\":1,\"183\":1,\"426\":1,\"427\":2,\"431\":1,\"434\":1,\"437\":1,\"440\":2,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"447\":5,\"452\":2,\"453\":2,\"526\":2,\"527\":1,\"528\":1,\"707\":1,\"713\":1,\"781\":1,\"954\":1,\"1121\":1,\"1123\":1,\"1171\":1,\"1176\":2,\"1179\":1,\"1182\":1,\"1213\":1,\"1280\":1,\"1281\":1,\"1337\":1,\"1672\":1,\"1675\":1,\"1719\":1,\"1727\":1,\"1782\":1,\"1795\":2,\"1798\":1,\"1799\":1,\"1800\":2,\"1804\":1}}],[\"automate\",{\"1\":{\"209\":1}}],[\"automated\",{\"1\":{\"8\":1,\"208\":1}}],[\"automatically\",{\"0\":{\"744\":1,\"757\":1,\"1642\":1},\"1\":{\"111\":1,\"119\":1,\"210\":1,\"244\":1,\"441\":1,\"445\":1,\"508\":1,\"755\":1,\"782\":1,\"992\":1,\"1020\":1,\"1022\":1,\"1176\":1,\"1287\":2,\"1369\":1,\"1554\":1,\"1559\":1,\"1561\":1,\"1731\":1,\"1787\":1,\"1798\":1}}],[\"automatic\",{\"1\":{\"66\":1,\"119\":1,\"170\":1,\"181\":1,\"445\":1,\"462\":1}}],[\"auto\",{\"0\":{\"445\":1,\"508\":1},\"1\":{\"15\":1,\"26\":1,\"95\":1,\"111\":6,\"119\":1,\"121\":1,\"129\":1,\"162\":2,\"238\":1,\"431\":2,\"446\":1,\"462\":1,\"508\":2,\"520\":1,\"553\":1,\"558\":1,\"743\":1,\"756\":1,\"783\":1,\"993\":1,\"1040\":1,\"1041\":1,\"1278\":1,\"1284\":2,\"1287\":2,\"1641\":1,\"1713\":1,\"1720\":1,\"1738\":1}}],[\"autoglob\",{\"0\":{\"458\":1},\"1\":{\"15\":1,\"26\":1,\"93\":1,\"115\":1,\"116\":1}}],[\"aforementioned\",{\"1\":{\"497\":1,\"1355\":1,\"1716\":1}}],[\"affected\",{\"1\":{\"108\":1,\"113\":2,\"1571\":1,\"1575\":1,\"1583\":1}}],[\"affects\",{\"1\":{\"103\":1,\"437\":1}}],[\"affect\",{\"1\":{\"95\":1,\"121\":1,\"519\":1,\"596\":1,\"1161\":1}}],[\"afraid\",{\"1\":{\"52\":1}}],[\"afterwards\",{\"1\":{\"433\":1}}],[\"after\",{\"1\":{\"46\":1,\"95\":2,\"108\":1,\"113\":1,\"121\":1,\"123\":1,\"162\":2,\"174\":1,\"182\":1,\"437\":1,\"989\":1,\"1113\":1,\"1115\":1,\"1347\":1,\"1377\":2,\"1378\":2,\"1384\":1,\"1712\":1,\"1719\":1,\"1737\":1,\"1747\":1,\"1803\":1,\"1805\":2}}],[\"availability\",{\"1\":{\"1629\":1}}],[\"available\",{\"1\":{\"15\":1,\"19\":1,\"26\":1,\"41\":1,\"43\":1,\"69\":1,\"103\":3,\"131\":1,\"139\":1,\"190\":1,\"214\":1,\"243\":1,\"403\":1,\"553\":1,\"554\":1,\"555\":1,\"679\":1,\"825\":1,\"912\":1,\"953\":1,\"993\":1,\"1044\":1,\"1176\":1,\"1201\":1,\"1261\":1,\"1284\":1,\"1372\":1,\"1451\":1,\"1531\":1,\"1546\":1,\"1629\":1,\"1716\":1,\"1717\":1,\"1718\":1,\"1798\":1,\"1801\":1}}],[\"avoid\",{\"1\":{\"51\":1,\"100\":1,\"121\":1,\"127\":1,\"260\":1,\"268\":1,\"275\":1,\"282\":1,\"289\":1,\"296\":1,\"303\":1,\"310\":1,\"607\":1,\"907\":1}}],[\"amazonaws\",{\"1\":{\"1629\":1}}],[\"amp\",{\"1\":{\"633\":2}}],[\"amongst\",{\"1\":{\"113\":1,\"421\":1}}],[\"amount\",{\"1\":{\"48\":1,\"52\":1,\"433\":1}}],[\"ambiguous\",{\"1\":{\"109\":1,\"121\":1}}],[\"amd64\",{\"1\":{\"9\":1,\"190\":2,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"201\":4,\"202\":1,\"552\":1,\"1634\":1}}],[\"amd\",{\"1\":{\"2\":1}}],[\"aim\",{\"1\":{\"181\":1,\"459\":1}}],[\"aims\",{\"1\":{\"51\":1,\"421\":1,\"560\":1}}],[\"aimed\",{\"1\":{\"47\":1,\"108\":1}}],[\"ain\",{\"1\":{\"28\":1,\"758\":1,\"1603\":1,\"1632\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1694\":1,\"1695\":1}}],[\"administrating\",{\"1\":{\"977\":1,\"1729\":1}}],[\"adhere\",{\"1\":{\"737\":1,\"1753\":1}}],[\"adopt\",{\"1\":{\"309\":1}}],[\"adapted\",{\"1\":{\"208\":1}}],[\"adjusted\",{\"1\":{\"95\":1}}],[\"adjacent\",{\"1\":{\"76\":1,\"117\":1}}],[\"advanced\",{\"0\":{\"375\":1,\"1404\":1},\"1\":{\"214\":1,\"387\":1}}],[\"advancements\",{\"1\":{\"46\":1,\"69\":1,\"131\":1}}],[\"advantage\",{\"1\":{\"111\":1,\"605\":1,\"782\":1,\"905\":1,\"999\":1,\"1058\":1,\"1219\":1,\"1509\":1,\"1647\":1,\"1654\":1,\"1664\":1}}],[\"advantages\",{\"1\":{\"50\":1,\"743\":1,\"756\":1,\"1641\":1}}],[\"addition\",{\"1\":{\"113\":1,\"142\":1,\"214\":1,\"605\":1,\"905\":1,\"1717\":1}}],[\"additionally\",{\"1\":{\"438\":1,\"1520\":1}}],[\"additional\",{\"1\":{\"40\":1,\"86\":1,\"113\":2,\"119\":2,\"121\":2,\"210\":1,\"229\":1,\"423\":2,\"441\":1,\"737\":1,\"747\":1,\"760\":1,\"873\":1,\"1021\":1,\"1161\":1,\"1270\":1,\"1359\":1,\"1385\":1,\"1401\":1,\"1432\":1,\"1487\":1,\"1654\":1,\"1797\":1,\"1798\":1}}],[\"adding\",{\"1\":{\"95\":1,\"108\":1,\"111\":1,\"115\":1,\"376\":1,\"397\":1,\"441\":1,\"513\":1,\"1564\":1,\"1723\":1}}],[\"added\",{\"1\":{\"47\":1,\"90\":1,\"91\":1,\"93\":2,\"95\":4,\"99\":1,\"100\":1,\"108\":1,\"109\":1,\"111\":2,\"113\":4,\"115\":5,\"119\":3,\"121\":4,\"123\":4,\"127\":4,\"128\":1,\"138\":1,\"142\":1,\"146\":1,\"150\":2,\"162\":5,\"163\":1,\"181\":2,\"211\":1,\"399\":1,\"1253\":1}}],[\"addresses\",{\"1\":{\"68\":1,\"160\":1}}],[\"addressing\",{\"1\":{\"49\":1,\"53\":1}}],[\"address\",{\"1\":{\"34\":1,\"45\":1,\"376\":1,\"1226\":7,\"1405\":1,\"1639\":1,\"1728\":1}}],[\"add\",{\"1\":{\"15\":2,\"26\":2,\"29\":1,\"90\":1,\"109\":1,\"113\":1,\"117\":1,\"122\":2,\"208\":1,\"209\":1,\"214\":1,\"354\":1,\"361\":1,\"369\":2,\"383\":2,\"404\":2,\"413\":1,\"419\":1,\"440\":1,\"442\":3,\"443\":4,\"444\":2,\"530\":1,\"548\":2,\"647\":1,\"677\":1,\"823\":1,\"884\":2,\"898\":2,\"904\":2,\"910\":1,\"940\":2,\"947\":2,\"960\":2,\"967\":2,\"999\":1,\"1058\":1,\"1078\":1,\"1084\":1,\"1118\":2,\"1137\":2,\"1175\":1,\"1199\":1,\"1219\":1,\"1262\":2,\"1268\":2,\"1361\":1,\"1369\":2,\"1704\":1,\"1719\":2,\"1787\":1,\"1790\":1,\"1794\":1}}],[\"adds\",{\"1\":{\"15\":1,\"26\":1,\"155\":1,\"379\":1,\"380\":1,\"419\":1,\"999\":1,\"1058\":1,\"1084\":1,\"1219\":1}}],[\"addheading\",{\"0\":{\"379\":1},\"1\":{\"15\":1,\"26\":1,\"111\":1,\"380\":2,\"381\":1,\"382\":1,\"419\":1,\"1084\":1}}],[\"aws\",{\"1\":{\"119\":2,\"1629\":4}}],[\"away\",{\"1\":{\"40\":1,\"42\":1,\"48\":1,\"1753\":1}}],[\"aware\",{\"1\":{\"15\":1,\"26\":1,\"104\":1,\"111\":1,\"121\":2,\"122\":1,\"154\":1,\"253\":1,\"264\":1,\"397\":1,\"417\":1,\"440\":1,\"530\":1,\"635\":1,\"641\":1,\"661\":1,\"755\":1,\"809\":1,\"810\":1,\"945\":1,\"962\":1,\"1024\":1,\"1070\":1,\"1082\":1,\"1103\":1,\"1128\":1,\"1135\":1,\"1400\":1,\"1403\":1,\"1417\":1,\"1444\":1,\"1448\":1,\"1600\":1}}],[\"awk\",{\"1\":{\"40\":1,\"48\":1}}],[\"abstricts\",{\"1\":{\"1798\":1}}],[\"abstract\",{\"1\":{\"1566\":1}}],[\"abstractions\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"absence\",{\"1\":{\"1773\":1}}],[\"absolute\",{\"1\":{\"506\":1,\"656\":1,\"1753\":1}}],[\"absorbed\",{\"1\":{\"468\":1}}],[\"abridged\",{\"1\":{\"972\":1}}],[\"abc\",{\"1\":{\"605\":2,\"905\":2,\"1764\":2,\"1765\":2}}],[\"abc==`123`\",{\"1\":{\"606\":1,\"906\":1}}],[\"abc==123\",{\"1\":{\"605\":7,\"905\":7}}],[\"abc=123\",{\"1\":{\"605\":4,\"606\":2,\"905\":4,\"906\":2}}],[\"abort\",{\"1\":{\"1377\":1}}],[\"above\",{\"0\":{\"1702\":1},\"1\":{\"41\":1,\"47\":1,\"103\":1,\"201\":1,\"202\":1,\"252\":1,\"443\":1,\"462\":1,\"474\":1,\"487\":2,\"534\":1,\"607\":1,\"682\":1,\"733\":1,\"778\":1,\"780\":1,\"828\":1,\"859\":1,\"868\":1,\"907\":1,\"915\":1,\"1141\":2,\"1155\":1,\"1204\":1,\"1579\":1,\"1702\":1,\"1703\":1,\"1708\":2,\"1712\":1,\"1716\":1,\"1724\":1,\"1737\":1,\"1753\":1,\"1776\":1,\"1787\":1}}],[\"about\",{\"1\":{\"23\":1,\"50\":1,\"54\":1,\"60\":1,\"87\":1,\"130\":1,\"155\":1,\"162\":1,\"164\":1,\"215\":1,\"235\":1,\"572\":1,\"695\":1,\"743\":1,\"756\":1,\"808\":1,\"815\":1,\"859\":1,\"954\":1,\"995\":1,\"1069\":1,\"1100\":1,\"1176\":1,\"1388\":1,\"1516\":1,\"1600\":1,\"1602\":1,\"1641\":1,\"1708\":1,\"1715\":1,\"1735\":1,\"1756\":1,\"1772\":1,\"1794\":1,\"1814\":1}}],[\"able\",{\"1\":{\"40\":1,\"50\":1,\"270\":1,\"277\":1,\"312\":1,\"315\":1,\"323\":1,\"330\":1,\"348\":1}}],[\"ability\",{\"1\":{\"38\":2,\"47\":1,\"56\":2,\"433\":1}}],[\"achive\",{\"1\":{\"1561\":1}}],[\"achieve\",{\"1\":{\"742\":1,\"1564\":1,\"1716\":1}}],[\"achieved\",{\"1\":{\"223\":1,\"238\":1}}],[\"achieves\",{\"1\":{\"51\":1}}],[\"achievable\",{\"1\":{\"53\":1}}],[\"accurate\",{\"1\":{\"882\":1}}],[\"accidentally\",{\"1\":{\"1350\":1,\"1538\":1}}],[\"accidental\",{\"1\":{\"228\":1,\"238\":1,\"1347\":1}}],[\"accessible\",{\"1\":{\"1403\":1}}],[\"accessing\",{\"1\":{\"127\":1,\"1772\":3}}],[\"accessed\",{\"1\":{\"1026\":1}}],[\"accept\",{\"1\":{\"423\":1,\"433\":1,\"442\":1}}],[\"accepts\",{\"1\":{\"397\":1}}],[\"acceptance\",{\"1\":{\"201\":1}}],[\"acts\",{\"1\":{\"579\":1,\"1339\":1}}],[\"actual\",{\"1\":{\"517\":1,\"605\":1,\"905\":1,\"1708\":1}}],[\"actually\",{\"1\":{\"38\":1,\"52\":1,\"56\":1,\"109\":1,\"121\":2,\"176\":1,\"597\":1,\"1601\":1}}],[\"activated\",{\"1\":{\"1800\":1}}],[\"active\",{\"1\":{\"382\":2,\"1276\":1}}],[\"action\",{\"1\":{\"1706\":1,\"1805\":1,\"1812\":1}}],[\"actions\",{\"1\":{\"23\":1,\"286\":1,\"300\":1,\"1629\":1,\"1706\":1,\"1748\":1,\"1771\":1}}],[\"across\",{\"1\":{\"1\":1,\"51\":1,\"121\":1,\"679\":1,\"754\":1,\"765\":1,\"825\":1,\"912\":1,\"1000\":1,\"1059\":1,\"1201\":1,\"1220\":1,\"1343\":1,\"1728\":2}}],[\"apt\",{\"1\":{\"1793\":1}}],[\"apr\",{\"1\":{\"1449\":1}}],[\"april\",{\"1\":{\"59\":2,\"1081\":1,\"1115\":1,\"1449\":1}}],[\"apart\",{\"1\":{\"695\":2,\"777\":1,\"791\":1,\"1095\":1,\"1186\":1}}],[\"apache\",{\"1\":{\"28\":1,\"1603\":1,\"1608\":1,\"1609\":1}}],[\"apis\",{\"1\":{\"103\":1,\"155\":1,\"263\":3,\"264\":3,\"272\":6,\"279\":6,\"284\":1,\"286\":6,\"293\":5,\"298\":1,\"300\":6,\"304\":1,\"306\":3,\"313\":5,\"320\":8,\"328\":7,\"335\":8,\"342\":7,\"349\":7,\"354\":1,\"356\":3,\"361\":1,\"363\":3,\"1601\":1}}],[\"api\",{\"0\":{\"30\":1,\"258\":1,\"264\":1,\"266\":1,\"273\":1,\"280\":1,\"287\":1,\"294\":1,\"301\":1,\"307\":1,\"314\":2,\"318\":1,\"322\":2,\"326\":1,\"329\":2,\"333\":1,\"336\":2,\"340\":1,\"343\":2,\"347\":1,\"350\":2,\"357\":2},\"1\":{\"21\":1,\"30\":7,\"90\":1,\"91\":1,\"100\":1,\"121\":1,\"259\":1,\"263\":2,\"265\":6,\"272\":2,\"279\":2,\"286\":2,\"300\":2,\"302\":1,\"306\":2,\"315\":2,\"320\":2,\"323\":2,\"328\":2,\"330\":2,\"335\":2,\"337\":1,\"342\":1,\"344\":1,\"349\":1,\"356\":1,\"363\":1,\"643\":1,\"755\":1,\"891\":2,\"1018\":1,\"1077\":2,\"1150\":2,\"1178\":2,\"1235\":2,\"1602\":1,\"1645\":2,\"1699\":2}}],[\"app\",{\"0\":{\"515\":1},\"1\":{\"512\":7,\"515\":1,\"516\":1,\"517\":1,\"526\":2,\"527\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1335\":2,\"1336\":2}}],[\"apply\",{\"1\":{\"780\":1,\"1554\":1,\"1559\":1,\"1561\":1,\"1800\":1}}],[\"appleevents\",{\"1\":{\"1484\":1}}],[\"applepay\",{\"1\":{\"1484\":1}}],[\"apples\",{\"1\":{\"217\":1,\"224\":1,\"248\":1,\"689\":2}}],[\"apple\",{\"1\":{\"201\":1,\"1799\":2,\"1802\":2}}],[\"applied\",{\"1\":{\"444\":1,\"514\":1,\"515\":1,\"1110\":1}}],[\"applies\",{\"1\":{\"108\":1,\"231\":1,\"391\":1,\"443\":1,\"459\":1,\"710\":1,\"785\":1,\"1097\":1}}],[\"applicable\",{\"1\":{\"209\":1}}],[\"applications\",{\"1\":{\"46\":1,\"50\":2}}],[\"application\",{\"1\":{\"3\":1,\"151\":1,\"989\":1,\"999\":2,\"1021\":1,\"1058\":2,\"1219\":2,\"1616\":2,\"1630\":2,\"1643\":2,\"1655\":10,\"1668\":10,\"1692\":2,\"1697\":2,\"1784\":1}}],[\"approximately\",{\"1\":{\"189\":1}}],[\"appropriate\",{\"1\":{\"113\":1,\"201\":1,\"208\":1,\"1300\":1}}],[\"approach\",{\"1\":{\"50\":1,\"52\":1,\"208\":1}}],[\"approaches\",{\"1\":{\"43\":1,\"216\":1}}],[\"appearance\",{\"1\":{\"454\":1}}],[\"appears\",{\"1\":{\"108\":1,\"109\":1,\"984\":1,\"1237\":1,\"1723\":1,\"1741\":1}}],[\"appear\",{\"1\":{\"50\":1,\"439\":1,\"545\":1,\"743\":1,\"756\":1,\"989\":1,\"1021\":1,\"1278\":1,\"1378\":2,\"1641\":1,\"1724\":1,\"1798\":1}}],[\"appearing\",{\"1\":{\"37\":1,\"108\":1}}],[\"appended\",{\"1\":{\"69\":1,\"131\":1,\"833\":1,\"1300\":1,\"1753\":1}}],[\"appending\",{\"1\":{\"15\":1,\"26\":1,\"95\":1,\"120\":1,\"398\":1,\"483\":1,\"618\":1,\"832\":1,\"843\":1,\"975\":1,\"1052\":1,\"1103\":1,\"1126\":1,\"1301\":1,\"1568\":1,\"1774\":1}}],[\"append\",{\"0\":{\"413\":1,\"832\":1,\"1563\":1},\"1\":{\"15\":2,\"24\":2,\"26\":2,\"111\":2,\"119\":1,\"120\":3,\"121\":1,\"122\":1,\"233\":1,\"312\":2,\"318\":2,\"326\":2,\"333\":2,\"340\":4,\"347\":13,\"369\":1,\"383\":1,\"404\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":2,\"418\":2,\"440\":2,\"483\":1,\"513\":2,\"530\":1,\"548\":1,\"618\":1,\"843\":1,\"884\":1,\"898\":1,\"940\":1,\"947\":1,\"960\":1,\"967\":1,\"975\":1,\"1052\":1,\"1082\":2,\"1084\":1,\"1103\":1,\"1118\":1,\"1126\":1,\"1137\":1,\"1262\":1,\"1268\":1,\"1301\":1,\"1306\":1,\"1502\":2,\"1563\":1,\"1564\":1,\"1568\":1,\"1772\":1,\"1774\":3,\"1790\":1,\"1794\":1}}],[\"atsserver\",{\"1\":{\"1484\":1}}],[\"atoi\",{\"1\":{\"340\":2,\"347\":6}}],[\"attach\",{\"1\":{\"1741\":1}}],[\"attached\",{\"1\":{\"231\":1}}],[\"attention\",{\"1\":{\"201\":1}}],[\"attempting\",{\"1\":{\"52\":1}}],[\"attempts\",{\"1\":{\"52\":1,\"208\":1}}],[\"attempt\",{\"1\":{\"47\":1}}],[\"at\",{\"1\":{\"15\":1,\"26\":1,\"30\":3,\"38\":1,\"40\":1,\"42\":1,\"43\":1,\"47\":1,\"53\":2,\"56\":1,\"62\":1,\"69\":1,\"86\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":2,\"100\":1,\"103\":1,\"104\":1,\"108\":2,\"109\":1,\"111\":1,\"113\":1,\"115\":1,\"117\":1,\"119\":1,\"120\":1,\"121\":1,\"123\":1,\"129\":1,\"131\":1,\"155\":1,\"159\":1,\"162\":3,\"163\":1,\"167\":1,\"168\":1,\"182\":1,\"198\":1,\"199\":1,\"202\":1,\"208\":2,\"227\":1,\"265\":3,\"266\":1,\"267\":1,\"272\":1,\"273\":1,\"274\":1,\"279\":1,\"286\":3,\"288\":1,\"293\":3,\"300\":3,\"307\":1,\"308\":1,\"313\":2,\"320\":3,\"328\":2,\"335\":3,\"342\":3,\"349\":3,\"391\":1,\"403\":1,\"431\":1,\"502\":1,\"596\":1,\"680\":1,\"710\":1,\"742\":1,\"755\":1,\"758\":1,\"780\":1,\"785\":1,\"826\":1,\"882\":1,\"913\":1,\"977\":1,\"1035\":1,\"1096\":1,\"1097\":1,\"1139\":1,\"1160\":1,\"1169\":1,\"1170\":1,\"1202\":1,\"1261\":1,\"1321\":1,\"1325\":1,\"1331\":1,\"1372\":1,\"1401\":1,\"1416\":1,\"1432\":1,\"1487\":1,\"1488\":1,\"1531\":1,\"1546\":1,\"1612\":1,\"1632\":2,\"1645\":3,\"1654\":1,\"1657\":2,\"1659\":1,\"1670\":2,\"1694\":2,\"1699\":2,\"1708\":1,\"1718\":1,\"1725\":1,\"1729\":1,\"1731\":1,\"1735\":1,\"1746\":1,\"1760\":1,\"1774\":1,\"1778\":1,\"1779\":1,\"1799\":6,\"1802\":7,\"1805\":2,\"1812\":1}}],[\"age++\",{\"1\":{\"902\":1}}],[\"age=18\",{\"1\":{\"603\":3,\"902\":1}}],[\"agents\",{\"1\":{\"516\":1,\"1029\":1,\"1175\":1,\"1176\":1,\"1781\":1}}],[\"agent\",{\"0\":{\"1022\":1},\"1\":{\"515\":1,\"808\":2,\"815\":2,\"1022\":3,\"1069\":2,\"1175\":4,\"1710\":1}}],[\"age\",{\"1\":{\"119\":1,\"224\":1,\"249\":4,\"382\":2,\"603\":3,\"677\":2,\"762\":5,\"782\":8,\"823\":2,\"902\":1,\"910\":2,\"1199\":2,\"1226\":3,\"1639\":1,\"1772\":4}}],[\"again\",{\"1\":{\"47\":1,\"50\":1}}],[\"against\",{\"1\":{\"15\":1,\"26\":1,\"90\":2,\"95\":2,\"103\":1,\"111\":1,\"117\":1,\"119\":1,\"129\":1,\"174\":1,\"182\":1,\"238\":1,\"249\":1,\"626\":1,\"764\":1,\"945\":1,\"983\":1,\"1021\":1,\"1128\":1,\"1135\":1,\"1178\":1,\"1213\":1,\"1248\":1,\"1276\":1,\"1327\":1,\"1337\":1,\"1347\":1,\"1482\":1,\"1484\":1,\"1617\":1,\"1625\":1,\"1631\":2,\"1644\":2,\"1656\":2,\"1669\":2,\"1693\":2,\"1698\":2,\"1732\":1}}],[\"agnostic\",{\"1\":{\"15\":1,\"26\":1,\"267\":1,\"274\":1,\"281\":1,\"284\":1,\"288\":1,\"295\":1,\"298\":1,\"308\":1,\"337\":1,\"344\":1,\"369\":1,\"383\":1,\"419\":1,\"548\":1,\"884\":1,\"898\":1,\"947\":1,\"955\":1,\"967\":1,\"999\":1,\"1058\":1,\"1084\":1,\"1137\":1,\"1219\":1}}],[\"analogy\",{\"1\":{\"1746\":1}}],[\"analysis\",{\"1\":{\"1610\":1}}],[\"analyticsd\",{\"1\":{\"1484\":1}}],[\"ancestral\",{\"1\":{\"1746\":1}}],[\"answer\",{\"1\":{\"743\":1,\"756\":1,\"1641\":1,\"1728\":1}}],[\"ansi\",{\"0\":{\"481\":1,\"617\":1,\"648\":1,\"1050\":1,\"1546\":1,\"1700\":1,\"1704\":1,\"1786\":1},\"1\":{\"23\":2,\"108\":1,\"110\":2,\"129\":1,\"481\":1,\"483\":2,\"617\":1,\"618\":2,\"648\":1,\"743\":1,\"756\":1,\"1010\":1,\"1050\":1,\"1052\":2,\"1306\":1,\"1307\":2,\"1546\":2,\"1547\":2,\"1641\":1,\"1700\":3,\"1701\":2,\"1709\":2,\"1724\":1,\"1727\":2,\"1786\":1,\"1794\":2}}],[\"angle\",{\"1\":{\"232\":1,\"1742\":1}}],[\"anti\",{\"1\":{\"153\":1}}],[\"annotating\",{\"1\":{\"234\":1}}],[\"annotations\",{\"0\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1},\"1\":{\"41\":2,\"42\":1,\"59\":2,\"214\":1,\"677\":2,\"823\":2,\"910\":2,\"1199\":2}}],[\"annotate\",{\"1\":{\"60\":1,\"227\":1,\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"annoying\",{\"1\":{\"47\":1,\"121\":1,\"459\":1}}],[\"another\",{\"1\":{\"3\":1,\"15\":2,\"26\":2,\"38\":1,\"40\":1,\"50\":1,\"56\":1,\"77\":1,\"90\":1,\"108\":1,\"115\":1,\"142\":1,\"236\":1,\"393\":1,\"404\":1,\"432\":1,\"495\":1,\"509\":1,\"519\":1,\"643\":1,\"713\":1,\"758\":1,\"767\":1,\"768\":1,\"787\":1,\"814\":1,\"958\":1,\"978\":1,\"999\":3,\"1043\":1,\"1058\":3,\"1089\":1,\"1091\":1,\"1098\":1,\"1111\":1,\"1182\":2,\"1208\":1,\"1209\":1,\"1219\":3,\"1262\":1,\"1268\":1,\"1281\":1,\"1295\":1,\"1307\":1,\"1313\":1,\"1337\":1,\"1403\":1,\"1448\":1,\"1489\":1,\"1497\":1,\"1513\":2,\"1580\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1714\":1,\"1719\":1,\"1739\":1,\"1747\":1,\"1782\":1,\"1784\":1}}],[\"anywhere\",{\"1\":{\"1778\":1}}],[\"anyway\",{\"1\":{\"48\":1,\"1620\":1}}],[\"anyvalue\",{\"0\":{\"435\":1},\"1\":{\"431\":1,\"440\":1}}],[\"anything\",{\"1\":{\"176\":1,\"252\":1,\"795\":1,\"924\":1,\"1190\":1,\"1747\":1,\"1750\":1,\"1776\":1,\"1781\":1}}],[\"anyone\",{\"1\":{\"48\":1,\"113\":1,\"121\":1,\"1733\":2}}],[\"any\",{\"0\":{\"444\":1,\"524\":1},\"1\":{\"3\":1,\"8\":1,\"10\":2,\"14\":1,\"30\":1,\"47\":1,\"50\":1,\"51\":1,\"64\":1,\"71\":1,\"90\":2,\"103\":1,\"108\":1,\"109\":1,\"111\":1,\"113\":3,\"115\":1,\"119\":2,\"121\":1,\"123\":1,\"126\":1,\"153\":2,\"162\":2,\"163\":1,\"182\":1,\"199\":1,\"208\":3,\"218\":1,\"219\":1,\"224\":1,\"225\":1,\"226\":1,\"231\":1,\"232\":2,\"238\":1,\"244\":1,\"248\":1,\"264\":1,\"315\":1,\"323\":1,\"330\":1,\"347\":2,\"354\":1,\"361\":1,\"387\":1,\"391\":2,\"395\":1,\"402\":2,\"403\":1,\"423\":1,\"431\":1,\"433\":1,\"438\":3,\"439\":1,\"440\":4,\"441\":1,\"443\":1,\"445\":1,\"447\":1,\"450\":2,\"451\":1,\"452\":2,\"459\":1,\"472\":1,\"474\":1,\"511\":1,\"515\":1,\"516\":1,\"518\":2,\"595\":1,\"596\":1,\"605\":1,\"616\":1,\"626\":1,\"643\":1,\"656\":3,\"679\":8,\"695\":2,\"696\":1,\"710\":2,\"722\":2,\"727\":2,\"730\":1,\"733\":4,\"754\":1,\"755\":2,\"760\":1,\"764\":1,\"765\":1,\"777\":1,\"779\":1,\"780\":2,\"781\":1,\"785\":2,\"791\":1,\"793\":2,\"794\":1,\"795\":1,\"819\":1,\"825\":8,\"867\":1,\"882\":4,\"905\":1,\"912\":8,\"924\":2,\"929\":1,\"942\":1,\"951\":1,\"953\":2,\"962\":1,\"965\":1,\"981\":1,\"986\":1,\"999\":3,\"1016\":1,\"1033\":1,\"1058\":3,\"1095\":1,\"1097\":2,\"1141\":1,\"1142\":1,\"1153\":1,\"1155\":1,\"1170\":1,\"1176\":2,\"1186\":1,\"1189\":1,\"1190\":1,\"1195\":1,\"1201\":8,\"1219\":3,\"1226\":1,\"1276\":1,\"1278\":3,\"1294\":1,\"1300\":1,\"1321\":2,\"1324\":2,\"1327\":1,\"1330\":2,\"1335\":1,\"1343\":1,\"1369\":1,\"1402\":1,\"1407\":1,\"1421\":1,\"1455\":1,\"1487\":2,\"1489\":1,\"1542\":2,\"1575\":1,\"1593\":1,\"1601\":3,\"1614\":1,\"1620\":1,\"1624\":1,\"1647\":1,\"1664\":1,\"1674\":1,\"1677\":1,\"1708\":2,\"1713\":1,\"1717\":1,\"1719\":2,\"1731\":3,\"1738\":1,\"1744\":2,\"1750\":3,\"1773\":1,\"1776\":1,\"1777\":1,\"1781\":1,\"1791\":3,\"1798\":5,\"1808\":1}}],[\"an\",{\"0\":{\"390\":1},\"1\":{\"3\":3,\"12\":1,\"15\":17,\"23\":1,\"24\":1,\"26\":17,\"29\":1,\"30\":2,\"44\":2,\"47\":2,\"59\":1,\"60\":1,\"63\":1,\"86\":1,\"87\":1,\"90\":2,\"92\":1,\"94\":1,\"95\":2,\"96\":1,\"103\":1,\"107\":2,\"110\":3,\"111\":1,\"113\":2,\"115\":1,\"117\":4,\"118\":3,\"119\":2,\"121\":3,\"122\":6,\"127\":1,\"147\":1,\"153\":1,\"163\":1,\"164\":3,\"183\":1,\"202\":1,\"216\":1,\"217\":3,\"224\":1,\"229\":1,\"231\":1,\"244\":2,\"248\":1,\"251\":1,\"259\":2,\"260\":1,\"261\":1,\"265\":2,\"271\":1,\"272\":2,\"278\":1,\"279\":2,\"286\":3,\"300\":3,\"302\":2,\"303\":1,\"314\":1,\"315\":1,\"322\":1,\"323\":1,\"329\":1,\"330\":1,\"342\":2,\"349\":2,\"369\":7,\"370\":1,\"375\":2,\"378\":5,\"383\":10,\"384\":1,\"385\":1,\"387\":1,\"390\":1,\"391\":2,\"393\":2,\"398\":1,\"400\":1,\"404\":5,\"413\":1,\"414\":1,\"419\":11,\"421\":1,\"430\":1,\"431\":1,\"432\":1,\"436\":1,\"438\":2,\"439\":2,\"445\":2,\"447\":2,\"454\":1,\"457\":3,\"465\":1,\"469\":1,\"475\":1,\"485\":1,\"487\":1,\"489\":1,\"499\":1,\"507\":2,\"513\":1,\"526\":1,\"530\":6,\"536\":1,\"541\":1,\"544\":2,\"548\":9,\"568\":1,\"569\":1,\"584\":1,\"585\":1,\"586\":1,\"590\":1,\"591\":2,\"593\":1,\"596\":2,\"599\":4,\"611\":4,\"624\":1,\"625\":1,\"626\":1,\"629\":3,\"635\":1,\"641\":1,\"643\":1,\"645\":2,\"647\":1,\"652\":1,\"653\":1,\"655\":1,\"656\":1,\"657\":1,\"664\":1,\"670\":1,\"671\":1,\"675\":1,\"676\":1,\"677\":3,\"681\":1,\"710\":2,\"711\":1,\"713\":2,\"718\":1,\"723\":1,\"728\":1,\"731\":1,\"735\":1,\"743\":3,\"745\":2,\"746\":1,\"747\":1,\"748\":2,\"751\":2,\"752\":2,\"755\":1,\"756\":3,\"758\":2,\"763\":1,\"766\":3,\"780\":1,\"782\":1,\"785\":2,\"787\":3,\"795\":1,\"797\":2,\"809\":3,\"823\":3,\"827\":1,\"831\":4,\"862\":2,\"863\":2,\"865\":1,\"869\":2,\"871\":3,\"877\":6,\"882\":1,\"884\":8,\"891\":1,\"893\":1,\"894\":1,\"897\":1,\"898\":8,\"910\":3,\"914\":1,\"917\":4,\"924\":2,\"934\":1,\"940\":6,\"941\":2,\"942\":1,\"947\":5,\"953\":2,\"954\":1,\"955\":1,\"960\":7,\"961\":1,\"965\":1,\"967\":5,\"972\":1,\"982\":2,\"1002\":1,\"1010\":1,\"1024\":2,\"1027\":3,\"1031\":1,\"1061\":2,\"1070\":3,\"1077\":1,\"1078\":1,\"1079\":1,\"1084\":9,\"1097\":2,\"1098\":3,\"1110\":1,\"1118\":6,\"1128\":1,\"1137\":7,\"1141\":2,\"1150\":1,\"1161\":1,\"1174\":1,\"1178\":1,\"1179\":1,\"1182\":4,\"1190\":1,\"1192\":2,\"1199\":3,\"1203\":1,\"1207\":5,\"1209\":2,\"1213\":1,\"1222\":2,\"1226\":1,\"1228\":3,\"1235\":1,\"1241\":1,\"1245\":3,\"1251\":1,\"1252\":1,\"1262\":5,\"1268\":5,\"1269\":1,\"1274\":5,\"1281\":3,\"1284\":1,\"1291\":1,\"1295\":1,\"1297\":1,\"1345\":1,\"1346\":1,\"1360\":1,\"1386\":2,\"1387\":1,\"1388\":1,\"1400\":1,\"1401\":2,\"1404\":2,\"1410\":5,\"1422\":6,\"1430\":5,\"1432\":2,\"1438\":5,\"1450\":6,\"1451\":1,\"1453\":1,\"1458\":1,\"1463\":1,\"1465\":1,\"1469\":1,\"1471\":1,\"1474\":1,\"1476\":1,\"1482\":1,\"1487\":1,\"1489\":1,\"1493\":1,\"1497\":1,\"1500\":1,\"1502\":1,\"1503\":1,\"1504\":1,\"1505\":2,\"1506\":1,\"1518\":1,\"1536\":2,\"1538\":1,\"1547\":1,\"1552\":1,\"1555\":1,\"1560\":1,\"1566\":1,\"1589\":1,\"1592\":2,\"1594\":1,\"1599\":1,\"1610\":1,\"1611\":2,\"1612\":3,\"1618\":3,\"1626\":3,\"1628\":1,\"1632\":3,\"1634\":1,\"1636\":3,\"1641\":3,\"1645\":5,\"1654\":1,\"1657\":4,\"1670\":4,\"1672\":1,\"1674\":2,\"1675\":3,\"1679\":3,\"1688\":3,\"1690\":1,\"1694\":3,\"1696\":1,\"1699\":5,\"1708\":1,\"1713\":1,\"1714\":2,\"1716\":1,\"1719\":1,\"1721\":1,\"1728\":5,\"1732\":1,\"1738\":1,\"1741\":2,\"1753\":1,\"1754\":2,\"1756\":1,\"1771\":3,\"1772\":7,\"1773\":1,\"1774\":4,\"1780\":2,\"1781\":1,\"1782\":1,\"1788\":1,\"1789\":1,\"1793\":1,\"1794\":1,\"1798\":1,\"1800\":1,\"1808\":1,\"1811\":1}}],[\"and\",{\"0\":{\"24\":1,\"38\":1,\"217\":1,\"218\":1,\"230\":1,\"405\":1,\"568\":1,\"1000\":2,\"1059\":2,\"1220\":2,\"1250\":1,\"1399\":1,\"1527\":1,\"1529\":1,\"1553\":1,\"1728\":1,\"1729\":1,\"1730\":1,\"1780\":1},\"1\":{\"0\":1,\"2\":1,\"3\":2,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"10\":1,\"15\":20,\"21\":3,\"23\":6,\"24\":3,\"26\":20,\"28\":1,\"30\":5,\"31\":1,\"34\":2,\"36\":1,\"37\":2,\"38\":4,\"39\":1,\"40\":5,\"41\":4,\"42\":2,\"43\":3,\"45\":2,\"46\":3,\"47\":7,\"48\":8,\"50\":4,\"51\":6,\"52\":2,\"53\":4,\"54\":1,\"56\":4,\"57\":3,\"59\":4,\"62\":1,\"64\":1,\"66\":1,\"68\":1,\"69\":1,\"70\":2,\"71\":1,\"72\":2,\"73\":1,\"74\":1,\"75\":1,\"79\":1,\"80\":1,\"83\":1,\"84\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":1,\"90\":4,\"91\":1,\"92\":3,\"93\":5,\"94\":5,\"95\":4,\"96\":2,\"100\":1,\"102\":1,\"103\":5,\"104\":3,\"106\":1,\"107\":1,\"108\":10,\"109\":2,\"110\":5,\"111\":8,\"112\":3,\"113\":4,\"115\":4,\"116\":2,\"117\":2,\"119\":7,\"120\":2,\"121\":8,\"122\":1,\"123\":1,\"124\":1,\"125\":2,\"127\":3,\"128\":1,\"129\":3,\"130\":1,\"131\":1,\"139\":1,\"142\":1,\"147\":1,\"154\":1,\"155\":1,\"160\":1,\"162\":2,\"164\":1,\"166\":1,\"167\":1,\"168\":1,\"170\":1,\"176\":1,\"181\":2,\"182\":2,\"183\":3,\"190\":1,\"198\":1,\"199\":1,\"201\":2,\"202\":2,\"204\":2,\"207\":1,\"208\":7,\"211\":2,\"214\":4,\"216\":3,\"217\":3,\"218\":3,\"220\":1,\"223\":1,\"224\":1,\"226\":1,\"228\":1,\"231\":3,\"232\":3,\"236\":1,\"237\":5,\"238\":1,\"239\":1,\"244\":1,\"251\":2,\"253\":1,\"259\":2,\"265\":5,\"267\":1,\"270\":1,\"272\":3,\"273\":2,\"274\":1,\"277\":1,\"279\":3,\"281\":1,\"284\":1,\"286\":2,\"287\":1,\"288\":1,\"292\":1,\"293\":2,\"295\":1,\"297\":1,\"298\":1,\"300\":2,\"302\":2,\"308\":1,\"312\":1,\"313\":3,\"314\":1,\"315\":1,\"320\":3,\"322\":1,\"323\":1,\"328\":1,\"329\":1,\"330\":1,\"335\":3,\"337\":1,\"340\":1,\"342\":3,\"344\":1,\"347\":2,\"349\":3,\"354\":1,\"361\":1,\"371\":1,\"372\":1,\"380\":1,\"387\":1,\"389\":1,\"391\":5,\"393\":4,\"394\":1,\"395\":2,\"397\":1,\"399\":1,\"407\":3,\"408\":1,\"409\":2,\"410\":7,\"411\":2,\"412\":3,\"417\":1,\"421\":1,\"423\":2,\"426\":1,\"432\":3,\"433\":1,\"436\":1,\"437\":2,\"438\":1,\"439\":1,\"440\":3,\"441\":1,\"442\":1,\"443\":2,\"445\":1,\"446\":2,\"447\":2,\"448\":2,\"450\":1,\"452\":2,\"453\":3,\"459\":3,\"462\":2,\"465\":1,\"468\":2,\"469\":2,\"471\":1,\"483\":2,\"485\":1,\"495\":1,\"497\":1,\"500\":1,\"502\":1,\"508\":1,\"511\":2,\"518\":2,\"524\":1,\"526\":6,\"530\":2,\"532\":1,\"541\":2,\"544\":2,\"545\":1,\"548\":1,\"559\":2,\"560\":1,\"562\":1,\"563\":1,\"566\":1,\"571\":1,\"577\":1,\"579\":1,\"593\":1,\"596\":1,\"597\":1,\"601\":1,\"605\":1,\"606\":3,\"608\":1,\"611\":6,\"616\":1,\"618\":2,\"620\":2,\"626\":1,\"631\":2,\"635\":2,\"637\":2,\"641\":2,\"643\":2,\"655\":1,\"657\":1,\"659\":1,\"661\":1,\"669\":1,\"670\":1,\"675\":1,\"677\":1,\"678\":1,\"679\":4,\"682\":1,\"683\":1,\"685\":4,\"690\":2,\"692\":1,\"694\":1,\"703\":3,\"710\":5,\"711\":1,\"715\":1,\"722\":2,\"727\":2,\"732\":2,\"733\":2,\"735\":1,\"737\":1,\"742\":2,\"743\":4,\"745\":2,\"747\":1,\"748\":2,\"751\":1,\"755\":2,\"756\":4,\"758\":2,\"764\":3,\"766\":1,\"768\":1,\"771\":1,\"774\":1,\"779\":2,\"780\":4,\"781\":1,\"782\":2,\"785\":5,\"787\":4,\"789\":1,\"795\":3,\"802\":3,\"803\":1,\"808\":3,\"809\":1,\"810\":1,\"814\":1,\"815\":2,\"816\":1,\"817\":1,\"819\":2,\"823\":1,\"824\":1,\"825\":4,\"828\":1,\"829\":1,\"831\":4,\"837\":1,\"843\":1,\"857\":1,\"861\":5,\"865\":6,\"879\":1,\"882\":3,\"886\":2,\"894\":1,\"897\":1,\"899\":1,\"900\":1,\"904\":1,\"905\":1,\"906\":3,\"908\":1,\"910\":1,\"911\":1,\"912\":4,\"915\":1,\"916\":1,\"917\":4,\"918\":1,\"919\":1,\"920\":1,\"924\":1,\"929\":1,\"932\":1,\"937\":2,\"940\":1,\"942\":2,\"945\":1,\"949\":1,\"956\":1,\"960\":1,\"962\":2,\"965\":2,\"975\":2,\"977\":3,\"981\":2,\"982\":2,\"986\":2,\"989\":2,\"999\":5,\"1003\":2,\"1004\":2,\"1008\":1,\"1010\":2,\"1020\":2,\"1021\":1,\"1022\":4,\"1023\":1,\"1024\":2,\"1026\":2,\"1029\":1,\"1031\":3,\"1037\":2,\"1039\":4,\"1052\":4,\"1054\":1,\"1058\":5,\"1061\":1,\"1067\":1,\"1069\":2,\"1070\":2,\"1072\":1,\"1082\":1,\"1086\":1,\"1089\":1,\"1091\":1,\"1093\":1,\"1097\":5,\"1098\":4,\"1099\":1,\"1102\":1,\"1103\":2,\"1105\":1,\"1107\":2,\"1108\":1,\"1110\":1,\"1111\":2,\"1113\":1,\"1116\":1,\"1118\":1,\"1119\":1,\"1126\":2,\"1128\":1,\"1131\":1,\"1135\":1,\"1139\":1,\"1145\":2,\"1153\":1,\"1155\":1,\"1161\":2,\"1171\":2,\"1176\":5,\"1178\":1,\"1179\":1,\"1180\":3,\"1182\":5,\"1184\":1,\"1190\":3,\"1193\":1,\"1195\":1,\"1199\":1,\"1200\":1,\"1201\":4,\"1204\":1,\"1205\":1,\"1207\":4,\"1215\":1,\"1219\":5,\"1226\":1,\"1228\":1,\"1230\":1,\"1244\":1,\"1245\":1,\"1249\":1,\"1250\":3,\"1254\":1,\"1255\":6,\"1257\":1,\"1262\":1,\"1268\":2,\"1270\":1,\"1276\":3,\"1278\":2,\"1282\":1,\"1283\":1,\"1291\":1,\"1294\":2,\"1296\":1,\"1302\":1,\"1308\":1,\"1309\":1,\"1313\":2,\"1319\":3,\"1325\":1,\"1326\":1,\"1327\":1,\"1336\":1,\"1339\":2,\"1345\":3,\"1347\":1,\"1359\":1,\"1372\":2,\"1377\":1,\"1381\":1,\"1385\":1,\"1386\":1,\"1388\":1,\"1400\":4,\"1401\":1,\"1403\":2,\"1408\":1,\"1413\":1,\"1416\":2,\"1422\":2,\"1425\":1,\"1432\":1,\"1433\":1,\"1441\":1,\"1448\":1,\"1450\":2,\"1451\":1,\"1482\":1,\"1487\":1,\"1488\":1,\"1491\":2,\"1498\":1,\"1502\":3,\"1505\":3,\"1507\":1,\"1509\":2,\"1513\":4,\"1516\":1,\"1518\":1,\"1520\":3,\"1536\":1,\"1537\":1,\"1538\":2,\"1542\":1,\"1546\":2,\"1547\":2,\"1549\":1,\"1552\":1,\"1557\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1570\":1,\"1571\":1,\"1574\":1,\"1575\":1,\"1583\":1,\"1586\":1,\"1589\":1,\"1591\":1,\"1592\":3,\"1593\":3,\"1594\":2,\"1599\":1,\"1601\":2,\"1603\":1,\"1611\":2,\"1612\":1,\"1613\":1,\"1628\":2,\"1632\":1,\"1638\":1,\"1641\":4,\"1644\":1,\"1645\":5,\"1647\":2,\"1648\":1,\"1649\":1,\"1651\":1,\"1654\":2,\"1657\":2,\"1659\":1,\"1661\":1,\"1664\":2,\"1665\":1,\"1666\":3,\"1667\":1,\"1670\":2,\"1672\":3,\"1690\":1,\"1691\":1,\"1694\":1,\"1696\":1,\"1699\":3,\"1701\":2,\"1702\":2,\"1705\":1,\"1706\":3,\"1707\":4,\"1708\":7,\"1710\":4,\"1712\":3,\"1713\":1,\"1714\":2,\"1716\":3,\"1719\":5,\"1724\":1,\"1725\":1,\"1727\":1,\"1728\":5,\"1729\":3,\"1731\":2,\"1732\":1,\"1735\":2,\"1737\":3,\"1738\":1,\"1739\":2,\"1741\":6,\"1742\":1,\"1743\":1,\"1746\":2,\"1747\":2,\"1752\":2,\"1753\":3,\"1754\":3,\"1755\":1,\"1756\":1,\"1764\":1,\"1771\":5,\"1772\":3,\"1773\":4,\"1774\":4,\"1777\":1,\"1778\":1,\"1779\":1,\"1780\":3,\"1781\":2,\"1782\":2,\"1789\":2,\"1791\":1,\"1793\":2,\"1794\":2,\"1795\":1,\"1798\":3,\"1801\":1,\"1802\":2,\"1808\":1,\"1814\":1}}],[\"asynchronously\",{\"1\":{\"999\":1,\"1058\":1,\"1219\":1}}],[\"asked\",{\"1\":{\"211\":1}}],[\"asts\",{\"1\":{\"1176\":1,\"1708\":4}}],[\"astcache\",{\"1\":{\"1175\":1,\"1176\":1}}],[\"asterisks\",{\"1\":{\"223\":1}}],[\"ast\",{\"1\":{\"115\":1,\"1708\":4}}],[\"associations\",{\"0\":{\"1616\":1,\"1630\":1,\"1643\":1,\"1655\":1,\"1668\":1,\"1692\":1,\"1697\":1}}],[\"associated\",{\"1\":{\"1027\":1,\"1708\":1}}],[\"assetcache\",{\"1\":{\"1484\":1}}],[\"assuming\",{\"1\":{\"208\":1}}],[\"assumerole\",{\"1\":{\"1629\":1}}],[\"assume\",{\"1\":{\"682\":1,\"762\":1,\"819\":2,\"828\":1,\"915\":1,\"1195\":1,\"1204\":1,\"1629\":1}}],[\"assumed\",{\"1\":{\"113\":1,\"121\":1,\"1020\":1,\"1244\":1,\"1798\":1}}],[\"assumes\",{\"1\":{\"108\":1,\"217\":1,\"244\":1,\"1747\":1}}],[\"assigning\",{\"1\":{\"1773\":1}}],[\"assignments\",{\"1\":{\"225\":1}}],[\"assignment\",{\"1\":{\"217\":1,\"225\":1,\"1772\":1}}],[\"assignees\",{\"1\":{\"127\":1}}],[\"assigned\",{\"1\":{\"61\":1,\"226\":1,\"402\":1,\"423\":1,\"1755\":1,\"1797\":1,\"1798\":1,\"1799\":1,\"1808\":1}}],[\"assigns\",{\"1\":{\"41\":1,\"139\":2,\"900\":1}}],[\"assign\",{\"1\":{\"15\":1,\"26\":1,\"96\":1,\"112\":1,\"113\":2,\"393\":1,\"421\":1,\"611\":1,\"685\":1,\"690\":1,\"745\":1,\"787\":1,\"831\":1,\"899\":1,\"1098\":1,\"1111\":1,\"1182\":1,\"1207\":1,\"1255\":1,\"1345\":1,\"1594\":1,\"1771\":1,\"1772\":3,\"1782\":1}}],[\"ascii\",{\"1\":{\"780\":1,\"1108\":1,\"1110\":1,\"1505\":2,\"1592\":2,\"1701\":3}}],[\"asciinema\",{\"1\":{\"86\":4}}],[\"asciicast\",{\"1\":{\"86\":2}}],[\"aspell\",{\"0\":{\"1792\":1},\"1\":{\"86\":1,\"210\":3,\"1784\":5,\"1787\":1,\"1788\":2,\"1789\":1,\"1793\":3}}],[\"as\",{\"0\":{\"744\":1,\"757\":1,\"795\":1,\"1068\":1,\"1190\":1,\"1511\":1,\"1512\":1,\"1522\":1,\"1524\":1,\"1642\":1},\"1\":{\"3\":2,\"8\":1,\"14\":1,\"15\":5,\"24\":2,\"26\":5,\"27\":1,\"30\":3,\"39\":2,\"41\":4,\"42\":4,\"46\":2,\"47\":4,\"48\":5,\"50\":2,\"51\":2,\"57\":1,\"58\":1,\"59\":3,\"60\":2,\"70\":2,\"78\":1,\"89\":2,\"90\":1,\"93\":4,\"95\":1,\"96\":1,\"103\":1,\"108\":2,\"111\":2,\"113\":5,\"116\":1,\"117\":3,\"119\":1,\"121\":8,\"122\":1,\"125\":2,\"126\":1,\"127\":4,\"130\":1,\"147\":1,\"151\":1,\"162\":2,\"163\":2,\"174\":2,\"181\":1,\"197\":1,\"198\":1,\"201\":2,\"202\":1,\"207\":2,\"208\":1,\"209\":1,\"217\":2,\"218\":1,\"224\":1,\"226\":2,\"228\":2,\"231\":1,\"237\":2,\"252\":3,\"261\":1,\"262\":1,\"265\":3,\"272\":3,\"279\":3,\"285\":1,\"287\":1,\"299\":1,\"305\":1,\"313\":1,\"314\":1,\"315\":1,\"320\":1,\"322\":1,\"323\":1,\"328\":1,\"329\":1,\"330\":1,\"335\":1,\"341\":1,\"342\":1,\"348\":1,\"349\":1,\"355\":1,\"362\":1,\"368\":3,\"372\":1,\"375\":1,\"376\":3,\"395\":2,\"397\":3,\"402\":2,\"403\":1,\"406\":1,\"407\":3,\"421\":2,\"423\":3,\"431\":1,\"432\":2,\"433\":1,\"434\":1,\"437\":1,\"438\":2,\"439\":1,\"441\":1,\"442\":3,\"443\":1,\"446\":4,\"447\":1,\"448\":1,\"452\":1,\"462\":1,\"471\":1,\"473\":2,\"487\":1,\"497\":1,\"519\":1,\"520\":1,\"525\":1,\"526\":2,\"530\":2,\"561\":1,\"562\":1,\"568\":1,\"571\":2,\"596\":2,\"603\":3,\"607\":2,\"616\":2,\"628\":2,\"635\":2,\"641\":2,\"653\":1,\"656\":3,\"673\":2,\"676\":1,\"677\":7,\"679\":3,\"680\":1,\"682\":1,\"692\":4,\"722\":1,\"727\":2,\"741\":2,\"742\":1,\"743\":1,\"747\":1,\"749\":1,\"754\":1,\"755\":5,\"756\":1,\"760\":2,\"764\":1,\"765\":1,\"773\":1,\"780\":4,\"781\":1,\"795\":1,\"803\":1,\"808\":4,\"809\":1,\"810\":1,\"816\":1,\"820\":2,\"823\":7,\"825\":3,\"826\":1,\"828\":1,\"851\":4,\"857\":1,\"859\":3,\"868\":2,\"875\":1,\"882\":4,\"907\":2,\"910\":7,\"912\":3,\"913\":1,\"915\":1,\"924\":1,\"962\":1,\"975\":1,\"977\":2,\"999\":2,\"1012\":2,\"1021\":2,\"1022\":1,\"1024\":2,\"1033\":1,\"1034\":3,\"1043\":1,\"1049\":1,\"1052\":2,\"1058\":2,\"1068\":3,\"1070\":2,\"1103\":2,\"1113\":2,\"1119\":1,\"1125\":4,\"1126\":1,\"1139\":2,\"1141\":1,\"1153\":2,\"1171\":1,\"1176\":1,\"1178\":1,\"1179\":1,\"1190\":1,\"1196\":2,\"1199\":7,\"1201\":3,\"1202\":1,\"1204\":1,\"1209\":1,\"1217\":2,\"1218\":1,\"1219\":2,\"1223\":1,\"1226\":1,\"1227\":1,\"1249\":2,\"1257\":1,\"1258\":2,\"1260\":1,\"1267\":2,\"1268\":1,\"1272\":1,\"1294\":1,\"1308\":1,\"1309\":1,\"1312\":2,\"1313\":1,\"1327\":2,\"1336\":1,\"1339\":1,\"1343\":1,\"1350\":1,\"1375\":1,\"1400\":1,\"1404\":1,\"1405\":3,\"1408\":1,\"1413\":1,\"1416\":1,\"1425\":1,\"1429\":2,\"1433\":1,\"1437\":2,\"1441\":1,\"1455\":1,\"1476\":1,\"1482\":1,\"1486\":1,\"1487\":1,\"1502\":2,\"1503\":1,\"1504\":2,\"1505\":4,\"1507\":1,\"1509\":2,\"1513\":1,\"1516\":1,\"1517\":1,\"1518\":2,\"1520\":2,\"1538\":2,\"1539\":1,\"1542\":2,\"1547\":2,\"1549\":1,\"1552\":2,\"1578\":1,\"1579\":1,\"1589\":2,\"1590\":1,\"1591\":3,\"1592\":4,\"1593\":3,\"1594\":1,\"1596\":1,\"1598\":2,\"1599\":2,\"1600\":2,\"1601\":1,\"1602\":1,\"1612\":1,\"1614\":1,\"1617\":5,\"1625\":6,\"1628\":1,\"1632\":1,\"1634\":1,\"1638\":1,\"1641\":1,\"1645\":3,\"1647\":1,\"1654\":2,\"1657\":1,\"1664\":2,\"1667\":2,\"1670\":1,\"1672\":1,\"1677\":2,\"1683\":5,\"1687\":5,\"1694\":1,\"1699\":3,\"1703\":1,\"1706\":4,\"1708\":1,\"1712\":1,\"1716\":1,\"1719\":4,\"1723\":1,\"1729\":2,\"1737\":1,\"1741\":8,\"1742\":5,\"1746\":2,\"1753\":1,\"1756\":2,\"1757\":1,\"1759\":1,\"1771\":2,\"1772\":2,\"1773\":3,\"1774\":2,\"1780\":2,\"1781\":2,\"1784\":1,\"1789\":3,\"1790\":1,\"1800\":2,\"1805\":1,\"1812\":1}}],[\"aside\",{\"1\":{\"2\":1,\"189\":1,\"234\":1,\"1716\":1,\"1798\":1}}],[\"alexa\",{\"1\":{\"1651\":1,\"1652\":1,\"1661\":1,\"1662\":1}}],[\"alfa\",{\"1\":{\"1386\":1}}],[\"alone\",{\"1\":{\"468\":1,\"859\":1}}],[\"alongside\",{\"1\":{\"181\":1,\"439\":1,\"1797\":1}}],[\"along\",{\"1\":{\"15\":2,\"26\":2,\"50\":1,\"112\":1,\"122\":1,\"214\":1,\"234\":1,\"394\":1,\"530\":1,\"616\":2,\"635\":1,\"641\":1,\"755\":1,\"809\":1,\"810\":1,\"940\":1,\"960\":1,\"999\":1,\"1024\":1,\"1058\":1,\"1070\":1,\"1103\":1,\"1118\":1,\"1219\":1,\"1262\":1,\"1268\":1,\"1327\":1,\"1570\":1,\"1582\":1,\"1794\":1}}],[\"alphabetical\",{\"1\":{\"1386\":1}}],[\"alpha\",{\"1\":{\"389\":1,\"1451\":1,\"1591\":1,\"1691\":2}}],[\"aligned\",{\"1\":{\"1625\":1}}],[\"align\",{\"1\":{\"99\":1}}],[\"alias=command\",{\"1\":{\"386\":1}}],[\"aliases\",{\"0\":{\"241\":1},\"1\":{\"50\":1,\"95\":1,\"99\":1,\"103\":2,\"111\":2,\"138\":1,\"241\":1,\"387\":1,\"391\":2,\"432\":1,\"450\":1,\"451\":1,\"655\":1,\"682\":1,\"710\":2,\"722\":1,\"727\":1,\"733\":1,\"785\":2,\"828\":1,\"915\":1,\"1097\":2,\"1175\":5,\"1176\":2,\"1204\":1,\"1285\":5,\"1347\":1,\"1791\":1}}],[\"aliased\",{\"1\":{\"41\":1}}],[\"alias\",{\"0\":{\"384\":1,\"390\":1,\"432\":1},\"1\":{\"15\":2,\"26\":2,\"95\":1,\"96\":2,\"111\":1,\"121\":1,\"162\":3,\"164\":2,\"241\":2,\"244\":1,\"384\":1,\"385\":2,\"386\":2,\"387\":9,\"389\":2,\"390\":3,\"391\":1,\"392\":2,\"400\":2,\"423\":1,\"431\":1,\"432\":2,\"457\":2,\"541\":3,\"628\":4,\"629\":2,\"655\":2,\"656\":1,\"657\":1,\"707\":1,\"710\":1,\"711\":1,\"713\":2,\"731\":1,\"785\":1,\"787\":2,\"954\":2,\"982\":2,\"1097\":1,\"1098\":2,\"1108\":2,\"1174\":1,\"1175\":2,\"1227\":2,\"1285\":6,\"1360\":2}}],[\"al\",{\"1\":{\"95\":1,\"107\":1,\"108\":1,\"113\":1,\"121\":1,\"139\":1,\"162\":1,\"1161\":1,\"1416\":1,\"1424\":1,\"1564\":1,\"1708\":1,\"1720\":1,\"1752\":1}}],[\"algol\",{\"1\":{\"46\":1,\"47\":1,\"52\":1}}],[\"albeit\",{\"1\":{\"41\":1,\"123\":1,\"211\":1,\"596\":1,\"1516\":1,\"1693\":2,\"1716\":1}}],[\"always\",{\"1\":{\"40\":1,\"48\":1,\"60\":1,\"93\":1,\"111\":2,\"182\":1,\"395\":1,\"403\":1,\"643\":1,\"677\":1,\"696\":1,\"743\":1,\"756\":1,\"823\":1,\"910\":1,\"929\":1,\"1153\":1,\"1154\":1,\"1155\":1,\"1199\":1,\"1217\":1,\"1641\":1,\"1773\":1}}],[\"almost\",{\"1\":{\"39\":1,\"57\":1,\"121\":1,\"155\":1,\"1489\":1}}],[\"already\",{\"1\":{\"15\":2,\"26\":2,\"42\":1,\"47\":1,\"48\":2,\"120\":2,\"208\":1,\"220\":1,\"440\":1,\"445\":1,\"483\":2,\"618\":2,\"832\":1,\"833\":1,\"837\":1,\"838\":1,\"839\":1,\"843\":1,\"956\":1,\"975\":2,\"1052\":2,\"1103\":2,\"1126\":2,\"1161\":1,\"1301\":2,\"1451\":1,\"1568\":2,\"1774\":2,\"1784\":1}}],[\"also\",{\"0\":{\"44\":1,\"54\":1,\"63\":1,\"87\":1,\"92\":1,\"94\":1,\"96\":1,\"101\":1,\"105\":1,\"110\":1,\"112\":1,\"114\":1,\"116\":1,\"118\":1,\"120\":1,\"122\":1,\"124\":1,\"130\":1,\"164\":1,\"169\":1,\"183\":1,\"263\":1,\"272\":1,\"279\":1,\"286\":1,\"293\":1,\"300\":1,\"306\":1,\"313\":1,\"320\":1,\"328\":1,\"335\":1,\"342\":1,\"349\":1,\"356\":1,\"363\":1,\"369\":1,\"378\":1,\"383\":1,\"393\":1,\"404\":1,\"412\":1,\"419\":1,\"424\":1,\"457\":1,\"463\":1,\"469\":1,\"475\":1,\"483\":1,\"489\":1,\"495\":1,\"502\":1,\"509\":1,\"530\":1,\"536\":1,\"548\":1,\"553\":1,\"558\":1,\"569\":1,\"577\":1,\"584\":1,\"589\":1,\"599\":1,\"611\":1,\"618\":1,\"624\":1,\"629\":1,\"635\":1,\"641\":1,\"651\":1,\"659\":1,\"664\":1,\"669\":1,\"685\":1,\"690\":1,\"697\":1,\"703\":1,\"713\":1,\"718\":1,\"723\":1,\"728\":1,\"735\":1,\"745\":1,\"758\":1,\"766\":1,\"771\":1,\"787\":1,\"797\":1,\"802\":1,\"809\":1,\"816\":1,\"831\":1,\"837\":1,\"843\":1,\"849\":1,\"861\":1,\"871\":1,\"877\":1,\"884\":1,\"891\":1,\"898\":1,\"917\":1,\"922\":1,\"930\":1,\"935\":1,\"940\":1,\"947\":1,\"954\":1,\"960\":1,\"967\":1,\"975\":1,\"982\":1,\"987\":1,\"993\":1,\"1002\":1,\"1008\":1,\"1014\":1,\"1024\":1,\"1031\":1,\"1039\":1,\"1044\":1,\"1052\":1,\"1061\":1,\"1070\":1,\"1077\":1,\"1084\":1,\"1089\":1,\"1098\":1,\"1103\":1,\"1111\":1,\"1118\":1,\"1126\":1,\"1137\":1,\"1143\":1,\"1150\":1,\"1159\":1,\"1171\":1,\"1182\":1,\"1192\":1,\"1207\":1,\"1213\":1,\"1222\":1,\"1228\":1,\"1235\":1,\"1241\":1,\"1255\":1,\"1262\":1,\"1268\":1,\"1274\":1,\"1281\":1,\"1289\":1,\"1295\":1,\"1301\":1,\"1307\":1,\"1313\":1,\"1319\":1,\"1325\":1,\"1331\":1,\"1337\":1,\"1345\":1,\"1360\":1,\"1373\":1,\"1388\":1,\"1398\":1,\"1410\":1,\"1422\":1,\"1430\":1,\"1438\":1,\"1450\":1,\"1463\":1,\"1469\":1,\"1474\":1,\"1480\":1,\"1491\":1,\"1497\":1,\"1507\":1,\"1518\":1,\"1536\":1,\"1540\":1,\"1547\":1,\"1552\":1,\"1557\":1,\"1562\":1,\"1568\":1,\"1572\":1,\"1576\":1,\"1580\":1,\"1584\":1,\"1589\":1,\"1594\":1,\"1599\":1,\"1607\":1,\"1612\":1,\"1618\":1,\"1622\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1684\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1705\":1,\"1707\":1,\"1709\":1,\"1714\":1,\"1727\":1,\"1739\":1,\"1743\":1,\"1748\":1,\"1754\":1,\"1771\":1,\"1774\":1,\"1779\":1,\"1782\":1,\"1794\":1,\"1814\":1},\"1\":{\"3\":1,\"10\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"47\":1,\"51\":1,\"52\":1,\"56\":1,\"60\":1,\"75\":1,\"77\":1,\"78\":1,\"89\":1,\"90\":1,\"95\":1,\"108\":1,\"109\":1,\"111\":2,\"113\":1,\"115\":2,\"119\":1,\"176\":1,\"182\":1,\"190\":1,\"202\":2,\"211\":1,\"216\":1,\"223\":2,\"225\":1,\"226\":1,\"232\":1,\"234\":1,\"235\":1,\"238\":1,\"267\":1,\"270\":2,\"274\":2,\"277\":2,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"354\":1,\"361\":1,\"371\":1,\"372\":2,\"375\":2,\"391\":2,\"397\":3,\"398\":1,\"421\":1,\"436\":1,\"441\":1,\"443\":1,\"468\":1,\"523\":1,\"526\":1,\"544\":2,\"560\":1,\"576\":1,\"591\":1,\"596\":3,\"616\":1,\"656\":1,\"675\":1,\"676\":1,\"677\":1,\"679\":2,\"692\":1,\"701\":1,\"710\":2,\"742\":1,\"743\":1,\"755\":1,\"756\":1,\"764\":1,\"785\":2,\"795\":1,\"823\":1,\"825\":2,\"857\":1,\"897\":1,\"904\":1,\"910\":1,\"912\":2,\"956\":2,\"962\":1,\"981\":1,\"999\":5,\"1043\":3,\"1048\":1,\"1058\":5,\"1097\":2,\"1102\":1,\"1113\":1,\"1175\":1,\"1179\":1,\"1190\":1,\"1199\":1,\"1201\":2,\"1217\":1,\"1219\":5,\"1226\":1,\"1272\":1,\"1294\":1,\"1300\":1,\"1317\":1,\"1401\":2,\"1403\":2,\"1404\":2,\"1408\":2,\"1412\":1,\"1413\":2,\"1425\":2,\"1432\":1,\"1433\":2,\"1440\":1,\"1441\":2,\"1451\":1,\"1505\":1,\"1513\":1,\"1515\":1,\"1520\":1,\"1542\":3,\"1546\":1,\"1549\":1,\"1551\":1,\"1586\":1,\"1588\":1,\"1592\":1,\"1614\":1,\"1628\":1,\"1641\":1,\"1659\":1,\"1667\":2,\"1708\":1,\"1716\":2,\"1724\":2,\"1732\":1,\"1741\":2,\"1745\":1,\"1772\":2,\"1781\":1,\"1791\":3,\"1798\":1}}],[\"although\",{\"1\":{\"1043\":1,\"1741\":1}}],[\"alt+numeric\",{\"1\":{\"172\":1}}],[\"alt+1\",{\"1\":{\"172\":1}}],[\"alt+b\",{\"1\":{\"162\":1,\"1802\":1}}],[\"alt+f\",{\"1\":{\"162\":1,\"1802\":1}}],[\"alternate\",{\"1\":{\"677\":1,\"823\":1,\"910\":1,\"1199\":1}}],[\"alternatives\",{\"1\":{\"123\":1}}],[\"alternative\",{\"0\":{\"596\":1,\"1812\":1},\"1\":{\"51\":1,\"53\":1,\"95\":1,\"108\":1,\"371\":1,\"560\":1,\"1401\":1,\"1432\":1,\"1564\":1,\"1788\":1,\"1795\":1}}],[\"altered\",{\"1\":{\"119\":1,\"151\":1,\"397\":1,\"449\":1,\"491\":1}}],[\"alters\",{\"1\":{\"15\":1,\"26\":1,\"44\":1,\"63\":1,\"219\":1,\"383\":1,\"404\":1,\"419\":1,\"454\":1,\"483\":1,\"490\":1,\"618\":1,\"758\":1,\"771\":1,\"975\":1,\"1052\":1,\"1084\":1,\"1126\":1,\"1262\":1,\"1268\":1,\"1307\":1,\"1313\":1,\"1480\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1}}],[\"altering\",{\"1\":{\"15\":2,\"26\":2,\"44\":1,\"63\":1,\"112\":1,\"182\":1,\"383\":1,\"394\":1,\"404\":1,\"419\":1,\"483\":1,\"490\":1,\"618\":1,\"758\":1,\"771\":1,\"940\":1,\"960\":1,\"975\":1,\"1052\":1,\"1084\":1,\"1118\":1,\"1126\":1,\"1262\":2,\"1268\":2,\"1307\":1,\"1313\":1,\"1480\":1,\"1612\":1,\"1618\":1,\"1626\":1,\"1632\":1,\"1636\":1,\"1645\":1,\"1657\":1,\"1670\":1,\"1675\":1,\"1679\":1,\"1688\":1,\"1694\":1,\"1699\":1,\"1794\":1}}],[\"alter\",{\"0\":{\"394\":1},\"1\":{\"15\":2,\"26\":2,\"41\":1,\"59\":1,\"94\":1,\"111\":1,\"112\":1,\"120\":1,\"151\":1,\"235\":1,\"391\":1,\"395\":1,\"396\":1,\"397\":7,\"398\":2,\"399\":1,\"402\":4,\"502\":1,\"676\":1,\"710\":1,\"743\":2,\"756\":2,\"785\":1,\"940\":1,\"960\":1,\"1097\":1,\"1118\":1,\"1160\":1,\"1244\":1,\"1250\":1,\"1262\":1,\"1268\":1,\"1325\":1,\"1331\":1,\"1641\":2,\"1774\":1,\"1775\":1,\"1779\":1,\"1790\":1,\"1794\":1}}],[\"alt\",{\"1\":{\"2\":1,\"1701\":20}}],[\"allcaseandif\",{\"1\":{\"1253\":1}}],[\"allowmultiple\",{\"0\":{\"434\":1},\"1\":{\"431\":1,\"434\":1,\"440\":1}}],[\"allowany\",{\"0\":{\"433\":1},\"1\":{\"431\":1,\"433\":2,\"435\":1,\"447\":1}}],[\"allowadditional\",{\"1\":{\"423\":1}}],[\"allowed\",{\"0\":{\"389\":1,\"777\":1,\"1095\":1},\"1\":{\"139\":1,\"440\":1,\"780\":3,\"1065\":1,\"1691\":1}}],[\"allow\",{\"1\":{\"104\":1,\"115\":1,\"121\":1,\"127\":1,\"217\":1,\"267\":2,\"274\":2,\"281\":1,\"288\":2,\"295\":1,\"308\":2,\"340\":1,\"447\":1,\"1120\":1,\"1309\":1,\"1529\":1,\"1629\":1,\"1708\":1,\"1808\":1}}],[\"allows\",{\"1\":{\"50\":1,\"52\":1,\"90\":1,\"95\":1,\"108\":1,\"113\":1,\"121\":1,\"123\":1,\"142\":1,\"162\":2,\"214\":1,\"248\":1,\"348\":1,\"442\":1,\"448\":1,\"705\":1,\"783\":1,\"784\":1,\"1000\":1,\"1059\":1,\"1166\":1,\"1220\":1,\"1520\":1,\"1538\":1,\"1647\":1,\"1664\":1,\"1732\":2,\"1741\":1,\"1746\":1}}],[\"allowing\",{\"1\":{\"41\":1,\"113\":1,\"267\":1,\"274\":1,\"281\":1,\"288\":1,\"295\":1,\"308\":1,\"433\":1}}],[\"allocating\",{\"1\":{\"42\":1}}],[\"all\",{\"0\":{\"1488\":1},\"1\":{\"2\":1,\"8\":2,\"10\":1,\"15\":3,\"23\":1,\"26\":3,\"38\":1,\"39\":2,\"40\":1,\"46\":1,\"48\":1,\"52\":1,\"56\":1,\"57\":2,\"71\":1,\"72\":1,\"90\":1,\"91\":1,\"92\":1,\"95\":1,\"96\":1,\"100\":1,\"103\":3,\"110\":1,\"111\":1,\"121\":2,\"123\":1,\"130\":1,\"139\":1,\"162\":1,\"164\":1,\"183\":1,\"189\":1,\"214\":1,\"217\":1,\"222\":1,\"224\":1,\"231\":1,\"238\":4,\"255\":1,\"312\":1,\"347\":1,\"372\":1,\"376\":1,\"390\":1,\"391\":2,\"395\":1,\"398\":1,\"406\":1,\"409\":1,\"410\":2,\"428\":1,\"432\":1,\"437\":1,\"440\":1,\"443\":1,\"444\":1,\"468\":1,\"475\":3,\"512\":1,\"523\":1,\"566\":1,\"595\":1,\"596\":2,\"608\":1,\"656\":1,\"659\":3,\"680\":1,\"692\":3,\"695\":2,\"710\":2,\"713\":1,\"718\":3,\"723\":3,\"724\":1,\"725\":1,\"728\":2,\"729\":1,\"730\":1,\"733\":1,\"735\":2,\"751\":1,\"755\":1,\"762\":1,\"778\":1,\"785\":2,\"791\":1,\"826\":1,\"865\":2,\"867\":1,\"875\":1,\"908\":1,\"913\":1,\"942\":1,\"965\":2,\"978\":1,\"979\":2,\"989\":1,\"1097\":2,\"1113\":1,\"1115\":1,\"1134\":1,\"1169\":1,\"1170\":1,\"1171\":1,\"1175\":2,\"1176\":24,\"1182\":1,\"1186\":1,\"1202\":1,\"1223\":1,\"1224\":1,\"1241\":1,\"1248\":1,\"1272\":1,\"1325\":1,\"1331\":1,\"1388\":1,\"1401\":1,\"1405\":1,\"1408\":1,\"1413\":1,\"1425\":1,\"1429\":1,\"1432\":1,\"1433\":1,\"1437\":1,\"1441\":1,\"1484\":1,\"1602\":1,\"1620\":1,\"1631\":2,\"1638\":1,\"1644\":2,\"1650\":1,\"1656\":2,\"1669\":2,\"1677\":1,\"1693\":2,\"1698\":2,\"1727\":1,\"1728\":1,\"1731\":1,\"1735\":1,\"1751\":1,\"1752\":1,\"1770\":1,\"1772\":3,\"1774\":1,\"1783\":1,\"1795\":1,\"1798\":2,\"1808\":1,\"1812\":1}}],[\"arises\",{\"1\":{\"1793\":1}}],[\"arithmetic\",{\"0\":{\"600\":1},\"1\":{\"15\":1,\"26\":1,\"608\":1,\"685\":1,\"690\":1,\"831\":1,\"908\":1,\"917\":1,\"1207\":1,\"1772\":1}}],[\"army\",{\"1\":{\"1276\":1}}],[\"arm\",{\"1\":{\"190\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"199\":1}}],[\"arm64\",{\"1\":{\"119\":1,\"190\":2,\"193\":1,\"194\":1,\"195\":1,\"196\":1}}],[\"armv6\",{\"1\":{\"1634\":1}}],[\"armv8\",{\"1\":{\"9\":1}}],[\"armv7\",{\"1\":{\"9\":1}}],[\"archlinux\",{\"1\":{\"95\":1,\"681\":1,\"827\":1,\"914\":1,\"1203\":1,\"1350\":1}}],[\"architecture\",{\"1\":{\"15\":1,\"26\":1,\"201\":1,\"202\":1,\"549\":1,\"550\":1,\"558\":1,\"993\":1,\"1044\":1}}],[\"architectures\",{\"0\":{\"9\":1},\"1\":{\"0\":1,\"2\":1,\"9\":1}}],[\"art\",{\"1\":{\"43\":1}}],[\"article\",{\"1\":{\"34\":1,\"40\":2,\"41\":1,\"45\":1,\"50\":1,\"55\":1}}],[\"articles\",{\"0\":{\"32\":1,\"65\":1}}],[\"arr\",{\"1\":{\"1772\":1}}],[\"arrow\",{\"0\":{\"1569\":1},\"1\":{\"24\":1,\"105\":1,\"168\":1,\"837\":1,\"843\":1,\"954\":1,\"1502\":1,\"1568\":1,\"1576\":1,\"1580\":1,\"1582\":1,\"1584\":1,\"1719\":1,\"1727\":1,\"1748\":1,\"1779\":1,\"1797\":1,\"1798\":1,\"1802\":2}}],[\"arraywriter\",{\"1\":{\"309\":2,\"311\":6,\"312\":6}}],[\"arraywithtypetemplate\",{\"0\":{\"329\":1},\"1\":{\"30\":1,\"265\":1,\"272\":1,\"277\":3,\"279\":1,\"290\":1,\"326\":2,\"333\":2,\"1645\":1,\"1699\":1}}],[\"arraytemplatewithtype\",{\"0\":{\"322\":1},\"1\":{\"323\":1,\"330\":1}}],[\"arraytemplate\",{\"0\":{\"314\":1},\"1\":{\"30\":1,\"265\":1,\"270\":4,\"272\":1,\"277\":1,\"279\":1,\"315\":1,\"316\":3,\"318\":2,\"324\":3,\"331\":3,\"1645\":1,\"1699\":1}}],[\"arrays\",{\"0\":{\"42\":1,\"229\":1,\"376\":1,\"377\":1,\"442\":1,\"1399\":1,\"1402\":1,\"1405\":1,\"1406\":1,\"1522\":1,\"1533\":1,\"1534\":1},\"1\":{\"15\":1,\"24\":1,\"26\":1,\"36\":1,\"41\":1,\"43\":1,\"44\":1,\"59\":1,\"60\":2,\"63\":1,\"77\":1,\"90\":1,\"95\":1,\"115\":3,\"121\":3,\"122\":1,\"129\":1,\"130\":1,\"229\":2,\"237\":1,\"270\":1,\"277\":1,\"309\":1,\"318\":1,\"326\":1,\"333\":1,\"371\":1,\"372\":1,\"376\":1,\"377\":7,\"378\":1,\"380\":1,\"383\":1,\"419\":1,\"431\":1,\"440\":1,\"442\":1,\"595\":1,\"764\":1,\"779\":1,\"797\":1,\"867\":1,\"873\":1,\"875\":2,\"877\":1,\"945\":1,\"947\":1,\"956\":1,\"962\":2,\"1084\":1,\"1127\":1,\"1135\":1,\"1192\":1,\"1270\":1,\"1272\":3,\"1274\":1,\"1360\":1,\"1400\":1,\"1401\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1410\":2,\"1411\":1,\"1413\":1,\"1422\":1,\"1423\":1,\"1424\":1,\"1425\":1,\"1429\":2,\"1430\":3,\"1431\":1,\"1432\":1,\"1433\":1,\"1437\":2,\"1438\":3,\"1439\":1,\"1441\":1,\"1450\":1,\"1502\":1,\"1506\":1,\"1519\":1,\"1520\":2,\"1535\":7,\"1536\":1,\"1540\":2,\"1572\":1,\"1576\":1,\"1578\":1,\"1584\":1,\"1593\":1,\"1602\":1,\"1631\":5,\"1644\":5,\"1648\":1,\"1649\":1,\"1656\":4,\"1665\":1,\"1666\":1,\"1669\":4,\"1675\":1,\"1691\":1,\"1693\":2,\"1698\":5,\"1772\":3}}],[\"array\",{\"0\":{\"375\":1,\"445\":1,\"525\":1,\"1401\":1,\"1404\":1,\"1503\":1,\"1519\":1,\"1523\":1},\"1\":{\"3\":2,\"15\":14,\"24\":3,\"26\":14,\"30\":5,\"33\":1,\"36\":1,\"40\":2,\"41\":3,\"43\":1,\"44\":3,\"54\":1,\"59\":1,\"63\":2,\"90\":1,\"92\":2,\"107\":1,\"110\":3,\"111\":1,\"112\":1,\"118\":1,\"121\":1,\"122\":6,\"127\":2,\"130\":2,\"162\":1,\"164\":1,\"237\":1,\"248\":1,\"265\":5,\"266\":1,\"267\":1,\"269\":1,\"270\":2,\"271\":1,\"272\":3,\"273\":1,\"274\":1,\"276\":1,\"277\":2,\"278\":1,\"279\":3,\"286\":4,\"293\":3,\"300\":4,\"307\":1,\"308\":1,\"312\":8,\"313\":2,\"314\":1,\"315\":1,\"319\":1,\"320\":3,\"322\":1,\"323\":1,\"327\":1,\"328\":2,\"329\":1,\"330\":1,\"334\":1,\"335\":3,\"340\":3,\"342\":4,\"349\":4,\"364\":1,\"365\":1,\"369\":9,\"370\":1,\"371\":1,\"376\":2,\"378\":6,\"383\":9,\"387\":1,\"398\":1,\"400\":1,\"404\":3,\"413\":1,\"414\":1,\"419\":9,\"431\":1,\"436\":1,\"438\":3,\"439\":1,\"442\":1,\"445\":1,\"447\":2,\"457\":1,\"465\":1,\"489\":1,\"493\":2,\"507\":1,\"513\":1,\"530\":3,\"536\":1,\"537\":1,\"540\":1,\"541\":4,\"544\":4,\"545\":1,\"546\":1,\"548\":10,\"569\":1,\"591\":1,\"593\":1,\"595\":1,\"599\":5,\"611\":1,\"624\":1,\"625\":1,\"626\":1,\"627\":1,\"629\":1,\"635\":1,\"641\":1,\"689\":1,\"692\":1,\"743\":1,\"745\":3,\"746\":1,\"747\":1,\"748\":2,\"751\":2,\"752\":2,\"755\":1,\"756\":1,\"758\":3,\"760\":1,\"763\":1,\"766\":2,\"791\":1,\"797\":1,\"809\":1,\"831\":1,\"862\":1,\"863\":1,\"865\":1,\"867\":1,\"871\":4,\"872\":1,\"877\":6,\"878\":1,\"879\":1,\"882\":1,\"884\":9,\"891\":3,\"893\":1,\"894\":2,\"897\":2,\"898\":8,\"917\":1,\"924\":1,\"940\":7,\"941\":1,\"942\":1,\"947\":9,\"953\":2,\"955\":1,\"960\":8,\"961\":1,\"965\":1,\"967\":9,\"1002\":2,\"1024\":1,\"1061\":1,\"1070\":1,\"1077\":3,\"1078\":1,\"1079\":1,\"1084\":8,\"1088\":2,\"1110\":1,\"1113\":1,\"1118\":7,\"1123\":1,\"1128\":1,\"1137\":10,\"1150\":3,\"1182\":2,\"1192\":1,\"1207\":1,\"1222\":1,\"1224\":1,\"1228\":1,\"1235\":3,\"1245\":1,\"1262\":3,\"1268\":3,\"1269\":1,\"1274\":6,\"1281\":1,\"1345\":1,\"1400\":3,\"1404\":2,\"1405\":2,\"1410\":5,\"1422\":6,\"1430\":5,\"1438\":5,\"1450\":6,\"1463\":1,\"1469\":1,\"1474\":1,\"1502\":3,\"1503\":1,\"1504\":2,\"1505\":3,\"1506\":1,\"1507\":1,\"1518\":2,\"1520\":2,\"1533\":1,\"1536\":3,\"1540\":1,\"1547\":2,\"1552\":2,\"1568\":1,\"1580\":1,\"1589\":2,\"1592\":3,\"1593\":2,\"1594\":3,\"1599\":3,\"1612\":2,\"1617\":3,\"1618\":1,\"1625\":3,\"1626\":1,\"1632\":3,\"1636\":1,\"1641\":1,\"1645\":6,\"1657\":4,\"1670\":4,\"1675\":2,\"1679\":1,\"1683\":4,\"1687\":4,\"1688\":1,\"1694\":3,\"1699\":5,\"1753\":1,\"1764\":1,\"1765\":1,\"1771\":3,\"1772\":19,\"1774\":3,\"1782\":1,\"1789\":2,\"1790\":1,\"1794\":2}}],[\"argument\",{\"1\":{\"423\":1,\"562\":1}}],[\"arguments\",{\"1\":{\"3\":1,\"113\":1,\"228\":1}}],[\"arguably\",{\"1\":{\"50\":1}}],[\"argued\",{\"1\":{\"1249\":1}}],[\"argue\",{\"1\":{\"50\":1}}],[\"args\",{\"0\":{\"420\":1,\"1764\":1,\"1767\":1},\"1\":{\"15\":1,\"26\":1,\"421\":2,\"422\":1,\"423\":5,\"779\":1,\"787\":1,\"1213\":1,\"1337\":1}}],[\"around\",{\"1\":{\"3\":1,\"39\":1,\"40\":1,\"47\":1,\"50\":1,\"57\":2,\"61\":1,\"86\":1,\"93\":1,\"104\":1,\"111\":1,\"121\":1,\"155\":1,\"159\":1,\"315\":1,\"323\":1,\"330\":1,\"655\":1,\"737\":1,\"999\":1,\"1058\":1,\"1091\":1,\"1219\":1,\"1600\":1,\"1716\":1,\"1741\":1}}],[\"areas\",{\"1\":{\"50\":1,\"605\":1,\"905\":1}}],[\"aren\",{\"0\":{\"39\":1,\"57\":1},\"1\":{\"36\":1,\"52\":1,\"656\":1,\"1448\":1,\"1772\":1}}],[\"are\",{\"0\":{\"999\":1,\"1058\":1,\"1219\":1,\"1729\":1},\"1\":{\"1\":1,\"2\":1,\"3\":4,\"8\":1,\"9\":1,\"10\":2,\"15\":1,\"19\":1,\"23\":1,\"26\":1,\"27\":2,\"30\":1,\"40\":1,\"43\":1,\"47\":2,\"49\":1,\"50\":1,\"52\":1,\"53\":1,\"60\":4,\"62\":1,\"71\":1,\"76\":1,\"89\":1,\"90\":3,\"93\":1,\"95\":4,\"99\":4,\"103\":4,\"106\":1,\"107\":1,\"111\":5,\"113\":4,\"115\":1,\"117\":1,\"119\":4,\"123\":1,\"127\":2,\"129\":2,\"151\":1,\"154\":2,\"159\":1,\"162\":3,\"168\":1,\"174\":1,\"181\":3,\"182\":1,\"189\":3,\"201\":1,\"204\":1,\"208\":2,\"209\":1,\"216\":2,\"217\":2,\"218\":2,\"222\":2,\"224\":2,\"226\":3,\"228\":2,\"229\":1,\"231\":2,\"232\":1,\"237\":1,\"243\":2,\"244\":2,\"247\":2,\"249\":1,\"264\":2,\"284\":1,\"298\":1,\"304\":2,\"315\":1,\"323\":1,\"330\":1,\"376\":1,\"387\":1,\"391\":6,\"395\":1,\"399\":3,\"403\":2,\"405\":1,\"406\":1,\"409\":1,\"417\":1,\"423\":1,\"431\":2,\"432\":1,\"433\":1,\"437\":1,\"438\":2,\"439\":1,\"440\":4,\"443\":1,\"445\":1,\"454\":1,\"455\":1,\"480\":1,\"488\":1,\"491\":1,\"514\":1,\"515\":1,\"518\":2,\"520\":2,\"526\":2,\"535\":1,\"543\":1,\"544\":1,\"591\":1,\"596\":2,\"605\":2,\"606\":1,\"656\":1,\"677\":3,\"678\":1,\"679\":6,\"681\":1,\"692\":1,\"696\":2,\"703\":1,\"710\":6,\"733\":2,\"737\":1,\"742\":2,\"743\":2,\"747\":1,\"749\":1,\"754\":2,\"755\":1,\"756\":2,\"760\":1,\"762\":1,\"764\":1,\"765\":2,\"774\":1,\"780\":1,\"782\":1,\"783\":2,\"784\":2,\"785\":6,\"795\":2,\"823\":3,\"824\":1,\"825\":6,\"827\":1,\"857\":1,\"858\":1,\"861\":1,\"863\":1,\"875\":1,\"897\":1,\"904\":1,\"905\":2,\"906\":1,\"910\":3,\"911\":1,\"912\":6,\"914\":1,\"924\":2,\"929\":1,\"937\":1,\"942\":3,\"953\":2,\"973\":1,\"977\":2,\"981\":1,\"999\":5,\"1000\":2,\"1008\":1,\"1016\":1,\"1020\":5,\"1021\":1,\"1033\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1039\":1,\"1058\":5,\"1059\":2,\"1082\":1,\"1096\":1,\"1097\":6,\"1110\":1,\"1122\":1,\"1131\":1,\"1153\":2,\"1161\":1,\"1163\":1,\"1164\":1,\"1170\":1,\"1176\":2,\"1190\":2,\"1199\":3,\"1200\":1,\"1201\":6,\"1203\":1,\"1218\":1,\"1219\":5,\"1220\":2,\"1244\":1,\"1248\":1,\"1249\":1,\"1253\":2,\"1255\":1,\"1260\":1,\"1261\":2,\"1272\":2,\"1300\":1,\"1319\":1,\"1324\":1,\"1330\":1,\"1339\":1,\"1343\":2,\"1347\":1,\"1350\":2,\"1362\":1,\"1375\":2,\"1383\":1,\"1386\":2,\"1387\":1,\"1390\":1,\"1401\":2,\"1403\":2,\"1417\":3,\"1429\":1,\"1432\":2,\"1437\":1,\"1444\":3,\"1448\":1,\"1487\":4,\"1505\":1,\"1506\":1,\"1509\":1,\"1513\":1,\"1518\":1,\"1531\":1,\"1542\":2,\"1546\":1,\"1547\":1,\"1554\":1,\"1559\":1,\"1570\":1,\"1592\":1,\"1601\":2,\"1602\":2,\"1611\":2,\"1625\":2,\"1631\":2,\"1634\":1,\"1638\":1,\"1641\":2,\"1644\":2,\"1647\":1,\"1656\":2,\"1664\":1,\"1666\":1,\"1669\":2,\"1673\":1,\"1674\":3,\"1675\":1,\"1691\":1,\"1698\":2,\"1702\":1,\"1704\":1,\"1707\":1,\"1708\":5,\"1721\":1,\"1722\":1,\"1727\":1,\"1728\":2,\"1729\":2,\"1731\":1,\"1732\":1,\"1741\":1,\"1742\":2,\"1746\":2,\"1747\":1,\"1749\":1,\"1750\":1,\"1751\":1,\"1753\":1,\"1756\":1,\"1759\":1,\"1770\":1,\"1772\":1,\"1773\":1,\"1775\":3,\"1777\":1,\"1780\":1,\"1783\":1,\"1786\":1,\"1789\":1,\"1791\":6,\"1793\":1,\"1794\":1,\"1797\":2,\"1798\":2,\"1799\":1,\"1801\":1,\"1804\":1,\"1808\":2}}],[\"a\",{\"0\":{\"46\":1,\"55\":1,\"206\":1,\"309\":1,\"370\":1,\"676\":1,\"778\":1,\"795\":1,\"1068\":1,\"1096\":1,\"1190\":1,\"1429\":1,\"1437\":1,\"1511\":1,\"1512\":1,\"1522\":1,\"1523\":1,\"1524\":1,\"1567\":1,\"1781\":1},\"1\":{\"0\":1,\"1\":1,\"3\":3,\"10\":1,\"12\":1,\"14\":1,\"15\":72,\"16\":5,\"22\":1,\"23\":5,\"24\":7,\"26\":72,\"27\":5,\"29\":2,\"30\":17,\"33\":3,\"36\":3,\"37\":2,\"38\":7,\"39\":4,\"40\":7,\"41\":3,\"42\":3,\"43\":3,\"44\":3,\"46\":8,\"47\":7,\"48\":4,\"50\":9,\"51\":4,\"52\":3,\"53\":2,\"54\":4,\"55\":1,\"56\":7,\"57\":5,\"59\":2,\"60\":1,\"61\":3,\"62\":1,\"63\":1,\"66\":1,\"68\":1,\"72\":4,\"74\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":2,\"82\":1,\"83\":1,\"86\":4,\"87\":2,\"88\":1,\"90\":6,\"92\":3,\"93\":6,\"94\":4,\"95\":2,\"96\":6,\"97\":1,\"101\":1,\"103\":6,\"104\":1,\"105\":1,\"106\":3,\"107\":1,\"108\":7,\"110\":11,\"111\":9,\"112\":7,\"113\":9,\"115\":5,\"116\":4,\"117\":5,\"118\":2,\"119\":5,\"120\":6,\"121\":19,\"122\":9,\"123\":2,\"124\":1,\"126\":3,\"130\":4,\"134\":1,\"135\":4,\"138\":1,\"142\":1,\"151\":1,\"153\":1,\"155\":2,\"160\":1,\"162\":8,\"164\":7,\"170\":1,\"174\":1,\"176\":1,\"181\":2,\"182\":1,\"183\":6,\"189\":1,\"197\":1,\"201\":1,\"202\":1,\"205\":1,\"207\":1,\"208\":3,\"209\":2,\"211\":4,\"214\":2,\"215\":1,\"217\":6,\"218\":4,\"219\":2,\"222\":1,\"223\":7,\"227\":1,\"228\":1,\"231\":3,\"232\":1,\"235\":1,\"237\":4,\"238\":2,\"239\":5,\"241\":1,\"244\":1,\"246\":2,\"247\":1,\"251\":1,\"252\":2,\"253\":1,\"255\":1,\"258\":1,\"259\":5,\"260\":1,\"261\":5,\"263\":3,\"264\":2,\"265\":17,\"266\":2,\"267\":4,\"269\":1,\"270\":3,\"271\":1,\"272\":7,\"273\":2,\"274\":5,\"276\":1,\"277\":3,\"279\":7,\"281\":3,\"284\":1,\"286\":9,\"287\":1,\"288\":4,\"290\":1,\"291\":2,\"293\":6,\"295\":3,\"298\":1,\"300\":9,\"301\":1,\"302\":4,\"303\":1,\"304\":2,\"306\":3,\"307\":2,\"308\":4,\"309\":2,\"313\":5,\"314\":2,\"315\":3,\"316\":1,\"318\":1,\"320\":9,\"322\":2,\"323\":3,\"324\":1,\"326\":1,\"328\":7,\"329\":2,\"330\":3,\"331\":1,\"333\":1,\"335\":9,\"336\":1,\"337\":2,\"340\":1,\"341\":1,\"342\":8,\"343\":1,\"344\":2,\"347\":2,\"348\":2,\"349\":8,\"350\":1,\"354\":4,\"356\":3,\"357\":1,\"361\":4,\"363\":3,\"364\":1,\"365\":1,\"369\":9,\"370\":1,\"371\":2,\"372\":3,\"373\":3,\"375\":11,\"376\":6,\"377\":2,\"378\":7,\"379\":1,\"380\":2,\"383\":6,\"384\":1,\"387\":2,\"389\":1,\"391\":1,\"393\":7,\"394\":2,\"395\":2,\"397\":6,\"398\":4,\"399\":3,\"400\":1,\"404\":1,\"406\":1,\"409\":2,\"412\":4,\"416\":1,\"417\":1,\"419\":8,\"421\":6,\"423\":3,\"426\":1,\"428\":1,\"432\":1,\"433\":1,\"436\":1,\"437\":1,\"438\":3,\"439\":3,\"440\":3,\"442\":5,\"443\":2,\"444\":2,\"445\":5,\"446\":4,\"447\":4,\"452\":1,\"453\":1,\"454\":2,\"455\":1,\"456\":1,\"457\":6,\"459\":2,\"463\":1,\"468\":3,\"469\":1,\"471\":1,\"473\":2,\"474\":1,\"475\":2,\"476\":1,\"477\":1,\"483\":4,\"484\":1,\"485\":3,\"487\":1,\"488\":1,\"489\":7,\"491\":1,\"495\":3,\"500\":2,\"502\":2,\"507\":2,\"508\":1,\"511\":1,\"512\":4,\"513\":1,\"515\":2,\"517\":1,\"519\":1,\"522\":1,\"523\":2,\"526\":3,\"528\":1,\"530\":8,\"531\":2,\"532\":1,\"535\":1,\"536\":6,\"537\":1,\"540\":2,\"541\":3,\"544\":3,\"545\":4,\"546\":1,\"548\":14,\"559\":1,\"560\":3,\"561\":1,\"562\":1,\"565\":1,\"569\":3,\"571\":2,\"576\":1,\"579\":2,\"582\":1,\"584\":1,\"589\":1,\"590\":1,\"591\":1,\"596\":4,\"597\":3,\"599\":6,\"600\":1,\"601\":2,\"603\":3,\"606\":3,\"607\":2,\"611\":6,\"612\":1,\"613\":1,\"616\":2,\"618\":5,\"628\":2,\"629\":3,\"635\":4,\"641\":4,\"643\":7,\"647\":2,\"651\":5,\"653\":3,\"656\":1,\"659\":4,\"661\":3,\"664\":1,\"673\":2,\"675\":1,\"676\":3,\"677\":10,\"678\":1,\"679\":5,\"682\":3,\"683\":1,\"685\":5,\"690\":3,\"692\":3,\"694\":1,\"698\":1,\"699\":1,\"703\":1,\"704\":1,\"705\":1,\"708\":3,\"710\":1,\"713\":6,\"714\":1,\"715\":1,\"718\":1,\"719\":1,\"720\":2,\"722\":6,\"723\":2,\"727\":6,\"728\":3,\"730\":2,\"732\":6,\"733\":3,\"735\":3,\"736\":1,\"737\":1,\"741\":1,\"742\":6,\"743\":4,\"745\":8,\"747\":1,\"748\":2,\"749\":5,\"752\":1,\"754\":1,\"755\":3,\"756\":4,\"758\":13,\"759\":1,\"760\":4,\"761\":2,\"762\":2,\"763\":1,\"764\":2,\"765\":1,\"766\":3,\"768\":1,\"771\":3,\"772\":1,\"773\":2,\"774\":3,\"778\":1,\"779\":1,\"780\":7,\"781\":2,\"782\":3,\"783\":3,\"784\":1,\"785\":1,\"787\":8,\"789\":3,\"791\":6,\"795\":2,\"798\":1,\"799\":1,\"801\":3,\"802\":3,\"803\":2,\"804\":2,\"808\":7,\"809\":3,\"810\":1,\"811\":2,\"814\":2,\"815\":2,\"816\":5,\"817\":1,\"818\":1,\"819\":1,\"820\":2,\"823\":10,\"824\":1,\"825\":5,\"828\":3,\"829\":1,\"831\":5,\"833\":2,\"837\":2,\"839\":2,\"843\":2,\"847\":1,\"848\":1,\"851\":3,\"858\":1,\"859\":2,\"861\":4,\"865\":2,\"871\":7,\"872\":2,\"873\":3,\"876\":2,\"877\":7,\"878\":2,\"879\":2,\"884\":9,\"885\":1,\"886\":3,\"891\":12,\"896\":1,\"897\":2,\"898\":9,\"899\":1,\"900\":3,\"904\":1,\"906\":3,\"907\":2,\"910\":10,\"911\":1,\"912\":5,\"915\":3,\"916\":1,\"917\":5,\"920\":3,\"922\":2,\"924\":6,\"926\":1,\"927\":1,\"929\":1,\"930\":4,\"931\":2,\"932\":1,\"935\":2,\"936\":1,\"937\":1,\"940\":11,\"942\":4,\"947\":15,\"948\":1,\"949\":1,\"953\":2,\"954\":3,\"958\":4,\"960\":11,\"962\":3,\"965\":1,\"967\":15,\"975\":7,\"977\":4,\"978\":3,\"979\":7,\"981\":1,\"982\":4,\"983\":1,\"984\":2,\"989\":2,\"994\":1,\"995\":2,\"997\":1,\"999\":8,\"1000\":1,\"1002\":4,\"1008\":2,\"1012\":2,\"1013\":1,\"1014\":3,\"1015\":2,\"1016\":6,\"1020\":1,\"1021\":5,\"1023\":1,\"1024\":8,\"1025\":1,\"1026\":1,\"1031\":3,\"1033\":1,\"1036\":2,\"1039\":4,\"1043\":1,\"1045\":2,\"1046\":1,\"1052\":7,\"1056\":4,\"1058\":8,\"1059\":1,\"1061\":5,\"1062\":1,\"1063\":2,\"1067\":1,\"1068\":3,\"1069\":2,\"1070\":4,\"1071\":2,\"1072\":1,\"1077\":11,\"1079\":1,\"1081\":1,\"1082\":1,\"1084\":7,\"1089\":3,\"1090\":1,\"1091\":4,\"1093\":1,\"1097\":1,\"1098\":8,\"1103\":4,\"1111\":2,\"1112\":1,\"1113\":3,\"1115\":4,\"1116\":1,\"1118\":10,\"1119\":2,\"1120\":2,\"1123\":3,\"1125\":2,\"1126\":7,\"1128\":1,\"1131\":1,\"1137\":15,\"1139\":2,\"1142\":1,\"1143\":7,\"1144\":1,\"1145\":3,\"1150\":12,\"1151\":2,\"1152\":1,\"1153\":2,\"1161\":3,\"1166\":1,\"1170\":1,\"1171\":9,\"1173\":1,\"1175\":2,\"1176\":3,\"1178\":6,\"1179\":2,\"1182\":10,\"1184\":3,\"1186\":3,\"1190\":2,\"1193\":1,\"1194\":1,\"1195\":1,\"1196\":2,\"1199\":10,\"1200\":1,\"1201\":5,\"1204\":3,\"1205\":1,\"1207\":5,\"1210\":2,\"1211\":1,\"1213\":4,\"1215\":1,\"1217\":2,\"1218\":3,\"1219\":8,\"1220\":1,\"1222\":5,\"1223\":2,\"1224\":3,\"1226\":2,\"1227\":1,\"1228\":3,\"1229\":2,\"1230\":1,\"1235\":11,\"1236\":2,\"1237\":2,\"1238\":2,\"1239\":2,\"1243\":1,\"1245\":4,\"1248\":1,\"1249\":1,\"1250\":1,\"1251\":3,\"1255\":7,\"1257\":1,\"1258\":3,\"1262\":4,\"1264\":1,\"1265\":1,\"1267\":3,\"1268\":4,\"1269\":2,\"1270\":3,\"1273\":2,\"1274\":7,\"1276\":2,\"1278\":2,\"1280\":1,\"1281\":2,\"1284\":3,\"1289\":1,\"1290\":1,\"1291\":1,\"1295\":1,\"1296\":1,\"1297\":2,\"1300\":2,\"1301\":2,\"1302\":1,\"1303\":1,\"1306\":1,\"1307\":4,\"1308\":2,\"1309\":3,\"1311\":2,\"1312\":2,\"1313\":7,\"1314\":1,\"1315\":1,\"1319\":1,\"1320\":1,\"1321\":4,\"1324\":2,\"1325\":1,\"1326\":1,\"1330\":2,\"1331\":1,\"1336\":1,\"1337\":3,\"1343\":1,\"1345\":8,\"1346\":1,\"1347\":1,\"1350\":2,\"1356\":1,\"1357\":1,\"1360\":4,\"1361\":1,\"1362\":2,\"1372\":1,\"1377\":1,\"1386\":1,\"1387\":2,\"1388\":2,\"1400\":7,\"1401\":5,\"1402\":10,\"1403\":14,\"1404\":9,\"1405\":5,\"1406\":1,\"1407\":11,\"1408\":3,\"1409\":6,\"1410\":9,\"1412\":4,\"1413\":3,\"1414\":2,\"1416\":4,\"1418\":1,\"1419\":1,\"1420\":1,\"1421\":3,\"1422\":10,\"1424\":2,\"1425\":3,\"1426\":3,\"1428\":2,\"1430\":10,\"1432\":4,\"1433\":3,\"1434\":3,\"1436\":2,\"1438\":10,\"1440\":6,\"1441\":3,\"1442\":1,\"1445\":1,\"1446\":1,\"1447\":1,\"1448\":6,\"1450\":10,\"1451\":1,\"1453\":1,\"1455\":1,\"1456\":5,\"1457\":1,\"1458\":1,\"1463\":2,\"1464\":1,\"1465\":1,\"1467\":1,\"1469\":2,\"1470\":1,\"1471\":1,\"1474\":2,\"1475\":1,\"1476\":2,\"1482\":1,\"1484\":1,\"1486\":1,\"1487\":3,\"1489\":1,\"1491\":1,\"1492\":1,\"1493\":1,\"1497\":1,\"1498\":1,\"1500\":1,\"1502\":7,\"1504\":1,\"1505\":5,\"1506\":1,\"1507\":10,\"1508\":1,\"1509\":1,\"1513\":3,\"1516\":2,\"1517\":2,\"1518\":8,\"1520\":4,\"1531\":1,\"1532\":5,\"1535\":2,\"1536\":9,\"1538\":3,\"1539\":1,\"1540\":3,\"1541\":1,\"1542\":4,\"1546\":1,\"1547\":10,\"1548\":1,\"1549\":3,\"1552\":8,\"1556\":1,\"1557\":6,\"1561\":1,\"1562\":6,\"1563\":1,\"1564\":2,\"1567\":1,\"1568\":4,\"1570\":1,\"1572\":6,\"1576\":6,\"1577\":1,\"1578\":1,\"1579\":1,\"1580\":4,\"1584\":6,\"1585\":1,\"1586\":2,\"1589\":8,\"1590\":1,\"1591\":4,\"1592\":5,\"1594\":10,\"1596\":1,\"1599\":10,\"1600\":2,\"1601\":7,\"1605\":1,\"1607\":2,\"1609\":1,\"1611\":1,\"1612\":6,\"1614\":1,\"1615\":2,\"1617\":3,\"1618\":3,\"1620\":1,\"1622\":2,\"1625\":3,\"1626\":5,\"1628\":5,\"1631\":1,\"1632\":10,\"1634\":3,\"1636\":5,\"1638\":1,\"1641\":4,\"1644\":1,\"1645\":16,\"1647\":3,\"1650\":1,\"1652\":1,\"1654\":4,\"1657\":10,\"1659\":4,\"1662\":1,\"1664\":3,\"1666\":2,\"1670\":10,\"1672\":6,\"1673\":1,\"1675\":7,\"1677\":1,\"1679\":5,\"1683\":6,\"1687\":6,\"1688\":5,\"1690\":2,\"1691\":1,\"1694\":10,\"1696\":2,\"1699\":14,\"1700\":1,\"1702\":2,\"1703\":2,\"1705\":6,\"1706\":6,\"1707\":2,\"1708\":7,\"1709\":2,\"1712\":2,\"1713\":1,\"1714\":1,\"1716\":1,\"1717\":2,\"1718\":1,\"1719\":3,\"1723\":1,\"1724\":1,\"1725\":5,\"1726\":1,\"1727\":3,\"1728\":4,\"1729\":4,\"1731\":1,\"1737\":2,\"1738\":1,\"1739\":1,\"1740\":1,\"1741\":8,\"1742\":6,\"1743\":1,\"1744\":4,\"1745\":2,\"1746\":9,\"1748\":1,\"1749\":1,\"1753\":3,\"1755\":2,\"1756\":3,\"1759\":3,\"1760\":3,\"1761\":2,\"1762\":1,\"1764\":2,\"1765\":2,\"1766\":1,\"1771\":6,\"1772\":20,\"1773\":6,\"1774\":8,\"1775\":1,\"1776\":4,\"1777\":1,\"1779\":4,\"1780\":5,\"1781\":4,\"1782\":5,\"1783\":1,\"1784\":2,\"1789\":4,\"1790\":2,\"1794\":7,\"1795\":1,\"1797\":2,\"1798\":2,\"1799\":8,\"1802\":12,\"1805\":2,\"1808\":2,\"1814\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
